// -*- mode: C++; -*-

#pragma once

#include "Functional.h"

class HardSpheresFast_type : public FunctionalInterface {
public:
  HardSpheresFast_type(double kT_arg, double R_arg) : kT(kT_arg), R(R_arg) {}
  double transform(double) const {
    return 0;
  }
  double derive(double) const {
    return 0;
  }

  VectorXd transform(const GridDescription &gd, const VectorXd &x) const {
    return 2.7*((-79577.47154594767*ifft(gd, shell(gd, R).cwise()*fft(gd, x))).cwise()*(VectorXd::Ones(gd.NxNyNz) - ifft(gd, step(gd, R).cwise()*fft(gd, x))).cwise().log()) + 2.7*((ifft(gd, shell(gd, R).cwise()*fft(gd, x)).cwise().square() - xShellConvolve(R)(x).cwise().square() + (-yShellConvolve(R)(x).cwise().square() - xShellConvolve(R)(x).cwise().square())).cwise()*(0.01256637061435917*(VectorXd::Ones(gd.NxNyNz) - ifft(gd, step(gd, R).cwise()*fft(gd, x))))) + 2.7*(((ifft(gd, step(gd, R).cwise()*fft(gd, x)) + (VectorXd::Ones(gd.NxNyNz) - ifft(gd, step(gd, R).cwise()*fft(gd, x))).cwise().square().cwise()*(VectorXd::Ones(gd.NxNyNz) - ifft(gd, step(gd, R).cwise()*fft(gd, x))).cwise().log()).cwise()*((113.0973355292326*ifft(gd, step(gd, R).cwise()*fft(gd, x)).cwise().square()).cwise()*(VectorXd::Ones(gd.NxNyNz) - ifft(gd, step(gd, R).cwise()*fft(gd, x))).cwise().square())).cwise()*(ifft(gd, shell(gd, R).cwise()*fft(gd, x)).cwise()*ifft(gd, shell(gd, R).cwise()*fft(gd, x)).cwise().square() - (3*ifft(gd, shell(gd, R).cwise()*fft(gd, x))).cwise()*(xShellConvolve(R)(x).cwise().square() + yShellConvolve(R)(x).cwise().square() + xShellConvolve(R)(x).cwise().square()) + 9*(xShellConvolve(R)(x).cwise().square().cwise()*ifft(gd, xxshell(gd, R).cwise()*fft(gd, x)) + yShellConvolve(R)(x).cwise().square().cwise()*ifft(gd, yyshell(gd, R).cwise()*fft(gd, x)) + (xShellConvolve(R)(x).cwise().square().cwise()*ifft(gd, zzshell(gd, R).cwise()*fft(gd, x)) + 2*((xShellConvolve(R)(x).cwise()*yShellConvolve(R)(x)).cwise()*ifft(gd, xyshell(gd, R).cwise()*fft(gd, x)) + (yShellConvolve(R)(x).cwise()*xShellConvolve(R)(x)).cwise()*ifft(gd, yzshell(gd, R).cwise()*fft(gd, x)) + (xShellConvolve(R)(x).cwise()*xShellConvolve(R)(x)).cwise()*ifft(gd, zxshell(gd, R).cwise()*fft(gd, x))) + -0.5*(((6*ifft(gd, xyshell(gd, R).cwise()*fft(gd, x))).cwise()*ifft(gd, yzshell(gd, R).cwise()*fft(gd, x))).cwise()*ifft(gd, zxshell(gd, R).cwise()*fft(gd, x)) + ifft(gd, xxshell(gd, R).cwise()*fft(gd, x)).cwise()*(ifft(gd, xxshell(gd, R).cwise()*fft(gd, x)).cwise().square() + 3*ifft(gd, xyshell(gd, R).cwise()*fft(gd, x)).cwise().square() + 3*ifft(gd, zxshell(gd, R).cwise()*fft(gd, x)).cwise().square()) + (ifft(gd, yyshell(gd, R).cwise()*fft(gd, x)).cwise()*(3*ifft(gd, xyshell(gd, R).cwise()*fft(gd, x)).cwise().square() + ifft(gd, yyshell(gd, R).cwise()*fft(gd, x)).cwise().square() + 3*ifft(gd, yzshell(gd, R).cwise()*fft(gd, x)).cwise().square()) + ifft(gd, zzshell(gd, R).cwise()*fft(gd, x)).cwise()*(3*ifft(gd, zxshell(gd, R).cwise()*fft(gd, x)).cwise().square() + 3*ifft(gd, yzshell(gd, R).cwise()*fft(gd, x)).cwise().square() + ifft(gd, zzshell(gd, R).cwise()*fft(gd, x)).cwise().square())))))));
  }
  Functional grad(const Functional &, bool) const {
    assert(false);
    return 0;
  }

  void grad(const GridDescription &gd, const VectorXd &x, const VectorXd &ingrad, VectorXd *outgrad, VectorXd *outpgrad) const {
    assert(&gd); // to avoid an unused parameter error
    *outgrad += ifft(gd, step(gd, R).cwise()*fft(gd, -((-79577.47154594767*ifft(gd, shell(gd, R).cwise()*fft(gd, x))).cwise()*(2.7*ingrad)).cwise()*(VectorXd::Ones(gd.NxNyNz) - ifft(gd, step(gd, R).cwise()*fft(gd, x))))) + (ifft(gd, shell(gd, R).cwise()*fft(gd, -79577.47154594767*((VectorXd::Ones(gd.NxNyNz) - ifft(gd, step(gd, R).cwise()*fft(gd, x))).cwise().log().cwise()*(2.7*ingrad)))) + (2*ifft(gd, shell(gd, R).cwise()*fft(gd, ifft(gd, shell(gd, R).cwise()*fft(gd, x)).cwise()*((2.7*ingrad).cwise()*(0.01256637061435917*(VectorXd::Ones(gd.NxNyNz) - ifft(gd, step(gd, R).cwise()*fft(gd, x))))))) + (2*xShellConvolve(R)(-xShellConvolve(R)(x).cwise()*-(2.7*ingrad).cwise()*(0.01256637061435917*(VectorXd::Ones(gd.NxNyNz) - ifft(gd, step(gd, R).cwise()*fft(gd, x))))) + (2*yShellConvolve(R)(-yShellConvolve(R)(x).cwise()*-(2.7*ingrad).cwise()*(0.01256637061435917*(VectorXd::Ones(gd.NxNyNz) - ifft(gd, step(gd, R).cwise()*fft(gd, x))))) + (2*xShellConvolve(R)(-xShellConvolve(R)(x).cwise()*-(2.7*ingrad).cwise()*(0.01256637061435917*(VectorXd::Ones(gd.NxNyNz) - ifft(gd, step(gd, R).cwise()*fft(gd, x))))) + (2*ifft(gd, shell(gd, R).cwise()*fft(gd, ifft(gd, shell(gd, R).cwise()*fft(gd, x)).cwise()*(ifft(gd, shell(gd, R).cwise()*fft(gd, x)).cwise()*(((ifft(gd, step(gd, R).cwise()*fft(gd, x)) + (VectorXd::Ones(gd.NxNyNz) - ifft(gd, step(gd, R).cwise()*fft(gd, x))).cwise().square().cwise()*(VectorXd::Ones(gd.NxNyNz) - ifft(gd, step(gd, R).cwise()*fft(gd, x))).cwise().log()).cwise()*((113.0973355292326*ifft(gd, step(gd, R).cwise()*fft(gd, x)).cwise().square()).cwise()*(VectorXd::Ones(gd.NxNyNz) - ifft(gd, step(gd, R).cwise()*fft(gd, x))).cwise().square())).cwise()*(2.7*ingrad))))) + ifft(gd, shell(gd, R).cwise()*fft(gd, ifft(gd, shell(gd, R).cwise()*fft(gd, x)).cwise().square().cwise()*(((ifft(gd, step(gd, R).cwise()*fft(gd, x)) + (VectorXd::Ones(gd.NxNyNz) - ifft(gd, step(gd, R).cwise()*fft(gd, x))).cwise().square().cwise()*(VectorXd::Ones(gd.NxNyNz) - ifft(gd, step(gd, R).cwise()*fft(gd, x))).cwise().log()).cwise()*((113.0973355292326*ifft(gd, step(gd, R).cwise()*fft(gd, x)).cwise().square()).cwise()*(VectorXd::Ones(gd.NxNyNz) - ifft(gd, step(gd, R).cwise()*fft(gd, x))).cwise().square())).cwise()*(2.7*ingrad)))) - -ifft(gd, step(gd, R).cwise()*fft(gd, -0.01256637061435917*(((ifft(gd, shell(gd, R).cwise()*fft(gd, x)).cwise().square() - xShellConvolve(R)(x).cwise().square() + (-yShellConvolve(R)(x).cwise().square() - xShellConvolve(R)(x).cwise().square())).cwise()*(2.7*ingrad)).cwise()*(0.01256637061435917*(VectorXd::Ones(gd.NxNyNz) - ifft(gd, step(gd, R).cwise()*fft(gd, x)))).cwise().square())))))))));
    if (outpgrad) *outpgrad += ifft(gd, step(gd, R).cwise()*fft(gd, -((-79577.47154594767*ifft(gd, shell(gd, R).cwise()*fft(gd, x))).cwise()*(2.7*ingrad)).cwise()*(VectorXd::Ones(gd.NxNyNz) - ifft(gd, step(gd, R).cwise()*fft(gd, x))))) + (ifft(gd, shell(gd, R).cwise()*fft(gd, -79577.47154594767*((VectorXd::Ones(gd.NxNyNz) - ifft(gd, step(gd, R).cwise()*fft(gd, x))).cwise().log().cwise()*(2.7*ingrad)))) + (2*ifft(gd, shell(gd, R).cwise()*fft(gd, ifft(gd, shell(gd, R).cwise()*fft(gd, x)).cwise()*((2.7*ingrad).cwise()*(0.01256637061435917*(VectorXd::Ones(gd.NxNyNz) - ifft(gd, step(gd, R).cwise()*fft(gd, x))))))) + (2*xShellConvolve(R)(-xShellConvolve(R)(x).cwise()*-(2.7*ingrad).cwise()*(0.01256637061435917*(VectorXd::Ones(gd.NxNyNz) - ifft(gd, step(gd, R).cwise()*fft(gd, x))))) + (2*yShellConvolve(R)(-yShellConvolve(R)(x).cwise()*-(2.7*ingrad).cwise()*(0.01256637061435917*(VectorXd::Ones(gd.NxNyNz) - ifft(gd, step(gd, R).cwise()*fft(gd, x))))) + (2*xShellConvolve(R)(-xShellConvolve(R)(x).cwise()*-(2.7*ingrad).cwise()*(0.01256637061435917*(VectorXd::Ones(gd.NxNyNz) - ifft(gd, step(gd, R).cwise()*fft(gd, x))))) + (2*ifft(gd, shell(gd, R).cwise()*fft(gd, ifft(gd, shell(gd, R).cwise()*fft(gd, x)).cwise()*(ifft(gd, shell(gd, R).cwise()*fft(gd, x)).cwise()*(((ifft(gd, step(gd, R).cwise()*fft(gd, x)) + (VectorXd::Ones(gd.NxNyNz) - ifft(gd, step(gd, R).cwise()*fft(gd, x))).cwise().square().cwise()*(VectorXd::Ones(gd.NxNyNz) - ifft(gd, step(gd, R).cwise()*fft(gd, x))).cwise().log()).cwise()*((113.0973355292326*ifft(gd, step(gd, R).cwise()*fft(gd, x)).cwise().square()).cwise()*(VectorXd::Ones(gd.NxNyNz) - ifft(gd, step(gd, R).cwise()*fft(gd, x))).cwise().square())).cwise()*(2.7*ingrad))))) + ifft(gd, shell(gd, R).cwise()*fft(gd, ifft(gd, shell(gd, R).cwise()*fft(gd, x)).cwise().square().cwise()*(((ifft(gd, step(gd, R).cwise()*fft(gd, x)) + (VectorXd::Ones(gd.NxNyNz) - ifft(gd, step(gd, R).cwise()*fft(gd, x))).cwise().square().cwise()*(VectorXd::Ones(gd.NxNyNz) - ifft(gd, step(gd, R).cwise()*fft(gd, x))).cwise().log()).cwise()*((113.0973355292326*ifft(gd, step(gd, R).cwise()*fft(gd, x)).cwise().square()).cwise()*(VectorXd::Ones(gd.NxNyNz) - ifft(gd, step(gd, R).cwise()*fft(gd, x))).cwise().square())).cwise()*(2.7*ingrad)))) - -ifft(gd, step(gd, R).cwise()*fft(gd, -0.01256637061435917*(((ifft(gd, shell(gd, R).cwise()*fft(gd, x)).cwise().square() - xShellConvolve(R)(x).cwise().square() + (-yShellConvolve(R)(x).cwise().square() - xShellConvolve(R)(x).cwise().square())).cwise()*(2.7*ingrad)).cwise()*(0.01256637061435917*(VectorXd::Ones(gd.NxNyNz) - ifft(gd, step(gd, R).cwise()*fft(gd, x)))).cwise().square())))))))));
  }

  Expression printme(const Expression &) const {
    return Expression("Can't print optimized Functionals");
  }
private:
  double kT;
  double R;
};

inline Functional HardSpheresFast(double kT, double R) {
  return Functional(new HardSpheresFast_type(kT, R));
}
