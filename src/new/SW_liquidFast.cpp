// -*- mode: C++; -*-

#include "new/SW_liquidFast.h"

#pragma GCC diagnostic ignored "-Wunused-variable"
SW_liquid::SW_liquid(int myNx, int myNy, int myNz)  {
	data = Vector(int(12.0 + 2.0*myNx*myNy*myNz));
	Nx() = myNx;
	Ny() = myNy;
	Nz() = myNz;
}

SW_liquid::SW_liquid(double ax, double ay, double az, double dx)  {
	int myNx = int(ceil(ax/dx/2))*2;
	int myNy = int(ceil(ay/dx/2))*2;
	int myNz = int(ceil(az/dx/2))*2;
	data = Vector(int(12.0 + 2.0*myNx*myNy*myNz));
	Nx() = myNx;
	Ny() = myNy;
	Nz() = myNz;
	a1() = ax;
	a2() = ay;
	a3() = az;
}

double SW_liquid::true_energy() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	double 	s0 = 0;
	for (int i=0; i<Nx*Ny*Nz; i++) {
		s0 += dV*kT*n[i]*(log(2.646476976618268e-6*n[i]/(sqrt(kT)*kT)) - 1.0);
	}

	Fideal = s0;
	double 	s1 = 0;
	for (int i=0; i<Nx*Ny*Nz; i++) {
		s1 += dV*n[i]*(Vext[i] - 1.0*mu);
	}

	external = s1;
	ComplexVector ktemp2(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2 = fft(Nx,Ny,Nz,dV,n);

	ComplexVector ktemp3(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp3[0] = (12.566370614359172*R*R)*ktemp2[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp3[i] = std::complex<double>((12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp2[i].real(),
				(12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp2[i].imag());
	}

	Vector n2(Nx*Ny*Nz); // RS
	n2 = ifft(Nx,Ny,Nz,dV,ktemp3);

	Vector rtemp5(Nx*Ny*Nz); // RS
	rtemp5 = ifft(Nx,Ny,Nz,dV,ktemp3);

	ktemp3.free(); // KSpace
	ComplexVector ktemp6(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp6[0] = ktemp2[i]*(4.188790204786391*R*R*R);
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6[i] = std::complex<double>(ktemp2[i].real()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)),
				ktemp2[i].imag()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)));
	}

	Vector n3(Nx*Ny*Nz); // RS
	n3 = ifft(Nx,Ny,Nz,dV,ktemp6);

	ktemp6.free(); // KSpace
	Vector dphitot_by_dn1(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		dphitot_by_dn1[i] = n2[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp9(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp9 = fft(Nx,Ny,Nz,dV,dphitot_by_dn1);

	dphitot_by_dn1.free(); // Realspace
	ComplexVector ktemp10(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp10[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp10[i] = std::complex<double>(-12.566370614359172*ktemp2[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp2[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector dn1v_dot_n2v_by_dn1vx(Nx*Ny*Nz); // RS
	dn1v_dot_n2v_by_dn1vx = ifft(Nx,Ny,Nz,dV,ktemp10);

	Vector rtemp12(Nx*Ny*Nz); // RS
	rtemp12 = ifft(Nx,Ny,Nz,dV,ktemp10);

	ktemp10.free(); // KSpace
	Vector dphitot_by_dn2vx(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		dphitot_by_dn2vx[i] = -7.957747154594767e-2*rtemp12[i]/R/t1 - 5.305164769729845e-2*n2[i]*rtemp12[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp14(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp14 = fft(Nx,Ny,Nz,dV,dphitot_by_dn2vx);

	dphitot_by_dn2vx.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		dn1v_dot_n2v_by_dn1vx[i] = -1.0*dn1v_dot_n2v_by_dn1vx[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp16(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp16 = fft(Nx,Ny,Nz,dV,dn1v_dot_n2v_by_dn1vx);

	dn1v_dot_n2v_by_dn1vx.free(); // Realspace
	ComplexVector ktemp17(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp17[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp17[i] = std::complex<double>(-12.566370614359172*ktemp2[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp2[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector dn1v_dot_n2v_by_dn1vy(Nx*Ny*Nz); // RS
	dn1v_dot_n2v_by_dn1vy = ifft(Nx,Ny,Nz,dV,ktemp17);

	Vector rtemp19(Nx*Ny*Nz); // RS
	rtemp19 = ifft(Nx,Ny,Nz,dV,ktemp17);

	ktemp17.free(); // KSpace
	Vector dphitot_by_dn2vy(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		dphitot_by_dn2vy[i] = -7.957747154594767e-2*rtemp19[i]/R/t1 - 5.305164769729845e-2*n2[i]*rtemp19[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp21(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp21 = fft(Nx,Ny,Nz,dV,dphitot_by_dn2vy);

	dphitot_by_dn2vy.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		dn1v_dot_n2v_by_dn1vy[i] = -1.0*dn1v_dot_n2v_by_dn1vy[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp23(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp23 = fft(Nx,Ny,Nz,dV,dn1v_dot_n2v_by_dn1vy);

	dn1v_dot_n2v_by_dn1vy.free(); // Realspace
	ComplexVector ktemp24(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp24[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp24[i] = std::complex<double>(-12.566370614359172*ktemp2[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp2[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector dn1v_dot_n2v_by_dn1vz(Nx*Ny*Nz); // RS
	dn1v_dot_n2v_by_dn1vz = ifft(Nx,Ny,Nz,dV,ktemp24);

	Vector rtemp26(Nx*Ny*Nz); // RS
	rtemp26 = ifft(Nx,Ny,Nz,dV,ktemp24);

	ktemp24.free(); // KSpace
	Vector dphitot_by_dn3(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = rtemp12[i];
		const double t3 = rtemp19[i];
		const double t4 = rtemp26[i];
		const double t5 = log(t1);
		const double t6 = 1.0/t1;
		const double t7 = 1.0/n3[i];
		dphitot_by_dn3[i] = t6*t7*t7*n2[i]*(t6*(8.841941282883075e-3 + (1.768388256576615e-2*t6 - 1.768388256576615e-2*t7)*(n3[i] + t5/(t6*t6))) - 8.841941282883075e-3 - 1.768388256576615e-2*t5)*(n2[i]*n2[i] - 3.0*t4*t4 - 3.0*t3*t3 - 3.0*t2*t2) + 7.957747154594767e-2*t6*rtemp5[i]/(R*R) + t6*t6*(7.957747154594767e-2*n2[i]*rtemp5[i]/R - 7.957747154594767e-2*t4*rtemp26[i]/R - 7.957747154594767e-2*t3*rtemp19[i]/R - 7.957747154594767e-2*t2*rtemp12[i]/R);
	}

	ComplexVector ktemp28(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp28 = fft(Nx,Ny,Nz,dV,dphitot_by_dn3);

	dphitot_by_dn3.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		dn1v_dot_n2v_by_dn1vz[i] = -1.0*dn1v_dot_n2v_by_dn1vz[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp30(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp30 = fft(Nx,Ny,Nz,dV,dn1v_dot_n2v_by_dn1vz);

	dn1v_dot_n2v_by_dn1vz.free(); // Realspace
	Vector dphitot_by_dn0(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		dphitot_by_dn0[i] = -1.0*log(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp32(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp32 = fft(Nx,Ny,Nz,dV,dphitot_by_dn0);

	dphitot_by_dn0.free(); // Realspace
	Vector dphitot_by_dn2(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		dphitot_by_dn2[i] = (n3[i] + t1*t1*log(t1))*(2.6525823848649224e-2*n2[i]*n2[i] - 2.6525823848649224e-2*rtemp12[i]*rtemp12[i] - 2.6525823848649224e-2*rtemp19[i]*rtemp19[i] - 2.6525823848649224e-2*rtemp26[i]*rtemp26[i])/(t1*t1*n3[i]*n3[i]) + 7.957747154594767e-2*rtemp5[i]/R/t1;
	}

	ComplexVector ktemp34(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp34 = fft(Nx,Ny,Nz,dV,dphitot_by_dn2);

	dphitot_by_dn2.free(); // Realspace
	Vector dphitot_by_dn2vz(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		dphitot_by_dn2vz[i] = -7.957747154594767e-2*rtemp26[i]/R/t1 - 5.305164769729845e-2*n2[i]*rtemp26[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp36(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp36 = fft(Nx,Ny,Nz,dV,dphitot_by_dn2vz);

	dphitot_by_dn2vz.free(); // Realspace
	{
		const int i = 0;
		ktemp36[0] = (((12.566370614359172*R*R)*(-0.15915494309189535*ktemp32[i]/R - 7.957747154594767e-2*ktemp9[i]) - 7.957747154594767e-2*(-25.132741228718345*R)*ktemp32[i])/R - 7.957747154594767e-2*(-25.132741228718345*R)*ktemp9[i])/R + (12.566370614359172*R*R)*ktemp28[i] - (-25.132741228718345*R)*ktemp34[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = 12.566370614359172*R*sin(R*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]))*exp(-6.0*dr*dr*(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]))/(sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]));
		const double t2 = exp(-6.0*dr*dr*(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]));
		const double t3 = R*cos(R*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2])) - sin(R*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]))/(sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]));
		const double t4 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t5 = 12.566370614359172*t2*(-1.0*sin(R*sqrt(t4))/(sqrt(t4)) - 1.0*R*cos(R*sqrt(t4)));
		double it6 = 12.566370614359172*R*k_i[0]*t2*sin(R*sqrt(t4))/(sqrt(t4));
		double it7 = 12.566370614359172*R*k_i[1]*t2*sin(R*sqrt(t4))/(sqrt(t4));
		double it8 = 12.566370614359172*R*k_i[2]*t2*sin(R*sqrt(t4))/(sqrt(t4));
		ktemp36[i] = std::complex<double>(ktemp28[i].real()*t1 - 1.0*ktemp21[i].imag()*it7 - 1.0*ktemp14[i].imag()*it6 - ktemp34[i].real()*t5 - ktemp36[i].imag()*it8 + ((-7.957747154594767e-2*ktemp9[i].real()*t1 - 7.957747154594767e-2*ktemp32[i].real()*(t5 + 2.0*t1/R) - 1.0*ktemp30[i].imag()*k_i[2]*t2*t3/t4 - 1.0*ktemp23[i].imag()*k_i[1]*t2*t3/t4 - 1.0*ktemp16[i].imag()*k_i[0]*t2*t3/t4)/R - 7.957747154594767e-2*ktemp9[i].real()*t5 - 7.957747154594767e-2*ktemp30[i].imag()*it8 - 7.957747154594767e-2*ktemp23[i].imag()*it7 - 7.957747154594767e-2*ktemp16[i].imag()*it6)/R,
				ktemp14[i].real()*it6 + ktemp21[i].real()*it7 + ktemp28[i].imag()*t1 - ktemp34[i].imag()*t5 + ktemp36[i].real()*it8 + (7.957747154594767e-2*ktemp16[i].real()*it6 + 7.957747154594767e-2*ktemp23[i].real()*it7 + 7.957747154594767e-2*ktemp30[i].real()*it8 - 7.957747154594767e-2*ktemp9[i].imag()*t5 + (ktemp16[i].real()*k_i[0]*t2*t3/t4 + ktemp23[i].real()*k_i[1]*t2*t3/t4 + ktemp30[i].real()*k_i[2]*t2*t3/t4 - 7.957747154594767e-2*ktemp32[i].imag()*(t5 + 2.0*t1/R) - 7.957747154594767e-2*ktemp9[i].imag()*t1)/R)/R);
	}

	ktemp34.free(); // KSpace
	ktemp32.free(); // KSpace
	ktemp30.free(); // KSpace
	ktemp28.free(); // KSpace
	ktemp23.free(); // KSpace
	ktemp21.free(); // KSpace
	ktemp16.free(); // KSpace
	ktemp14.free(); // KSpace
	ktemp9.free(); // KSpace
	Vector rtemp38(Nx*Ny*Nz); // RS
	rtemp38 = ifft(Nx,Ny,Nz,dV,ktemp36);

	ktemp36.free(); // KSpace
	{
		const int i = 0;
		ktemp2[0] = (50.26548245743669*R*R)*ktemp2[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp2[i] = std::complex<double>((25.132741228718345*R*sin(2.0*R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp2[i].real(),
				(25.132741228718345*R*sin(2.0*R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp2[i].imag());
	}

	Vector rtemp40(Nx*Ny*Nz); // RS
	rtemp40 = ifft(Nx,Ny,Nz,dV,ktemp2);

	ktemp2.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp40[i] = kT*rtemp38[i]*n[i]/rtemp40[i];
	}

	rtemp38.free(); // Realspace
	Vector rtemp42(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp42[i] = rtemp40[i]/kT;
	}

	ComplexVector ktemp43(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp43 = fft(Nx,Ny,Nz,dV,rtemp42);

	rtemp42.free(); // Realspace
	Vector rtemp44(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp40[i]/(kT*n[i]);
		const double t2 = t1 - 1.0;
		rtemp44[i] = n[i]*(t2*(2.7e-2*t2 + t2*(0.838*t2 - 0.178*t2*t2)) - 1.754*t2);
	}

	ComplexVector ktemp45(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp45 = fft(Nx,Ny,Nz,dV,rtemp44);

	rtemp44.free(); // Realspace
	Vector rtemp46(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp40[i]/(kT*n[i]);
		const double t2 = t1 - 1.0;
		rtemp46[i] = n[i]*(t2*(4.403*t2 + t2*(0.363*t2*t2 - 2.48*t2)) - 2.243*t2);
	}

	ComplexVector ktemp47(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp47 = fft(Nx,Ny,Nz,dV,rtemp46);

	rtemp46.free(); // Realspace
	Vector rtemp48(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp40[i]/(kT*n[i]);
		const double t2 = t1 - 1.0;
		rtemp48[i] = n[i]*(0.207*t2 + t2*(0.712*t2 + t2*(1.046*t2*t2 - 1.952*t2)));
	}

	ComplexVector ktemp49(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp49 = fft(Nx,Ny,Nz,dV,rtemp48);

	rtemp48.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp40[i]/(kT*n[i]);
		const double t2 = t1 - 1.0;
		rtemp40[i] = n[i]*(t2*(t2*(0.324*t2 - 0.162*t2*t2) - 0.164*t2) - 2.0e-3*t2);
	}

	ComplexVector ktemp51(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp51 = fft(Nx,Ny,Nz,dV,rtemp40);

	rtemp40.free(); // Realspace
	{
		const int i = 0;
		ktemp51[0] = ktemp43[i]*epsilon*sigma*sigma*sigma*(4.188790204786391 - 4.188790204786391*lambda*lambda*lambda) + ktemp45[i]*epsilon*sigma*sigma*sigma*(lambda*lambda*lambda*(4.188790204786391 - 3.141592653589794*lambda) - 1.0471975511965976) + ktemp47[i]*epsilon*sigma*sigma*sigma*(0.418879020478639 + lambda*lambda*lambda*(lambda*(6.283185307179588 - 2.513274122871834*lambda) - 4.188790204786391)) + ktemp49[i]*epsilon*sigma*sigma*sigma*(lambda*lambda*lambda*(4.188790204786391 + lambda*(lambda*(7.539822368615504 - 2.0943951023931935*lambda) - 9.42477796076938)) - 0.20943951023931967) + ktemp51[i]*epsilon*sigma*sigma*sigma*(0.11967972013675394 + lambda*lambda*lambda*(lambda*(12.566370614359176 + lambda*(lambda*(8.377580409572774 - 1.7951958020513124*lambda) - 15.079644737231009)) - 4.188790204786391));
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = cos(sigma*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]));
		const double t2 = cos(lambda*sigma*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]));
		const double t3 = sin(lambda*sigma*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2])) - sin(sigma*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]));
		const double t4 = t3/(sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]));
		const double t5 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t6 = lambda - 1.0;
		const double t7 = sin(sigma*sqrt(t5));
		const double t8 = sin(lambda*sigma*sqrt(t5));
		const double t9 = 1.0 - 2.0*lambda;
		const double t10 = sigma*sigma*t5*t6*t6;
		ktemp51[i] = std::complex<double>(ktemp43[i].real()*(-12.566370614359172*epsilon*(t4 + sigma*(t1 - lambda*t2))/t5) + ktemp45[i].real()*(-12.566370614359172*epsilon*((t2*(2.0 - lambda*sigma*sigma*t5*t6) - 2.0*t1)/(sigma*t5*t5) - (t7 + t8*t9)/(sqrt(t5)*t5))) + ktemp47[i].real()*(-12.566370614359172*epsilon*((6.0*t7/(sqrt(t5)) + t8*(sigma*sigma*t5*(1.0 + lambda*(3.0*lambda - 4.0)) - 6.0)/(sqrt(t5)))/(sigma*t5*t5) + (-1.0*t2*(4.0 + lambda*(t10 - 6.0)) - 2.0*t1)/(t5*t5))/sigma) + ktemp49[i].real()*(-12.566370614359172*epsilon*((24.0*t1 + t2*(sigma*sigma*t5*t6*(-1.0*lambda*t10 - 6.0*t9) - 24.0))/(sigma*t5*t5*t5) + (6.0*t7 + t8*(18.0 - 24.0*lambda + t10*(4.0*lambda - 1.0)))/(sqrt(t5)*t5*t5))/(sigma*sigma)) + ktemp51[i].real()*(-12.566370614359172*epsilon*((24.0*t1 + 120.0*t4/sigma - t2*(lambda*(120.0 + t10*t10) - 96.0 - 4.0*t10*(5.0*lambda - 2.0)))/(sigma*t5*t5*t5) + t6*t8*(36.0 - 60.0*lambda + t10*(5.0*lambda - 1.0))/(sqrt(t5)*t5*t5))/(sigma*sigma)),
				ktemp43[i].imag()*(-12.566370614359172*epsilon*(t4 + sigma*(t1 - lambda*t2))/t5) + ktemp45[i].imag()*(-12.566370614359172*epsilon*((t2*(2.0 - lambda*sigma*sigma*t5*t6) - 2.0*t1)/(sigma*t5*t5) - (t7 + t8*t9)/(sqrt(t5)*t5))) + ktemp47[i].imag()*(-12.566370614359172*epsilon*((6.0*t7/(sqrt(t5)) + t8*(sigma*sigma*t5*(1.0 + lambda*(3.0*lambda - 4.0)) - 6.0)/(sqrt(t5)))/(sigma*t5*t5) + (-1.0*t2*(4.0 + lambda*(t10 - 6.0)) - 2.0*t1)/(t5*t5))/sigma) + ktemp49[i].imag()*(-12.566370614359172*epsilon*((24.0*t1 + t2*(sigma*sigma*t5*t6*(-1.0*lambda*t10 - 6.0*t9) - 24.0))/(sigma*t5*t5*t5) + (6.0*t7 + t8*(18.0 - 24.0*lambda + t10*(4.0*lambda - 1.0)))/(sqrt(t5)*t5*t5))/(sigma*sigma)) + ktemp51[i].imag()*(-12.566370614359172*epsilon*((24.0*t1 + 120.0*t4/sigma - t2*(lambda*(120.0 + t10*t10) - 96.0 - 4.0*t10*(5.0*lambda - 2.0)))/(sigma*t5*t5*t5) + t6*t8*(36.0 - 60.0*lambda + t10*(5.0*lambda - 1.0))/(sqrt(t5)*t5*t5))/(sigma*sigma)));
	}

	ktemp49.free(); // KSpace
	ktemp47.free(); // KSpace
	ktemp45.free(); // KSpace
	ktemp43.free(); // KSpace
	Vector rtemp53(Nx*Ny*Nz); // RS
	rtemp53 = ifft(Nx,Ny,Nz,dV,ktemp51);

	ktemp51.free(); // KSpace
	double 	s54 = 0;
	for (int i=0; i<Nx*Ny*Nz; i++) {
		s54 += dV*rtemp53[i]*n[i];
	}

	rtemp53.free(); // Realspace
	sw = 0.5*epsilon*s54;
	double 	s55 = 0;
	for (int i=0; i<Nx*Ny*Nz; i++) {
		s55 += dV*kT*(-1.0*(7.957747154594767e-2*rtemp5[i]/(R*R))*log(1.0 - 1.0*n3[i]));
	}

	kTphi1 = s55;
	double 	s56 = 0;
	for (int i=0; i<Nx*Ny*Nz; i++) {
		s56 += dV*kT*((7.957747154594767e-2*rtemp5[i]/R)*n2[i] - 1.0*((7.957747154594767e-2*rtemp12[i]/R)*rtemp12[i] + (7.957747154594767e-2*rtemp19[i]/R)*rtemp19[i] + (7.957747154594767e-2*rtemp26[i]/R)*rtemp26[i]))/(1.0 - 1.0*n3[i]);
	}

	rtemp5.free(); // Realspace
	kTphi2 = s56;
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp19[i] = rtemp12[i]*rtemp12[i] + rtemp19[i]*rtemp19[i];
	}

	rtemp12.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp19[i] = rtemp19[i] + rtemp26[i]*rtemp26[i];
	}

	rtemp26.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp19[i] = n2[i]*(n2[i]*n2[i] - 3.0*rtemp19[i]);
	}

	n2.free(); // Realspace
	double 	s60 = 0;
	for (int i=0; i<Nx*Ny*Nz; i++) {
		s60 += dV*kT*(8.841941282883075e-3*rtemp19[i]*(n3[i] + log(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]))/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i])));
	}

	rtemp19.free(); // Realspace
	n3.free(); // Realspace
	kTphi3 = s60;
	whitebear = kTphi1 + kTphi2 + kTphi3;
	ESW = Fideal + external + sw + whitebear;
	return ESW;

}

Vector SW_liquid::grad() const {
	Vector output(data.get_size());
	output = 0;
	int sofar = 0;
	double Nx = data[sofar];
	double *grad_Nx = &output[sofar++];
	double Ny = data[sofar];
	double *grad_Ny = &output[sofar++];
	double Nz = data[sofar];
	double *grad_Nz = &output[sofar++];
	double R = data[sofar];
	double *grad_R = &output[sofar++];
	double a1 = data[sofar];
	double *grad_a1 = &output[sofar++];
	double a2 = data[sofar];
	double *grad_a2 = &output[sofar++];
	double a3 = data[sofar];
	double *grad_a3 = &output[sofar++];
	Vector Vext = data.slice(sofar,Nx*Ny*Nz);
	Vector grad_Vext = output.slice(sofar,Nx*Ny*Nz);
	sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz);
	Vector grad_n = output.slice(sofar,Nx*Ny*Nz);
	sofar += Nx*Ny*Nz;
	double epsilon = data[sofar];
	double *grad_epsilon = &output[sofar++];
	double kT = data[sofar];
	double *grad_kT = &output[sofar++];
	double lambda = data[sofar];
	double *grad_lambda = &output[sofar++];
	double mu = data[sofar];
	double *grad_mu = &output[sofar++];
	double sigma = data[sofar];
	double *grad_sigma = &output[sofar++];
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	ComplexVector ktemp1(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp1[0] = ktemp0[i]*(4.188790204786391*R*R*R);
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1[i] = std::complex<double>(ktemp0[i].real()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)),
				ktemp0[i].imag()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)));
	}

	Vector n3(Nx*Ny*Nz); // RS
	n3 = ifft(Nx,Ny,Nz,dV,ktemp1);

	ktemp1.free(); // KSpace
	Vector rtemp3(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3[i] = dV*kT*log(1.0 - 1.0*n3[i])/(R*R);
	}

	ComplexVector ktemp4(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4 = fft(Nx,Ny,Nz,dV,rtemp3);

	rtemp3.free(); // Realspace
	{
		const int i = 0;
		ktemp4[0] = R*R*ktemp4[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp4[i] = std::complex<double>(ktemp4[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp4[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp6(Nx*Ny*Nz); // RS
	rtemp6 = ifft(Nx,Ny,Nz,dV,ktemp4);

	ktemp4.free(); // KSpace
	Vector rtemp7(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7[i] = dV*epsilon*n[i];
	}

	ComplexVector ktemp8(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp8 = fft(Nx,Ny,Nz,dV,rtemp7);

	rtemp7.free(); // Realspace
	ComplexVector ktemp9(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp9[0] = epsilon*sigma*sigma*sigma*ktemp8[i]*(lambda*lambda*lambda*(0.33333333333333337 + lambda*(lambda*(1.2000000000000002 + lambda*(0.14285714285714302*lambda - 0.6666666666666661)) - 1.0000000000000002)) - 9.523809523809518e-3);
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sin(lambda*sigma*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]));
		const double t2 = sigma*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		const double t3 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t4 = lambda - 1.0;
		ktemp9[i] = std::complex<double>(ktemp8[i].real()*epsilon*((120.0*t1 - 120.0*sin(t2))/((sigma*sigma)*(sigma*sigma)*sqrt(t3)*t3*t3*t3) + (24.0*cos(t2) - cos(lambda*t2)*(120.0*lambda - 96.0 + lambda*(t2*t2)*(t2*t2)*(t4*t4)*(t4*t4) - 4.0*t2*t2*t4*t4*(5.0*lambda - 2.0)))/(sigma*sigma*sigma*t3*t3*t3) + t1*t4*(36.0 - 60.0*lambda + t2*t2*t4*t4*(5.0*lambda - 1.0))/(sigma*sigma*sqrt(t3)*t3*t3)),
				ktemp8[i].imag()*epsilon*((120.0*t1 - 120.0*sin(t2))/((sigma*sigma)*(sigma*sigma)*sqrt(t3)*t3*t3*t3) + (24.0*cos(t2) - cos(lambda*t2)*(120.0*lambda - 96.0 + lambda*(t2*t2)*(t2*t2)*(t4*t4)*(t4*t4) - 4.0*t2*t2*t4*t4*(5.0*lambda - 2.0)))/(sigma*sigma*sigma*t3*t3*t3) + t1*t4*(36.0 - 60.0*lambda + t2*t2*t4*t4*(5.0*lambda - 1.0))/(sigma*sigma*sqrt(t3)*t3*t3)));
	}

	Vector rtemp10(Nx*Ny*Nz); // RS
	rtemp10 = ifft(Nx,Ny,Nz,dV,ktemp9);

	ktemp9.free(); // KSpace
	ComplexVector ktemp11(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp11[0] = (50.26548245743669*R*R)*ktemp0[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp11[i] = std::complex<double>((25.132741228718345*R*sin(2.0*R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].real(),
				(25.132741228718345*R*sin(2.0*R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].imag());
	}

	Vector rtemp12(Nx*Ny*Nz); // RS
	rtemp12 = ifft(Nx,Ny,Nz,dV,ktemp11);

	ktemp11.free(); // KSpace
	Vector rtemp13(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp13[i] = rtemp10[i]*n[i]/rtemp12[i];
	}

	ComplexVector ktemp14(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp14 = fft(Nx,Ny,Nz,dV,rtemp13);

	ComplexVector ktemp15(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp15[0] = R*R*ktemp14[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp15[i] = std::complex<double>(ktemp14[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp14[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp16(Nx*Ny*Nz); // RS
	rtemp16 = ifft(Nx,Ny,Nz,dV,ktemp15);

	Vector rtemp17(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp17[i] = rtemp16[i]/(R*R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp18(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp18 = fft(Nx,Ny,Nz,dV,rtemp17);

	rtemp17.free(); // Realspace
	{
		const int i = 0;
		ktemp18[0] = R*R*ktemp18[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp18[i] = std::complex<double>(ktemp18[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp18[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp20(Nx*Ny*Nz); // RS
	rtemp20 = ifft(Nx,Ny,Nz,dV,ktemp18);

	ktemp18.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp20[i] = 0.15791367041742974*rtemp20[i] - rtemp6[i];
	}

	rtemp6.free(); // Realspace
	ComplexVector ktemp22(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp22[0] = epsilon*sigma*sigma*sigma*ktemp8[i]*(1.6666666666666677e-2 + lambda*lambda*lambda*(lambda*(0.75 + lambda*(0.16666666666666652*lambda - 0.6000000000000001)) - 0.33333333333333337));
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = lambda*sigma*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		const double t2 = lambda - 1.0;
		const double t3 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t4 = sigma*sqrt(t3);
		ktemp22[i] = std::complex<double>(ktemp8[i].real()*epsilon*(cos(t1)*(6.0*t2*t4*t4*(2.0*lambda - 1.0) - 1.0*lambda*t2*t2*t2*(t4*t4)*(t4*t4) - 24.0)/(sigma*sigma*sigma*t3*t3*t3) + 24.0*cos(t4)/(sigma*sigma*sigma*t3*t3*t3) + (6.0*sin(t4) + sin(t1)*(18.0 - 24.0*lambda + t2*t2*t4*t4*(4.0*lambda - 1.0)))/(sigma*sigma*sqrt(t3)*t3*t3)),
				ktemp8[i].imag()*epsilon*(cos(t1)*(6.0*t2*t4*t4*(2.0*lambda - 1.0) - 1.0*lambda*t2*t2*t2*(t4*t4)*(t4*t4) - 24.0)/(sigma*sigma*sigma*t3*t3*t3) + 24.0*cos(t4)/(sigma*sigma*sigma*t3*t3*t3) + (6.0*sin(t4) + sin(t1)*(18.0 - 24.0*lambda + t2*t2*t4*t4*(4.0*lambda - 1.0)))/(sigma*sigma*sqrt(t3)*t3*t3)));
	}

	Vector rtemp23(Nx*Ny*Nz); // RS
	rtemp23 = ifft(Nx,Ny,Nz,dV,ktemp22);

	ktemp22.free(); // KSpace
	Vector rtemp24(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp24[i] = rtemp23[i]*n[i]/rtemp12[i];
	}

	ComplexVector ktemp25(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp25 = fft(Nx,Ny,Nz,dV,rtemp24);

	ComplexVector ktemp26(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp26[0] = R*R*ktemp25[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp26[i] = std::complex<double>(ktemp25[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp25[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp27(Nx*Ny*Nz); // RS
	rtemp27 = ifft(Nx,Ny,Nz,dV,ktemp26);

	Vector rtemp28(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp28[i] = rtemp27[i]/(R*R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp29(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp29 = fft(Nx,Ny,Nz,dV,rtemp28);

	rtemp28.free(); // Realspace
	{
		const int i = 0;
		ktemp29[0] = R*R*ktemp29[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp29[i] = std::complex<double>(ktemp29[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp29[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp31(Nx*Ny*Nz); // RS
	rtemp31 = ifft(Nx,Ny,Nz,dV,ktemp29);

	ktemp29.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp31[i] = rtemp20[i] - 16.344064888203977*rtemp31[i];
	}

	rtemp20.free(); // Realspace
	ComplexVector ktemp33(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp33[0] = epsilon*sigma*sigma*sigma*ktemp8[i]*(lambda*lambda*lambda*(0.33333333333333337 + lambda*(0.19999999999999996*lambda - 0.5000000000000001)) - 3.3333333333333326e-2);
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = lambda*sigma*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		const double t2 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t3 = sigma*sqrt(t2);
		ktemp33[i] = std::complex<double>(ktemp8[i].real()*epsilon*(sin(t1)*(t3*t3*(1.0 - 4.0*lambda + 3.0*lambda*lambda) - 6.0)/(sigma*sigma*sqrt(t2)*t2*t2) + 6.0*sin(t3)/(sigma*sigma*sqrt(t2)*t2*t2) - cos(t1)*(4.0 + lambda*(t3*t3*(lambda - 1.0)*(lambda - 1.0) - 6.0))/(sigma*t2*t2) - 2.0*cos(t3)/(sigma*t2*t2)),
				ktemp8[i].imag()*epsilon*(sin(t1)*(t3*t3*(1.0 - 4.0*lambda + 3.0*lambda*lambda) - 6.0)/(sigma*sigma*sqrt(t2)*t2*t2) + 6.0*sin(t3)/(sigma*sigma*sqrt(t2)*t2*t2) - cos(t1)*(4.0 + lambda*(t3*t3*(lambda - 1.0)*(lambda - 1.0) - 6.0))/(sigma*t2*t2) - 2.0*cos(t3)/(sigma*t2*t2)));
	}

	Vector rtemp34(Nx*Ny*Nz); // RS
	rtemp34 = ifft(Nx,Ny,Nz,dV,ktemp33);

	ktemp33.free(); // KSpace
	Vector rtemp35(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp35[i] = rtemp34[i]*n[i]/rtemp12[i];
	}

	ComplexVector ktemp36(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp36 = fft(Nx,Ny,Nz,dV,rtemp35);

	ComplexVector ktemp37(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp37[0] = R*R*ktemp36[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp37[i] = std::complex<double>(ktemp36[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp36[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp38(Nx*Ny*Nz); // RS
	rtemp38 = ifft(Nx,Ny,Nz,dV,ktemp37);

	Vector rtemp39(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp39[i] = rtemp38[i]/(R*R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp40(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp40 = fft(Nx,Ny,Nz,dV,rtemp39);

	rtemp39.free(); // Realspace
	{
		const int i = 0;
		ktemp40[0] = R*R*ktemp40[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp40[i] = std::complex<double>(ktemp40[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp40[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp42(Nx*Ny*Nz); // RS
	rtemp42 = ifft(Nx,Ny,Nz,dV,ktemp40);

	ktemp40.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp42[i] = rtemp31[i] + 177.10018137314742*rtemp42[i];
	}

	rtemp31.free(); // Realspace
	ComplexVector ktemp44(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp44[0] = epsilon*sigma*sigma*sigma*ktemp8[i]*(8.333333333333333e-2 + lambda*lambda*lambda*(0.25000000000000006*lambda - 0.33333333333333337));
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = lambda*sigma*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		const double t2 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t3 = sigma*sqrt(t2);
		ktemp44[i] = std::complex<double>(ktemp8[i].real()*epsilon*(cos(t1)*(2.0 - lambda*t3*t3*(lambda - 1.0))/(sigma*t2*t2) - 2.0*cos(t3)/(sigma*t2*t2) - (sin(t3) + sin(t1)*(1.0 - 2.0*lambda))/(sqrt(t2)*t2)),
				ktemp8[i].imag()*epsilon*(cos(t1)*(2.0 - lambda*t3*t3*(lambda - 1.0))/(sigma*t2*t2) - 2.0*cos(t3)/(sigma*t2*t2) - (sin(t3) + sin(t1)*(1.0 - 2.0*lambda))/(sqrt(t2)*t2)));
	}

	Vector rtemp45(Nx*Ny*Nz); // RS
	rtemp45 = ifft(Nx,Ny,Nz,dV,ktemp44);

	ktemp44.free(); // KSpace
	Vector rtemp46(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp46[i] = rtemp45[i]*n[i]/rtemp12[i];
	}

	ComplexVector ktemp47(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp47 = fft(Nx,Ny,Nz,dV,rtemp46);

	ComplexVector ktemp48(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp48[0] = R*R*ktemp47[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp48[i] = std::complex<double>(ktemp47[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp47[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp49(Nx*Ny*Nz); // RS
	rtemp49 = ifft(Nx,Ny,Nz,dV,ktemp48);

	Vector rtemp50(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp50[i] = rtemp49[i]/(R*R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp51(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp51 = fft(Nx,Ny,Nz,dV,rtemp50);

	rtemp50.free(); // Realspace
	{
		const int i = 0;
		ktemp51[0] = R*R*ktemp51[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp51[i] = std::complex<double>(ktemp51[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp51[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp53(Nx*Ny*Nz); // RS
	rtemp53 = ifft(Nx,Ny,Nz,dV,ktemp51);

	ktemp51.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp53[i] = rtemp42[i] + 138.49028895608586*rtemp53[i];
	}

	rtemp42.free(); // Realspace
	{
		const int i = 0;
		ktemp8[0] = epsilon*sigma*sigma*sigma*ktemp8[i]*(0.33333333333333337*lambda*lambda*lambda - 0.33333333333333337);
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = lambda*sigma*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		const double t2 = sigma*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		const double t3 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		ktemp8[i] = std::complex<double>(ktemp8[i].real()*epsilon*((sin(t1) - sin(t2))/(sqrt(t3)*t3) + (sigma*cos(t2) - 1.0*lambda*sigma*cos(t1))/t3),
				ktemp8[i].imag()*epsilon*((sin(t1) - sin(t2))/(sqrt(t3)*t3) + (sigma*cos(t2) - 1.0*lambda*sigma*cos(t1))/t3));
	}

	Vector rtemp56(Nx*Ny*Nz); // RS
	rtemp56 = ifft(Nx,Ny,Nz,dV,ktemp8);

	ktemp8.free(); // KSpace
	Vector rtemp57(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp57[i] = rtemp56[i]*n[i]/rtemp12[i];
	}

	ComplexVector ktemp58(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp58 = fft(Nx,Ny,Nz,dV,rtemp57);

	ComplexVector ktemp59(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp59[0] = R*R*ktemp58[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp59[i] = std::complex<double>(ktemp58[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp58[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp60(Nx*Ny*Nz); // RS
	rtemp60 = ifft(Nx,Ny,Nz,dV,ktemp59);

	Vector rtemp61(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp61[i] = rtemp60[i]/(R*R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp62(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp62 = fft(Nx,Ny,Nz,dV,rtemp61);

	rtemp61.free(); // Realspace
	{
		const int i = 0;
		ktemp62[0] = R*R*ktemp62[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp62[i] = std::complex<double>(ktemp62[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp62[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp64(Nx*Ny*Nz); // RS
	rtemp64 = ifft(Nx,Ny,Nz,dV,ktemp62);

	ktemp62.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp64[i] = rtemp53[i] - 78.95683520871486*rtemp64[i];
	}

	rtemp53.free(); // Realspace
	ComplexVector ktemp66(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp66[0] = (12.566370614359172*R*R)*ktemp0[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp66[i] = std::complex<double>((12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].real(),
				(12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].imag());
	}

	Vector rtemp67(Nx*Ny*Nz); // RS
	rtemp67 = ifft(Nx,Ny,Nz,dV,ktemp66);

	ktemp66.free(); // KSpace
	Vector dphitot_by_dn1(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		dphitot_by_dn1[i] = rtemp67[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp69(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp69 = fft(Nx,Ny,Nz,dV,dphitot_by_dn1);

	dphitot_by_dn1.free(); // Realspace
	ComplexVector ktemp70(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp70[0] = (-25.132741228718345*R)*ktemp69[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp70[i] = std::complex<double>((12.566370614359172*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)))*ktemp69[i].real(),
				(12.566370614359172*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)))*ktemp69[i].imag());
	}

	Vector rtemp71(Nx*Ny*Nz); // RS
	rtemp71 = ifft(Nx,Ny,Nz,dV,ktemp70);

	ktemp70.free(); // KSpace
	ComplexVector ktemp72(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp72[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp72[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp73(Nx*Ny*Nz); // RS
	rtemp73 = ifft(Nx,Ny,Nz,dV,ktemp72);

	ktemp72.free(); // KSpace
	Vector dphitot_by_dn2vx(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		dphitot_by_dn2vx[i] = -7.957747154594767e-2*rtemp73[i]/R/t1 - 5.305164769729845e-2*rtemp67[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp75(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp75 = fft(Nx,Ny,Nz,dV,dphitot_by_dn2vx);

	dphitot_by_dn2vx.free(); // Realspace
	ComplexVector ktemp76(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp76[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp76[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp77(Nx*Ny*Nz); // RS
	rtemp77 = ifft(Nx,Ny,Nz,dV,ktemp76);

	ktemp76.free(); // KSpace
	Vector dphitot_by_dn2vy(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		dphitot_by_dn2vy[i] = -7.957747154594767e-2*rtemp77[i]/R/t1 - 5.305164769729845e-2*rtemp67[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp79(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp79 = fft(Nx,Ny,Nz,dV,dphitot_by_dn2vy);

	dphitot_by_dn2vy.free(); // Realspace
	ktemp0[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp0[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp81(Nx*Ny*Nz); // RS
	rtemp81 = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	Vector dphitot_by_dn3(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = rtemp73[i];
		const double t3 = rtemp77[i];
		const double t4 = rtemp81[i];
		const double t5 = rtemp67[i];
		const double t6 = log(t1);
		const double t7 = 1.0/t1;
		const double t8 = 1.0/n3[i];
		dphitot_by_dn3[i] = t5*t7*t8*t8*(t7*(8.841941282883075e-3 + (1.768388256576615e-2*t7 - 1.768388256576615e-2*t8)*(n3[i] + t6/(t7*t7))) - 8.841941282883075e-3 - 1.768388256576615e-2*t6)*(t5*t5 - 3.0*t4*t4 - 3.0*t3*t3 - 3.0*t2*t2) + 7.957747154594767e-2*t7*rtemp67[i]/(R*R) + t7*t7*(7.957747154594767e-2*t5*rtemp67[i]/R - 7.957747154594767e-2*t4*rtemp81[i]/R - 7.957747154594767e-2*t3*rtemp77[i]/R - 7.957747154594767e-2*t2*rtemp73[i]/R);
	}

	ComplexVector ktemp83(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp83 = fft(Nx,Ny,Nz,dV,dphitot_by_dn3);

	dphitot_by_dn3.free(); // Realspace
	{
		const int i = 0;
		ktemp83[0] = (12.566370614359172*R*R)*ktemp83[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp83[i] = std::complex<double>((12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp83[i].real(),
				(12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp83[i].imag());
	}

	Vector rtemp85(Nx*Ny*Nz); // RS
	rtemp85 = ifft(Nx,Ny,Nz,dV,ktemp83);

	ktemp83.free(); // KSpace
	Vector dphitot_by_dn2(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		dphitot_by_dn2[i] = (n3[i] + t1*t1*log(t1))*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(t1*t1*n3[i]*n3[i]) + 7.957747154594767e-2*rtemp67[i]/R/t1;
	}

	ComplexVector ktemp87(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp87 = fft(Nx,Ny,Nz,dV,dphitot_by_dn2);

	dphitot_by_dn2.free(); // Realspace
	{
		const int i = 0;
		ktemp87[0] = (-25.132741228718345*R)*ktemp87[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp87[i] = std::complex<double>((12.566370614359172*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)))*ktemp87[i].real(),
				(12.566370614359172*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)))*ktemp87[i].imag());
	}

	Vector rtemp89(Nx*Ny*Nz); // RS
	rtemp89 = ifft(Nx,Ny,Nz,dV,ktemp87);

	ktemp87.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp89[i] = rtemp85[i] - rtemp89[i];
	}

	rtemp85.free(); // Realspace
	Vector dphitot_by_dn2vz(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		dphitot_by_dn2vz[i] = -7.957747154594767e-2*rtemp81[i]/R/t1 - 5.305164769729845e-2*rtemp67[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp92(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp92 = fft(Nx,Ny,Nz,dV,dphitot_by_dn2vz);

	dphitot_by_dn2vz.free(); // Realspace
	ktemp92[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sin(R*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]));
		const double t2 = exp(-6.0*dr*dr*(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]));
		const double t3 = 1.0/(sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]));
		ktemp92[i] = std::complex<double>(-12.566370614359172*ktemp92[i].imag()*R*k_i[2]*t1*t2*t3 - 12.566370614359172*ktemp79[i].imag()*R*k_i[1]*t1*t2*t3 - 12.566370614359172*ktemp75[i].imag()*R*k_i[0]*t1*t2*t3,
				12.566370614359172*ktemp75[i].real()*R*k_i[0]*t1*t2*t3 + 12.566370614359172*ktemp79[i].real()*R*k_i[1]*t1*t2*t3 + 12.566370614359172*ktemp92[i].real()*R*k_i[2]*t1*t2*t3);
	}

	ktemp79.free(); // KSpace
	ktemp75.free(); // KSpace
	Vector rtemp94(Nx*Ny*Nz); // RS
	rtemp94 = ifft(Nx,Ny,Nz,dV,ktemp92);

	ktemp92.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp94[i] = rtemp89[i] + rtemp94[i];
	}

	rtemp89.free(); // Realspace
	Vector dphitot_by_dn1vx(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		dphitot_by_dn1vx[i] = -1.0*rtemp73[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp97(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp97 = fft(Nx,Ny,Nz,dV,dphitot_by_dn1vx);

	dphitot_by_dn1vx.free(); // Realspace
	Vector dphitot_by_dn1vy(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		dphitot_by_dn1vy[i] = -1.0*rtemp77[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp99(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp99 = fft(Nx,Ny,Nz,dV,dphitot_by_dn1vy);

	dphitot_by_dn1vy.free(); // Realspace
	Vector dphitot_by_dn1vz(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		dphitot_by_dn1vz[i] = -1.0*rtemp81[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp101(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp101 = fft(Nx,Ny,Nz,dV,dphitot_by_dn1vz);

	dphitot_by_dn1vz.free(); // Realspace
	ComplexVector ktemp102(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp102[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sin(R*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]));
		const double t2 = exp(-6.0*dr*dr*(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]));
		const double t3 = 1.0/(sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]));
		ktemp102[i] = std::complex<double>(-12.566370614359172*ktemp99[i].imag()*R*k_i[1]*t1*t2*t3 - 12.566370614359172*ktemp97[i].imag()*R*k_i[0]*t1*t2*t3 - 12.566370614359172*ktemp101[i].imag()*R*k_i[2]*t1*t2*t3,
				12.566370614359172*ktemp101[i].real()*R*k_i[2]*t1*t2*t3 + 12.566370614359172*ktemp97[i].real()*R*k_i[0]*t1*t2*t3 + 12.566370614359172*ktemp99[i].real()*R*k_i[1]*t1*t2*t3);
	}

	Vector rtemp103(Nx*Ny*Nz); // RS
	rtemp103 = ifft(Nx,Ny,Nz,dV,ktemp102);

	ktemp102.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp103[i] = 7.957747154594767e-2*rtemp103[i] - 7.957747154594767e-2*rtemp71[i];
	}

	rtemp71.free(); // Realspace
	{
		const int i = 0;
		ktemp69[0] = (12.566370614359172*R*R)*ktemp69[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp69[i] = std::complex<double>((12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp69[i].real(),
				(12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp69[i].imag());
	}

	Vector rtemp106(Nx*Ny*Nz); // RS
	rtemp106 = ifft(Nx,Ny,Nz,dV,ktemp69);

	ktemp69.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp106[i] = rtemp103[i] - 7.957747154594767e-2*rtemp106[i]/R;
	}

	rtemp103.free(); // Realspace
	ktemp101[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = exp(-6.0*dr*dr*(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]));
		const double t2 = R*cos(R*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2])) - sin(R*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]))/(sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]));
		const double t3 = 1.0/(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp101[i] = std::complex<double>(-12.566370614359172*ktemp99[i].imag()*k_i[1]*t1*t2*t3 - 12.566370614359172*ktemp97[i].imag()*k_i[0]*t1*t2*t3 - 12.566370614359172*ktemp101[i].imag()*k_i[2]*t1*t2*t3,
				12.566370614359172*ktemp101[i].real()*k_i[2]*t1*t2*t3 + 12.566370614359172*ktemp97[i].real()*k_i[0]*t1*t2*t3 + 12.566370614359172*ktemp99[i].real()*k_i[1]*t1*t2*t3);
	}

	ktemp99.free(); // KSpace
	ktemp97.free(); // KSpace
	Vector rtemp109(Nx*Ny*Nz); // RS
	rtemp109 = ifft(Nx,Ny,Nz,dV,ktemp101);

	ktemp101.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp109[i] = rtemp106[i] + 7.957747154594767e-2*rtemp109[i]/R;
	}

	rtemp106.free(); // Realspace
	Vector dphitot_by_dn0(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		dphitot_by_dn0[i] = -1.0*log(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp112(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp112 = fft(Nx,Ny,Nz,dV,dphitot_by_dn0);

	dphitot_by_dn0.free(); // Realspace
	ComplexVector ktemp113(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp113[0] = (-25.132741228718345*R)*ktemp112[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp113[i] = std::complex<double>((12.566370614359172*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)))*ktemp112[i].real(),
				(12.566370614359172*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)))*ktemp112[i].imag());
	}

	Vector rtemp114(Nx*Ny*Nz); // RS
	rtemp114 = ifft(Nx,Ny,Nz,dV,ktemp113);

	ktemp113.free(); // KSpace
	{
		const int i = 0;
		ktemp112[0] = (12.566370614359172*R*R)*ktemp112[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp112[i] = std::complex<double>((12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp112[i].real(),
				(12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp112[i].imag());
	}

	Vector rtemp116(Nx*Ny*Nz); // RS
	rtemp116 = ifft(Nx,Ny,Nz,dV,ktemp112);

	ktemp112.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp116[i] = rtemp114[i] + 2.0*rtemp116[i]/R;
	}

	rtemp114.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp116[i] = rtemp109[i] - 7.957747154594767e-2*rtemp116[i]/R;
	}

	rtemp109.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp116[i] = rtemp94[i] + rtemp116[i]/R;
	}

	rtemp94.free(); // Realspace
	Vector rtemp120(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp120[i] = rtemp13[i]*(rtemp116[i]/rtemp12[i] - 1.0);
	}

	ComplexVector ktemp121(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp121 = fft(Nx,Ny,Nz,dV,rtemp120);

	ComplexVector ktemp122(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp122[0] = R*R*ktemp121[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp122[i] = std::complex<double>(ktemp121[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp121[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp123(Nx*Ny*Nz); // RS
	rtemp123 = ifft(Nx,Ny,Nz,dV,ktemp122);

	Vector rtemp124(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp124[i] = rtemp123[i]/(R*R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp125(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp125 = fft(Nx,Ny,Nz,dV,rtemp124);

	rtemp124.free(); // Realspace
	{
		const int i = 0;
		ktemp125[0] = R*R*ktemp125[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp125[i] = std::complex<double>(ktemp125[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp125[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp127(Nx*Ny*Nz); // RS
	rtemp127 = ifft(Nx,Ny,Nz,dV,ktemp125);

	ktemp125.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp127[i] = 25.897841948458478*rtemp127[i] + rtemp64[i];
	}

	rtemp64.free(); // Realspace
	Vector rtemp129(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp129[i] = rtemp13[i]*(rtemp116[i]/rtemp12[i] - 1.0)*(rtemp116[i]/rtemp12[i] - 1.0);
	}

	ComplexVector ktemp130(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp130 = fft(Nx,Ny,Nz,dV,rtemp129);

	ComplexVector ktemp131(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp131[0] = R*R*ktemp130[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp131[i] = std::complex<double>(ktemp130[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp130[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp132(Nx*Ny*Nz); // RS
	rtemp132 = ifft(Nx,Ny,Nz,dV,ktemp131);

	Vector rtemp133(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp133[i] = rtemp132[i]/(R*R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp134(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp134 = fft(Nx,Ny,Nz,dV,rtemp133);

	rtemp133.free(); // Realspace
	{
		const int i = 0;
		ktemp134[0] = R*R*ktemp134[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp134[i] = std::complex<double>(ktemp134[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp134[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp136(Nx*Ny*Nz); // RS
	rtemp136 = ifft(Nx,Ny,Nz,dV,ktemp134);

	ktemp134.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp136[i] = rtemp127[i] - 76.74604382287085*rtemp136[i];
	}

	rtemp127.free(); // Realspace
	Vector rtemp138(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp138[i] = rtemp13[i]*(rtemp116[i]/rtemp12[i] - 1.0)*(rtemp116[i]/rtemp12[i] - 1.0)*(rtemp116[i]/rtemp12[i] - 1.0);
	}

	ComplexVector ktemp139(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp139 = fft(Nx,Ny,Nz,dV,rtemp138);

	ComplexVector ktemp140(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp140[0] = R*R*ktemp139[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp140[i] = std::complex<double>(ktemp139[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp139[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp141(Nx*Ny*Nz); // RS
	rtemp141 = ifft(Nx,Ny,Nz,dV,ktemp140);

	Vector rtemp142(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp142[i] = rtemp141[i]/(R*R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp143(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp143 = fft(Nx,Ny,Nz,dV,rtemp142);

	rtemp142.free(); // Realspace
	{
		const int i = 0;
		ktemp143[0] = R*R*ktemp143[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp143[i] = std::complex<double>(ktemp143[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp143[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp145(Nx*Ny*Nz); // RS
	rtemp145 = ifft(Nx,Ny,Nz,dV,ktemp143);

	ktemp143.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp145[i] = rtemp136[i] + 51.16402921524723*rtemp145[i];
	}

	rtemp136.free(); // Realspace
	Vector rtemp147(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp147[i] = rtemp24[i]*(rtemp116[i]/rtemp12[i] - 1.0);
	}

	ComplexVector ktemp148(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp148 = fft(Nx,Ny,Nz,dV,rtemp147);

	ComplexVector ktemp149(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp149[0] = R*R*ktemp148[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp149[i] = std::complex<double>(ktemp148[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp148[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp150(Nx*Ny*Nz); // RS
	rtemp150 = ifft(Nx,Ny,Nz,dV,ktemp149);

	Vector rtemp151(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp151[i] = rtemp150[i]/(R*R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp152(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp152 = fft(Nx,Ny,Nz,dV,rtemp151);

	rtemp151.free(); // Realspace
	{
		const int i = 0;
		ktemp152[0] = R*R*ktemp152[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp152[i] = std::complex<double>(ktemp152[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp152[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp154(Nx*Ny*Nz); // RS
	rtemp154 = ifft(Nx,Ny,Nz,dV,ktemp152);

	ktemp152.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp154[i] = rtemp145[i] - 112.43453333720996*rtemp154[i];
	}

	rtemp145.free(); // Realspace
	Vector rtemp156(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp156[i] = rtemp24[i]*(rtemp116[i]/rtemp12[i] - 1.0)*(rtemp116[i]/rtemp12[i] - 1.0);
	}

	ComplexVector ktemp157(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp157 = fft(Nx,Ny,Nz,dV,rtemp156);

	ComplexVector ktemp158(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp158[0] = R*R*ktemp157[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp158[i] = std::complex<double>(ktemp157[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp157[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp159(Nx*Ny*Nz); // RS
	rtemp159 = ifft(Nx,Ny,Nz,dV,ktemp158);

	Vector rtemp160(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp160[i] = rtemp159[i]/(R*R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp161(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp161 = fft(Nx,Ny,Nz,dV,rtemp160);

	rtemp160.free(); // Realspace
	{
		const int i = 0;
		ktemp161[0] = R*R*ktemp161[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp161[i] = std::complex<double>(ktemp161[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp161[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp163(Nx*Ny*Nz); // RS
	rtemp163 = ifft(Nx,Ny,Nz,dV,ktemp161);

	ktemp161.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp163[i] = rtemp154[i] + 462.37122698223425*rtemp163[i];
	}

	rtemp154.free(); // Realspace
	Vector rtemp165(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp165[i] = rtemp24[i]*(rtemp116[i]/rtemp12[i] - 1.0)*(rtemp116[i]/rtemp12[i] - 1.0)*(rtemp116[i]/rtemp12[i] - 1.0);
	}

	ComplexVector ktemp166(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp166 = fft(Nx,Ny,Nz,dV,rtemp165);

	ComplexVector ktemp167(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp167[0] = R*R*ktemp166[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp167[i] = std::complex<double>(ktemp166[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp166[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp168(Nx*Ny*Nz); // RS
	rtemp168 = ifft(Nx,Ny,Nz,dV,ktemp167);

	Vector rtemp169(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp169[i] = rtemp168[i]/(R*R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp170(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp170 = fft(Nx,Ny,Nz,dV,rtemp169);

	rtemp169.free(); // Realspace
	{
		const int i = 0;
		ktemp170[0] = R*R*ktemp170[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp170[i] = std::complex<double>(ktemp170[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp170[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp172(Nx*Ny*Nz); // RS
	rtemp172 = ifft(Nx,Ny,Nz,dV,ktemp170);

	ktemp170.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp172[i] = rtemp163[i] - 330.355398513263*rtemp172[i];
	}

	rtemp163.free(); // Realspace
	Vector rtemp174(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp174[i] = rtemp35[i]*(rtemp116[i]/rtemp12[i] - 1.0);
	}

	ComplexVector ktemp175(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp175 = fft(Nx,Ny,Nz,dV,rtemp174);

	ComplexVector ktemp176(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp176[0] = R*R*ktemp175[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp176[i] = std::complex<double>(ktemp175[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp175[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp177(Nx*Ny*Nz); // RS
	rtemp177 = ifft(Nx,Ny,Nz,dV,ktemp176);

	Vector rtemp178(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp178[i] = rtemp177[i]/(R*R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp179(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp179 = fft(Nx,Ny,Nz,dV,rtemp178);

	rtemp178.free(); // Realspace
	{
		const int i = 0;
		ktemp179[0] = R*R*ktemp179[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp179[i] = std::complex<double>(ktemp179[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp179[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp181(Nx*Ny*Nz); // RS
	rtemp181 = ifft(Nx,Ny,Nz,dV,ktemp179);

	ktemp179.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp181[i] = rtemp172[i] - 695.2938908479431*rtemp181[i];
	}

	rtemp172.free(); // Realspace
	Vector rtemp183(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp183[i] = rtemp35[i]*(rtemp116[i]/rtemp12[i] - 1.0)*(rtemp116[i]/rtemp12[i] - 1.0);
	}

	ComplexVector ktemp184(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp184 = fft(Nx,Ny,Nz,dV,rtemp183);

	ComplexVector ktemp185(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp185[0] = R*R*ktemp184[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp185[i] = std::complex<double>(ktemp184[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp184[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp186(Nx*Ny*Nz); // RS
	rtemp186 = ifft(Nx,Ny,Nz,dV,ktemp185);

	Vector rtemp187(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp187[i] = rtemp186[i]/(R*R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp188(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp188 = fft(Nx,Ny,Nz,dV,rtemp187);

	rtemp187.free(); // Realspace
	{
		const int i = 0;
		ktemp188[0] = R*R*ktemp188[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp188[i] = std::complex<double>(ktemp188[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp188[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp190(Nx*Ny*Nz); // RS
	rtemp190 = ifft(Nx,Ny,Nz,dV,ktemp188);

	ktemp188.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp190[i] = rtemp181[i] + 587.4388539528386*rtemp190[i];
	}

	rtemp181.free(); // Realspace
	Vector rtemp192(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp192[i] = rtemp35[i]*(rtemp116[i]/rtemp12[i] - 1.0)*(rtemp116[i]/rtemp12[i] - 1.0)*(rtemp116[i]/rtemp12[i] - 1.0);
	}

	ComplexVector ktemp193(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp193 = fft(Nx,Ny,Nz,dV,rtemp192);

	ComplexVector ktemp194(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp194[0] = R*R*ktemp193[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp194[i] = std::complex<double>(ktemp193[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp193[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp195(Nx*Ny*Nz); // RS
	rtemp195 = ifft(Nx,Ny,Nz,dV,ktemp194);

	Vector rtemp196(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp196[i] = rtemp195[i]/(R*R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp197(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp197 = fft(Nx,Ny,Nz,dV,rtemp196);

	rtemp196.free(); // Realspace
	{
		const int i = 0;
		ktemp197[0] = R*R*ktemp197[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp197[i] = std::complex<double>(ktemp197[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp197[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp199(Nx*Ny*Nz); // RS
	rtemp199 = ifft(Nx,Ny,Nz,dV,ktemp197);

	ktemp197.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp199[i] = rtemp190[i] - 114.64532472305397*rtemp199[i];
	}

	rtemp190.free(); // Realspace
	Vector rtemp201(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp201[i] = rtemp46[i]*(rtemp116[i]/rtemp12[i] - 1.0);
	}

	ComplexVector ktemp202(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp202 = fft(Nx,Ny,Nz,dV,rtemp201);

	ComplexVector ktemp203(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp203[0] = R*R*ktemp202[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp203[i] = std::complex<double>(ktemp202[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp202[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp204(Nx*Ny*Nz); // RS
	rtemp204 = ifft(Nx,Ny,Nz,dV,ktemp203);

	Vector rtemp205(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp205[i] = rtemp204[i]/(R*R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp206(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp206 = fft(Nx,Ny,Nz,dV,rtemp205);

	rtemp205.free(); // Realspace
	{
		const int i = 0;
		ktemp206[0] = R*R*ktemp206[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp206[i] = std::complex<double>(ktemp206[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp206[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp208(Nx*Ny*Nz); // RS
	rtemp208 = ifft(Nx,Ny,Nz,dV,ktemp206);

	ktemp206.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp208[i] = rtemp199[i] - 4.263669101270603*rtemp208[i];
	}

	rtemp199.free(); // Realspace
	Vector rtemp210(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp210[i] = rtemp46[i]*(rtemp116[i]/rtemp12[i] - 1.0)*(rtemp116[i]/rtemp12[i] - 1.0);
	}

	ComplexVector ktemp211(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp211 = fft(Nx,Ny,Nz,dV,rtemp210);

	ComplexVector ktemp212(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp212[0] = R*R*ktemp211[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp212[i] = std::complex<double>(ktemp211[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp211[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp213(Nx*Ny*Nz); // RS
	rtemp213 = ifft(Nx,Ny,Nz,dV,ktemp212);

	Vector rtemp214(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp214[i] = rtemp213[i]/(R*R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp215(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp215 = fft(Nx,Ny,Nz,dV,rtemp214);

	rtemp214.free(); // Realspace
	{
		const int i = 0;
		ktemp215[0] = R*R*ktemp215[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp215[i] = std::complex<double>(ktemp215[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp215[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp217(Nx*Ny*Nz); // RS
	rtemp217 = ifft(Nx,Ny,Nz,dV,ktemp215);

	ktemp215.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp217[i] = rtemp208[i] - 198.49748371470918*rtemp217[i];
	}

	rtemp208.free(); // Realspace
	Vector rtemp219(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp219[i] = rtemp46[i]*(rtemp116[i]/rtemp12[i] - 1.0)*(rtemp116[i]/rtemp12[i] - 1.0)*(rtemp116[i]/rtemp12[i] - 1.0);
	}

	ComplexVector ktemp220(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp220 = fft(Nx,Ny,Nz,dV,rtemp219);

	ComplexVector ktemp221(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp221[0] = R*R*ktemp220[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp221[i] = std::complex<double>(ktemp220[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp220[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp222(Nx*Ny*Nz); // RS
	rtemp222 = ifft(Nx,Ny,Nz,dV,ktemp221);

	Vector rtemp223(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp223[i] = rtemp222[i]/(R*R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp224(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp224 = fft(Nx,Ny,Nz,dV,rtemp223);

	rtemp223.free(); // Realspace
	{
		const int i = 0;
		ktemp224[0] = R*R*ktemp224[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp224[i] = std::complex<double>(ktemp224[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp224[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp226(Nx*Ny*Nz); // RS
	rtemp226 = ifft(Nx,Ny,Nz,dV,ktemp224);

	ktemp224.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp226[i] = rtemp217[i] + 56.21726666860498*rtemp226[i];
	}

	rtemp217.free(); // Realspace
	Vector rtemp228(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp228[i] = dV*kT*rtemp67[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp229(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp229 = fft(Nx,Ny,Nz,dV,rtemp228);

	rtemp228.free(); // Realspace
	{
		const int i = 0;
		ktemp229[0] = R*R*ktemp229[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp229[i] = std::complex<double>(ktemp229[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp229[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp231(Nx*Ny*Nz); // RS
	rtemp231 = ifft(Nx,Ny,Nz,dV,ktemp229);

	ktemp229.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp231[i] = rtemp226[i] + rtemp231[i];
	}

	rtemp226.free(); // Realspace
	Vector rtemp233(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp233[i] = rtemp123[i]*rtemp67[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp234(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp234 = fft(Nx,Ny,Nz,dV,rtemp233);

	rtemp233.free(); // Realspace
	{
		const int i = 0;
		ktemp234[0] = R*R*ktemp234[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp234[i] = std::complex<double>(ktemp234[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp234[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp236(Nx*Ny*Nz); // RS
	rtemp236 = ifft(Nx,Ny,Nz,dV,ktemp234);

	ktemp234.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp236[i] = rtemp231[i] + 25.897841948458478*rtemp236[i];
	}

	rtemp231.free(); // Realspace
	Vector rtemp238(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp238[i] = rtemp132[i]*rtemp67[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp239(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp239 = fft(Nx,Ny,Nz,dV,rtemp238);

	rtemp238.free(); // Realspace
	{
		const int i = 0;
		ktemp239[0] = R*R*ktemp239[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp239[i] = std::complex<double>(ktemp239[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp239[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp241(Nx*Ny*Nz); // RS
	rtemp241 = ifft(Nx,Ny,Nz,dV,ktemp239);

	ktemp239.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp241[i] = rtemp236[i] - 76.74604382287085*rtemp241[i];
	}

	rtemp236.free(); // Realspace
	Vector rtemp243(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp243[i] = rtemp141[i]*rtemp67[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp244(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp244 = fft(Nx,Ny,Nz,dV,rtemp243);

	rtemp243.free(); // Realspace
	{
		const int i = 0;
		ktemp244[0] = R*R*ktemp244[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp244[i] = std::complex<double>(ktemp244[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp244[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp246(Nx*Ny*Nz); // RS
	rtemp246 = ifft(Nx,Ny,Nz,dV,ktemp244);

	ktemp244.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp246[i] = rtemp241[i] + 51.16402921524723*rtemp246[i];
	}

	rtemp241.free(); // Realspace
	Vector rtemp248(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp248[i] = rtemp150[i]*rtemp67[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp249(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp249 = fft(Nx,Ny,Nz,dV,rtemp248);

	rtemp248.free(); // Realspace
	{
		const int i = 0;
		ktemp249[0] = R*R*ktemp249[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp249[i] = std::complex<double>(ktemp249[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp249[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp251(Nx*Ny*Nz); // RS
	rtemp251 = ifft(Nx,Ny,Nz,dV,ktemp249);

	ktemp249.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp251[i] = rtemp246[i] - 112.43453333720996*rtemp251[i];
	}

	rtemp246.free(); // Realspace
	Vector rtemp253(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp253[i] = rtemp159[i]*rtemp67[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp254(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp254 = fft(Nx,Ny,Nz,dV,rtemp253);

	rtemp253.free(); // Realspace
	{
		const int i = 0;
		ktemp254[0] = R*R*ktemp254[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp254[i] = std::complex<double>(ktemp254[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp254[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp256(Nx*Ny*Nz); // RS
	rtemp256 = ifft(Nx,Ny,Nz,dV,ktemp254);

	ktemp254.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp256[i] = rtemp251[i] + 462.37122698223425*rtemp256[i];
	}

	rtemp251.free(); // Realspace
	Vector rtemp258(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp258[i] = rtemp168[i]*rtemp67[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp259(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp259 = fft(Nx,Ny,Nz,dV,rtemp258);

	rtemp258.free(); // Realspace
	{
		const int i = 0;
		ktemp259[0] = R*R*ktemp259[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp259[i] = std::complex<double>(ktemp259[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp259[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp261(Nx*Ny*Nz); // RS
	rtemp261 = ifft(Nx,Ny,Nz,dV,ktemp259);

	ktemp259.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp261[i] = rtemp256[i] - 330.355398513263*rtemp261[i];
	}

	rtemp256.free(); // Realspace
	Vector rtemp263(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp263[i] = rtemp16[i]*rtemp67[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp264(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp264 = fft(Nx,Ny,Nz,dV,rtemp263);

	rtemp263.free(); // Realspace
	{
		const int i = 0;
		ktemp264[0] = R*R*ktemp264[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp264[i] = std::complex<double>(ktemp264[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp264[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp266(Nx*Ny*Nz); // RS
	rtemp266 = ifft(Nx,Ny,Nz,dV,ktemp264);

	ktemp264.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp266[i] = rtemp261[i] + 0.15791367041742974*rtemp266[i];
	}

	rtemp261.free(); // Realspace
	Vector rtemp268(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp268[i] = rtemp177[i]*rtemp67[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp269(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp269 = fft(Nx,Ny,Nz,dV,rtemp268);

	rtemp268.free(); // Realspace
	{
		const int i = 0;
		ktemp269[0] = R*R*ktemp269[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp269[i] = std::complex<double>(ktemp269[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp269[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp271(Nx*Ny*Nz); // RS
	rtemp271 = ifft(Nx,Ny,Nz,dV,ktemp269);

	ktemp269.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp271[i] = rtemp266[i] - 695.2938908479431*rtemp271[i];
	}

	rtemp266.free(); // Realspace
	Vector rtemp273(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp273[i] = rtemp186[i]*rtemp67[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp274(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp274 = fft(Nx,Ny,Nz,dV,rtemp273);

	rtemp273.free(); // Realspace
	{
		const int i = 0;
		ktemp274[0] = R*R*ktemp274[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp274[i] = std::complex<double>(ktemp274[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp274[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp276(Nx*Ny*Nz); // RS
	rtemp276 = ifft(Nx,Ny,Nz,dV,ktemp274);

	ktemp274.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp276[i] = rtemp271[i] + 587.4388539528386*rtemp276[i];
	}

	rtemp271.free(); // Realspace
	Vector rtemp278(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp278[i] = rtemp195[i]*rtemp67[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp279(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp279 = fft(Nx,Ny,Nz,dV,rtemp278);

	rtemp278.free(); // Realspace
	{
		const int i = 0;
		ktemp279[0] = R*R*ktemp279[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp279[i] = std::complex<double>(ktemp279[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp279[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp281(Nx*Ny*Nz); // RS
	rtemp281 = ifft(Nx,Ny,Nz,dV,ktemp279);

	ktemp279.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp281[i] = rtemp276[i] - 114.64532472305397*rtemp281[i];
	}

	rtemp276.free(); // Realspace
	Vector rtemp283(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp283[i] = rtemp204[i]*rtemp67[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp284(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp284 = fft(Nx,Ny,Nz,dV,rtemp283);

	rtemp283.free(); // Realspace
	{
		const int i = 0;
		ktemp284[0] = R*R*ktemp284[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp284[i] = std::complex<double>(ktemp284[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp284[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp286(Nx*Ny*Nz); // RS
	rtemp286 = ifft(Nx,Ny,Nz,dV,ktemp284);

	ktemp284.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp286[i] = rtemp281[i] - 4.263669101270603*rtemp286[i];
	}

	rtemp281.free(); // Realspace
	Vector rtemp288(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp288[i] = rtemp213[i]*rtemp67[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp289(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp289 = fft(Nx,Ny,Nz,dV,rtemp288);

	rtemp288.free(); // Realspace
	{
		const int i = 0;
		ktemp289[0] = R*R*ktemp289[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp289[i] = std::complex<double>(ktemp289[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp289[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp291(Nx*Ny*Nz); // RS
	rtemp291 = ifft(Nx,Ny,Nz,dV,ktemp289);

	ktemp289.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp291[i] = rtemp286[i] - 198.49748371470918*rtemp291[i];
	}

	rtemp286.free(); // Realspace
	Vector rtemp293(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp293[i] = rtemp222[i]*rtemp67[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp294(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp294 = fft(Nx,Ny,Nz,dV,rtemp293);

	rtemp293.free(); // Realspace
	{
		const int i = 0;
		ktemp294[0] = R*R*ktemp294[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp294[i] = std::complex<double>(ktemp294[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp294[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp296(Nx*Ny*Nz); // RS
	rtemp296 = ifft(Nx,Ny,Nz,dV,ktemp294);

	ktemp294.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp296[i] = rtemp291[i] + 56.21726666860498*rtemp296[i];
	}

	rtemp291.free(); // Realspace
	Vector rtemp298(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp298[i] = rtemp27[i]*rtemp67[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp299(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp299 = fft(Nx,Ny,Nz,dV,rtemp298);

	rtemp298.free(); // Realspace
	{
		const int i = 0;
		ktemp299[0] = R*R*ktemp299[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp299[i] = std::complex<double>(ktemp299[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp299[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp301(Nx*Ny*Nz); // RS
	rtemp301 = ifft(Nx,Ny,Nz,dV,ktemp299);

	ktemp299.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp301[i] = rtemp296[i] - 16.344064888203977*rtemp301[i];
	}

	rtemp296.free(); // Realspace
	Vector rtemp303(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp303[i] = rtemp38[i]*rtemp67[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp304(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp304 = fft(Nx,Ny,Nz,dV,rtemp303);

	rtemp303.free(); // Realspace
	{
		const int i = 0;
		ktemp304[0] = R*R*ktemp304[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp304[i] = std::complex<double>(ktemp304[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp304[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp306(Nx*Ny*Nz); // RS
	rtemp306 = ifft(Nx,Ny,Nz,dV,ktemp304);

	ktemp304.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp306[i] = rtemp301[i] + 177.10018137314742*rtemp306[i];
	}

	rtemp301.free(); // Realspace
	Vector rtemp308(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp308[i] = rtemp49[i]*rtemp67[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp309(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp309 = fft(Nx,Ny,Nz,dV,rtemp308);

	rtemp308.free(); // Realspace
	{
		const int i = 0;
		ktemp309[0] = R*R*ktemp309[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp309[i] = std::complex<double>(ktemp309[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp309[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp311(Nx*Ny*Nz); // RS
	rtemp311 = ifft(Nx,Ny,Nz,dV,ktemp309);

	ktemp309.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp311[i] = rtemp306[i] + 138.49028895608586*rtemp311[i];
	}

	rtemp306.free(); // Realspace
	Vector rtemp313(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp313[i] = rtemp60[i]*rtemp67[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp314(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp314 = fft(Nx,Ny,Nz,dV,rtemp313);

	rtemp313.free(); // Realspace
	{
		const int i = 0;
		ktemp314[0] = R*R*ktemp314[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp314[i] = std::complex<double>(ktemp314[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp314[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp316(Nx*Ny*Nz); // RS
	rtemp316 = ifft(Nx,Ny,Nz,dV,ktemp314);

	ktemp314.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp316[i] = rtemp311[i] - 78.95683520871486*rtemp316[i];
	}

	rtemp311.free(); // Realspace
	{
		const int i = 0;
		ktemp121[0] = -2.0*R*ktemp121[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp121[i] = std::complex<double>(ktemp121[i].real()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)),
				ktemp121[i].imag()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)));
	}

	Vector rtemp319(Nx*Ny*Nz); // RS
	rtemp319 = ifft(Nx,Ny,Nz,dV,ktemp121);

	ktemp121.free(); // KSpace
	Vector rtemp320(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp320[i] = rtemp319[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp321(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp321 = fft(Nx,Ny,Nz,dV,rtemp320);

	rtemp320.free(); // Realspace
	{
		const int i = 0;
		ktemp321[0] = R*R*ktemp321[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp321[i] = std::complex<double>(ktemp321[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp321[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp323(Nx*Ny*Nz); // RS
	rtemp323 = ifft(Nx,Ny,Nz,dV,ktemp321);

	ktemp321.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp323[i] = rtemp316[i] - 25.897841948458478*rtemp323[i];
	}

	rtemp316.free(); // Realspace
	{
		const int i = 0;
		ktemp130[0] = -2.0*R*ktemp130[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp130[i] = std::complex<double>(ktemp130[i].real()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)),
				ktemp130[i].imag()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)));
	}

	Vector rtemp326(Nx*Ny*Nz); // RS
	rtemp326 = ifft(Nx,Ny,Nz,dV,ktemp130);

	ktemp130.free(); // KSpace
	Vector rtemp327(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp327[i] = rtemp326[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp328(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp328 = fft(Nx,Ny,Nz,dV,rtemp327);

	rtemp327.free(); // Realspace
	{
		const int i = 0;
		ktemp328[0] = R*R*ktemp328[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp328[i] = std::complex<double>(ktemp328[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp328[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp330(Nx*Ny*Nz); // RS
	rtemp330 = ifft(Nx,Ny,Nz,dV,ktemp328);

	ktemp328.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp330[i] = rtemp323[i] + 76.74604382287085*rtemp330[i];
	}

	rtemp323.free(); // Realspace
	{
		const int i = 0;
		ktemp139[0] = -2.0*R*ktemp139[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp139[i] = std::complex<double>(ktemp139[i].real()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)),
				ktemp139[i].imag()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)));
	}

	Vector rtemp333(Nx*Ny*Nz); // RS
	rtemp333 = ifft(Nx,Ny,Nz,dV,ktemp139);

	ktemp139.free(); // KSpace
	Vector rtemp334(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp334[i] = rtemp333[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp335(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp335 = fft(Nx,Ny,Nz,dV,rtemp334);

	rtemp334.free(); // Realspace
	{
		const int i = 0;
		ktemp335[0] = R*R*ktemp335[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp335[i] = std::complex<double>(ktemp335[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp335[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp337(Nx*Ny*Nz); // RS
	rtemp337 = ifft(Nx,Ny,Nz,dV,ktemp335);

	ktemp335.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp337[i] = rtemp330[i] - 51.16402921524723*rtemp337[i];
	}

	rtemp330.free(); // Realspace
	{
		const int i = 0;
		ktemp148[0] = -2.0*R*ktemp148[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp148[i] = std::complex<double>(ktemp148[i].real()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)),
				ktemp148[i].imag()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)));
	}

	Vector rtemp340(Nx*Ny*Nz); // RS
	rtemp340 = ifft(Nx,Ny,Nz,dV,ktemp148);

	ktemp148.free(); // KSpace
	Vector rtemp341(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp341[i] = rtemp340[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp342(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp342 = fft(Nx,Ny,Nz,dV,rtemp341);

	rtemp341.free(); // Realspace
	{
		const int i = 0;
		ktemp342[0] = R*R*ktemp342[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp342[i] = std::complex<double>(ktemp342[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp342[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp344(Nx*Ny*Nz); // RS
	rtemp344 = ifft(Nx,Ny,Nz,dV,ktemp342);

	ktemp342.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp344[i] = rtemp337[i] + 112.43453333720996*rtemp344[i];
	}

	rtemp337.free(); // Realspace
	{
		const int i = 0;
		ktemp14[0] = -2.0*R*ktemp14[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp14[i] = std::complex<double>(ktemp14[i].real()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)),
				ktemp14[i].imag()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)));
	}

	Vector rtemp347(Nx*Ny*Nz); // RS
	rtemp347 = ifft(Nx,Ny,Nz,dV,ktemp14);

	ktemp14.free(); // KSpace
	Vector rtemp348(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp348[i] = rtemp347[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp349(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp349 = fft(Nx,Ny,Nz,dV,rtemp348);

	rtemp348.free(); // Realspace
	{
		const int i = 0;
		ktemp349[0] = R*R*ktemp349[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp349[i] = std::complex<double>(ktemp349[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp349[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp351(Nx*Ny*Nz); // RS
	rtemp351 = ifft(Nx,Ny,Nz,dV,ktemp349);

	ktemp349.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp351[i] = rtemp344[i] - 0.15791367041742974*rtemp351[i];
	}

	rtemp344.free(); // Realspace
	{
		const int i = 0;
		ktemp157[0] = -2.0*R*ktemp157[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp157[i] = std::complex<double>(ktemp157[i].real()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)),
				ktemp157[i].imag()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)));
	}

	Vector rtemp354(Nx*Ny*Nz); // RS
	rtemp354 = ifft(Nx,Ny,Nz,dV,ktemp157);

	ktemp157.free(); // KSpace
	Vector rtemp355(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp355[i] = rtemp354[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp356(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp356 = fft(Nx,Ny,Nz,dV,rtemp355);

	rtemp355.free(); // Realspace
	{
		const int i = 0;
		ktemp356[0] = R*R*ktemp356[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp356[i] = std::complex<double>(ktemp356[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp356[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp358(Nx*Ny*Nz); // RS
	rtemp358 = ifft(Nx,Ny,Nz,dV,ktemp356);

	ktemp356.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp358[i] = rtemp351[i] - 462.37122698223425*rtemp358[i];
	}

	rtemp351.free(); // Realspace
	{
		const int i = 0;
		ktemp166[0] = -2.0*R*ktemp166[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp166[i] = std::complex<double>(ktemp166[i].real()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)),
				ktemp166[i].imag()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)));
	}

	Vector rtemp361(Nx*Ny*Nz); // RS
	rtemp361 = ifft(Nx,Ny,Nz,dV,ktemp166);

	ktemp166.free(); // KSpace
	Vector rtemp362(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp362[i] = rtemp361[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp363(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp363 = fft(Nx,Ny,Nz,dV,rtemp362);

	rtemp362.free(); // Realspace
	{
		const int i = 0;
		ktemp363[0] = R*R*ktemp363[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp363[i] = std::complex<double>(ktemp363[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp363[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp365(Nx*Ny*Nz); // RS
	rtemp365 = ifft(Nx,Ny,Nz,dV,ktemp363);

	ktemp363.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp365[i] = rtemp358[i] + 330.355398513263*rtemp365[i];
	}

	rtemp358.free(); // Realspace
	{
		const int i = 0;
		ktemp175[0] = -2.0*R*ktemp175[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp175[i] = std::complex<double>(ktemp175[i].real()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)),
				ktemp175[i].imag()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)));
	}

	Vector rtemp368(Nx*Ny*Nz); // RS
	rtemp368 = ifft(Nx,Ny,Nz,dV,ktemp175);

	ktemp175.free(); // KSpace
	Vector rtemp369(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp369[i] = rtemp368[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp370(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp370 = fft(Nx,Ny,Nz,dV,rtemp369);

	rtemp369.free(); // Realspace
	{
		const int i = 0;
		ktemp370[0] = R*R*ktemp370[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp370[i] = std::complex<double>(ktemp370[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp370[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp372(Nx*Ny*Nz); // RS
	rtemp372 = ifft(Nx,Ny,Nz,dV,ktemp370);

	ktemp370.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp372[i] = rtemp365[i] + 695.2938908479431*rtemp372[i];
	}

	rtemp365.free(); // Realspace
	{
		const int i = 0;
		ktemp184[0] = -2.0*R*ktemp184[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp184[i] = std::complex<double>(ktemp184[i].real()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)),
				ktemp184[i].imag()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)));
	}

	Vector rtemp375(Nx*Ny*Nz); // RS
	rtemp375 = ifft(Nx,Ny,Nz,dV,ktemp184);

	ktemp184.free(); // KSpace
	Vector rtemp376(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp376[i] = rtemp375[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp377(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp377 = fft(Nx,Ny,Nz,dV,rtemp376);

	rtemp376.free(); // Realspace
	{
		const int i = 0;
		ktemp377[0] = R*R*ktemp377[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp377[i] = std::complex<double>(ktemp377[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp377[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp379(Nx*Ny*Nz); // RS
	rtemp379 = ifft(Nx,Ny,Nz,dV,ktemp377);

	ktemp377.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp379[i] = rtemp372[i] - 587.4388539528386*rtemp379[i];
	}

	rtemp372.free(); // Realspace
	{
		const int i = 0;
		ktemp193[0] = -2.0*R*ktemp193[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp193[i] = std::complex<double>(ktemp193[i].real()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)),
				ktemp193[i].imag()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)));
	}

	Vector rtemp382(Nx*Ny*Nz); // RS
	rtemp382 = ifft(Nx,Ny,Nz,dV,ktemp193);

	ktemp193.free(); // KSpace
	Vector rtemp383(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp383[i] = rtemp382[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp384(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp384 = fft(Nx,Ny,Nz,dV,rtemp383);

	rtemp383.free(); // Realspace
	{
		const int i = 0;
		ktemp384[0] = R*R*ktemp384[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp384[i] = std::complex<double>(ktemp384[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp384[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp386(Nx*Ny*Nz); // RS
	rtemp386 = ifft(Nx,Ny,Nz,dV,ktemp384);

	ktemp384.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp386[i] = rtemp379[i] + 114.64532472305397*rtemp386[i];
	}

	rtemp379.free(); // Realspace
	{
		const int i = 0;
		ktemp202[0] = -2.0*R*ktemp202[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp202[i] = std::complex<double>(ktemp202[i].real()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)),
				ktemp202[i].imag()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)));
	}

	Vector rtemp389(Nx*Ny*Nz); // RS
	rtemp389 = ifft(Nx,Ny,Nz,dV,ktemp202);

	ktemp202.free(); // KSpace
	Vector rtemp390(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp390[i] = rtemp389[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp391(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp391 = fft(Nx,Ny,Nz,dV,rtemp390);

	rtemp390.free(); // Realspace
	{
		const int i = 0;
		ktemp391[0] = R*R*ktemp391[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp391[i] = std::complex<double>(ktemp391[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp391[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp393(Nx*Ny*Nz); // RS
	rtemp393 = ifft(Nx,Ny,Nz,dV,ktemp391);

	ktemp391.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp393[i] = rtemp386[i] + 4.263669101270603*rtemp393[i];
	}

	rtemp386.free(); // Realspace
	{
		const int i = 0;
		ktemp211[0] = -2.0*R*ktemp211[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp211[i] = std::complex<double>(ktemp211[i].real()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)),
				ktemp211[i].imag()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)));
	}

	Vector rtemp396(Nx*Ny*Nz); // RS
	rtemp396 = ifft(Nx,Ny,Nz,dV,ktemp211);

	ktemp211.free(); // KSpace
	Vector rtemp397(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp397[i] = rtemp396[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp398(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp398 = fft(Nx,Ny,Nz,dV,rtemp397);

	rtemp397.free(); // Realspace
	{
		const int i = 0;
		ktemp398[0] = R*R*ktemp398[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp398[i] = std::complex<double>(ktemp398[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp398[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp400(Nx*Ny*Nz); // RS
	rtemp400 = ifft(Nx,Ny,Nz,dV,ktemp398);

	ktemp398.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp400[i] = rtemp393[i] + 198.49748371470918*rtemp400[i];
	}

	rtemp393.free(); // Realspace
	{
		const int i = 0;
		ktemp220[0] = -2.0*R*ktemp220[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp220[i] = std::complex<double>(ktemp220[i].real()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)),
				ktemp220[i].imag()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)));
	}

	Vector rtemp403(Nx*Ny*Nz); // RS
	rtemp403 = ifft(Nx,Ny,Nz,dV,ktemp220);

	ktemp220.free(); // KSpace
	Vector rtemp404(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp404[i] = rtemp403[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp405(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp405 = fft(Nx,Ny,Nz,dV,rtemp404);

	rtemp404.free(); // Realspace
	{
		const int i = 0;
		ktemp405[0] = R*R*ktemp405[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp405[i] = std::complex<double>(ktemp405[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp405[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp407(Nx*Ny*Nz); // RS
	rtemp407 = ifft(Nx,Ny,Nz,dV,ktemp405);

	ktemp405.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp407[i] = rtemp400[i] - 56.21726666860498*rtemp407[i];
	}

	rtemp400.free(); // Realspace
	{
		const int i = 0;
		ktemp25[0] = -2.0*R*ktemp25[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp25[i] = std::complex<double>(ktemp25[i].real()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)),
				ktemp25[i].imag()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)));
	}

	Vector rtemp410(Nx*Ny*Nz); // RS
	rtemp410 = ifft(Nx,Ny,Nz,dV,ktemp25);

	ktemp25.free(); // KSpace
	Vector rtemp411(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp411[i] = rtemp410[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp412(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp412 = fft(Nx,Ny,Nz,dV,rtemp411);

	rtemp411.free(); // Realspace
	{
		const int i = 0;
		ktemp412[0] = R*R*ktemp412[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp412[i] = std::complex<double>(ktemp412[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp412[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp414(Nx*Ny*Nz); // RS
	rtemp414 = ifft(Nx,Ny,Nz,dV,ktemp412);

	ktemp412.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp414[i] = rtemp407[i] + 16.344064888203977*rtemp414[i];
	}

	rtemp407.free(); // Realspace
	{
		const int i = 0;
		ktemp36[0] = -2.0*R*ktemp36[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp36[i] = std::complex<double>(ktemp36[i].real()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)),
				ktemp36[i].imag()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)));
	}

	Vector rtemp417(Nx*Ny*Nz); // RS
	rtemp417 = ifft(Nx,Ny,Nz,dV,ktemp36);

	ktemp36.free(); // KSpace
	Vector rtemp418(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp418[i] = rtemp417[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp419(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp419 = fft(Nx,Ny,Nz,dV,rtemp418);

	rtemp418.free(); // Realspace
	{
		const int i = 0;
		ktemp419[0] = R*R*ktemp419[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp419[i] = std::complex<double>(ktemp419[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp419[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp421(Nx*Ny*Nz); // RS
	rtemp421 = ifft(Nx,Ny,Nz,dV,ktemp419);

	ktemp419.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp421[i] = rtemp414[i] - 177.10018137314742*rtemp421[i];
	}

	rtemp414.free(); // Realspace
	{
		const int i = 0;
		ktemp47[0] = -2.0*R*ktemp47[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp47[i] = std::complex<double>(ktemp47[i].real()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)),
				ktemp47[i].imag()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)));
	}

	Vector rtemp424(Nx*Ny*Nz); // RS
	rtemp424 = ifft(Nx,Ny,Nz,dV,ktemp47);

	ktemp47.free(); // KSpace
	Vector rtemp425(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp425[i] = rtemp424[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp426(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp426 = fft(Nx,Ny,Nz,dV,rtemp425);

	rtemp425.free(); // Realspace
	{
		const int i = 0;
		ktemp426[0] = R*R*ktemp426[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp426[i] = std::complex<double>(ktemp426[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp426[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp428(Nx*Ny*Nz); // RS
	rtemp428 = ifft(Nx,Ny,Nz,dV,ktemp426);

	ktemp426.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp428[i] = rtemp421[i] - 138.49028895608586*rtemp428[i];
	}

	rtemp421.free(); // Realspace
	{
		const int i = 0;
		ktemp58[0] = -2.0*R*ktemp58[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp58[i] = std::complex<double>(ktemp58[i].real()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)),
				ktemp58[i].imag()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)));
	}

	Vector rtemp431(Nx*Ny*Nz); // RS
	rtemp431 = ifft(Nx,Ny,Nz,dV,ktemp58);

	ktemp58.free(); // KSpace
	Vector rtemp432(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp432[i] = rtemp431[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp433(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp433 = fft(Nx,Ny,Nz,dV,rtemp432);

	rtemp432.free(); // Realspace
	{
		const int i = 0;
		ktemp433[0] = R*R*ktemp433[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp433[i] = std::complex<double>(ktemp433[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp433[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp435(Nx*Ny*Nz); // RS
	rtemp435 = ifft(Nx,Ny,Nz,dV,ktemp433);

	ktemp433.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp435[i] = rtemp428[i] + 78.95683520871486*rtemp435[i];
	}

	rtemp428.free(); // Realspace
	Vector rtemp437(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp437[i] = 7.957747154594767e-2*dV*kT*rtemp67[i]/R/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp438(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp438 = fft(Nx,Ny,Nz,dV,rtemp437);

	rtemp437.free(); // Realspace
	{
		const int i = 0;
		ktemp438[0] = R*R*ktemp438[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp438[i] = std::complex<double>(ktemp438[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp438[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp440(Nx*Ny*Nz); // RS
	rtemp440 = ifft(Nx,Ny,Nz,dV,ktemp438);

	ktemp438.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp440[i] = rtemp435[i] + 12.566370614359172*rtemp440[i];
	}

	rtemp435.free(); // Realspace
	Vector rtemp442(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp442[i] = dV*kT*rtemp67[i]*rtemp67[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp443(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp443 = fft(Nx,Ny,Nz,dV,rtemp442);

	rtemp442.free(); // Realspace
	{
		const int i = 0;
		ktemp443[0] = R*R*ktemp443[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp443[i] = std::complex<double>(ktemp443[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp443[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp445(Nx*Ny*Nz); // RS
	rtemp445 = ifft(Nx,Ny,Nz,dV,ktemp443);

	ktemp443.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp445[i] = rtemp440[i] + 0.22222222222222224*rtemp445[i];
	}

	rtemp440.free(); // Realspace
	Vector rtemp447(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp447[i] = dV*kT*(n3[i] + t1*t1*log(t1))*(rtemp67[i]*rtemp67[i] - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i])/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp448(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp448 = fft(Nx,Ny,Nz,dV,rtemp447);

	rtemp447.free(); // Realspace
	{
		const int i = 0;
		ktemp448[0] = R*R*ktemp448[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp448[i] = std::complex<double>(ktemp448[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp448[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp450(Nx*Ny*Nz); // RS
	rtemp450 = ifft(Nx,Ny,Nz,dV,ktemp448);

	ktemp448.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp450[i] = rtemp445[i] + 0.11111111111111112*rtemp450[i];
	}

	rtemp445.free(); // Realspace
	Vector rtemp452(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp452[i] = rtemp10[i]*rtemp116[i]*n[i]/(rtemp12[i]*rtemp12[i]);
	}

	ComplexVector ktemp453(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp453 = fft(Nx,Ny,Nz,dV,rtemp452);

	{
		const int i = 0;
		ktemp453[0] = 2.0*R*R*ktemp453[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp453[i] = std::complex<double>(ktemp453[i].real()*R*sin(2.0*R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp453[i].imag()*R*sin(2.0*R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp455(Nx*Ny*Nz); // RS
	rtemp455 = ifft(Nx,Ny,Nz,dV,ktemp453);

	ktemp453.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp455[i] = rtemp450[i] - 0.31582734083485947*rtemp455[i];
	}

	rtemp450.free(); // Realspace
	Vector rtemp457(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp457[i] = rtemp116[i]*rtemp23[i]*n[i]/(rtemp12[i]*rtemp12[i]);
	}

	ComplexVector ktemp458(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp458 = fft(Nx,Ny,Nz,dV,rtemp457);

	{
		const int i = 0;
		ktemp458[0] = 2.0*R*R*ktemp458[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp458[i] = std::complex<double>(ktemp458[i].real()*R*sin(2.0*R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp458[i].imag()*R*sin(2.0*R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp460(Nx*Ny*Nz); // RS
	rtemp460 = ifft(Nx,Ny,Nz,dV,ktemp458);

	ktemp458.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp460[i] = rtemp455[i] + 32.688129776407955*rtemp460[i];
	}

	rtemp455.free(); // Realspace
	Vector rtemp462(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp462[i] = rtemp116[i]*rtemp34[i]*n[i]/(rtemp12[i]*rtemp12[i]);
	}

	ComplexVector ktemp463(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp463 = fft(Nx,Ny,Nz,dV,rtemp462);

	{
		const int i = 0;
		ktemp463[0] = 2.0*R*R*ktemp463[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp463[i] = std::complex<double>(ktemp463[i].real()*R*sin(2.0*R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp463[i].imag()*R*sin(2.0*R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp465(Nx*Ny*Nz); // RS
	rtemp465 = ifft(Nx,Ny,Nz,dV,ktemp463);

	ktemp463.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp465[i] = rtemp460[i] - 354.20036274629484*rtemp465[i];
	}

	rtemp460.free(); // Realspace
	Vector rtemp467(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp467[i] = rtemp116[i]*rtemp45[i]*n[i]/(rtemp12[i]*rtemp12[i]);
	}

	ComplexVector ktemp468(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp468 = fft(Nx,Ny,Nz,dV,rtemp467);

	{
		const int i = 0;
		ktemp468[0] = 2.0*R*R*ktemp468[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp468[i] = std::complex<double>(ktemp468[i].real()*R*sin(2.0*R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp468[i].imag()*R*sin(2.0*R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp470(Nx*Ny*Nz); // RS
	rtemp470 = ifft(Nx,Ny,Nz,dV,ktemp468);

	ktemp468.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp470[i] = rtemp465[i] - 276.9805779121717*rtemp470[i];
	}

	rtemp465.free(); // Realspace
	Vector rtemp472(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp472[i] = rtemp116[i]*rtemp56[i]*n[i]/(rtemp12[i]*rtemp12[i]);
	}

	ComplexVector ktemp473(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp473 = fft(Nx,Ny,Nz,dV,rtemp472);

	rtemp472.free(); // Realspace
	{
		const int i = 0;
		ktemp473[0] = 2.0*R*R*ktemp473[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp473[i] = std::complex<double>(ktemp473[i].real()*R*sin(2.0*R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp473[i].imag()*R*sin(2.0*R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp475(Nx*Ny*Nz); // RS
	rtemp475 = ifft(Nx,Ny,Nz,dV,ktemp473);

	ktemp473.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp475[i] = rtemp470[i] + 157.91367041742973*rtemp475[i];
	}

	rtemp470.free(); // Realspace
	ComplexVector ktemp477(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp477[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		ktemp477[i] = std::complex<double>(-1.0*ktemp122[i].imag()*k_i[0],
				ktemp122[i].real()*k_i[0]);
	}

	Vector rtemp478(Nx*Ny*Nz); // RS
	rtemp478 = ifft(Nx,Ny,Nz,dV,ktemp477);

	ktemp477.free(); // KSpace
	Vector rtemp479(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp479[i] = 2.0*rtemp478[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp480(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp480 = fft(Nx,Ny,Nz,dV,rtemp479);

	rtemp479.free(); // Realspace
	{
		const int i = 0;
		ktemp480[0] = R*R*ktemp480[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp480[i] = std::complex<double>(ktemp480[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp480[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp482(Nx*Ny*Nz); // RS
	rtemp482 = ifft(Nx,Ny,Nz,dV,ktemp480);

	ktemp480.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp482[i] = rtemp475[i] + 8.632613982819493*rtemp482[i];
	}

	rtemp475.free(); // Realspace
	ComplexVector ktemp484(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp484[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		ktemp484[i] = std::complex<double>(-1.0*ktemp131[i].imag()*k_i[0],
				ktemp131[i].real()*k_i[0]);
	}

	Vector rtemp485(Nx*Ny*Nz); // RS
	rtemp485 = ifft(Nx,Ny,Nz,dV,ktemp484);

	ktemp484.free(); // KSpace
	Vector rtemp486(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp486[i] = 2.0*rtemp485[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp487(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp487 = fft(Nx,Ny,Nz,dV,rtemp486);

	rtemp486.free(); // Realspace
	{
		const int i = 0;
		ktemp487[0] = R*R*ktemp487[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp487[i] = std::complex<double>(ktemp487[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp487[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp489(Nx*Ny*Nz); // RS
	rtemp489 = ifft(Nx,Ny,Nz,dV,ktemp487);

	ktemp487.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp489[i] = rtemp482[i] - 25.582014607623616*rtemp489[i];
	}

	rtemp482.free(); // Realspace
	ComplexVector ktemp491(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp491[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		ktemp491[i] = std::complex<double>(-1.0*ktemp140[i].imag()*k_i[0],
				ktemp140[i].real()*k_i[0]);
	}

	Vector rtemp492(Nx*Ny*Nz); // RS
	rtemp492 = ifft(Nx,Ny,Nz,dV,ktemp491);

	ktemp491.free(); // KSpace
	Vector rtemp493(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp493[i] = 2.0*rtemp492[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp494(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp494 = fft(Nx,Ny,Nz,dV,rtemp493);

	rtemp493.free(); // Realspace
	{
		const int i = 0;
		ktemp494[0] = R*R*ktemp494[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp494[i] = std::complex<double>(ktemp494[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp494[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp496(Nx*Ny*Nz); // RS
	rtemp496 = ifft(Nx,Ny,Nz,dV,ktemp494);

	ktemp494.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp496[i] = rtemp489[i] + 17.05467640508241*rtemp496[i];
	}

	rtemp489.free(); // Realspace
	ComplexVector ktemp498(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp498[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		ktemp498[i] = std::complex<double>(-1.0*ktemp149[i].imag()*k_i[0],
				ktemp149[i].real()*k_i[0]);
	}

	Vector rtemp499(Nx*Ny*Nz); // RS
	rtemp499 = ifft(Nx,Ny,Nz,dV,ktemp498);

	ktemp498.free(); // KSpace
	Vector rtemp500(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp500[i] = 2.0*rtemp499[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp501(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp501 = fft(Nx,Ny,Nz,dV,rtemp500);

	rtemp500.free(); // Realspace
	{
		const int i = 0;
		ktemp501[0] = R*R*ktemp501[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp501[i] = std::complex<double>(ktemp501[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp501[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp503(Nx*Ny*Nz); // RS
	rtemp503 = ifft(Nx,Ny,Nz,dV,ktemp501);

	ktemp501.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp503[i] = rtemp496[i] - 37.47817777906999*rtemp503[i];
	}

	rtemp496.free(); // Realspace
	ComplexVector ktemp505(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp505[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		ktemp505[i] = std::complex<double>(-1.0*ktemp158[i].imag()*k_i[0],
				ktemp158[i].real()*k_i[0]);
	}

	Vector rtemp506(Nx*Ny*Nz); // RS
	rtemp506 = ifft(Nx,Ny,Nz,dV,ktemp505);

	ktemp505.free(); // KSpace
	Vector rtemp507(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp507[i] = 2.0*rtemp506[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp508(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp508 = fft(Nx,Ny,Nz,dV,rtemp507);

	rtemp507.free(); // Realspace
	{
		const int i = 0;
		ktemp508[0] = R*R*ktemp508[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp508[i] = std::complex<double>(ktemp508[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp508[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp510(Nx*Ny*Nz); // RS
	rtemp510 = ifft(Nx,Ny,Nz,dV,ktemp508);

	ktemp508.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp510[i] = rtemp503[i] + 154.1237423274114*rtemp510[i];
	}

	rtemp503.free(); // Realspace
	ComplexVector ktemp512(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp512[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		ktemp512[i] = std::complex<double>(-1.0*ktemp15[i].imag()*k_i[0],
				ktemp15[i].real()*k_i[0]);
	}

	Vector rtemp513(Nx*Ny*Nz); // RS
	rtemp513 = ifft(Nx,Ny,Nz,dV,ktemp512);

	ktemp512.free(); // KSpace
	Vector rtemp514(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp514[i] = 2.0*rtemp513[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp515(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp515 = fft(Nx,Ny,Nz,dV,rtemp514);

	rtemp514.free(); // Realspace
	{
		const int i = 0;
		ktemp515[0] = R*R*ktemp515[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp515[i] = std::complex<double>(ktemp515[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp515[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp517(Nx*Ny*Nz); // RS
	rtemp517 = ifft(Nx,Ny,Nz,dV,ktemp515);

	ktemp515.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp517[i] = rtemp510[i] + 5.263789013914324e-2*rtemp517[i];
	}

	rtemp510.free(); // Realspace
	ComplexVector ktemp519(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp519[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		ktemp519[i] = std::complex<double>(-1.0*ktemp167[i].imag()*k_i[0],
				ktemp167[i].real()*k_i[0]);
	}

	Vector rtemp520(Nx*Ny*Nz); // RS
	rtemp520 = ifft(Nx,Ny,Nz,dV,ktemp519);

	ktemp519.free(); // KSpace
	Vector rtemp521(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp521[i] = 2.0*rtemp520[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp522(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp522 = fft(Nx,Ny,Nz,dV,rtemp521);

	rtemp521.free(); // Realspace
	{
		const int i = 0;
		ktemp522[0] = R*R*ktemp522[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp522[i] = std::complex<double>(ktemp522[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp522[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp524(Nx*Ny*Nz); // RS
	rtemp524 = ifft(Nx,Ny,Nz,dV,ktemp522);

	ktemp522.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp524[i] = rtemp517[i] - 110.11846617108766*rtemp524[i];
	}

	rtemp517.free(); // Realspace
	ComplexVector ktemp526(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp526[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		ktemp526[i] = std::complex<double>(-1.0*ktemp176[i].imag()*k_i[0],
				ktemp176[i].real()*k_i[0]);
	}

	Vector rtemp527(Nx*Ny*Nz); // RS
	rtemp527 = ifft(Nx,Ny,Nz,dV,ktemp526);

	ktemp526.free(); // KSpace
	Vector rtemp528(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp528[i] = 2.0*rtemp527[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp529(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp529 = fft(Nx,Ny,Nz,dV,rtemp528);

	rtemp528.free(); // Realspace
	{
		const int i = 0;
		ktemp529[0] = R*R*ktemp529[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp529[i] = std::complex<double>(ktemp529[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp529[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp531(Nx*Ny*Nz); // RS
	rtemp531 = ifft(Nx,Ny,Nz,dV,ktemp529);

	ktemp529.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp531[i] = rtemp524[i] - 231.76463028264766*rtemp531[i];
	}

	rtemp524.free(); // Realspace
	ComplexVector ktemp533(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp533[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		ktemp533[i] = std::complex<double>(-1.0*ktemp185[i].imag()*k_i[0],
				ktemp185[i].real()*k_i[0]);
	}

	Vector rtemp534(Nx*Ny*Nz); // RS
	rtemp534 = ifft(Nx,Ny,Nz,dV,ktemp533);

	ktemp533.free(); // KSpace
	Vector rtemp535(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp535[i] = 2.0*rtemp534[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp536(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp536 = fft(Nx,Ny,Nz,dV,rtemp535);

	rtemp535.free(); // Realspace
	{
		const int i = 0;
		ktemp536[0] = R*R*ktemp536[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp536[i] = std::complex<double>(ktemp536[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp536[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp538(Nx*Ny*Nz); // RS
	rtemp538 = ifft(Nx,Ny,Nz,dV,ktemp536);

	ktemp536.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp538[i] = rtemp531[i] + 195.81295131761286*rtemp538[i];
	}

	rtemp531.free(); // Realspace
	ComplexVector ktemp540(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp540[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		ktemp540[i] = std::complex<double>(-1.0*ktemp194[i].imag()*k_i[0],
				ktemp194[i].real()*k_i[0]);
	}

	Vector rtemp541(Nx*Ny*Nz); // RS
	rtemp541 = ifft(Nx,Ny,Nz,dV,ktemp540);

	ktemp540.free(); // KSpace
	Vector rtemp542(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp542[i] = 2.0*rtemp541[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp543(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp543 = fft(Nx,Ny,Nz,dV,rtemp542);

	rtemp542.free(); // Realspace
	{
		const int i = 0;
		ktemp543[0] = R*R*ktemp543[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp543[i] = std::complex<double>(ktemp543[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp543[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp545(Nx*Ny*Nz); // RS
	rtemp545 = ifft(Nx,Ny,Nz,dV,ktemp543);

	ktemp543.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp545[i] = rtemp538[i] - 38.21510824101799*rtemp545[i];
	}

	rtemp538.free(); // Realspace
	ComplexVector ktemp547(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp547[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		ktemp547[i] = std::complex<double>(-1.0*ktemp203[i].imag()*k_i[0],
				ktemp203[i].real()*k_i[0]);
	}

	Vector rtemp548(Nx*Ny*Nz); // RS
	rtemp548 = ifft(Nx,Ny,Nz,dV,ktemp547);

	ktemp547.free(); // KSpace
	Vector rtemp549(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp549[i] = 2.0*rtemp548[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp550(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp550 = fft(Nx,Ny,Nz,dV,rtemp549);

	rtemp549.free(); // Realspace
	{
		const int i = 0;
		ktemp550[0] = R*R*ktemp550[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp550[i] = std::complex<double>(ktemp550[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp550[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp552(Nx*Ny*Nz); // RS
	rtemp552 = ifft(Nx,Ny,Nz,dV,ktemp550);

	ktemp550.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp552[i] = rtemp545[i] - 1.4212230337568674*rtemp552[i];
	}

	rtemp545.free(); // Realspace
	ComplexVector ktemp554(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp554[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		ktemp554[i] = std::complex<double>(-1.0*ktemp212[i].imag()*k_i[0],
				ktemp212[i].real()*k_i[0]);
	}

	Vector rtemp555(Nx*Ny*Nz); // RS
	rtemp555 = ifft(Nx,Ny,Nz,dV,ktemp554);

	ktemp554.free(); // KSpace
	Vector rtemp556(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp556[i] = 2.0*rtemp555[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp557(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp557 = fft(Nx,Ny,Nz,dV,rtemp556);

	rtemp556.free(); // Realspace
	{
		const int i = 0;
		ktemp557[0] = R*R*ktemp557[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp557[i] = std::complex<double>(ktemp557[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp557[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp559(Nx*Ny*Nz); // RS
	rtemp559 = ifft(Nx,Ny,Nz,dV,ktemp557);

	ktemp557.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp559[i] = rtemp552[i] - 66.16582790490305*rtemp559[i];
	}

	rtemp552.free(); // Realspace
	ComplexVector ktemp561(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp561[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		ktemp561[i] = std::complex<double>(-1.0*ktemp221[i].imag()*k_i[0],
				ktemp221[i].real()*k_i[0]);
	}

	Vector rtemp562(Nx*Ny*Nz); // RS
	rtemp562 = ifft(Nx,Ny,Nz,dV,ktemp561);

	ktemp561.free(); // KSpace
	Vector rtemp563(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp563[i] = 2.0*rtemp562[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp564(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp564 = fft(Nx,Ny,Nz,dV,rtemp563);

	rtemp563.free(); // Realspace
	{
		const int i = 0;
		ktemp564[0] = R*R*ktemp564[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp564[i] = std::complex<double>(ktemp564[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp564[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp566(Nx*Ny*Nz); // RS
	rtemp566 = ifft(Nx,Ny,Nz,dV,ktemp564);

	ktemp564.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp566[i] = rtemp559[i] + 18.739088889534994*rtemp566[i];
	}

	rtemp559.free(); // Realspace
	ComplexVector ktemp568(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp568[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		ktemp568[i] = std::complex<double>(-1.0*ktemp26[i].imag()*k_i[0],
				ktemp26[i].real()*k_i[0]);
	}

	Vector rtemp569(Nx*Ny*Nz); // RS
	rtemp569 = ifft(Nx,Ny,Nz,dV,ktemp568);

	ktemp568.free(); // KSpace
	Vector rtemp570(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp570[i] = 2.0*rtemp569[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp571(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp571 = fft(Nx,Ny,Nz,dV,rtemp570);

	rtemp570.free(); // Realspace
	{
		const int i = 0;
		ktemp571[0] = R*R*ktemp571[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp571[i] = std::complex<double>(ktemp571[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp571[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp573(Nx*Ny*Nz); // RS
	rtemp573 = ifft(Nx,Ny,Nz,dV,ktemp571);

	ktemp571.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp573[i] = rtemp566[i] - 5.448021629401325*rtemp573[i];
	}

	rtemp566.free(); // Realspace
	ComplexVector ktemp575(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp575[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		ktemp575[i] = std::complex<double>(-1.0*ktemp37[i].imag()*k_i[0],
				ktemp37[i].real()*k_i[0]);
	}

	Vector rtemp576(Nx*Ny*Nz); // RS
	rtemp576 = ifft(Nx,Ny,Nz,dV,ktemp575);

	ktemp575.free(); // KSpace
	Vector rtemp577(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp577[i] = 2.0*rtemp576[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp578(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp578 = fft(Nx,Ny,Nz,dV,rtemp577);

	rtemp577.free(); // Realspace
	{
		const int i = 0;
		ktemp578[0] = R*R*ktemp578[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp578[i] = std::complex<double>(ktemp578[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp578[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp580(Nx*Ny*Nz); // RS
	rtemp580 = ifft(Nx,Ny,Nz,dV,ktemp578);

	ktemp578.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp580[i] = rtemp573[i] + 59.033393791049136*rtemp580[i];
	}

	rtemp573.free(); // Realspace
	ComplexVector ktemp582(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp582[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		ktemp582[i] = std::complex<double>(-1.0*ktemp48[i].imag()*k_i[0],
				ktemp48[i].real()*k_i[0]);
	}

	Vector rtemp583(Nx*Ny*Nz); // RS
	rtemp583 = ifft(Nx,Ny,Nz,dV,ktemp582);

	ktemp582.free(); // KSpace
	Vector rtemp584(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp584[i] = 2.0*rtemp583[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp585(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp585 = fft(Nx,Ny,Nz,dV,rtemp584);

	rtemp584.free(); // Realspace
	{
		const int i = 0;
		ktemp585[0] = R*R*ktemp585[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp585[i] = std::complex<double>(ktemp585[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp585[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp587(Nx*Ny*Nz); // RS
	rtemp587 = ifft(Nx,Ny,Nz,dV,ktemp585);

	ktemp585.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp587[i] = rtemp580[i] + 46.16342965202862*rtemp587[i];
	}

	rtemp580.free(); // Realspace
	ComplexVector ktemp589(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp589[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		ktemp589[i] = std::complex<double>(-1.0*ktemp59[i].imag()*k_i[0],
				ktemp59[i].real()*k_i[0]);
	}

	Vector rtemp590(Nx*Ny*Nz); // RS
	rtemp590 = ifft(Nx,Ny,Nz,dV,ktemp589);

	ktemp589.free(); // KSpace
	Vector rtemp591(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp591[i] = 2.0*rtemp590[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp592(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp592 = fft(Nx,Ny,Nz,dV,rtemp591);

	rtemp591.free(); // Realspace
	{
		const int i = 0;
		ktemp592[0] = R*R*ktemp592[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp592[i] = std::complex<double>(ktemp592[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp592[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp594(Nx*Ny*Nz); // RS
	rtemp594 = ifft(Nx,Ny,Nz,dV,ktemp592);

	ktemp592.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp594[i] = rtemp587[i] - 26.31894506957162*rtemp594[i];
	}

	rtemp587.free(); // Realspace
	ComplexVector ktemp596(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp596[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		ktemp596[i] = std::complex<double>(-1.0*ktemp122[i].imag()*k_i[1],
				ktemp122[i].real()*k_i[1]);
	}

	Vector rtemp597(Nx*Ny*Nz); // RS
	rtemp597 = ifft(Nx,Ny,Nz,dV,ktemp596);

	ktemp596.free(); // KSpace
	Vector rtemp598(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp598[i] = 2.0*rtemp597[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp599(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp599 = fft(Nx,Ny,Nz,dV,rtemp598);

	rtemp598.free(); // Realspace
	{
		const int i = 0;
		ktemp599[0] = R*R*ktemp599[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp599[i] = std::complex<double>(ktemp599[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp599[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp601(Nx*Ny*Nz); // RS
	rtemp601 = ifft(Nx,Ny,Nz,dV,ktemp599);

	ktemp599.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp601[i] = rtemp594[i] + 8.632613982819493*rtemp601[i];
	}

	rtemp594.free(); // Realspace
	ComplexVector ktemp603(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp603[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		ktemp603[i] = std::complex<double>(-1.0*ktemp131[i].imag()*k_i[1],
				ktemp131[i].real()*k_i[1]);
	}

	Vector rtemp604(Nx*Ny*Nz); // RS
	rtemp604 = ifft(Nx,Ny,Nz,dV,ktemp603);

	ktemp603.free(); // KSpace
	Vector rtemp605(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp605[i] = 2.0*rtemp604[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp606(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp606 = fft(Nx,Ny,Nz,dV,rtemp605);

	rtemp605.free(); // Realspace
	{
		const int i = 0;
		ktemp606[0] = R*R*ktemp606[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp606[i] = std::complex<double>(ktemp606[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp606[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp608(Nx*Ny*Nz); // RS
	rtemp608 = ifft(Nx,Ny,Nz,dV,ktemp606);

	ktemp606.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp608[i] = rtemp601[i] - 25.582014607623616*rtemp608[i];
	}

	rtemp601.free(); // Realspace
	ComplexVector ktemp610(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp610[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		ktemp610[i] = std::complex<double>(-1.0*ktemp140[i].imag()*k_i[1],
				ktemp140[i].real()*k_i[1]);
	}

	Vector rtemp611(Nx*Ny*Nz); // RS
	rtemp611 = ifft(Nx,Ny,Nz,dV,ktemp610);

	ktemp610.free(); // KSpace
	Vector rtemp612(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp612[i] = 2.0*rtemp611[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp613(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp613 = fft(Nx,Ny,Nz,dV,rtemp612);

	rtemp612.free(); // Realspace
	{
		const int i = 0;
		ktemp613[0] = R*R*ktemp613[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp613[i] = std::complex<double>(ktemp613[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp613[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp615(Nx*Ny*Nz); // RS
	rtemp615 = ifft(Nx,Ny,Nz,dV,ktemp613);

	ktemp613.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp615[i] = rtemp608[i] + 17.05467640508241*rtemp615[i];
	}

	rtemp608.free(); // Realspace
	ComplexVector ktemp617(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp617[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		ktemp617[i] = std::complex<double>(-1.0*ktemp149[i].imag()*k_i[1],
				ktemp149[i].real()*k_i[1]);
	}

	Vector rtemp618(Nx*Ny*Nz); // RS
	rtemp618 = ifft(Nx,Ny,Nz,dV,ktemp617);

	ktemp617.free(); // KSpace
	Vector rtemp619(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp619[i] = 2.0*rtemp618[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp620(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp620 = fft(Nx,Ny,Nz,dV,rtemp619);

	rtemp619.free(); // Realspace
	{
		const int i = 0;
		ktemp620[0] = R*R*ktemp620[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp620[i] = std::complex<double>(ktemp620[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp620[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp622(Nx*Ny*Nz); // RS
	rtemp622 = ifft(Nx,Ny,Nz,dV,ktemp620);

	ktemp620.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp622[i] = rtemp615[i] - 37.47817777906999*rtemp622[i];
	}

	rtemp615.free(); // Realspace
	ComplexVector ktemp624(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp624[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		ktemp624[i] = std::complex<double>(-1.0*ktemp158[i].imag()*k_i[1],
				ktemp158[i].real()*k_i[1]);
	}

	Vector rtemp625(Nx*Ny*Nz); // RS
	rtemp625 = ifft(Nx,Ny,Nz,dV,ktemp624);

	ktemp624.free(); // KSpace
	Vector rtemp626(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp626[i] = 2.0*rtemp625[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp627(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp627 = fft(Nx,Ny,Nz,dV,rtemp626);

	rtemp626.free(); // Realspace
	{
		const int i = 0;
		ktemp627[0] = R*R*ktemp627[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp627[i] = std::complex<double>(ktemp627[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp627[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp629(Nx*Ny*Nz); // RS
	rtemp629 = ifft(Nx,Ny,Nz,dV,ktemp627);

	ktemp627.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp629[i] = rtemp622[i] + 154.1237423274114*rtemp629[i];
	}

	rtemp622.free(); // Realspace
	ComplexVector ktemp631(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp631[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		ktemp631[i] = std::complex<double>(-1.0*ktemp15[i].imag()*k_i[1],
				ktemp15[i].real()*k_i[1]);
	}

	Vector rtemp632(Nx*Ny*Nz); // RS
	rtemp632 = ifft(Nx,Ny,Nz,dV,ktemp631);

	ktemp631.free(); // KSpace
	Vector rtemp633(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp633[i] = 2.0*rtemp632[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp634(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp634 = fft(Nx,Ny,Nz,dV,rtemp633);

	rtemp633.free(); // Realspace
	{
		const int i = 0;
		ktemp634[0] = R*R*ktemp634[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp634[i] = std::complex<double>(ktemp634[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp634[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp636(Nx*Ny*Nz); // RS
	rtemp636 = ifft(Nx,Ny,Nz,dV,ktemp634);

	ktemp634.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp636[i] = rtemp629[i] + 5.263789013914324e-2*rtemp636[i];
	}

	rtemp629.free(); // Realspace
	ComplexVector ktemp638(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp638[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		ktemp638[i] = std::complex<double>(-1.0*ktemp167[i].imag()*k_i[1],
				ktemp167[i].real()*k_i[1]);
	}

	Vector rtemp639(Nx*Ny*Nz); // RS
	rtemp639 = ifft(Nx,Ny,Nz,dV,ktemp638);

	ktemp638.free(); // KSpace
	Vector rtemp640(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp640[i] = 2.0*rtemp639[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp641(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp641 = fft(Nx,Ny,Nz,dV,rtemp640);

	rtemp640.free(); // Realspace
	{
		const int i = 0;
		ktemp641[0] = R*R*ktemp641[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp641[i] = std::complex<double>(ktemp641[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp641[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp643(Nx*Ny*Nz); // RS
	rtemp643 = ifft(Nx,Ny,Nz,dV,ktemp641);

	ktemp641.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp643[i] = rtemp636[i] - 110.11846617108766*rtemp643[i];
	}

	rtemp636.free(); // Realspace
	ComplexVector ktemp645(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp645[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		ktemp645[i] = std::complex<double>(-1.0*ktemp176[i].imag()*k_i[1],
				ktemp176[i].real()*k_i[1]);
	}

	Vector rtemp646(Nx*Ny*Nz); // RS
	rtemp646 = ifft(Nx,Ny,Nz,dV,ktemp645);

	ktemp645.free(); // KSpace
	Vector rtemp647(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp647[i] = 2.0*rtemp646[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp648(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp648 = fft(Nx,Ny,Nz,dV,rtemp647);

	rtemp647.free(); // Realspace
	{
		const int i = 0;
		ktemp648[0] = R*R*ktemp648[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp648[i] = std::complex<double>(ktemp648[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp648[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp650(Nx*Ny*Nz); // RS
	rtemp650 = ifft(Nx,Ny,Nz,dV,ktemp648);

	ktemp648.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp650[i] = rtemp643[i] - 231.76463028264766*rtemp650[i];
	}

	rtemp643.free(); // Realspace
	ComplexVector ktemp652(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp652[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		ktemp652[i] = std::complex<double>(-1.0*ktemp185[i].imag()*k_i[1],
				ktemp185[i].real()*k_i[1]);
	}

	Vector rtemp653(Nx*Ny*Nz); // RS
	rtemp653 = ifft(Nx,Ny,Nz,dV,ktemp652);

	ktemp652.free(); // KSpace
	Vector rtemp654(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp654[i] = 2.0*rtemp653[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp655(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp655 = fft(Nx,Ny,Nz,dV,rtemp654);

	rtemp654.free(); // Realspace
	{
		const int i = 0;
		ktemp655[0] = R*R*ktemp655[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp655[i] = std::complex<double>(ktemp655[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp655[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp657(Nx*Ny*Nz); // RS
	rtemp657 = ifft(Nx,Ny,Nz,dV,ktemp655);

	ktemp655.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp657[i] = rtemp650[i] + 195.81295131761286*rtemp657[i];
	}

	rtemp650.free(); // Realspace
	ComplexVector ktemp659(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp659[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		ktemp659[i] = std::complex<double>(-1.0*ktemp194[i].imag()*k_i[1],
				ktemp194[i].real()*k_i[1]);
	}

	Vector rtemp660(Nx*Ny*Nz); // RS
	rtemp660 = ifft(Nx,Ny,Nz,dV,ktemp659);

	ktemp659.free(); // KSpace
	Vector rtemp661(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp661[i] = 2.0*rtemp660[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp662(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp662 = fft(Nx,Ny,Nz,dV,rtemp661);

	rtemp661.free(); // Realspace
	{
		const int i = 0;
		ktemp662[0] = R*R*ktemp662[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp662[i] = std::complex<double>(ktemp662[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp662[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp664(Nx*Ny*Nz); // RS
	rtemp664 = ifft(Nx,Ny,Nz,dV,ktemp662);

	ktemp662.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp664[i] = rtemp657[i] - 38.21510824101799*rtemp664[i];
	}

	rtemp657.free(); // Realspace
	ComplexVector ktemp666(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp666[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		ktemp666[i] = std::complex<double>(-1.0*ktemp203[i].imag()*k_i[1],
				ktemp203[i].real()*k_i[1]);
	}

	Vector rtemp667(Nx*Ny*Nz); // RS
	rtemp667 = ifft(Nx,Ny,Nz,dV,ktemp666);

	ktemp666.free(); // KSpace
	Vector rtemp668(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp668[i] = 2.0*rtemp667[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp669(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp669 = fft(Nx,Ny,Nz,dV,rtemp668);

	rtemp668.free(); // Realspace
	{
		const int i = 0;
		ktemp669[0] = R*R*ktemp669[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp669[i] = std::complex<double>(ktemp669[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp669[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp671(Nx*Ny*Nz); // RS
	rtemp671 = ifft(Nx,Ny,Nz,dV,ktemp669);

	ktemp669.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp671[i] = rtemp664[i] - 1.4212230337568674*rtemp671[i];
	}

	rtemp664.free(); // Realspace
	ComplexVector ktemp673(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp673[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		ktemp673[i] = std::complex<double>(-1.0*ktemp212[i].imag()*k_i[1],
				ktemp212[i].real()*k_i[1]);
	}

	Vector rtemp674(Nx*Ny*Nz); // RS
	rtemp674 = ifft(Nx,Ny,Nz,dV,ktemp673);

	ktemp673.free(); // KSpace
	Vector rtemp675(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp675[i] = 2.0*rtemp674[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp676(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp676 = fft(Nx,Ny,Nz,dV,rtemp675);

	rtemp675.free(); // Realspace
	{
		const int i = 0;
		ktemp676[0] = R*R*ktemp676[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp676[i] = std::complex<double>(ktemp676[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp676[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp678(Nx*Ny*Nz); // RS
	rtemp678 = ifft(Nx,Ny,Nz,dV,ktemp676);

	ktemp676.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp678[i] = rtemp671[i] - 66.16582790490305*rtemp678[i];
	}

	rtemp671.free(); // Realspace
	ComplexVector ktemp680(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp680[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		ktemp680[i] = std::complex<double>(-1.0*ktemp221[i].imag()*k_i[1],
				ktemp221[i].real()*k_i[1]);
	}

	Vector rtemp681(Nx*Ny*Nz); // RS
	rtemp681 = ifft(Nx,Ny,Nz,dV,ktemp680);

	ktemp680.free(); // KSpace
	Vector rtemp682(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp682[i] = 2.0*rtemp681[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp683(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp683 = fft(Nx,Ny,Nz,dV,rtemp682);

	rtemp682.free(); // Realspace
	{
		const int i = 0;
		ktemp683[0] = R*R*ktemp683[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp683[i] = std::complex<double>(ktemp683[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp683[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp685(Nx*Ny*Nz); // RS
	rtemp685 = ifft(Nx,Ny,Nz,dV,ktemp683);

	ktemp683.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp685[i] = rtemp678[i] + 18.739088889534994*rtemp685[i];
	}

	rtemp678.free(); // Realspace
	ComplexVector ktemp687(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp687[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		ktemp687[i] = std::complex<double>(-1.0*ktemp26[i].imag()*k_i[1],
				ktemp26[i].real()*k_i[1]);
	}

	Vector rtemp688(Nx*Ny*Nz); // RS
	rtemp688 = ifft(Nx,Ny,Nz,dV,ktemp687);

	ktemp687.free(); // KSpace
	Vector rtemp689(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp689[i] = 2.0*rtemp688[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp690(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp690 = fft(Nx,Ny,Nz,dV,rtemp689);

	rtemp689.free(); // Realspace
	{
		const int i = 0;
		ktemp690[0] = R*R*ktemp690[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp690[i] = std::complex<double>(ktemp690[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp690[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp692(Nx*Ny*Nz); // RS
	rtemp692 = ifft(Nx,Ny,Nz,dV,ktemp690);

	ktemp690.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp692[i] = rtemp685[i] - 5.448021629401325*rtemp692[i];
	}

	rtemp685.free(); // Realspace
	ComplexVector ktemp694(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp694[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		ktemp694[i] = std::complex<double>(-1.0*ktemp37[i].imag()*k_i[1],
				ktemp37[i].real()*k_i[1]);
	}

	Vector rtemp695(Nx*Ny*Nz); // RS
	rtemp695 = ifft(Nx,Ny,Nz,dV,ktemp694);

	ktemp694.free(); // KSpace
	Vector rtemp696(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp696[i] = 2.0*rtemp695[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp697(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp697 = fft(Nx,Ny,Nz,dV,rtemp696);

	rtemp696.free(); // Realspace
	{
		const int i = 0;
		ktemp697[0] = R*R*ktemp697[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp697[i] = std::complex<double>(ktemp697[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp697[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp699(Nx*Ny*Nz); // RS
	rtemp699 = ifft(Nx,Ny,Nz,dV,ktemp697);

	ktemp697.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp699[i] = rtemp692[i] + 59.033393791049136*rtemp699[i];
	}

	rtemp692.free(); // Realspace
	ComplexVector ktemp701(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp701[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		ktemp701[i] = std::complex<double>(-1.0*ktemp48[i].imag()*k_i[1],
				ktemp48[i].real()*k_i[1]);
	}

	Vector rtemp702(Nx*Ny*Nz); // RS
	rtemp702 = ifft(Nx,Ny,Nz,dV,ktemp701);

	ktemp701.free(); // KSpace
	Vector rtemp703(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp703[i] = 2.0*rtemp702[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp704(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp704 = fft(Nx,Ny,Nz,dV,rtemp703);

	rtemp703.free(); // Realspace
	{
		const int i = 0;
		ktemp704[0] = R*R*ktemp704[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp704[i] = std::complex<double>(ktemp704[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp704[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp706(Nx*Ny*Nz); // RS
	rtemp706 = ifft(Nx,Ny,Nz,dV,ktemp704);

	ktemp704.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp706[i] = rtemp699[i] + 46.16342965202862*rtemp706[i];
	}

	rtemp699.free(); // Realspace
	ComplexVector ktemp708(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp708[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		ktemp708[i] = std::complex<double>(-1.0*ktemp59[i].imag()*k_i[1],
				ktemp59[i].real()*k_i[1]);
	}

	Vector rtemp709(Nx*Ny*Nz); // RS
	rtemp709 = ifft(Nx,Ny,Nz,dV,ktemp708);

	ktemp708.free(); // KSpace
	Vector rtemp710(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp710[i] = 2.0*rtemp709[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp711(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp711 = fft(Nx,Ny,Nz,dV,rtemp710);

	rtemp710.free(); // Realspace
	{
		const int i = 0;
		ktemp711[0] = R*R*ktemp711[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp711[i] = std::complex<double>(ktemp711[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp711[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp713(Nx*Ny*Nz); // RS
	rtemp713 = ifft(Nx,Ny,Nz,dV,ktemp711);

	ktemp711.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp713[i] = rtemp706[i] - 26.31894506957162*rtemp713[i];
	}

	rtemp706.free(); // Realspace
	ktemp122[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		ktemp122[i] = std::complex<double>(-1.0*ktemp122[i].imag()*k_i[2],
				ktemp122[i].real()*k_i[2]);
	}

	Vector rtemp716(Nx*Ny*Nz); // RS
	rtemp716 = ifft(Nx,Ny,Nz,dV,ktemp122);

	ktemp122.free(); // KSpace
	Vector rtemp717(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp717[i] = 2.0*rtemp716[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp718(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp718 = fft(Nx,Ny,Nz,dV,rtemp717);

	rtemp717.free(); // Realspace
	{
		const int i = 0;
		ktemp718[0] = R*R*ktemp718[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp718[i] = std::complex<double>(ktemp718[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp718[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp720(Nx*Ny*Nz); // RS
	rtemp720 = ifft(Nx,Ny,Nz,dV,ktemp718);

	ktemp718.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp720[i] = rtemp713[i] + 8.632613982819493*rtemp720[i];
	}

	rtemp713.free(); // Realspace
	ktemp131[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		ktemp131[i] = std::complex<double>(-1.0*ktemp131[i].imag()*k_i[2],
				ktemp131[i].real()*k_i[2]);
	}

	Vector rtemp723(Nx*Ny*Nz); // RS
	rtemp723 = ifft(Nx,Ny,Nz,dV,ktemp131);

	ktemp131.free(); // KSpace
	Vector rtemp724(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp724[i] = 2.0*rtemp723[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp725(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp725 = fft(Nx,Ny,Nz,dV,rtemp724);

	rtemp724.free(); // Realspace
	{
		const int i = 0;
		ktemp725[0] = R*R*ktemp725[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp725[i] = std::complex<double>(ktemp725[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp725[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp727(Nx*Ny*Nz); // RS
	rtemp727 = ifft(Nx,Ny,Nz,dV,ktemp725);

	ktemp725.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp727[i] = rtemp720[i] - 25.582014607623616*rtemp727[i];
	}

	rtemp720.free(); // Realspace
	ktemp140[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		ktemp140[i] = std::complex<double>(-1.0*ktemp140[i].imag()*k_i[2],
				ktemp140[i].real()*k_i[2]);
	}

	Vector rtemp730(Nx*Ny*Nz); // RS
	rtemp730 = ifft(Nx,Ny,Nz,dV,ktemp140);

	ktemp140.free(); // KSpace
	Vector rtemp731(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp731[i] = 2.0*rtemp730[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp732(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp732 = fft(Nx,Ny,Nz,dV,rtemp731);

	rtemp731.free(); // Realspace
	{
		const int i = 0;
		ktemp732[0] = R*R*ktemp732[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp732[i] = std::complex<double>(ktemp732[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp732[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp734(Nx*Ny*Nz); // RS
	rtemp734 = ifft(Nx,Ny,Nz,dV,ktemp732);

	ktemp732.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp734[i] = rtemp727[i] + 17.05467640508241*rtemp734[i];
	}

	rtemp727.free(); // Realspace
	ktemp149[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		ktemp149[i] = std::complex<double>(-1.0*ktemp149[i].imag()*k_i[2],
				ktemp149[i].real()*k_i[2]);
	}

	Vector rtemp737(Nx*Ny*Nz); // RS
	rtemp737 = ifft(Nx,Ny,Nz,dV,ktemp149);

	ktemp149.free(); // KSpace
	Vector rtemp738(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp738[i] = 2.0*rtemp737[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp739(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp739 = fft(Nx,Ny,Nz,dV,rtemp738);

	rtemp738.free(); // Realspace
	{
		const int i = 0;
		ktemp739[0] = R*R*ktemp739[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp739[i] = std::complex<double>(ktemp739[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp739[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp741(Nx*Ny*Nz); // RS
	rtemp741 = ifft(Nx,Ny,Nz,dV,ktemp739);

	ktemp739.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp741[i] = rtemp734[i] - 37.47817777906999*rtemp741[i];
	}

	rtemp734.free(); // Realspace
	ktemp158[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		ktemp158[i] = std::complex<double>(-1.0*ktemp158[i].imag()*k_i[2],
				ktemp158[i].real()*k_i[2]);
	}

	Vector rtemp744(Nx*Ny*Nz); // RS
	rtemp744 = ifft(Nx,Ny,Nz,dV,ktemp158);

	ktemp158.free(); // KSpace
	Vector rtemp745(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp745[i] = 2.0*rtemp744[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp746(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp746 = fft(Nx,Ny,Nz,dV,rtemp745);

	rtemp745.free(); // Realspace
	{
		const int i = 0;
		ktemp746[0] = R*R*ktemp746[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp746[i] = std::complex<double>(ktemp746[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp746[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp748(Nx*Ny*Nz); // RS
	rtemp748 = ifft(Nx,Ny,Nz,dV,ktemp746);

	ktemp746.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp748[i] = rtemp741[i] + 154.1237423274114*rtemp748[i];
	}

	rtemp741.free(); // Realspace
	ktemp15[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		ktemp15[i] = std::complex<double>(-1.0*ktemp15[i].imag()*k_i[2],
				ktemp15[i].real()*k_i[2]);
	}

	Vector rtemp751(Nx*Ny*Nz); // RS
	rtemp751 = ifft(Nx,Ny,Nz,dV,ktemp15);

	ktemp15.free(); // KSpace
	Vector rtemp752(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp752[i] = 2.0*rtemp751[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp753(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp753 = fft(Nx,Ny,Nz,dV,rtemp752);

	rtemp752.free(); // Realspace
	{
		const int i = 0;
		ktemp753[0] = R*R*ktemp753[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp753[i] = std::complex<double>(ktemp753[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp753[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp755(Nx*Ny*Nz); // RS
	rtemp755 = ifft(Nx,Ny,Nz,dV,ktemp753);

	ktemp753.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp755[i] = rtemp748[i] + 5.263789013914324e-2*rtemp755[i];
	}

	rtemp748.free(); // Realspace
	ktemp167[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		ktemp167[i] = std::complex<double>(-1.0*ktemp167[i].imag()*k_i[2],
				ktemp167[i].real()*k_i[2]);
	}

	Vector rtemp758(Nx*Ny*Nz); // RS
	rtemp758 = ifft(Nx,Ny,Nz,dV,ktemp167);

	ktemp167.free(); // KSpace
	Vector rtemp759(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp759[i] = 2.0*rtemp758[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp760(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp760 = fft(Nx,Ny,Nz,dV,rtemp759);

	rtemp759.free(); // Realspace
	{
		const int i = 0;
		ktemp760[0] = R*R*ktemp760[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp760[i] = std::complex<double>(ktemp760[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp760[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp762(Nx*Ny*Nz); // RS
	rtemp762 = ifft(Nx,Ny,Nz,dV,ktemp760);

	ktemp760.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp762[i] = rtemp755[i] - 110.11846617108766*rtemp762[i];
	}

	rtemp755.free(); // Realspace
	ktemp176[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		ktemp176[i] = std::complex<double>(-1.0*ktemp176[i].imag()*k_i[2],
				ktemp176[i].real()*k_i[2]);
	}

	Vector rtemp765(Nx*Ny*Nz); // RS
	rtemp765 = ifft(Nx,Ny,Nz,dV,ktemp176);

	ktemp176.free(); // KSpace
	Vector rtemp766(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp766[i] = 2.0*rtemp765[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp767(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp767 = fft(Nx,Ny,Nz,dV,rtemp766);

	rtemp766.free(); // Realspace
	{
		const int i = 0;
		ktemp767[0] = R*R*ktemp767[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp767[i] = std::complex<double>(ktemp767[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp767[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp769(Nx*Ny*Nz); // RS
	rtemp769 = ifft(Nx,Ny,Nz,dV,ktemp767);

	ktemp767.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp769[i] = rtemp762[i] - 231.76463028264766*rtemp769[i];
	}

	rtemp762.free(); // Realspace
	ktemp185[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		ktemp185[i] = std::complex<double>(-1.0*ktemp185[i].imag()*k_i[2],
				ktemp185[i].real()*k_i[2]);
	}

	Vector rtemp772(Nx*Ny*Nz); // RS
	rtemp772 = ifft(Nx,Ny,Nz,dV,ktemp185);

	ktemp185.free(); // KSpace
	Vector rtemp773(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp773[i] = 2.0*rtemp772[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp774(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp774 = fft(Nx,Ny,Nz,dV,rtemp773);

	rtemp773.free(); // Realspace
	{
		const int i = 0;
		ktemp774[0] = R*R*ktemp774[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp774[i] = std::complex<double>(ktemp774[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp774[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp776(Nx*Ny*Nz); // RS
	rtemp776 = ifft(Nx,Ny,Nz,dV,ktemp774);

	ktemp774.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp776[i] = rtemp769[i] + 195.81295131761286*rtemp776[i];
	}

	rtemp769.free(); // Realspace
	ktemp194[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		ktemp194[i] = std::complex<double>(-1.0*ktemp194[i].imag()*k_i[2],
				ktemp194[i].real()*k_i[2]);
	}

	Vector rtemp779(Nx*Ny*Nz); // RS
	rtemp779 = ifft(Nx,Ny,Nz,dV,ktemp194);

	ktemp194.free(); // KSpace
	Vector rtemp780(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp780[i] = 2.0*rtemp779[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp781(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp781 = fft(Nx,Ny,Nz,dV,rtemp780);

	rtemp780.free(); // Realspace
	{
		const int i = 0;
		ktemp781[0] = R*R*ktemp781[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp781[i] = std::complex<double>(ktemp781[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp781[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp783(Nx*Ny*Nz); // RS
	rtemp783 = ifft(Nx,Ny,Nz,dV,ktemp781);

	ktemp781.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp783[i] = rtemp776[i] - 38.21510824101799*rtemp783[i];
	}

	rtemp776.free(); // Realspace
	ktemp203[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		ktemp203[i] = std::complex<double>(-1.0*ktemp203[i].imag()*k_i[2],
				ktemp203[i].real()*k_i[2]);
	}

	Vector rtemp786(Nx*Ny*Nz); // RS
	rtemp786 = ifft(Nx,Ny,Nz,dV,ktemp203);

	ktemp203.free(); // KSpace
	Vector rtemp787(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp787[i] = 2.0*rtemp786[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp788(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp788 = fft(Nx,Ny,Nz,dV,rtemp787);

	rtemp787.free(); // Realspace
	{
		const int i = 0;
		ktemp788[0] = R*R*ktemp788[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp788[i] = std::complex<double>(ktemp788[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp788[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp790(Nx*Ny*Nz); // RS
	rtemp790 = ifft(Nx,Ny,Nz,dV,ktemp788);

	ktemp788.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp790[i] = rtemp783[i] - 1.4212230337568674*rtemp790[i];
	}

	rtemp783.free(); // Realspace
	ktemp212[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		ktemp212[i] = std::complex<double>(-1.0*ktemp212[i].imag()*k_i[2],
				ktemp212[i].real()*k_i[2]);
	}

	Vector rtemp793(Nx*Ny*Nz); // RS
	rtemp793 = ifft(Nx,Ny,Nz,dV,ktemp212);

	ktemp212.free(); // KSpace
	Vector rtemp794(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp794[i] = 2.0*rtemp793[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp795(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp795 = fft(Nx,Ny,Nz,dV,rtemp794);

	rtemp794.free(); // Realspace
	{
		const int i = 0;
		ktemp795[0] = R*R*ktemp795[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp795[i] = std::complex<double>(ktemp795[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp795[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp797(Nx*Ny*Nz); // RS
	rtemp797 = ifft(Nx,Ny,Nz,dV,ktemp795);

	ktemp795.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp797[i] = rtemp790[i] - 66.16582790490305*rtemp797[i];
	}

	rtemp790.free(); // Realspace
	ktemp221[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		ktemp221[i] = std::complex<double>(-1.0*ktemp221[i].imag()*k_i[2],
				ktemp221[i].real()*k_i[2]);
	}

	Vector rtemp800(Nx*Ny*Nz); // RS
	rtemp800 = ifft(Nx,Ny,Nz,dV,ktemp221);

	ktemp221.free(); // KSpace
	Vector rtemp801(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp801[i] = 2.0*rtemp800[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp802(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp802 = fft(Nx,Ny,Nz,dV,rtemp801);

	rtemp801.free(); // Realspace
	{
		const int i = 0;
		ktemp802[0] = R*R*ktemp802[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp802[i] = std::complex<double>(ktemp802[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp802[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp804(Nx*Ny*Nz); // RS
	rtemp804 = ifft(Nx,Ny,Nz,dV,ktemp802);

	ktemp802.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp804[i] = rtemp797[i] + 18.739088889534994*rtemp804[i];
	}

	rtemp797.free(); // Realspace
	ktemp26[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		ktemp26[i] = std::complex<double>(-1.0*ktemp26[i].imag()*k_i[2],
				ktemp26[i].real()*k_i[2]);
	}

	Vector rtemp807(Nx*Ny*Nz); // RS
	rtemp807 = ifft(Nx,Ny,Nz,dV,ktemp26);

	ktemp26.free(); // KSpace
	Vector rtemp808(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp808[i] = 2.0*rtemp807[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp809(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp809 = fft(Nx,Ny,Nz,dV,rtemp808);

	rtemp808.free(); // Realspace
	{
		const int i = 0;
		ktemp809[0] = R*R*ktemp809[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp809[i] = std::complex<double>(ktemp809[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp809[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp811(Nx*Ny*Nz); // RS
	rtemp811 = ifft(Nx,Ny,Nz,dV,ktemp809);

	ktemp809.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp811[i] = rtemp804[i] - 5.448021629401325*rtemp811[i];
	}

	rtemp804.free(); // Realspace
	ktemp37[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		ktemp37[i] = std::complex<double>(-1.0*ktemp37[i].imag()*k_i[2],
				ktemp37[i].real()*k_i[2]);
	}

	Vector rtemp814(Nx*Ny*Nz); // RS
	rtemp814 = ifft(Nx,Ny,Nz,dV,ktemp37);

	ktemp37.free(); // KSpace
	Vector rtemp815(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp815[i] = 2.0*rtemp814[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp816(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp816 = fft(Nx,Ny,Nz,dV,rtemp815);

	rtemp815.free(); // Realspace
	{
		const int i = 0;
		ktemp816[0] = R*R*ktemp816[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp816[i] = std::complex<double>(ktemp816[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp816[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp818(Nx*Ny*Nz); // RS
	rtemp818 = ifft(Nx,Ny,Nz,dV,ktemp816);

	ktemp816.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp818[i] = rtemp811[i] + 59.033393791049136*rtemp818[i];
	}

	rtemp811.free(); // Realspace
	ktemp48[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		ktemp48[i] = std::complex<double>(-1.0*ktemp48[i].imag()*k_i[2],
				ktemp48[i].real()*k_i[2]);
	}

	Vector rtemp821(Nx*Ny*Nz); // RS
	rtemp821 = ifft(Nx,Ny,Nz,dV,ktemp48);

	ktemp48.free(); // KSpace
	Vector rtemp822(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp822[i] = 2.0*rtemp81[i]*rtemp821[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp823(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp823 = fft(Nx,Ny,Nz,dV,rtemp822);

	rtemp822.free(); // Realspace
	{
		const int i = 0;
		ktemp823[0] = R*R*ktemp823[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp823[i] = std::complex<double>(ktemp823[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp823[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp825(Nx*Ny*Nz); // RS
	rtemp825 = ifft(Nx,Ny,Nz,dV,ktemp823);

	ktemp823.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp825[i] = rtemp818[i] + 46.16342965202862*rtemp825[i];
	}

	rtemp818.free(); // Realspace
	ktemp59[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		ktemp59[i] = std::complex<double>(-1.0*ktemp59[i].imag()*k_i[2],
				ktemp59[i].real()*k_i[2]);
	}

	Vector rtemp828(Nx*Ny*Nz); // RS
	rtemp828 = ifft(Nx,Ny,Nz,dV,ktemp59);

	ktemp59.free(); // KSpace
	Vector rtemp829(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp829[i] = 2.0*rtemp81[i]*rtemp828[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp830(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp830 = fft(Nx,Ny,Nz,dV,rtemp829);

	rtemp829.free(); // Realspace
	{
		const int i = 0;
		ktemp830[0] = R*R*ktemp830[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp830[i] = std::complex<double>(ktemp830[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp830[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp832(Nx*Ny*Nz); // RS
	rtemp832 = ifft(Nx,Ny,Nz,dV,ktemp830);

	ktemp830.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp832[i] = rtemp825[i] - 26.31894506957162*rtemp832[i];
	}

	rtemp825.free(); // Realspace
	Vector rtemp834(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp834[i] = 7.957747154594767e-2*rtemp123[i]*rtemp67[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp835(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp835 = fft(Nx,Ny,Nz,dV,rtemp834);

	rtemp834.free(); // Realspace
	{
		const int i = 0;
		ktemp835[0] = R*R*ktemp835[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp835[i] = std::complex<double>(ktemp835[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp835[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp837(Nx*Ny*Nz); // RS
	rtemp837 = ifft(Nx,Ny,Nz,dV,ktemp835);

	ktemp835.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp837[i] = rtemp832[i] + 325.4418800364269*rtemp837[i];
	}

	rtemp832.free(); // Realspace
	Vector rtemp839(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp839[i] = 7.957747154594767e-2*rtemp132[i]*rtemp67[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp840(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp840 = fft(Nx,Ny,Nz,dV,rtemp839);

	rtemp839.free(); // Realspace
	{
		const int i = 0;
		ktemp840[0] = R*R*ktemp840[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp840[i] = std::complex<double>(ktemp840[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp840[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp842(Nx*Ny*Nz); // RS
	rtemp842 = ifft(Nx,Ny,Nz,dV,ktemp840);

	ktemp840.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp842[i] = rtemp837[i] - 964.4192298640455*rtemp842[i];
	}

	rtemp837.free(); // Realspace
	Vector rtemp844(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp844[i] = 7.957747154594767e-2*rtemp141[i]*rtemp67[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp845(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp845 = fft(Nx,Ny,Nz,dV,rtemp844);

	rtemp844.free(); // Realspace
	{
		const int i = 0;
		ktemp845[0] = R*R*ktemp845[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp845[i] = std::complex<double>(ktemp845[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp845[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp847(Nx*Ny*Nz); // RS
	rtemp847 = ifft(Nx,Ny,Nz,dV,ktemp845);

	ktemp845.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp847[i] = rtemp842[i] + 642.946153242697*rtemp847[i];
	}

	rtemp842.free(); // Realspace
	Vector rtemp849(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp849[i] = 7.957747154594767e-2*rtemp150[i]*rtemp67[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp850(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp850 = fft(Nx,Ny,Nz,dV,rtemp849);

	rtemp849.free(); // Realspace
	{
		const int i = 0;
		ktemp850[0] = R*R*ktemp850[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp850[i] = std::complex<double>(ktemp850[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp850[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp852(Nx*Ny*Nz); // RS
	rtemp852 = ifft(Nx,Ny,Nz,dV,ktemp850);

	ktemp850.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp852[i] = rtemp847[i] - 1412.894015767902*rtemp852[i];
	}

	rtemp847.free(); // Realspace
	Vector rtemp854(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp854[i] = 7.957747154594767e-2*rtemp159[i]*rtemp67[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp855(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp855 = fft(Nx,Ny,Nz,dV,rtemp854);

	rtemp854.free(); // Realspace
	{
		const int i = 0;
		ktemp855[0] = R*R*ktemp855[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp855[i] = std::complex<double>(ktemp855[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp855[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp857(Nx*Ny*Nz); // RS
	rtemp857 = ifft(Nx,Ny,Nz,dV,ktemp855);

	ktemp855.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp857[i] = rtemp852[i] + 5810.328199674744*rtemp857[i];
	}

	rtemp852.free(); // Realspace
	Vector rtemp859(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp859[i] = 7.957747154594767e-2*rtemp168[i]*rtemp67[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp860(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp860 = fft(Nx,Ny,Nz,dV,rtemp859);

	rtemp859.free(); // Realspace
	{
		const int i = 0;
		ktemp860[0] = R*R*ktemp860[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp860[i] = std::complex<double>(ktemp860[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp860[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp862(Nx*Ny*Nz); // RS
	rtemp862 = ifft(Nx,Ny,Nz,dV,ktemp860);

	ktemp860.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp862[i] = rtemp857[i] - 4151.368372171983*rtemp862[i];
	}

	rtemp857.free(); // Realspace
	Vector rtemp864(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp864[i] = 7.957747154594767e-2*rtemp16[i]*rtemp67[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp865(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp865 = fft(Nx,Ny,Nz,dV,rtemp864);

	rtemp864.free(); // Realspace
	{
		const int i = 0;
		ktemp865[0] = R*R*ktemp865[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp865[i] = std::complex<double>(ktemp865[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp865[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp867(Nx*Ny*Nz); // RS
	rtemp867 = ifft(Nx,Ny,Nz,dV,ktemp865);

	ktemp865.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp867[i] = rtemp862[i] + 1.9844017075391884*rtemp867[i];
	}

	rtemp862.free(); // Realspace
	Vector rtemp869(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp869[i] = 7.957747154594767e-2*rtemp177[i]*rtemp67[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp870(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp870 = fft(Nx,Ny,Nz,dV,rtemp869);

	rtemp869.free(); // Realspace
	{
		const int i = 0;
		ktemp870[0] = R*R*ktemp870[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp870[i] = std::complex<double>(ktemp870[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp870[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp872(Nx*Ny*Nz); // RS
	rtemp872 = ifft(Nx,Ny,Nz,dV,ktemp870);

	ktemp870.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp872[i] = rtemp867[i] - 8737.320718295045*rtemp872[i];
	}

	rtemp867.free(); // Realspace
	Vector rtemp874(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp874[i] = 7.957747154594767e-2*rtemp186[i]*rtemp67[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp875(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp875 = fft(Nx,Ny,Nz,dV,rtemp874);

	rtemp874.free(); // Realspace
	{
		const int i = 0;
		ktemp875[0] = R*R*ktemp875[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp875[i] = std::complex<double>(ktemp875[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp875[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp877(Nx*Ny*Nz); // RS
	rtemp877 = ifft(Nx,Ny,Nz,dV,ktemp875);

	ktemp875.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp877[i] = rtemp872[i] + 7381.9743520457805*rtemp877[i];
	}

	rtemp872.free(); // Realspace
	Vector rtemp879(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp879[i] = 7.957747154594767e-2*rtemp195[i]*rtemp67[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp880(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp880 = fft(Nx,Ny,Nz,dV,rtemp879);

	rtemp879.free(); // Realspace
	{
		const int i = 0;
		ktemp880[0] = R*R*ktemp880[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp880[i] = std::complex<double>(ktemp880[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp880[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp882(Nx*Ny*Nz); // RS
	rtemp882 = ifft(Nx,Ny,Nz,dV,ktemp880);

	ktemp880.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp882[i] = rtemp877[i] - 1440.6756396734506*rtemp882[i];
	}

	rtemp877.free(); // Realspace
	Vector rtemp884(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp884[i] = 7.957747154594767e-2*rtemp204[i]*rtemp67[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp885(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp885 = fft(Nx,Ny,Nz,dV,rtemp884);

	rtemp884.free(); // Realspace
	{
		const int i = 0;
		ktemp885[0] = R*R*ktemp885[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp885[i] = std::complex<double>(ktemp885[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp885[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp887(Nx*Ny*Nz); // RS
	rtemp887 = ifft(Nx,Ny,Nz,dV,ktemp885);

	ktemp885.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp887[i] = rtemp882[i] - 53.578846103558085*rtemp887[i];
	}

	rtemp882.free(); // Realspace
	Vector rtemp889(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp889[i] = 7.957747154594767e-2*rtemp213[i]*rtemp67[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp890(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp890 = fft(Nx,Ny,Nz,dV,rtemp889);

	rtemp889.free(); // Realspace
	{
		const int i = 0;
		ktemp890[0] = R*R*ktemp890[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp890[i] = std::complex<double>(ktemp890[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp890[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp892(Nx*Ny*Nz); // RS
	rtemp892 = ifft(Nx,Ny,Nz,dV,ktemp890);

	ktemp890.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp892[i] = rtemp887[i] - 2494.3929463767595*rtemp892[i];
	}

	rtemp887.free(); // Realspace
	Vector rtemp894(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp894[i] = 7.957747154594767e-2*rtemp222[i]*rtemp67[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp895(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp895 = fft(Nx,Ny,Nz,dV,rtemp894);

	rtemp894.free(); // Realspace
	{
		const int i = 0;
		ktemp895[0] = R*R*ktemp895[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp895[i] = std::complex<double>(ktemp895[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp895[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp897(Nx*Ny*Nz); // RS
	rtemp897 = ifft(Nx,Ny,Nz,dV,ktemp895);

	ktemp895.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp897[i] = rtemp892[i] + 706.447007883951*rtemp897[i];
	}

	rtemp892.free(); // Realspace
	Vector rtemp899(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp899[i] = 7.957747154594767e-2*rtemp27[i]*rtemp67[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp900(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp900 = fft(Nx,Ny,Nz,dV,rtemp899);

	rtemp899.free(); // Realspace
	{
		const int i = 0;
		ktemp900[0] = R*R*ktemp900[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp900[i] = std::complex<double>(ktemp900[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp900[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp902(Nx*Ny*Nz); // RS
	rtemp902 = ifft(Nx,Ny,Nz,dV,ktemp900);

	ktemp900.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp902[i] = rtemp897[i] - 205.38557673030598*rtemp902[i];
	}

	rtemp897.free(); // Realspace
	Vector rtemp904(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp904[i] = 7.957747154594767e-2*rtemp38[i]*rtemp67[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp905(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp905 = fft(Nx,Ny,Nz,dV,rtemp904);

	rtemp904.free(); // Realspace
	{
		const int i = 0;
		ktemp905[0] = R*R*ktemp905[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp905[i] = std::complex<double>(ktemp905[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp905[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp907(Nx*Ny*Nz); // RS
	rtemp907 = ifft(Nx,Ny,Nz,dV,ktemp905);

	ktemp905.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp907[i] = rtemp902[i] + 2225.5065150051996*rtemp907[i];
	}

	rtemp902.free(); // Realspace
	Vector rtemp909(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp909[i] = 7.957747154594767e-2*rtemp49[i]*rtemp67[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp910(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp910 = fft(Nx,Ny,Nz,dV,rtemp909);

	rtemp909.free(); // Realspace
	{
		const int i = 0;
		ktemp910[0] = R*R*ktemp910[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp910[i] = std::complex<double>(ktemp910[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp910[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp912(Nx*Ny*Nz); // RS
	rtemp912 = ifft(Nx,Ny,Nz,dV,ktemp910);

	ktemp910.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp912[i] = rtemp907[i] + 1740.320297511868*rtemp912[i];
	}

	rtemp907.free(); // Realspace
	Vector rtemp914(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp914[i] = 7.957747154594767e-2*rtemp60[i]*rtemp67[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp915(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp915 = fft(Nx,Ny,Nz,dV,rtemp914);

	rtemp914.free(); // Realspace
	{
		const int i = 0;
		ktemp915[0] = R*R*ktemp915[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp915[i] = std::complex<double>(ktemp915[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp915[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp917(Nx*Ny*Nz); // RS
	rtemp917 = ifft(Nx,Ny,Nz,dV,ktemp915);

	ktemp915.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp917[i] = rtemp912[i] - 992.2008537695941*rtemp917[i];
	}

	rtemp912.free(); // Realspace
	Vector rtemp919(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp919[i] = rtemp319[i]*rtemp67[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp920(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp920 = fft(Nx,Ny,Nz,dV,rtemp919);

	rtemp919.free(); // Realspace
	{
		const int i = 0;
		ktemp920[0] = R*R*ktemp920[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp920[i] = std::complex<double>(ktemp920[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp920[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp922(Nx*Ny*Nz); // RS
	rtemp922 = ifft(Nx,Ny,Nz,dV,ktemp920);

	ktemp920.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp922[i] = rtemp917[i] - 17.265227965638985*rtemp922[i];
	}

	rtemp917.free(); // Realspace
	Vector rtemp924(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp924[i] = rtemp326[i]*rtemp67[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp925(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp925 = fft(Nx,Ny,Nz,dV,rtemp924);

	rtemp924.free(); // Realspace
	{
		const int i = 0;
		ktemp925[0] = R*R*ktemp925[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp925[i] = std::complex<double>(ktemp925[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp925[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp927(Nx*Ny*Nz); // RS
	rtemp927 = ifft(Nx,Ny,Nz,dV,ktemp925);

	ktemp925.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp927[i] = rtemp922[i] + 51.16402921524723*rtemp927[i];
	}

	rtemp922.free(); // Realspace
	Vector rtemp929(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp929[i] = rtemp333[i]*rtemp67[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp930(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp930 = fft(Nx,Ny,Nz,dV,rtemp929);

	rtemp929.free(); // Realspace
	{
		const int i = 0;
		ktemp930[0] = R*R*ktemp930[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp930[i] = std::complex<double>(ktemp930[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp930[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp932(Nx*Ny*Nz); // RS
	rtemp932 = ifft(Nx,Ny,Nz,dV,ktemp930);

	ktemp930.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp932[i] = rtemp927[i] - 34.10935281016482*rtemp932[i];
	}

	rtemp927.free(); // Realspace
	Vector rtemp934(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp934[i] = rtemp340[i]*rtemp67[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp935(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp935 = fft(Nx,Ny,Nz,dV,rtemp934);

	rtemp934.free(); // Realspace
	{
		const int i = 0;
		ktemp935[0] = R*R*ktemp935[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp935[i] = std::complex<double>(ktemp935[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp935[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp937(Nx*Ny*Nz); // RS
	rtemp937 = ifft(Nx,Ny,Nz,dV,ktemp935);

	ktemp935.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp937[i] = rtemp932[i] + 74.95635555813998*rtemp937[i];
	}

	rtemp932.free(); // Realspace
	Vector rtemp939(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp939[i] = rtemp347[i]*rtemp67[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp940(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp940 = fft(Nx,Ny,Nz,dV,rtemp939);

	rtemp939.free(); // Realspace
	{
		const int i = 0;
		ktemp940[0] = R*R*ktemp940[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp940[i] = std::complex<double>(ktemp940[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp940[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp942(Nx*Ny*Nz); // RS
	rtemp942 = ifft(Nx,Ny,Nz,dV,ktemp940);

	ktemp940.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp942[i] = rtemp937[i] - 0.10527578027828648*rtemp942[i];
	}

	rtemp937.free(); // Realspace
	Vector rtemp944(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp944[i] = rtemp354[i]*rtemp67[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp945(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp945 = fft(Nx,Ny,Nz,dV,rtemp944);

	rtemp944.free(); // Realspace
	{
		const int i = 0;
		ktemp945[0] = R*R*ktemp945[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp945[i] = std::complex<double>(ktemp945[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp945[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp947(Nx*Ny*Nz); // RS
	rtemp947 = ifft(Nx,Ny,Nz,dV,ktemp945);

	ktemp945.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp947[i] = rtemp942[i] - 308.2474846548228*rtemp947[i];
	}

	rtemp942.free(); // Realspace
	Vector rtemp949(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp949[i] = rtemp361[i]*rtemp67[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp950(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp950 = fft(Nx,Ny,Nz,dV,rtemp949);

	rtemp949.free(); // Realspace
	{
		const int i = 0;
		ktemp950[0] = R*R*ktemp950[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp950[i] = std::complex<double>(ktemp950[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp950[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp952(Nx*Ny*Nz); // RS
	rtemp952 = ifft(Nx,Ny,Nz,dV,ktemp950);

	ktemp950.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp952[i] = rtemp947[i] + 220.23693234217532*rtemp952[i];
	}

	rtemp947.free(); // Realspace
	Vector rtemp954(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp954[i] = rtemp368[i]*rtemp67[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp955(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp955 = fft(Nx,Ny,Nz,dV,rtemp954);

	rtemp954.free(); // Realspace
	{
		const int i = 0;
		ktemp955[0] = R*R*ktemp955[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp955[i] = std::complex<double>(ktemp955[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp955[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp957(Nx*Ny*Nz); // RS
	rtemp957 = ifft(Nx,Ny,Nz,dV,ktemp955);

	ktemp955.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp957[i] = rtemp952[i] + 463.5292605652953*rtemp957[i];
	}

	rtemp952.free(); // Realspace
	Vector rtemp959(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp959[i] = rtemp375[i]*rtemp67[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp960(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp960 = fft(Nx,Ny,Nz,dV,rtemp959);

	rtemp959.free(); // Realspace
	{
		const int i = 0;
		ktemp960[0] = R*R*ktemp960[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp960[i] = std::complex<double>(ktemp960[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp960[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp962(Nx*Ny*Nz); // RS
	rtemp962 = ifft(Nx,Ny,Nz,dV,ktemp960);

	ktemp960.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp962[i] = rtemp957[i] - 391.6259026352257*rtemp962[i];
	}

	rtemp957.free(); // Realspace
	Vector rtemp964(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp964[i] = rtemp382[i]*rtemp67[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp965(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp965 = fft(Nx,Ny,Nz,dV,rtemp964);

	rtemp964.free(); // Realspace
	{
		const int i = 0;
		ktemp965[0] = R*R*ktemp965[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp965[i] = std::complex<double>(ktemp965[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp965[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp967(Nx*Ny*Nz); // RS
	rtemp967 = ifft(Nx,Ny,Nz,dV,ktemp965);

	ktemp965.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp967[i] = rtemp962[i] + 76.43021648203597*rtemp967[i];
	}

	rtemp962.free(); // Realspace
	Vector rtemp969(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp969[i] = rtemp389[i]*rtemp67[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp970(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp970 = fft(Nx,Ny,Nz,dV,rtemp969);

	rtemp969.free(); // Realspace
	{
		const int i = 0;
		ktemp970[0] = R*R*ktemp970[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp970[i] = std::complex<double>(ktemp970[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp970[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp972(Nx*Ny*Nz); // RS
	rtemp972 = ifft(Nx,Ny,Nz,dV,ktemp970);

	ktemp970.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp972[i] = rtemp967[i] + 2.842446067513735*rtemp972[i];
	}

	rtemp967.free(); // Realspace
	Vector rtemp974(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp974[i] = rtemp396[i]*rtemp67[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp975(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp975 = fft(Nx,Ny,Nz,dV,rtemp974);

	rtemp974.free(); // Realspace
	{
		const int i = 0;
		ktemp975[0] = R*R*ktemp975[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp975[i] = std::complex<double>(ktemp975[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp975[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp977(Nx*Ny*Nz); // RS
	rtemp977 = ifft(Nx,Ny,Nz,dV,ktemp975);

	ktemp975.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp977[i] = rtemp972[i] + 132.3316558098061*rtemp977[i];
	}

	rtemp972.free(); // Realspace
	Vector rtemp979(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp979[i] = rtemp403[i]*rtemp67[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp980(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp980 = fft(Nx,Ny,Nz,dV,rtemp979);

	rtemp979.free(); // Realspace
	{
		const int i = 0;
		ktemp980[0] = R*R*ktemp980[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp980[i] = std::complex<double>(ktemp980[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp980[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp982(Nx*Ny*Nz); // RS
	rtemp982 = ifft(Nx,Ny,Nz,dV,ktemp980);

	ktemp980.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp982[i] = rtemp977[i] - 37.47817777906999*rtemp982[i];
	}

	rtemp977.free(); // Realspace
	Vector rtemp984(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp984[i] = rtemp410[i]*rtemp67[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp985(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp985 = fft(Nx,Ny,Nz,dV,rtemp984);

	rtemp984.free(); // Realspace
	{
		const int i = 0;
		ktemp985[0] = R*R*ktemp985[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp985[i] = std::complex<double>(ktemp985[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp985[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp987(Nx*Ny*Nz); // RS
	rtemp987 = ifft(Nx,Ny,Nz,dV,ktemp985);

	ktemp985.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp987[i] = rtemp982[i] + 10.89604325880265*rtemp987[i];
	}

	rtemp982.free(); // Realspace
	Vector rtemp989(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp989[i] = rtemp417[i]*rtemp67[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp990(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp990 = fft(Nx,Ny,Nz,dV,rtemp989);

	rtemp989.free(); // Realspace
	{
		const int i = 0;
		ktemp990[0] = R*R*ktemp990[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp990[i] = std::complex<double>(ktemp990[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp990[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp992(Nx*Ny*Nz); // RS
	rtemp992 = ifft(Nx,Ny,Nz,dV,ktemp990);

	ktemp990.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp992[i] = rtemp987[i] - 118.06678758209827*rtemp992[i];
	}

	rtemp987.free(); // Realspace
	Vector rtemp994(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp994[i] = rtemp424[i]*rtemp67[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp995(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp995 = fft(Nx,Ny,Nz,dV,rtemp994);

	rtemp994.free(); // Realspace
	{
		const int i = 0;
		ktemp995[0] = R*R*ktemp995[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp995[i] = std::complex<double>(ktemp995[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp995[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp997(Nx*Ny*Nz); // RS
	rtemp997 = ifft(Nx,Ny,Nz,dV,ktemp995);

	ktemp995.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp997[i] = rtemp992[i] - 92.32685930405724*rtemp997[i];
	}

	rtemp992.free(); // Realspace
	Vector rtemp999(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp999[i] = rtemp431[i]*rtemp67[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp1000(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1000 = fft(Nx,Ny,Nz,dV,rtemp999);

	rtemp999.free(); // Realspace
	{
		const int i = 0;
		ktemp1000[0] = R*R*ktemp1000[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1000[i] = std::complex<double>(ktemp1000[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1000[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1002(Nx*Ny*Nz); // RS
	rtemp1002 = ifft(Nx,Ny,Nz,dV,ktemp1000);

	ktemp1000.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1002[i] = 52.63789013914324*rtemp1002[i] + rtemp997[i];
	}

	rtemp997.free(); // Realspace
	Vector rtemp1004(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp1004[i] = t3*t4*t4*rtemp123[i]*rtemp67[i]*rtemp67[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp1005(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1005 = fft(Nx,Ny,Nz,dV,rtemp1004);

	rtemp1004.free(); // Realspace
	{
		const int i = 0;
		ktemp1005[0] = R*R*ktemp1005[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1005[i] = std::complex<double>(ktemp1005[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1005[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1007(Nx*Ny*Nz); // RS
	rtemp1007 = ifft(Nx,Ny,Nz,dV,ktemp1005);

	ktemp1005.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1007[i] = rtemp1002[i] + 650.8837600728538*rtemp1007[i];
	}

	rtemp1002.free(); // Realspace
	Vector rtemp1009(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp1009[i] = t3*t4*t4*rtemp132[i]*rtemp67[i]*rtemp67[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp1010(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1010 = fft(Nx,Ny,Nz,dV,rtemp1009);

	rtemp1009.free(); // Realspace
	{
		const int i = 0;
		ktemp1010[0] = R*R*ktemp1010[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1010[i] = std::complex<double>(ktemp1010[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1010[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1012(Nx*Ny*Nz); // RS
	rtemp1012 = ifft(Nx,Ny,Nz,dV,ktemp1010);

	ktemp1010.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1012[i] = rtemp1007[i] - 1928.838459728091*rtemp1012[i];
	}

	rtemp1007.free(); // Realspace
	Vector rtemp1014(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp1014[i] = t3*t4*t4*rtemp141[i]*rtemp67[i]*rtemp67[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp1015(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1015 = fft(Nx,Ny,Nz,dV,rtemp1014);

	rtemp1014.free(); // Realspace
	{
		const int i = 0;
		ktemp1015[0] = R*R*ktemp1015[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1015[i] = std::complex<double>(ktemp1015[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1015[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1017(Nx*Ny*Nz); // RS
	rtemp1017 = ifft(Nx,Ny,Nz,dV,ktemp1015);

	ktemp1015.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1017[i] = rtemp1012[i] + 1285.892306485394*rtemp1017[i];
	}

	rtemp1012.free(); // Realspace
	Vector rtemp1019(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp1019[i] = t3*t4*t4*rtemp150[i]*rtemp67[i]*rtemp67[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp1020(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1020 = fft(Nx,Ny,Nz,dV,rtemp1019);

	rtemp1019.free(); // Realspace
	{
		const int i = 0;
		ktemp1020[0] = R*R*ktemp1020[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1020[i] = std::complex<double>(ktemp1020[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1020[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1022(Nx*Ny*Nz); // RS
	rtemp1022 = ifft(Nx,Ny,Nz,dV,ktemp1020);

	ktemp1020.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1022[i] = rtemp1017[i] - 2825.788031535804*rtemp1022[i];
	}

	rtemp1017.free(); // Realspace
	Vector rtemp1024(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp1024[i] = t3*t4*t4*rtemp159[i]*rtemp67[i]*rtemp67[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp1025(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1025 = fft(Nx,Ny,Nz,dV,rtemp1024);

	rtemp1024.free(); // Realspace
	{
		const int i = 0;
		ktemp1025[0] = R*R*ktemp1025[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1025[i] = std::complex<double>(ktemp1025[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1025[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1027(Nx*Ny*Nz); // RS
	rtemp1027 = ifft(Nx,Ny,Nz,dV,ktemp1025);

	ktemp1025.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1027[i] = rtemp1022[i] + 11620.656399349487*rtemp1027[i];
	}

	rtemp1022.free(); // Realspace
	Vector rtemp1029(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp1029[i] = t3*t4*t4*rtemp168[i]*rtemp67[i]*rtemp67[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp1030(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1030 = fft(Nx,Ny,Nz,dV,rtemp1029);

	rtemp1029.free(); // Realspace
	{
		const int i = 0;
		ktemp1030[0] = R*R*ktemp1030[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1030[i] = std::complex<double>(ktemp1030[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1030[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1032(Nx*Ny*Nz); // RS
	rtemp1032 = ifft(Nx,Ny,Nz,dV,ktemp1030);

	ktemp1030.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1032[i] = rtemp1027[i] - 8302.736744343965*rtemp1032[i];
	}

	rtemp1027.free(); // Realspace
	Vector rtemp1034(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp1034[i] = t3*t4*t4*rtemp16[i]*rtemp67[i]*rtemp67[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp1035(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1035 = fft(Nx,Ny,Nz,dV,rtemp1034);

	rtemp1034.free(); // Realspace
	{
		const int i = 0;
		ktemp1035[0] = R*R*ktemp1035[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1035[i] = std::complex<double>(ktemp1035[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1035[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1037(Nx*Ny*Nz); // RS
	rtemp1037 = ifft(Nx,Ny,Nz,dV,ktemp1035);

	ktemp1035.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1037[i] = rtemp1032[i] + 3.968803415078377*rtemp1037[i];
	}

	rtemp1032.free(); // Realspace
	Vector rtemp1039(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp1039[i] = t3*t4*t4*rtemp177[i]*rtemp67[i]*rtemp67[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp1040(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1040 = fft(Nx,Ny,Nz,dV,rtemp1039);

	rtemp1039.free(); // Realspace
	{
		const int i = 0;
		ktemp1040[0] = R*R*ktemp1040[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1040[i] = std::complex<double>(ktemp1040[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1040[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1042(Nx*Ny*Nz); // RS
	rtemp1042 = ifft(Nx,Ny,Nz,dV,ktemp1040);

	ktemp1040.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1042[i] = rtemp1037[i] - 17474.64143659009*rtemp1042[i];
	}

	rtemp1037.free(); // Realspace
	Vector rtemp1044(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp1044[i] = t3*t4*t4*rtemp186[i]*rtemp67[i]*rtemp67[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp1045(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1045 = fft(Nx,Ny,Nz,dV,rtemp1044);

	rtemp1044.free(); // Realspace
	{
		const int i = 0;
		ktemp1045[0] = R*R*ktemp1045[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1045[i] = std::complex<double>(ktemp1045[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1045[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1047(Nx*Ny*Nz); // RS
	rtemp1047 = ifft(Nx,Ny,Nz,dV,ktemp1045);

	ktemp1045.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1047[i] = rtemp1042[i] + 14763.948704091561*rtemp1047[i];
	}

	rtemp1042.free(); // Realspace
	Vector rtemp1049(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp1049[i] = t3*t4*t4*rtemp195[i]*rtemp67[i]*rtemp67[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp1050(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1050 = fft(Nx,Ny,Nz,dV,rtemp1049);

	rtemp1049.free(); // Realspace
	{
		const int i = 0;
		ktemp1050[0] = R*R*ktemp1050[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1050[i] = std::complex<double>(ktemp1050[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1050[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1052(Nx*Ny*Nz); // RS
	rtemp1052 = ifft(Nx,Ny,Nz,dV,ktemp1050);

	ktemp1050.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1052[i] = rtemp1047[i] - 2881.3512793469013*rtemp1052[i];
	}

	rtemp1047.free(); // Realspace
	Vector rtemp1054(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp1054[i] = t3*t4*t4*rtemp204[i]*rtemp67[i]*rtemp67[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp1055(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1055 = fft(Nx,Ny,Nz,dV,rtemp1054);

	rtemp1054.free(); // Realspace
	{
		const int i = 0;
		ktemp1055[0] = R*R*ktemp1055[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1055[i] = std::complex<double>(ktemp1055[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1055[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1057(Nx*Ny*Nz); // RS
	rtemp1057 = ifft(Nx,Ny,Nz,dV,ktemp1055);

	ktemp1055.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1057[i] = rtemp1052[i] - 107.15769220711617*rtemp1057[i];
	}

	rtemp1052.free(); // Realspace
	Vector rtemp1059(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp1059[i] = t3*t4*t4*rtemp213[i]*rtemp67[i]*rtemp67[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp1060(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1060 = fft(Nx,Ny,Nz,dV,rtemp1059);

	rtemp1059.free(); // Realspace
	{
		const int i = 0;
		ktemp1060[0] = R*R*ktemp1060[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1060[i] = std::complex<double>(ktemp1060[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1060[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1062(Nx*Ny*Nz); // RS
	rtemp1062 = ifft(Nx,Ny,Nz,dV,ktemp1060);

	ktemp1060.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1062[i] = rtemp1057[i] - 4988.785892753519*rtemp1062[i];
	}

	rtemp1057.free(); // Realspace
	Vector rtemp1064(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp1064[i] = t3*t4*t4*rtemp222[i]*rtemp67[i]*rtemp67[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp1065(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1065 = fft(Nx,Ny,Nz,dV,rtemp1064);

	rtemp1064.free(); // Realspace
	{
		const int i = 0;
		ktemp1065[0] = R*R*ktemp1065[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1065[i] = std::complex<double>(ktemp1065[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1065[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1067(Nx*Ny*Nz); // RS
	rtemp1067 = ifft(Nx,Ny,Nz,dV,ktemp1065);

	ktemp1065.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1067[i] = rtemp1062[i] + 1412.894015767902*rtemp1067[i];
	}

	rtemp1062.free(); // Realspace
	Vector rtemp1069(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp1069[i] = t3*t4*t4*rtemp27[i]*rtemp67[i]*rtemp67[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp1070(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1070 = fft(Nx,Ny,Nz,dV,rtemp1069);

	rtemp1069.free(); // Realspace
	{
		const int i = 0;
		ktemp1070[0] = R*R*ktemp1070[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1070[i] = std::complex<double>(ktemp1070[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1070[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1072(Nx*Ny*Nz); // RS
	rtemp1072 = ifft(Nx,Ny,Nz,dV,ktemp1070);

	ktemp1070.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1072[i] = rtemp1067[i] - 410.77115346061197*rtemp1072[i];
	}

	rtemp1067.free(); // Realspace
	Vector rtemp1074(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp1074[i] = t3*t4*t4*rtemp38[i]*rtemp67[i]*rtemp67[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp1075(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1075 = fft(Nx,Ny,Nz,dV,rtemp1074);

	rtemp1074.free(); // Realspace
	{
		const int i = 0;
		ktemp1075[0] = R*R*ktemp1075[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1075[i] = std::complex<double>(ktemp1075[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1075[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1077(Nx*Ny*Nz); // RS
	rtemp1077 = ifft(Nx,Ny,Nz,dV,ktemp1075);

	ktemp1075.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1077[i] = rtemp1072[i] + 4451.013030010399*rtemp1077[i];
	}

	rtemp1072.free(); // Realspace
	Vector rtemp1079(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp1079[i] = t3*t4*t4*rtemp49[i]*rtemp67[i]*rtemp67[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp1080(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1080 = fft(Nx,Ny,Nz,dV,rtemp1079);

	rtemp1079.free(); // Realspace
	{
		const int i = 0;
		ktemp1080[0] = R*R*ktemp1080[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1080[i] = std::complex<double>(ktemp1080[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1080[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1082(Nx*Ny*Nz); // RS
	rtemp1082 = ifft(Nx,Ny,Nz,dV,ktemp1080);

	ktemp1080.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1082[i] = rtemp1077[i] + 3480.640595023736*rtemp1082[i];
	}

	rtemp1077.free(); // Realspace
	Vector rtemp1084(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp1084[i] = t3*t4*t4*rtemp60[i]*rtemp67[i]*rtemp67[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp1085(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1085 = fft(Nx,Ny,Nz,dV,rtemp1084);

	rtemp1084.free(); // Realspace
	{
		const int i = 0;
		ktemp1085[0] = R*R*ktemp1085[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1085[i] = std::complex<double>(ktemp1085[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1085[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1087(Nx*Ny*Nz); // RS
	rtemp1087 = ifft(Nx,Ny,Nz,dV,ktemp1085);

	ktemp1085.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1087[i] = rtemp1082[i] - 1984.4017075391882*rtemp1087[i];
	}

	rtemp1082.free(); // Realspace
	Vector rtemp1089(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp1089[i] = t3*t4*t4*rtemp123[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2)*(rtemp67[i]*rtemp67[i] - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp1090(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1090 = fft(Nx,Ny,Nz,dV,rtemp1089);

	rtemp1089.free(); // Realspace
	{
		const int i = 0;
		ktemp1090[0] = R*R*ktemp1090[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1090[i] = std::complex<double>(ktemp1090[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1090[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1092(Nx*Ny*Nz); // RS
	rtemp1092 = ifft(Nx,Ny,Nz,dV,ktemp1090);

	ktemp1090.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1092[i] = rtemp1087[i] + 325.4418800364269*rtemp1092[i];
	}

	rtemp1087.free(); // Realspace
	Vector rtemp1094(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp1094[i] = t3*t4*t4*rtemp132[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2)*(rtemp67[i]*rtemp67[i] - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp1095(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1095 = fft(Nx,Ny,Nz,dV,rtemp1094);

	rtemp1094.free(); // Realspace
	{
		const int i = 0;
		ktemp1095[0] = R*R*ktemp1095[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1095[i] = std::complex<double>(ktemp1095[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1095[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1097(Nx*Ny*Nz); // RS
	rtemp1097 = ifft(Nx,Ny,Nz,dV,ktemp1095);

	ktemp1095.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1097[i] = rtemp1092[i] - 964.4192298640455*rtemp1097[i];
	}

	rtemp1092.free(); // Realspace
	Vector rtemp1099(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp1099[i] = t3*t4*t4*rtemp141[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2)*(rtemp67[i]*rtemp67[i] - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp1100(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1100 = fft(Nx,Ny,Nz,dV,rtemp1099);

	rtemp1099.free(); // Realspace
	{
		const int i = 0;
		ktemp1100[0] = R*R*ktemp1100[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1100[i] = std::complex<double>(ktemp1100[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1100[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1102(Nx*Ny*Nz); // RS
	rtemp1102 = ifft(Nx,Ny,Nz,dV,ktemp1100);

	ktemp1100.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1102[i] = rtemp1097[i] + 642.946153242697*rtemp1102[i];
	}

	rtemp1097.free(); // Realspace
	Vector rtemp1104(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp1104[i] = t3*t4*t4*rtemp150[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2)*(rtemp67[i]*rtemp67[i] - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp1105(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1105 = fft(Nx,Ny,Nz,dV,rtemp1104);

	rtemp1104.free(); // Realspace
	{
		const int i = 0;
		ktemp1105[0] = R*R*ktemp1105[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1105[i] = std::complex<double>(ktemp1105[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1105[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1107(Nx*Ny*Nz); // RS
	rtemp1107 = ifft(Nx,Ny,Nz,dV,ktemp1105);

	ktemp1105.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1107[i] = rtemp1102[i] - 1412.894015767902*rtemp1107[i];
	}

	rtemp1102.free(); // Realspace
	Vector rtemp1109(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp1109[i] = t3*t4*t4*rtemp159[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2)*(rtemp67[i]*rtemp67[i] - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp1110(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1110 = fft(Nx,Ny,Nz,dV,rtemp1109);

	rtemp1109.free(); // Realspace
	{
		const int i = 0;
		ktemp1110[0] = R*R*ktemp1110[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1110[i] = std::complex<double>(ktemp1110[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1110[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1112(Nx*Ny*Nz); // RS
	rtemp1112 = ifft(Nx,Ny,Nz,dV,ktemp1110);

	ktemp1110.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1112[i] = rtemp1107[i] + 5810.328199674744*rtemp1112[i];
	}

	rtemp1107.free(); // Realspace
	Vector rtemp1114(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp1114[i] = t3*t4*t4*rtemp168[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2)*(rtemp67[i]*rtemp67[i] - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp1115(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1115 = fft(Nx,Ny,Nz,dV,rtemp1114);

	rtemp1114.free(); // Realspace
	{
		const int i = 0;
		ktemp1115[0] = R*R*ktemp1115[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1115[i] = std::complex<double>(ktemp1115[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1115[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1117(Nx*Ny*Nz); // RS
	rtemp1117 = ifft(Nx,Ny,Nz,dV,ktemp1115);

	ktemp1115.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1117[i] = rtemp1112[i] - 4151.368372171983*rtemp1117[i];
	}

	rtemp1112.free(); // Realspace
	Vector rtemp1119(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp1119[i] = t3*t4*t4*rtemp16[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2)*(rtemp67[i]*rtemp67[i] - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp1120(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1120 = fft(Nx,Ny,Nz,dV,rtemp1119);

	rtemp1119.free(); // Realspace
	{
		const int i = 0;
		ktemp1120[0] = R*R*ktemp1120[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1120[i] = std::complex<double>(ktemp1120[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1120[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1122(Nx*Ny*Nz); // RS
	rtemp1122 = ifft(Nx,Ny,Nz,dV,ktemp1120);

	ktemp1120.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1122[i] = rtemp1117[i] + 1.9844017075391884*rtemp1122[i];
	}

	rtemp1117.free(); // Realspace
	Vector rtemp1124(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp1124[i] = t3*t4*t4*rtemp177[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2)*(rtemp67[i]*rtemp67[i] - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp1125(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1125 = fft(Nx,Ny,Nz,dV,rtemp1124);

	rtemp1124.free(); // Realspace
	{
		const int i = 0;
		ktemp1125[0] = R*R*ktemp1125[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1125[i] = std::complex<double>(ktemp1125[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1125[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1127(Nx*Ny*Nz); // RS
	rtemp1127 = ifft(Nx,Ny,Nz,dV,ktemp1125);

	ktemp1125.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1127[i] = rtemp1122[i] - 8737.320718295045*rtemp1127[i];
	}

	rtemp1122.free(); // Realspace
	Vector rtemp1129(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp1129[i] = t3*t4*t4*rtemp186[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2)*(rtemp67[i]*rtemp67[i] - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp1130(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1130 = fft(Nx,Ny,Nz,dV,rtemp1129);

	rtemp1129.free(); // Realspace
	{
		const int i = 0;
		ktemp1130[0] = R*R*ktemp1130[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1130[i] = std::complex<double>(ktemp1130[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1130[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1132(Nx*Ny*Nz); // RS
	rtemp1132 = ifft(Nx,Ny,Nz,dV,ktemp1130);

	ktemp1130.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1132[i] = rtemp1127[i] + 7381.9743520457805*rtemp1132[i];
	}

	rtemp1127.free(); // Realspace
	Vector rtemp1134(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp1134[i] = t3*t4*t4*rtemp195[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2)*(rtemp67[i]*rtemp67[i] - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp1135(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1135 = fft(Nx,Ny,Nz,dV,rtemp1134);

	rtemp1134.free(); // Realspace
	{
		const int i = 0;
		ktemp1135[0] = R*R*ktemp1135[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1135[i] = std::complex<double>(ktemp1135[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1135[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1137(Nx*Ny*Nz); // RS
	rtemp1137 = ifft(Nx,Ny,Nz,dV,ktemp1135);

	ktemp1135.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1137[i] = rtemp1132[i] - 1440.6756396734506*rtemp1137[i];
	}

	rtemp1132.free(); // Realspace
	Vector rtemp1139(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp1139[i] = t3*t4*t4*rtemp204[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2)*(rtemp67[i]*rtemp67[i] - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp1140(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1140 = fft(Nx,Ny,Nz,dV,rtemp1139);

	rtemp1139.free(); // Realspace
	{
		const int i = 0;
		ktemp1140[0] = R*R*ktemp1140[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1140[i] = std::complex<double>(ktemp1140[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1140[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1142(Nx*Ny*Nz); // RS
	rtemp1142 = ifft(Nx,Ny,Nz,dV,ktemp1140);

	ktemp1140.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1142[i] = rtemp1137[i] - 53.578846103558085*rtemp1142[i];
	}

	rtemp1137.free(); // Realspace
	Vector rtemp1144(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp1144[i] = t3*t4*t4*rtemp213[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2)*(rtemp67[i]*rtemp67[i] - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp1145(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1145 = fft(Nx,Ny,Nz,dV,rtemp1144);

	rtemp1144.free(); // Realspace
	{
		const int i = 0;
		ktemp1145[0] = R*R*ktemp1145[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1145[i] = std::complex<double>(ktemp1145[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1145[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1147(Nx*Ny*Nz); // RS
	rtemp1147 = ifft(Nx,Ny,Nz,dV,ktemp1145);

	ktemp1145.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1147[i] = rtemp1142[i] - 2494.3929463767595*rtemp1147[i];
	}

	rtemp1142.free(); // Realspace
	Vector rtemp1149(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp1149[i] = t3*t4*t4*rtemp222[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2)*(rtemp67[i]*rtemp67[i] - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp1150(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1150 = fft(Nx,Ny,Nz,dV,rtemp1149);

	rtemp1149.free(); // Realspace
	{
		const int i = 0;
		ktemp1150[0] = R*R*ktemp1150[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1150[i] = std::complex<double>(ktemp1150[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1150[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1152(Nx*Ny*Nz); // RS
	rtemp1152 = ifft(Nx,Ny,Nz,dV,ktemp1150);

	ktemp1150.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1152[i] = rtemp1147[i] + 706.447007883951*rtemp1152[i];
	}

	rtemp1147.free(); // Realspace
	Vector rtemp1154(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp1154[i] = t3*t4*t4*rtemp27[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2)*(rtemp67[i]*rtemp67[i] - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp1155(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1155 = fft(Nx,Ny,Nz,dV,rtemp1154);

	rtemp1154.free(); // Realspace
	{
		const int i = 0;
		ktemp1155[0] = R*R*ktemp1155[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1155[i] = std::complex<double>(ktemp1155[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1155[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1157(Nx*Ny*Nz); // RS
	rtemp1157 = ifft(Nx,Ny,Nz,dV,ktemp1155);

	ktemp1155.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1157[i] = rtemp1152[i] - 205.38557673030598*rtemp1157[i];
	}

	rtemp1152.free(); // Realspace
	Vector rtemp1159(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp1159[i] = t3*t4*t4*rtemp38[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2)*(rtemp67[i]*rtemp67[i] - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp1160(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1160 = fft(Nx,Ny,Nz,dV,rtemp1159);

	rtemp1159.free(); // Realspace
	{
		const int i = 0;
		ktemp1160[0] = R*R*ktemp1160[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1160[i] = std::complex<double>(ktemp1160[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1160[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1162(Nx*Ny*Nz); // RS
	rtemp1162 = ifft(Nx,Ny,Nz,dV,ktemp1160);

	ktemp1160.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1162[i] = rtemp1157[i] + 2225.5065150051996*rtemp1162[i];
	}

	rtemp1157.free(); // Realspace
	Vector rtemp1164(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp1164[i] = t3*t4*t4*rtemp49[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2)*(rtemp67[i]*rtemp67[i] - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp1165(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1165 = fft(Nx,Ny,Nz,dV,rtemp1164);

	rtemp1164.free(); // Realspace
	{
		const int i = 0;
		ktemp1165[0] = R*R*ktemp1165[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1165[i] = std::complex<double>(ktemp1165[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1165[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1167(Nx*Ny*Nz); // RS
	rtemp1167 = ifft(Nx,Ny,Nz,dV,ktemp1165);

	ktemp1165.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1167[i] = rtemp1162[i] + 1740.320297511868*rtemp1167[i];
	}

	rtemp1162.free(); // Realspace
	Vector rtemp1169(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp1169[i] = t3*t4*t4*rtemp60[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2)*(rtemp67[i]*rtemp67[i] - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp1170(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1170 = fft(Nx,Ny,Nz,dV,rtemp1169);

	rtemp1169.free(); // Realspace
	{
		const int i = 0;
		ktemp1170[0] = R*R*ktemp1170[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1170[i] = std::complex<double>(ktemp1170[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1170[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1172(Nx*Ny*Nz); // RS
	rtemp1172 = ifft(Nx,Ny,Nz,dV,ktemp1170);

	ktemp1170.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1172[i] = rtemp1167[i] - 992.2008537695941*rtemp1172[i];
	}

	rtemp1167.free(); // Realspace
	Vector rtemp1174(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1174[i] = rtemp452[i]*(rtemp116[i]/rtemp12[i] - 1.0);
	}

	ComplexVector ktemp1175(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1175 = fft(Nx,Ny,Nz,dV,rtemp1174);

	rtemp1174.free(); // Realspace
	{
		const int i = 0;
		ktemp1175[0] = 2.0*R*R*ktemp1175[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1175[i] = std::complex<double>(ktemp1175[i].real()*R*sin(2.0*R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1175[i].imag()*R*sin(2.0*R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1177(Nx*Ny*Nz); // RS
	rtemp1177 = ifft(Nx,Ny,Nz,dV,ktemp1175);

	ktemp1175.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1177[i] = rtemp1172[i] - 51.795683896916955*rtemp1177[i];
	}

	rtemp1172.free(); // Realspace
	Vector rtemp1179(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1179[i] = rtemp452[i]*(rtemp116[i]/rtemp12[i] - 1.0)*(rtemp116[i]/rtemp12[i] - 1.0);
	}

	ComplexVector ktemp1180(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1180 = fft(Nx,Ny,Nz,dV,rtemp1179);

	rtemp1179.free(); // Realspace
	{
		const int i = 0;
		ktemp1180[0] = 2.0*R*R*ktemp1180[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1180[i] = std::complex<double>(ktemp1180[i].real()*R*sin(2.0*R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1180[i].imag()*R*sin(2.0*R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1182(Nx*Ny*Nz); // RS
	rtemp1182 = ifft(Nx,Ny,Nz,dV,ktemp1180);

	ktemp1180.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1182[i] = rtemp1177[i] + 153.4920876457417*rtemp1182[i];
	}

	rtemp1177.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp452[i] = rtemp452[i]*(rtemp116[i]/rtemp12[i] - 1.0)*(rtemp116[i]/rtemp12[i] - 1.0)*(rtemp116[i]/rtemp12[i] - 1.0);
	}

	ComplexVector ktemp1185(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1185 = fft(Nx,Ny,Nz,dV,rtemp452);

	rtemp452.free(); // Realspace
	{
		const int i = 0;
		ktemp1185[0] = 2.0*R*R*ktemp1185[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1185[i] = std::complex<double>(ktemp1185[i].real()*R*sin(2.0*R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1185[i].imag()*R*sin(2.0*R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1187(Nx*Ny*Nz); // RS
	rtemp1187 = ifft(Nx,Ny,Nz,dV,ktemp1185);

	ktemp1185.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1187[i] = rtemp1182[i] - 102.32805843049447*rtemp1187[i];
	}

	rtemp1182.free(); // Realspace
	Vector rtemp1189(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1189[i] = rtemp457[i]*(rtemp116[i]/rtemp12[i] - 1.0);
	}

	ComplexVector ktemp1190(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1190 = fft(Nx,Ny,Nz,dV,rtemp1189);

	rtemp1189.free(); // Realspace
	{
		const int i = 0;
		ktemp1190[0] = 2.0*R*R*ktemp1190[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1190[i] = std::complex<double>(ktemp1190[i].real()*R*sin(2.0*R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1190[i].imag()*R*sin(2.0*R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1192(Nx*Ny*Nz); // RS
	rtemp1192 = ifft(Nx,Ny,Nz,dV,ktemp1190);

	ktemp1190.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1192[i] = rtemp1187[i] + 224.8690666744199*rtemp1192[i];
	}

	rtemp1187.free(); // Realspace
	Vector rtemp1194(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1194[i] = rtemp457[i]*(rtemp116[i]/rtemp12[i] - 1.0)*(rtemp116[i]/rtemp12[i] - 1.0);
	}

	ComplexVector ktemp1195(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1195 = fft(Nx,Ny,Nz,dV,rtemp1194);

	rtemp1194.free(); // Realspace
	{
		const int i = 0;
		ktemp1195[0] = 2.0*R*R*ktemp1195[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1195[i] = std::complex<double>(ktemp1195[i].real()*R*sin(2.0*R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1195[i].imag()*R*sin(2.0*R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1197(Nx*Ny*Nz); // RS
	rtemp1197 = ifft(Nx,Ny,Nz,dV,ktemp1195);

	ktemp1195.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1197[i] = rtemp1192[i] - 924.7424539644685*rtemp1197[i];
	}

	rtemp1192.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp457[i] = rtemp457[i]*(rtemp116[i]/rtemp12[i] - 1.0)*(rtemp116[i]/rtemp12[i] - 1.0)*(rtemp116[i]/rtemp12[i] - 1.0);
	}

	ComplexVector ktemp1200(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1200 = fft(Nx,Ny,Nz,dV,rtemp457);

	rtemp457.free(); // Realspace
	{
		const int i = 0;
		ktemp1200[0] = 2.0*R*R*ktemp1200[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1200[i] = std::complex<double>(ktemp1200[i].real()*R*sin(2.0*R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1200[i].imag()*R*sin(2.0*R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1202(Nx*Ny*Nz); // RS
	rtemp1202 = ifft(Nx,Ny,Nz,dV,ktemp1200);

	ktemp1200.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1202[i] = rtemp1197[i] + 660.710797026526*rtemp1202[i];
	}

	rtemp1197.free(); // Realspace
	Vector rtemp1204(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1204[i] = rtemp462[i]*(rtemp116[i]/rtemp12[i] - 1.0);
	}

	ComplexVector ktemp1205(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1205 = fft(Nx,Ny,Nz,dV,rtemp1204);

	rtemp1204.free(); // Realspace
	{
		const int i = 0;
		ktemp1205[0] = 2.0*R*R*ktemp1205[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1205[i] = std::complex<double>(ktemp1205[i].real()*R*sin(2.0*R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1205[i].imag()*R*sin(2.0*R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1207(Nx*Ny*Nz); // RS
	rtemp1207 = ifft(Nx,Ny,Nz,dV,ktemp1205);

	ktemp1205.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1207[i] = rtemp1202[i] + 1390.5877816958862*rtemp1207[i];
	}

	rtemp1202.free(); // Realspace
	Vector rtemp1209(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1209[i] = rtemp462[i]*(rtemp116[i]/rtemp12[i] - 1.0)*(rtemp116[i]/rtemp12[i] - 1.0);
	}

	ComplexVector ktemp1210(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1210 = fft(Nx,Ny,Nz,dV,rtemp1209);

	rtemp1209.free(); // Realspace
	{
		const int i = 0;
		ktemp1210[0] = 2.0*R*R*ktemp1210[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1210[i] = std::complex<double>(ktemp1210[i].real()*R*sin(2.0*R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1210[i].imag()*R*sin(2.0*R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1212(Nx*Ny*Nz); // RS
	rtemp1212 = ifft(Nx,Ny,Nz,dV,ktemp1210);

	ktemp1210.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1212[i] = rtemp1207[i] - 1174.8777079056772*rtemp1212[i];
	}

	rtemp1207.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp462[i] = rtemp462[i]*(rtemp116[i]/rtemp12[i] - 1.0)*(rtemp116[i]/rtemp12[i] - 1.0)*(rtemp116[i]/rtemp12[i] - 1.0);
	}

	ComplexVector ktemp1215(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1215 = fft(Nx,Ny,Nz,dV,rtemp462);

	rtemp462.free(); // Realspace
	{
		const int i = 0;
		ktemp1215[0] = 2.0*R*R*ktemp1215[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1215[i] = std::complex<double>(ktemp1215[i].real()*R*sin(2.0*R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1215[i].imag()*R*sin(2.0*R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1217(Nx*Ny*Nz); // RS
	rtemp1217 = ifft(Nx,Ny,Nz,dV,ktemp1215);

	ktemp1215.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1217[i] = rtemp1212[i] + 229.29064944610795*rtemp1217[i];
	}

	rtemp1212.free(); // Realspace
	Vector rtemp1219(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1219[i] = rtemp467[i]*(rtemp116[i]/rtemp12[i] - 1.0);
	}

	ComplexVector ktemp1220(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1220 = fft(Nx,Ny,Nz,dV,rtemp1219);

	rtemp1219.free(); // Realspace
	{
		const int i = 0;
		ktemp1220[0] = 2.0*R*R*ktemp1220[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1220[i] = std::complex<double>(ktemp1220[i].real()*R*sin(2.0*R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1220[i].imag()*R*sin(2.0*R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1222(Nx*Ny*Nz); // RS
	rtemp1222 = ifft(Nx,Ny,Nz,dV,ktemp1220);

	ktemp1220.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1222[i] = rtemp1217[i] + 8.527338202541205*rtemp1222[i];
	}

	rtemp1217.free(); // Realspace
	Vector rtemp1224(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1224[i] = rtemp467[i]*(rtemp116[i]/rtemp12[i] - 1.0)*(rtemp116[i]/rtemp12[i] - 1.0);
	}

	ComplexVector ktemp1225(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1225 = fft(Nx,Ny,Nz,dV,rtemp1224);

	rtemp1224.free(); // Realspace
	{
		const int i = 0;
		ktemp1225[0] = 2.0*R*R*ktemp1225[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1225[i] = std::complex<double>(ktemp1225[i].real()*R*sin(2.0*R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1225[i].imag()*R*sin(2.0*R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1227(Nx*Ny*Nz); // RS
	rtemp1227 = ifft(Nx,Ny,Nz,dV,ktemp1225);

	ktemp1225.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1227[i] = rtemp1222[i] + 396.99496742941835*rtemp1227[i];
	}

	rtemp1222.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp467[i] = rtemp467[i]*(rtemp116[i]/rtemp12[i] - 1.0)*(rtemp116[i]/rtemp12[i] - 1.0)*(rtemp116[i]/rtemp12[i] - 1.0);
	}

	ComplexVector ktemp1230(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1230 = fft(Nx,Ny,Nz,dV,rtemp467);

	rtemp467.free(); // Realspace
	{
		const int i = 0;
		ktemp1230[0] = 2.0*R*R*ktemp1230[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1230[i] = std::complex<double>(ktemp1230[i].real()*R*sin(2.0*R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1230[i].imag()*R*sin(2.0*R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1232(Nx*Ny*Nz); // RS
	rtemp1232 = ifft(Nx,Ny,Nz,dV,ktemp1230);

	ktemp1230.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1232[i] = rtemp1227[i] - 112.43453333720996*rtemp1232[i];
	}

	rtemp1227.free(); // Realspace
	Vector rtemp1234(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1234[i] = rtemp120[i]/(R*R);
	}

	ComplexVector ktemp1235(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1235 = fft(Nx,Ny,Nz,dV,rtemp1234);

	rtemp1234.free(); // Realspace
	ComplexVector ktemp1236(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp1236[0] = R*R*ktemp1235[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1236[i] = std::complex<double>(ktemp1235[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1235[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1237(Nx*Ny*Nz); // RS
	rtemp1237 = ifft(Nx,Ny,Nz,dV,ktemp1236);

	ktemp1236.free(); // KSpace
	Vector rtemp1238(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1238[i] = rtemp1237[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp1239(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1239 = fft(Nx,Ny,Nz,dV,rtemp1238);

	rtemp1238.free(); // Realspace
	{
		const int i = 0;
		ktemp1239[0] = R*R*ktemp1239[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1239[i] = std::complex<double>(ktemp1239[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1239[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1241(Nx*Ny*Nz); // RS
	rtemp1241 = ifft(Nx,Ny,Nz,dV,ktemp1239);

	ktemp1239.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1241[i] = rtemp1232[i] - 25.897841948458478*rtemp1241[i];
	}

	rtemp1232.free(); // Realspace
	Vector rtemp1243(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1243[i] = rtemp129[i]/(R*R);
	}

	ComplexVector ktemp1244(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1244 = fft(Nx,Ny,Nz,dV,rtemp1243);

	rtemp1243.free(); // Realspace
	ComplexVector ktemp1245(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp1245[0] = R*R*ktemp1244[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1245[i] = std::complex<double>(ktemp1244[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1244[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1246(Nx*Ny*Nz); // RS
	rtemp1246 = ifft(Nx,Ny,Nz,dV,ktemp1245);

	ktemp1245.free(); // KSpace
	Vector rtemp1247(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1247[i] = rtemp1246[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp1248(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1248 = fft(Nx,Ny,Nz,dV,rtemp1247);

	rtemp1247.free(); // Realspace
	{
		const int i = 0;
		ktemp1248[0] = R*R*ktemp1248[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1248[i] = std::complex<double>(ktemp1248[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1248[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1250(Nx*Ny*Nz); // RS
	rtemp1250 = ifft(Nx,Ny,Nz,dV,ktemp1248);

	ktemp1248.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1250[i] = rtemp1241[i] + 76.74604382287085*rtemp1250[i];
	}

	rtemp1241.free(); // Realspace
	Vector rtemp1252(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1252[i] = rtemp138[i]/(R*R);
	}

	ComplexVector ktemp1253(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1253 = fft(Nx,Ny,Nz,dV,rtemp1252);

	rtemp1252.free(); // Realspace
	ComplexVector ktemp1254(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp1254[0] = R*R*ktemp1253[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1254[i] = std::complex<double>(ktemp1253[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1253[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1255(Nx*Ny*Nz); // RS
	rtemp1255 = ifft(Nx,Ny,Nz,dV,ktemp1254);

	ktemp1254.free(); // KSpace
	Vector rtemp1256(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1256[i] = rtemp1255[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp1257(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1257 = fft(Nx,Ny,Nz,dV,rtemp1256);

	rtemp1256.free(); // Realspace
	{
		const int i = 0;
		ktemp1257[0] = R*R*ktemp1257[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1257[i] = std::complex<double>(ktemp1257[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1257[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1259(Nx*Ny*Nz); // RS
	rtemp1259 = ifft(Nx,Ny,Nz,dV,ktemp1257);

	ktemp1257.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1259[i] = rtemp1250[i] - 51.16402921524723*rtemp1259[i];
	}

	rtemp1250.free(); // Realspace
	Vector rtemp1261(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1261[i] = rtemp13[i]/(R*R);
	}

	ComplexVector ktemp1262(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1262 = fft(Nx,Ny,Nz,dV,rtemp1261);

	rtemp1261.free(); // Realspace
	ComplexVector ktemp1263(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp1263[0] = R*R*ktemp1262[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1263[i] = std::complex<double>(ktemp1262[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1262[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1264(Nx*Ny*Nz); // RS
	rtemp1264 = ifft(Nx,Ny,Nz,dV,ktemp1263);

	ktemp1263.free(); // KSpace
	Vector rtemp1265(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1265[i] = rtemp1264[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp1266(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1266 = fft(Nx,Ny,Nz,dV,rtemp1265);

	rtemp1265.free(); // Realspace
	{
		const int i = 0;
		ktemp1266[0] = R*R*ktemp1266[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1266[i] = std::complex<double>(ktemp1266[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1266[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1268(Nx*Ny*Nz); // RS
	rtemp1268 = ifft(Nx,Ny,Nz,dV,ktemp1266);

	ktemp1266.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1268[i] = rtemp1259[i] - 0.15791367041742974*rtemp1268[i];
	}

	rtemp1259.free(); // Realspace
	Vector rtemp1270(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1270[i] = rtemp147[i]/(R*R);
	}

	ComplexVector ktemp1271(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1271 = fft(Nx,Ny,Nz,dV,rtemp1270);

	rtemp1270.free(); // Realspace
	ComplexVector ktemp1272(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp1272[0] = R*R*ktemp1271[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1272[i] = std::complex<double>(ktemp1271[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1271[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1273(Nx*Ny*Nz); // RS
	rtemp1273 = ifft(Nx,Ny,Nz,dV,ktemp1272);

	ktemp1272.free(); // KSpace
	Vector rtemp1274(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1274[i] = rtemp1273[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp1275(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1275 = fft(Nx,Ny,Nz,dV,rtemp1274);

	rtemp1274.free(); // Realspace
	{
		const int i = 0;
		ktemp1275[0] = R*R*ktemp1275[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1275[i] = std::complex<double>(ktemp1275[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1275[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1277(Nx*Ny*Nz); // RS
	rtemp1277 = ifft(Nx,Ny,Nz,dV,ktemp1275);

	ktemp1275.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1277[i] = rtemp1268[i] + 112.43453333720996*rtemp1277[i];
	}

	rtemp1268.free(); // Realspace
	Vector rtemp1279(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1279[i] = rtemp156[i]/(R*R);
	}

	ComplexVector ktemp1280(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1280 = fft(Nx,Ny,Nz,dV,rtemp1279);

	rtemp1279.free(); // Realspace
	ComplexVector ktemp1281(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp1281[0] = R*R*ktemp1280[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1281[i] = std::complex<double>(ktemp1280[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1280[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1282(Nx*Ny*Nz); // RS
	rtemp1282 = ifft(Nx,Ny,Nz,dV,ktemp1281);

	ktemp1281.free(); // KSpace
	Vector rtemp1283(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1283[i] = rtemp1282[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp1284(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1284 = fft(Nx,Ny,Nz,dV,rtemp1283);

	rtemp1283.free(); // Realspace
	{
		const int i = 0;
		ktemp1284[0] = R*R*ktemp1284[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1284[i] = std::complex<double>(ktemp1284[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1284[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1286(Nx*Ny*Nz); // RS
	rtemp1286 = ifft(Nx,Ny,Nz,dV,ktemp1284);

	ktemp1284.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1286[i] = rtemp1277[i] - 462.37122698223425*rtemp1286[i];
	}

	rtemp1277.free(); // Realspace
	Vector rtemp1288(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1288[i] = rtemp165[i]/(R*R);
	}

	ComplexVector ktemp1289(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1289 = fft(Nx,Ny,Nz,dV,rtemp1288);

	rtemp1288.free(); // Realspace
	ComplexVector ktemp1290(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp1290[0] = R*R*ktemp1289[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1290[i] = std::complex<double>(ktemp1289[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1289[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1291(Nx*Ny*Nz); // RS
	rtemp1291 = ifft(Nx,Ny,Nz,dV,ktemp1290);

	ktemp1290.free(); // KSpace
	Vector rtemp1292(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1292[i] = rtemp1291[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp1293(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1293 = fft(Nx,Ny,Nz,dV,rtemp1292);

	rtemp1292.free(); // Realspace
	{
		const int i = 0;
		ktemp1293[0] = R*R*ktemp1293[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1293[i] = std::complex<double>(ktemp1293[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1293[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1295(Nx*Ny*Nz); // RS
	rtemp1295 = ifft(Nx,Ny,Nz,dV,ktemp1293);

	ktemp1293.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1295[i] = rtemp1286[i] + 330.355398513263*rtemp1295[i];
	}

	rtemp1286.free(); // Realspace
	Vector rtemp1297(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1297[i] = rtemp174[i]/(R*R);
	}

	ComplexVector ktemp1298(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1298 = fft(Nx,Ny,Nz,dV,rtemp1297);

	rtemp1297.free(); // Realspace
	ComplexVector ktemp1299(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp1299[0] = R*R*ktemp1298[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1299[i] = std::complex<double>(ktemp1298[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1298[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1300(Nx*Ny*Nz); // RS
	rtemp1300 = ifft(Nx,Ny,Nz,dV,ktemp1299);

	ktemp1299.free(); // KSpace
	Vector rtemp1301(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1301[i] = rtemp1300[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp1302(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1302 = fft(Nx,Ny,Nz,dV,rtemp1301);

	rtemp1301.free(); // Realspace
	{
		const int i = 0;
		ktemp1302[0] = R*R*ktemp1302[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1302[i] = std::complex<double>(ktemp1302[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1302[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1304(Nx*Ny*Nz); // RS
	rtemp1304 = ifft(Nx,Ny,Nz,dV,ktemp1302);

	ktemp1302.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1304[i] = rtemp1295[i] + 695.2938908479431*rtemp1304[i];
	}

	rtemp1295.free(); // Realspace
	Vector rtemp1306(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1306[i] = rtemp183[i]/(R*R);
	}

	ComplexVector ktemp1307(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1307 = fft(Nx,Ny,Nz,dV,rtemp1306);

	rtemp1306.free(); // Realspace
	ComplexVector ktemp1308(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp1308[0] = R*R*ktemp1307[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1308[i] = std::complex<double>(ktemp1307[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1307[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1309(Nx*Ny*Nz); // RS
	rtemp1309 = ifft(Nx,Ny,Nz,dV,ktemp1308);

	ktemp1308.free(); // KSpace
	Vector rtemp1310(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1310[i] = rtemp1309[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp1311(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1311 = fft(Nx,Ny,Nz,dV,rtemp1310);

	rtemp1310.free(); // Realspace
	{
		const int i = 0;
		ktemp1311[0] = R*R*ktemp1311[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1311[i] = std::complex<double>(ktemp1311[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1311[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1313(Nx*Ny*Nz); // RS
	rtemp1313 = ifft(Nx,Ny,Nz,dV,ktemp1311);

	ktemp1311.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1313[i] = rtemp1304[i] - 587.4388539528386*rtemp1313[i];
	}

	rtemp1304.free(); // Realspace
	Vector rtemp1315(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1315[i] = rtemp192[i]/(R*R);
	}

	ComplexVector ktemp1316(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1316 = fft(Nx,Ny,Nz,dV,rtemp1315);

	rtemp1315.free(); // Realspace
	ComplexVector ktemp1317(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp1317[0] = R*R*ktemp1316[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1317[i] = std::complex<double>(ktemp1316[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1316[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1318(Nx*Ny*Nz); // RS
	rtemp1318 = ifft(Nx,Ny,Nz,dV,ktemp1317);

	ktemp1317.free(); // KSpace
	Vector rtemp1319(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1319[i] = rtemp1318[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp1320(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1320 = fft(Nx,Ny,Nz,dV,rtemp1319);

	rtemp1319.free(); // Realspace
	{
		const int i = 0;
		ktemp1320[0] = R*R*ktemp1320[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1320[i] = std::complex<double>(ktemp1320[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1320[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1322(Nx*Ny*Nz); // RS
	rtemp1322 = ifft(Nx,Ny,Nz,dV,ktemp1320);

	ktemp1320.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1322[i] = rtemp1313[i] + 114.64532472305397*rtemp1322[i];
	}

	rtemp1313.free(); // Realspace
	Vector rtemp1324(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1324[i] = rtemp201[i]/(R*R);
	}

	ComplexVector ktemp1325(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1325 = fft(Nx,Ny,Nz,dV,rtemp1324);

	rtemp1324.free(); // Realspace
	ComplexVector ktemp1326(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp1326[0] = R*R*ktemp1325[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1326[i] = std::complex<double>(ktemp1325[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1325[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1327(Nx*Ny*Nz); // RS
	rtemp1327 = ifft(Nx,Ny,Nz,dV,ktemp1326);

	ktemp1326.free(); // KSpace
	Vector rtemp1328(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1328[i] = rtemp1327[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp1329(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1329 = fft(Nx,Ny,Nz,dV,rtemp1328);

	rtemp1328.free(); // Realspace
	{
		const int i = 0;
		ktemp1329[0] = R*R*ktemp1329[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1329[i] = std::complex<double>(ktemp1329[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1329[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1331(Nx*Ny*Nz); // RS
	rtemp1331 = ifft(Nx,Ny,Nz,dV,ktemp1329);

	ktemp1329.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1331[i] = rtemp1322[i] + 4.263669101270603*rtemp1331[i];
	}

	rtemp1322.free(); // Realspace
	Vector rtemp1333(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1333[i] = rtemp210[i]/(R*R);
	}

	ComplexVector ktemp1334(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1334 = fft(Nx,Ny,Nz,dV,rtemp1333);

	rtemp1333.free(); // Realspace
	ComplexVector ktemp1335(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp1335[0] = R*R*ktemp1334[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1335[i] = std::complex<double>(ktemp1334[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1334[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1336(Nx*Ny*Nz); // RS
	rtemp1336 = ifft(Nx,Ny,Nz,dV,ktemp1335);

	ktemp1335.free(); // KSpace
	Vector rtemp1337(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1337[i] = rtemp1336[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp1338(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1338 = fft(Nx,Ny,Nz,dV,rtemp1337);

	rtemp1337.free(); // Realspace
	{
		const int i = 0;
		ktemp1338[0] = R*R*ktemp1338[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1338[i] = std::complex<double>(ktemp1338[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1338[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1340(Nx*Ny*Nz); // RS
	rtemp1340 = ifft(Nx,Ny,Nz,dV,ktemp1338);

	ktemp1338.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1340[i] = rtemp1331[i] + 198.49748371470918*rtemp1340[i];
	}

	rtemp1331.free(); // Realspace
	Vector rtemp1342(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1342[i] = rtemp219[i]/(R*R);
	}

	ComplexVector ktemp1343(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1343 = fft(Nx,Ny,Nz,dV,rtemp1342);

	rtemp1342.free(); // Realspace
	ComplexVector ktemp1344(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp1344[0] = R*R*ktemp1343[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1344[i] = std::complex<double>(ktemp1343[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1343[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1345(Nx*Ny*Nz); // RS
	rtemp1345 = ifft(Nx,Ny,Nz,dV,ktemp1344);

	ktemp1344.free(); // KSpace
	Vector rtemp1346(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1346[i] = rtemp1345[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp1347(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1347 = fft(Nx,Ny,Nz,dV,rtemp1346);

	rtemp1346.free(); // Realspace
	{
		const int i = 0;
		ktemp1347[0] = R*R*ktemp1347[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1347[i] = std::complex<double>(ktemp1347[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1347[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1349(Nx*Ny*Nz); // RS
	rtemp1349 = ifft(Nx,Ny,Nz,dV,ktemp1347);

	ktemp1347.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1349[i] = rtemp1340[i] - 56.21726666860498*rtemp1349[i];
	}

	rtemp1340.free(); // Realspace
	Vector rtemp1351(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1351[i] = rtemp24[i]/(R*R);
	}

	ComplexVector ktemp1352(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1352 = fft(Nx,Ny,Nz,dV,rtemp1351);

	rtemp1351.free(); // Realspace
	ComplexVector ktemp1353(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp1353[0] = R*R*ktemp1352[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1353[i] = std::complex<double>(ktemp1352[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1352[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1354(Nx*Ny*Nz); // RS
	rtemp1354 = ifft(Nx,Ny,Nz,dV,ktemp1353);

	ktemp1353.free(); // KSpace
	Vector rtemp1355(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1355[i] = rtemp1354[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp1356(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1356 = fft(Nx,Ny,Nz,dV,rtemp1355);

	rtemp1355.free(); // Realspace
	{
		const int i = 0;
		ktemp1356[0] = R*R*ktemp1356[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1356[i] = std::complex<double>(ktemp1356[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1356[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1358(Nx*Ny*Nz); // RS
	rtemp1358 = ifft(Nx,Ny,Nz,dV,ktemp1356);

	ktemp1356.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1358[i] = rtemp1349[i] + 16.344064888203977*rtemp1358[i];
	}

	rtemp1349.free(); // Realspace
	Vector rtemp1360(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1360[i] = rtemp35[i]/(R*R);
	}

	ComplexVector ktemp1361(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1361 = fft(Nx,Ny,Nz,dV,rtemp1360);

	rtemp1360.free(); // Realspace
	ComplexVector ktemp1362(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp1362[0] = R*R*ktemp1361[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1362[i] = std::complex<double>(ktemp1361[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1361[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1363(Nx*Ny*Nz); // RS
	rtemp1363 = ifft(Nx,Ny,Nz,dV,ktemp1362);

	ktemp1362.free(); // KSpace
	Vector rtemp1364(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1364[i] = rtemp1363[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp1365(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1365 = fft(Nx,Ny,Nz,dV,rtemp1364);

	rtemp1364.free(); // Realspace
	{
		const int i = 0;
		ktemp1365[0] = R*R*ktemp1365[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1365[i] = std::complex<double>(ktemp1365[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1365[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1367(Nx*Ny*Nz); // RS
	rtemp1367 = ifft(Nx,Ny,Nz,dV,ktemp1365);

	ktemp1365.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1367[i] = rtemp1358[i] - 177.10018137314742*rtemp1367[i];
	}

	rtemp1358.free(); // Realspace
	Vector rtemp1369(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1369[i] = rtemp46[i]/(R*R);
	}

	ComplexVector ktemp1370(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1370 = fft(Nx,Ny,Nz,dV,rtemp1369);

	rtemp1369.free(); // Realspace
	ComplexVector ktemp1371(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp1371[0] = R*R*ktemp1370[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1371[i] = std::complex<double>(ktemp1370[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1370[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1372(Nx*Ny*Nz); // RS
	rtemp1372 = ifft(Nx,Ny,Nz,dV,ktemp1371);

	ktemp1371.free(); // KSpace
	Vector rtemp1373(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1373[i] = rtemp1372[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp1374(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1374 = fft(Nx,Ny,Nz,dV,rtemp1373);

	rtemp1373.free(); // Realspace
	{
		const int i = 0;
		ktemp1374[0] = R*R*ktemp1374[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1374[i] = std::complex<double>(ktemp1374[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1374[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1376(Nx*Ny*Nz); // RS
	rtemp1376 = ifft(Nx,Ny,Nz,dV,ktemp1374);

	ktemp1374.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1376[i] = rtemp1367[i] - 138.49028895608586*rtemp1376[i];
	}

	rtemp1367.free(); // Realspace
	Vector rtemp1378(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1378[i] = rtemp57[i]/(R*R);
	}

	ComplexVector ktemp1379(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1379 = fft(Nx,Ny,Nz,dV,rtemp1378);

	rtemp1378.free(); // Realspace
	ComplexVector ktemp1380(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp1380[0] = R*R*ktemp1379[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1380[i] = std::complex<double>(ktemp1379[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1379[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1381(Nx*Ny*Nz); // RS
	rtemp1381 = ifft(Nx,Ny,Nz,dV,ktemp1380);

	ktemp1380.free(); // KSpace
	Vector rtemp1382(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1382[i] = rtemp1381[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp1383(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1383 = fft(Nx,Ny,Nz,dV,rtemp1382);

	rtemp1382.free(); // Realspace
	{
		const int i = 0;
		ktemp1383[0] = R*R*ktemp1383[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1383[i] = std::complex<double>(ktemp1383[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1383[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1385(Nx*Ny*Nz); // RS
	rtemp1385 = ifft(Nx,Ny,Nz,dV,ktemp1383);

	ktemp1383.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1385[i] = rtemp1376[i] + 78.95683520871486*rtemp1385[i];
	}

	rtemp1376.free(); // Realspace
	Vector rtemp1387(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1387[i] = rtemp120[i]/R;
	}

	ComplexVector ktemp1388(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1388 = fft(Nx,Ny,Nz,dV,rtemp1387);

	rtemp1387.free(); // Realspace
	ComplexVector ktemp1389(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp1389[0] = -2.0*R*ktemp1388[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1389[i] = std::complex<double>(ktemp1388[i].real()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)),
				ktemp1388[i].imag()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)));
	}

	Vector rtemp1390(Nx*Ny*Nz); // RS
	rtemp1390 = ifft(Nx,Ny,Nz,dV,ktemp1389);

	ktemp1389.free(); // KSpace
	Vector rtemp1391(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1391[i] = rtemp1390[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp1392(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1392 = fft(Nx,Ny,Nz,dV,rtemp1391);

	rtemp1391.free(); // Realspace
	{
		const int i = 0;
		ktemp1392[0] = R*R*ktemp1392[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1392[i] = std::complex<double>(ktemp1392[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1392[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1394(Nx*Ny*Nz); // RS
	rtemp1394 = ifft(Nx,Ny,Nz,dV,ktemp1392);

	ktemp1392.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1394[i] = rtemp1385[i] - 25.897841948458478*rtemp1394[i];
	}

	rtemp1385.free(); // Realspace
	Vector rtemp1396(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1396[i] = rtemp129[i]/R;
	}

	ComplexVector ktemp1397(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1397 = fft(Nx,Ny,Nz,dV,rtemp1396);

	rtemp1396.free(); // Realspace
	ComplexVector ktemp1398(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp1398[0] = -2.0*R*ktemp1397[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1398[i] = std::complex<double>(ktemp1397[i].real()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)),
				ktemp1397[i].imag()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)));
	}

	Vector rtemp1399(Nx*Ny*Nz); // RS
	rtemp1399 = ifft(Nx,Ny,Nz,dV,ktemp1398);

	ktemp1398.free(); // KSpace
	Vector rtemp1400(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1400[i] = rtemp1399[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp1401(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1401 = fft(Nx,Ny,Nz,dV,rtemp1400);

	rtemp1400.free(); // Realspace
	{
		const int i = 0;
		ktemp1401[0] = R*R*ktemp1401[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1401[i] = std::complex<double>(ktemp1401[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1401[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1403(Nx*Ny*Nz); // RS
	rtemp1403 = ifft(Nx,Ny,Nz,dV,ktemp1401);

	ktemp1401.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1403[i] = rtemp1394[i] + 76.74604382287085*rtemp1403[i];
	}

	rtemp1394.free(); // Realspace
	Vector rtemp1405(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1405[i] = rtemp138[i]/R;
	}

	ComplexVector ktemp1406(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1406 = fft(Nx,Ny,Nz,dV,rtemp1405);

	rtemp1405.free(); // Realspace
	ComplexVector ktemp1407(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp1407[0] = -2.0*R*ktemp1406[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1407[i] = std::complex<double>(ktemp1406[i].real()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)),
				ktemp1406[i].imag()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)));
	}

	Vector rtemp1408(Nx*Ny*Nz); // RS
	rtemp1408 = ifft(Nx,Ny,Nz,dV,ktemp1407);

	ktemp1407.free(); // KSpace
	Vector rtemp1409(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1409[i] = rtemp1408[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp1410(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1410 = fft(Nx,Ny,Nz,dV,rtemp1409);

	rtemp1409.free(); // Realspace
	{
		const int i = 0;
		ktemp1410[0] = R*R*ktemp1410[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1410[i] = std::complex<double>(ktemp1410[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1410[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1412(Nx*Ny*Nz); // RS
	rtemp1412 = ifft(Nx,Ny,Nz,dV,ktemp1410);

	ktemp1410.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1412[i] = rtemp1403[i] - 51.16402921524723*rtemp1412[i];
	}

	rtemp1403.free(); // Realspace
	Vector rtemp1414(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1414[i] = rtemp13[i]/R;
	}

	ComplexVector ktemp1415(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1415 = fft(Nx,Ny,Nz,dV,rtemp1414);

	rtemp1414.free(); // Realspace
	ComplexVector ktemp1416(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp1416[0] = -2.0*R*ktemp1415[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1416[i] = std::complex<double>(ktemp1415[i].real()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)),
				ktemp1415[i].imag()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)));
	}

	Vector rtemp1417(Nx*Ny*Nz); // RS
	rtemp1417 = ifft(Nx,Ny,Nz,dV,ktemp1416);

	ktemp1416.free(); // KSpace
	Vector rtemp1418(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1418[i] = rtemp1417[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp1419(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1419 = fft(Nx,Ny,Nz,dV,rtemp1418);

	rtemp1418.free(); // Realspace
	{
		const int i = 0;
		ktemp1419[0] = R*R*ktemp1419[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1419[i] = std::complex<double>(ktemp1419[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1419[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1421(Nx*Ny*Nz); // RS
	rtemp1421 = ifft(Nx,Ny,Nz,dV,ktemp1419);

	ktemp1419.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1421[i] = rtemp1412[i] - 0.15791367041742974*rtemp1421[i];
	}

	rtemp1412.free(); // Realspace
	Vector rtemp1423(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1423[i] = rtemp147[i]/R;
	}

	ComplexVector ktemp1424(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1424 = fft(Nx,Ny,Nz,dV,rtemp1423);

	rtemp1423.free(); // Realspace
	ComplexVector ktemp1425(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp1425[0] = -2.0*R*ktemp1424[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1425[i] = std::complex<double>(ktemp1424[i].real()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)),
				ktemp1424[i].imag()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)));
	}

	Vector rtemp1426(Nx*Ny*Nz); // RS
	rtemp1426 = ifft(Nx,Ny,Nz,dV,ktemp1425);

	ktemp1425.free(); // KSpace
	Vector rtemp1427(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1427[i] = rtemp1426[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp1428(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1428 = fft(Nx,Ny,Nz,dV,rtemp1427);

	rtemp1427.free(); // Realspace
	{
		const int i = 0;
		ktemp1428[0] = R*R*ktemp1428[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1428[i] = std::complex<double>(ktemp1428[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1428[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1430(Nx*Ny*Nz); // RS
	rtemp1430 = ifft(Nx,Ny,Nz,dV,ktemp1428);

	ktemp1428.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1430[i] = rtemp1421[i] + 112.43453333720996*rtemp1430[i];
	}

	rtemp1421.free(); // Realspace
	Vector rtemp1432(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1432[i] = rtemp156[i]/R;
	}

	ComplexVector ktemp1433(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1433 = fft(Nx,Ny,Nz,dV,rtemp1432);

	rtemp1432.free(); // Realspace
	ComplexVector ktemp1434(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp1434[0] = -2.0*R*ktemp1433[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1434[i] = std::complex<double>(ktemp1433[i].real()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)),
				ktemp1433[i].imag()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)));
	}

	Vector rtemp1435(Nx*Ny*Nz); // RS
	rtemp1435 = ifft(Nx,Ny,Nz,dV,ktemp1434);

	ktemp1434.free(); // KSpace
	Vector rtemp1436(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1436[i] = rtemp1435[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp1437(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1437 = fft(Nx,Ny,Nz,dV,rtemp1436);

	rtemp1436.free(); // Realspace
	{
		const int i = 0;
		ktemp1437[0] = R*R*ktemp1437[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1437[i] = std::complex<double>(ktemp1437[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1437[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1439(Nx*Ny*Nz); // RS
	rtemp1439 = ifft(Nx,Ny,Nz,dV,ktemp1437);

	ktemp1437.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1439[i] = rtemp1430[i] - 462.37122698223425*rtemp1439[i];
	}

	rtemp1430.free(); // Realspace
	Vector rtemp1441(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1441[i] = rtemp165[i]/R;
	}

	ComplexVector ktemp1442(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1442 = fft(Nx,Ny,Nz,dV,rtemp1441);

	rtemp1441.free(); // Realspace
	ComplexVector ktemp1443(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp1443[0] = -2.0*R*ktemp1442[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1443[i] = std::complex<double>(ktemp1442[i].real()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)),
				ktemp1442[i].imag()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)));
	}

	Vector rtemp1444(Nx*Ny*Nz); // RS
	rtemp1444 = ifft(Nx,Ny,Nz,dV,ktemp1443);

	ktemp1443.free(); // KSpace
	Vector rtemp1445(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1445[i] = rtemp1444[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp1446(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1446 = fft(Nx,Ny,Nz,dV,rtemp1445);

	rtemp1445.free(); // Realspace
	{
		const int i = 0;
		ktemp1446[0] = R*R*ktemp1446[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1446[i] = std::complex<double>(ktemp1446[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1446[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1448(Nx*Ny*Nz); // RS
	rtemp1448 = ifft(Nx,Ny,Nz,dV,ktemp1446);

	ktemp1446.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1448[i] = rtemp1439[i] + 330.355398513263*rtemp1448[i];
	}

	rtemp1439.free(); // Realspace
	Vector rtemp1450(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1450[i] = rtemp174[i]/R;
	}

	ComplexVector ktemp1451(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1451 = fft(Nx,Ny,Nz,dV,rtemp1450);

	rtemp1450.free(); // Realspace
	ComplexVector ktemp1452(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp1452[0] = -2.0*R*ktemp1451[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1452[i] = std::complex<double>(ktemp1451[i].real()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)),
				ktemp1451[i].imag()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)));
	}

	Vector rtemp1453(Nx*Ny*Nz); // RS
	rtemp1453 = ifft(Nx,Ny,Nz,dV,ktemp1452);

	ktemp1452.free(); // KSpace
	Vector rtemp1454(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1454[i] = rtemp1453[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp1455(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1455 = fft(Nx,Ny,Nz,dV,rtemp1454);

	rtemp1454.free(); // Realspace
	{
		const int i = 0;
		ktemp1455[0] = R*R*ktemp1455[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1455[i] = std::complex<double>(ktemp1455[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1455[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1457(Nx*Ny*Nz); // RS
	rtemp1457 = ifft(Nx,Ny,Nz,dV,ktemp1455);

	ktemp1455.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1457[i] = rtemp1448[i] + 695.2938908479431*rtemp1457[i];
	}

	rtemp1448.free(); // Realspace
	Vector rtemp1459(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1459[i] = rtemp183[i]/R;
	}

	ComplexVector ktemp1460(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1460 = fft(Nx,Ny,Nz,dV,rtemp1459);

	rtemp1459.free(); // Realspace
	ComplexVector ktemp1461(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp1461[0] = -2.0*R*ktemp1460[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1461[i] = std::complex<double>(ktemp1460[i].real()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)),
				ktemp1460[i].imag()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)));
	}

	Vector rtemp1462(Nx*Ny*Nz); // RS
	rtemp1462 = ifft(Nx,Ny,Nz,dV,ktemp1461);

	ktemp1461.free(); // KSpace
	Vector rtemp1463(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1463[i] = rtemp1462[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp1464(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1464 = fft(Nx,Ny,Nz,dV,rtemp1463);

	rtemp1463.free(); // Realspace
	{
		const int i = 0;
		ktemp1464[0] = R*R*ktemp1464[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1464[i] = std::complex<double>(ktemp1464[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1464[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1466(Nx*Ny*Nz); // RS
	rtemp1466 = ifft(Nx,Ny,Nz,dV,ktemp1464);

	ktemp1464.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1466[i] = rtemp1457[i] - 587.4388539528386*rtemp1466[i];
	}

	rtemp1457.free(); // Realspace
	Vector rtemp1468(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1468[i] = rtemp192[i]/R;
	}

	ComplexVector ktemp1469(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1469 = fft(Nx,Ny,Nz,dV,rtemp1468);

	rtemp1468.free(); // Realspace
	ComplexVector ktemp1470(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp1470[0] = -2.0*R*ktemp1469[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1470[i] = std::complex<double>(ktemp1469[i].real()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)),
				ktemp1469[i].imag()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)));
	}

	Vector rtemp1471(Nx*Ny*Nz); // RS
	rtemp1471 = ifft(Nx,Ny,Nz,dV,ktemp1470);

	ktemp1470.free(); // KSpace
	Vector rtemp1472(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1472[i] = rtemp1471[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp1473(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1473 = fft(Nx,Ny,Nz,dV,rtemp1472);

	rtemp1472.free(); // Realspace
	{
		const int i = 0;
		ktemp1473[0] = R*R*ktemp1473[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1473[i] = std::complex<double>(ktemp1473[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1473[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1475(Nx*Ny*Nz); // RS
	rtemp1475 = ifft(Nx,Ny,Nz,dV,ktemp1473);

	ktemp1473.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1475[i] = rtemp1466[i] + 114.64532472305397*rtemp1475[i];
	}

	rtemp1466.free(); // Realspace
	Vector rtemp1477(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1477[i] = rtemp201[i]/R;
	}

	ComplexVector ktemp1478(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1478 = fft(Nx,Ny,Nz,dV,rtemp1477);

	rtemp1477.free(); // Realspace
	ComplexVector ktemp1479(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp1479[0] = -2.0*R*ktemp1478[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1479[i] = std::complex<double>(ktemp1478[i].real()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)),
				ktemp1478[i].imag()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)));
	}

	Vector rtemp1480(Nx*Ny*Nz); // RS
	rtemp1480 = ifft(Nx,Ny,Nz,dV,ktemp1479);

	ktemp1479.free(); // KSpace
	Vector rtemp1481(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1481[i] = rtemp1480[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp1482(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1482 = fft(Nx,Ny,Nz,dV,rtemp1481);

	rtemp1481.free(); // Realspace
	{
		const int i = 0;
		ktemp1482[0] = R*R*ktemp1482[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1482[i] = std::complex<double>(ktemp1482[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1482[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1484(Nx*Ny*Nz); // RS
	rtemp1484 = ifft(Nx,Ny,Nz,dV,ktemp1482);

	ktemp1482.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1484[i] = rtemp1475[i] + 4.263669101270603*rtemp1484[i];
	}

	rtemp1475.free(); // Realspace
	Vector rtemp1486(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1486[i] = rtemp210[i]/R;
	}

	ComplexVector ktemp1487(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1487 = fft(Nx,Ny,Nz,dV,rtemp1486);

	rtemp1486.free(); // Realspace
	ComplexVector ktemp1488(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp1488[0] = -2.0*R*ktemp1487[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1488[i] = std::complex<double>(ktemp1487[i].real()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)),
				ktemp1487[i].imag()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)));
	}

	Vector rtemp1489(Nx*Ny*Nz); // RS
	rtemp1489 = ifft(Nx,Ny,Nz,dV,ktemp1488);

	ktemp1488.free(); // KSpace
	Vector rtemp1490(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1490[i] = rtemp1489[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp1491(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1491 = fft(Nx,Ny,Nz,dV,rtemp1490);

	rtemp1490.free(); // Realspace
	{
		const int i = 0;
		ktemp1491[0] = R*R*ktemp1491[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1491[i] = std::complex<double>(ktemp1491[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1491[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1493(Nx*Ny*Nz); // RS
	rtemp1493 = ifft(Nx,Ny,Nz,dV,ktemp1491);

	ktemp1491.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1493[i] = rtemp1484[i] + 198.49748371470918*rtemp1493[i];
	}

	rtemp1484.free(); // Realspace
	Vector rtemp1495(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1495[i] = rtemp219[i]/R;
	}

	ComplexVector ktemp1496(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1496 = fft(Nx,Ny,Nz,dV,rtemp1495);

	rtemp1495.free(); // Realspace
	ComplexVector ktemp1497(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp1497[0] = -2.0*R*ktemp1496[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1497[i] = std::complex<double>(ktemp1496[i].real()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)),
				ktemp1496[i].imag()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)));
	}

	Vector rtemp1498(Nx*Ny*Nz); // RS
	rtemp1498 = ifft(Nx,Ny,Nz,dV,ktemp1497);

	ktemp1497.free(); // KSpace
	Vector rtemp1499(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1499[i] = rtemp1498[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp1500(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1500 = fft(Nx,Ny,Nz,dV,rtemp1499);

	rtemp1499.free(); // Realspace
	{
		const int i = 0;
		ktemp1500[0] = R*R*ktemp1500[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1500[i] = std::complex<double>(ktemp1500[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1500[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1502(Nx*Ny*Nz); // RS
	rtemp1502 = ifft(Nx,Ny,Nz,dV,ktemp1500);

	ktemp1500.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1502[i] = rtemp1493[i] - 56.21726666860498*rtemp1502[i];
	}

	rtemp1493.free(); // Realspace
	Vector rtemp1504(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1504[i] = rtemp24[i]/R;
	}

	ComplexVector ktemp1505(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1505 = fft(Nx,Ny,Nz,dV,rtemp1504);

	rtemp1504.free(); // Realspace
	ComplexVector ktemp1506(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp1506[0] = -2.0*R*ktemp1505[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1506[i] = std::complex<double>(ktemp1505[i].real()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)),
				ktemp1505[i].imag()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)));
	}

	Vector rtemp1507(Nx*Ny*Nz); // RS
	rtemp1507 = ifft(Nx,Ny,Nz,dV,ktemp1506);

	ktemp1506.free(); // KSpace
	Vector rtemp1508(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1508[i] = rtemp1507[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp1509(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1509 = fft(Nx,Ny,Nz,dV,rtemp1508);

	rtemp1508.free(); // Realspace
	{
		const int i = 0;
		ktemp1509[0] = R*R*ktemp1509[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1509[i] = std::complex<double>(ktemp1509[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1509[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1511(Nx*Ny*Nz); // RS
	rtemp1511 = ifft(Nx,Ny,Nz,dV,ktemp1509);

	ktemp1509.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1511[i] = rtemp1502[i] + 16.344064888203977*rtemp1511[i];
	}

	rtemp1502.free(); // Realspace
	Vector rtemp1513(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1513[i] = rtemp35[i]/R;
	}

	ComplexVector ktemp1514(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1514 = fft(Nx,Ny,Nz,dV,rtemp1513);

	rtemp1513.free(); // Realspace
	ComplexVector ktemp1515(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp1515[0] = -2.0*R*ktemp1514[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1515[i] = std::complex<double>(ktemp1514[i].real()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)),
				ktemp1514[i].imag()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)));
	}

	Vector rtemp1516(Nx*Ny*Nz); // RS
	rtemp1516 = ifft(Nx,Ny,Nz,dV,ktemp1515);

	ktemp1515.free(); // KSpace
	Vector rtemp1517(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1517[i] = rtemp1516[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp1518(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1518 = fft(Nx,Ny,Nz,dV,rtemp1517);

	rtemp1517.free(); // Realspace
	{
		const int i = 0;
		ktemp1518[0] = R*R*ktemp1518[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1518[i] = std::complex<double>(ktemp1518[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1518[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1520(Nx*Ny*Nz); // RS
	rtemp1520 = ifft(Nx,Ny,Nz,dV,ktemp1518);

	ktemp1518.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1520[i] = rtemp1511[i] - 177.10018137314742*rtemp1520[i];
	}

	rtemp1511.free(); // Realspace
	Vector rtemp1522(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1522[i] = rtemp46[i]/R;
	}

	ComplexVector ktemp1523(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1523 = fft(Nx,Ny,Nz,dV,rtemp1522);

	rtemp1522.free(); // Realspace
	ComplexVector ktemp1524(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp1524[0] = -2.0*R*ktemp1523[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1524[i] = std::complex<double>(ktemp1523[i].real()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)),
				ktemp1523[i].imag()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)));
	}

	Vector rtemp1525(Nx*Ny*Nz); // RS
	rtemp1525 = ifft(Nx,Ny,Nz,dV,ktemp1524);

	ktemp1524.free(); // KSpace
	Vector rtemp1526(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1526[i] = rtemp1525[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp1527(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1527 = fft(Nx,Ny,Nz,dV,rtemp1526);

	rtemp1526.free(); // Realspace
	{
		const int i = 0;
		ktemp1527[0] = R*R*ktemp1527[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1527[i] = std::complex<double>(ktemp1527[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1527[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1529(Nx*Ny*Nz); // RS
	rtemp1529 = ifft(Nx,Ny,Nz,dV,ktemp1527);

	ktemp1527.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1529[i] = rtemp1520[i] - 138.49028895608586*rtemp1529[i];
	}

	rtemp1520.free(); // Realspace
	Vector rtemp1531(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1531[i] = rtemp57[i]/R;
	}

	ComplexVector ktemp1532(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1532 = fft(Nx,Ny,Nz,dV,rtemp1531);

	rtemp1531.free(); // Realspace
	ComplexVector ktemp1533(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp1533[0] = -2.0*R*ktemp1532[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1533[i] = std::complex<double>(ktemp1532[i].real()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)),
				ktemp1532[i].imag()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)));
	}

	Vector rtemp1534(Nx*Ny*Nz); // RS
	rtemp1534 = ifft(Nx,Ny,Nz,dV,ktemp1533);

	ktemp1533.free(); // KSpace
	Vector rtemp1535(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1535[i] = rtemp1534[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp1536(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1536 = fft(Nx,Ny,Nz,dV,rtemp1535);

	rtemp1535.free(); // Realspace
	{
		const int i = 0;
		ktemp1536[0] = R*R*ktemp1536[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1536[i] = std::complex<double>(ktemp1536[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1536[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp1538(Nx*Ny*Nz); // RS
	rtemp1538 = ifft(Nx,Ny,Nz,dV,ktemp1536);

	ktemp1536.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1538[i] = rtemp1529[i] + 78.95683520871486*rtemp1538[i];
	}

	rtemp1529.free(); // Realspace
	Vector rtemp1540(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1540[i] = dV*kT*rtemp73[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp1541(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1541 = fft(Nx,Ny,Nz,dV,rtemp1540);

	rtemp1540.free(); // Realspace
	ktemp1541[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1541[i] = std::complex<double>(-1.0*ktemp1541[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1541[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1543(Nx*Ny*Nz); // RS
	rtemp1543 = ifft(Nx,Ny,Nz,dV,ktemp1541);

	ktemp1541.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1543[i] = rtemp1538[i] + rtemp1543[i];
	}

	rtemp1538.free(); // Realspace
	Vector rtemp1545(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1545[i] = rtemp123[i]*rtemp73[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp1546(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1546 = fft(Nx,Ny,Nz,dV,rtemp1545);

	rtemp1545.free(); // Realspace
	ktemp1546[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1546[i] = std::complex<double>(-1.0*ktemp1546[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1546[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1548(Nx*Ny*Nz); // RS
	rtemp1548 = ifft(Nx,Ny,Nz,dV,ktemp1546);

	ktemp1546.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1548[i] = rtemp1543[i] + 25.897841948458478*rtemp1548[i];
	}

	rtemp1543.free(); // Realspace
	Vector rtemp1550(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1550[i] = rtemp132[i]*rtemp73[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp1551(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1551 = fft(Nx,Ny,Nz,dV,rtemp1550);

	rtemp1550.free(); // Realspace
	ktemp1551[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1551[i] = std::complex<double>(-1.0*ktemp1551[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1551[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1553(Nx*Ny*Nz); // RS
	rtemp1553 = ifft(Nx,Ny,Nz,dV,ktemp1551);

	ktemp1551.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1553[i] = rtemp1548[i] - 76.74604382287085*rtemp1553[i];
	}

	rtemp1548.free(); // Realspace
	Vector rtemp1555(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1555[i] = rtemp141[i]*rtemp73[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp1556(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1556 = fft(Nx,Ny,Nz,dV,rtemp1555);

	rtemp1555.free(); // Realspace
	ktemp1556[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1556[i] = std::complex<double>(-1.0*ktemp1556[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1556[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1558(Nx*Ny*Nz); // RS
	rtemp1558 = ifft(Nx,Ny,Nz,dV,ktemp1556);

	ktemp1556.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1558[i] = rtemp1553[i] + 51.16402921524723*rtemp1558[i];
	}

	rtemp1553.free(); // Realspace
	Vector rtemp1560(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1560[i] = rtemp150[i]*rtemp73[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp1561(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1561 = fft(Nx,Ny,Nz,dV,rtemp1560);

	rtemp1560.free(); // Realspace
	ktemp1561[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1561[i] = std::complex<double>(-1.0*ktemp1561[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1561[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1563(Nx*Ny*Nz); // RS
	rtemp1563 = ifft(Nx,Ny,Nz,dV,ktemp1561);

	ktemp1561.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1563[i] = rtemp1558[i] - 112.43453333720996*rtemp1563[i];
	}

	rtemp1558.free(); // Realspace
	Vector rtemp1565(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1565[i] = rtemp159[i]*rtemp73[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp1566(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1566 = fft(Nx,Ny,Nz,dV,rtemp1565);

	rtemp1565.free(); // Realspace
	ktemp1566[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1566[i] = std::complex<double>(-1.0*ktemp1566[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1566[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1568(Nx*Ny*Nz); // RS
	rtemp1568 = ifft(Nx,Ny,Nz,dV,ktemp1566);

	ktemp1566.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1568[i] = rtemp1563[i] + 462.37122698223425*rtemp1568[i];
	}

	rtemp1563.free(); // Realspace
	Vector rtemp1570(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1570[i] = rtemp168[i]*rtemp73[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp1571(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1571 = fft(Nx,Ny,Nz,dV,rtemp1570);

	rtemp1570.free(); // Realspace
	ktemp1571[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1571[i] = std::complex<double>(-1.0*ktemp1571[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1571[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1573(Nx*Ny*Nz); // RS
	rtemp1573 = ifft(Nx,Ny,Nz,dV,ktemp1571);

	ktemp1571.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1573[i] = rtemp1568[i] - 330.355398513263*rtemp1573[i];
	}

	rtemp1568.free(); // Realspace
	Vector rtemp1575(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1575[i] = rtemp16[i]*rtemp73[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp1576(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1576 = fft(Nx,Ny,Nz,dV,rtemp1575);

	rtemp1575.free(); // Realspace
	ktemp1576[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1576[i] = std::complex<double>(-1.0*ktemp1576[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1576[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1578(Nx*Ny*Nz); // RS
	rtemp1578 = ifft(Nx,Ny,Nz,dV,ktemp1576);

	ktemp1576.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1578[i] = rtemp1573[i] + 0.15791367041742974*rtemp1578[i];
	}

	rtemp1573.free(); // Realspace
	Vector rtemp1580(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1580[i] = rtemp177[i]*rtemp73[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp1581(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1581 = fft(Nx,Ny,Nz,dV,rtemp1580);

	rtemp1580.free(); // Realspace
	ktemp1581[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1581[i] = std::complex<double>(-1.0*ktemp1581[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1581[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1583(Nx*Ny*Nz); // RS
	rtemp1583 = ifft(Nx,Ny,Nz,dV,ktemp1581);

	ktemp1581.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1583[i] = rtemp1578[i] - 695.2938908479431*rtemp1583[i];
	}

	rtemp1578.free(); // Realspace
	Vector rtemp1585(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1585[i] = rtemp186[i]*rtemp73[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp1586(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1586 = fft(Nx,Ny,Nz,dV,rtemp1585);

	rtemp1585.free(); // Realspace
	ktemp1586[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1586[i] = std::complex<double>(-1.0*ktemp1586[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1586[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1588(Nx*Ny*Nz); // RS
	rtemp1588 = ifft(Nx,Ny,Nz,dV,ktemp1586);

	ktemp1586.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1588[i] = rtemp1583[i] + 587.4388539528386*rtemp1588[i];
	}

	rtemp1583.free(); // Realspace
	Vector rtemp1590(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1590[i] = rtemp195[i]*rtemp73[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp1591(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1591 = fft(Nx,Ny,Nz,dV,rtemp1590);

	rtemp1590.free(); // Realspace
	ktemp1591[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1591[i] = std::complex<double>(-1.0*ktemp1591[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1591[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1593(Nx*Ny*Nz); // RS
	rtemp1593 = ifft(Nx,Ny,Nz,dV,ktemp1591);

	ktemp1591.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1593[i] = rtemp1588[i] - 114.64532472305397*rtemp1593[i];
	}

	rtemp1588.free(); // Realspace
	Vector rtemp1595(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1595[i] = rtemp204[i]*rtemp73[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp1596(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1596 = fft(Nx,Ny,Nz,dV,rtemp1595);

	rtemp1595.free(); // Realspace
	ktemp1596[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1596[i] = std::complex<double>(-1.0*ktemp1596[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1596[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1598(Nx*Ny*Nz); // RS
	rtemp1598 = ifft(Nx,Ny,Nz,dV,ktemp1596);

	ktemp1596.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1598[i] = rtemp1593[i] - 4.263669101270603*rtemp1598[i];
	}

	rtemp1593.free(); // Realspace
	Vector rtemp1600(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1600[i] = rtemp213[i]*rtemp73[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp1601(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1601 = fft(Nx,Ny,Nz,dV,rtemp1600);

	rtemp1600.free(); // Realspace
	ktemp1601[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1601[i] = std::complex<double>(-1.0*ktemp1601[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1601[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1603(Nx*Ny*Nz); // RS
	rtemp1603 = ifft(Nx,Ny,Nz,dV,ktemp1601);

	ktemp1601.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1603[i] = rtemp1598[i] - 198.49748371470918*rtemp1603[i];
	}

	rtemp1598.free(); // Realspace
	Vector rtemp1605(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1605[i] = rtemp222[i]*rtemp73[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp1606(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1606 = fft(Nx,Ny,Nz,dV,rtemp1605);

	rtemp1605.free(); // Realspace
	ktemp1606[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1606[i] = std::complex<double>(-1.0*ktemp1606[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1606[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1608(Nx*Ny*Nz); // RS
	rtemp1608 = ifft(Nx,Ny,Nz,dV,ktemp1606);

	ktemp1606.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1608[i] = rtemp1603[i] + 56.21726666860498*rtemp1608[i];
	}

	rtemp1603.free(); // Realspace
	Vector rtemp1610(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1610[i] = rtemp27[i]*rtemp73[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp1611(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1611 = fft(Nx,Ny,Nz,dV,rtemp1610);

	rtemp1610.free(); // Realspace
	ktemp1611[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1611[i] = std::complex<double>(-1.0*ktemp1611[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1611[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1613(Nx*Ny*Nz); // RS
	rtemp1613 = ifft(Nx,Ny,Nz,dV,ktemp1611);

	ktemp1611.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1613[i] = rtemp1608[i] - 16.344064888203977*rtemp1613[i];
	}

	rtemp1608.free(); // Realspace
	Vector rtemp1615(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1615[i] = rtemp38[i]*rtemp73[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp1616(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1616 = fft(Nx,Ny,Nz,dV,rtemp1615);

	rtemp1615.free(); // Realspace
	ktemp1616[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1616[i] = std::complex<double>(-1.0*ktemp1616[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1616[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1618(Nx*Ny*Nz); // RS
	rtemp1618 = ifft(Nx,Ny,Nz,dV,ktemp1616);

	ktemp1616.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1618[i] = rtemp1613[i] + 177.10018137314742*rtemp1618[i];
	}

	rtemp1613.free(); // Realspace
	Vector rtemp1620(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1620[i] = rtemp49[i]*rtemp73[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp1621(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1621 = fft(Nx,Ny,Nz,dV,rtemp1620);

	rtemp1620.free(); // Realspace
	ktemp1621[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1621[i] = std::complex<double>(-1.0*ktemp1621[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1621[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1623(Nx*Ny*Nz); // RS
	rtemp1623 = ifft(Nx,Ny,Nz,dV,ktemp1621);

	ktemp1621.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1623[i] = rtemp1618[i] + 138.49028895608586*rtemp1623[i];
	}

	rtemp1618.free(); // Realspace
	Vector rtemp1625(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1625[i] = rtemp60[i]*rtemp73[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp1626(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1626 = fft(Nx,Ny,Nz,dV,rtemp1625);

	rtemp1625.free(); // Realspace
	ktemp1626[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1626[i] = std::complex<double>(-1.0*ktemp1626[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1626[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1628(Nx*Ny*Nz); // RS
	rtemp1628 = ifft(Nx,Ny,Nz,dV,ktemp1626);

	ktemp1626.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1628[i] = rtemp1623[i] - 78.95683520871486*rtemp1628[i];
	}

	rtemp1623.free(); // Realspace
	Vector rtemp1630(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1630[i] = rtemp478[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp1631(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1631 = fft(Nx,Ny,Nz,dV,rtemp1630);

	rtemp1630.free(); // Realspace
	ktemp1631[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1631[i] = std::complex<double>(-1.0*ktemp1631[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1631[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1633(Nx*Ny*Nz); // RS
	rtemp1633 = ifft(Nx,Ny,Nz,dV,ktemp1631);

	ktemp1631.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1633[i] = rtemp1628[i] - 25.897841948458478*rtemp1633[i];
	}

	rtemp1628.free(); // Realspace
	Vector rtemp1635(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1635[i] = rtemp485[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp1636(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1636 = fft(Nx,Ny,Nz,dV,rtemp1635);

	rtemp1635.free(); // Realspace
	ktemp1636[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1636[i] = std::complex<double>(-1.0*ktemp1636[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1636[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1638(Nx*Ny*Nz); // RS
	rtemp1638 = ifft(Nx,Ny,Nz,dV,ktemp1636);

	ktemp1636.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1638[i] = rtemp1633[i] + 76.74604382287085*rtemp1638[i];
	}

	rtemp1633.free(); // Realspace
	Vector rtemp1640(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1640[i] = rtemp492[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp1641(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1641 = fft(Nx,Ny,Nz,dV,rtemp1640);

	rtemp1640.free(); // Realspace
	ktemp1641[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1641[i] = std::complex<double>(-1.0*ktemp1641[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1641[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1643(Nx*Ny*Nz); // RS
	rtemp1643 = ifft(Nx,Ny,Nz,dV,ktemp1641);

	ktemp1641.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1643[i] = rtemp1638[i] - 51.16402921524723*rtemp1643[i];
	}

	rtemp1638.free(); // Realspace
	Vector rtemp1645(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1645[i] = rtemp499[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp1646(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1646 = fft(Nx,Ny,Nz,dV,rtemp1645);

	rtemp1645.free(); // Realspace
	ktemp1646[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1646[i] = std::complex<double>(-1.0*ktemp1646[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1646[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1648(Nx*Ny*Nz); // RS
	rtemp1648 = ifft(Nx,Ny,Nz,dV,ktemp1646);

	ktemp1646.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1648[i] = rtemp1643[i] + 112.43453333720996*rtemp1648[i];
	}

	rtemp1643.free(); // Realspace
	Vector rtemp1650(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1650[i] = rtemp506[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp1651(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1651 = fft(Nx,Ny,Nz,dV,rtemp1650);

	rtemp1650.free(); // Realspace
	ktemp1651[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1651[i] = std::complex<double>(-1.0*ktemp1651[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1651[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1653(Nx*Ny*Nz); // RS
	rtemp1653 = ifft(Nx,Ny,Nz,dV,ktemp1651);

	ktemp1651.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1653[i] = rtemp1648[i] - 462.37122698223425*rtemp1653[i];
	}

	rtemp1648.free(); // Realspace
	Vector rtemp1655(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1655[i] = rtemp513[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp1656(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1656 = fft(Nx,Ny,Nz,dV,rtemp1655);

	rtemp1655.free(); // Realspace
	ktemp1656[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1656[i] = std::complex<double>(-1.0*ktemp1656[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1656[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1658(Nx*Ny*Nz); // RS
	rtemp1658 = ifft(Nx,Ny,Nz,dV,ktemp1656);

	ktemp1656.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1658[i] = rtemp1653[i] - 0.15791367041742974*rtemp1658[i];
	}

	rtemp1653.free(); // Realspace
	Vector rtemp1660(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1660[i] = rtemp520[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp1661(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1661 = fft(Nx,Ny,Nz,dV,rtemp1660);

	rtemp1660.free(); // Realspace
	ktemp1661[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1661[i] = std::complex<double>(-1.0*ktemp1661[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1661[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1663(Nx*Ny*Nz); // RS
	rtemp1663 = ifft(Nx,Ny,Nz,dV,ktemp1661);

	ktemp1661.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1663[i] = rtemp1658[i] + 330.355398513263*rtemp1663[i];
	}

	rtemp1658.free(); // Realspace
	Vector rtemp1665(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1665[i] = rtemp527[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp1666(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1666 = fft(Nx,Ny,Nz,dV,rtemp1665);

	rtemp1665.free(); // Realspace
	ktemp1666[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1666[i] = std::complex<double>(-1.0*ktemp1666[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1666[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1668(Nx*Ny*Nz); // RS
	rtemp1668 = ifft(Nx,Ny,Nz,dV,ktemp1666);

	ktemp1666.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1668[i] = rtemp1663[i] + 695.2938908479431*rtemp1668[i];
	}

	rtemp1663.free(); // Realspace
	Vector rtemp1670(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1670[i] = rtemp534[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp1671(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1671 = fft(Nx,Ny,Nz,dV,rtemp1670);

	rtemp1670.free(); // Realspace
	ktemp1671[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1671[i] = std::complex<double>(-1.0*ktemp1671[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1671[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1673(Nx*Ny*Nz); // RS
	rtemp1673 = ifft(Nx,Ny,Nz,dV,ktemp1671);

	ktemp1671.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1673[i] = rtemp1668[i] - 587.4388539528386*rtemp1673[i];
	}

	rtemp1668.free(); // Realspace
	Vector rtemp1675(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1675[i] = rtemp541[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp1676(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1676 = fft(Nx,Ny,Nz,dV,rtemp1675);

	rtemp1675.free(); // Realspace
	ktemp1676[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1676[i] = std::complex<double>(-1.0*ktemp1676[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1676[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1678(Nx*Ny*Nz); // RS
	rtemp1678 = ifft(Nx,Ny,Nz,dV,ktemp1676);

	ktemp1676.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1678[i] = rtemp1673[i] + 114.64532472305397*rtemp1678[i];
	}

	rtemp1673.free(); // Realspace
	Vector rtemp1680(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1680[i] = rtemp548[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp1681(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1681 = fft(Nx,Ny,Nz,dV,rtemp1680);

	rtemp1680.free(); // Realspace
	ktemp1681[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1681[i] = std::complex<double>(-1.0*ktemp1681[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1681[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1683(Nx*Ny*Nz); // RS
	rtemp1683 = ifft(Nx,Ny,Nz,dV,ktemp1681);

	ktemp1681.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1683[i] = rtemp1678[i] + 4.263669101270603*rtemp1683[i];
	}

	rtemp1678.free(); // Realspace
	Vector rtemp1685(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1685[i] = rtemp555[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp1686(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1686 = fft(Nx,Ny,Nz,dV,rtemp1685);

	rtemp1685.free(); // Realspace
	ktemp1686[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1686[i] = std::complex<double>(-1.0*ktemp1686[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1686[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1688(Nx*Ny*Nz); // RS
	rtemp1688 = ifft(Nx,Ny,Nz,dV,ktemp1686);

	ktemp1686.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1688[i] = rtemp1683[i] + 198.49748371470918*rtemp1688[i];
	}

	rtemp1683.free(); // Realspace
	Vector rtemp1690(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1690[i] = rtemp562[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp1691(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1691 = fft(Nx,Ny,Nz,dV,rtemp1690);

	rtemp1690.free(); // Realspace
	ktemp1691[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1691[i] = std::complex<double>(-1.0*ktemp1691[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1691[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1693(Nx*Ny*Nz); // RS
	rtemp1693 = ifft(Nx,Ny,Nz,dV,ktemp1691);

	ktemp1691.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1693[i] = rtemp1688[i] - 56.21726666860498*rtemp1693[i];
	}

	rtemp1688.free(); // Realspace
	Vector rtemp1695(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1695[i] = rtemp569[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp1696(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1696 = fft(Nx,Ny,Nz,dV,rtemp1695);

	rtemp1695.free(); // Realspace
	ktemp1696[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1696[i] = std::complex<double>(-1.0*ktemp1696[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1696[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1698(Nx*Ny*Nz); // RS
	rtemp1698 = ifft(Nx,Ny,Nz,dV,ktemp1696);

	ktemp1696.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1698[i] = rtemp1693[i] + 16.344064888203977*rtemp1698[i];
	}

	rtemp1693.free(); // Realspace
	Vector rtemp1700(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1700[i] = rtemp576[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp1701(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1701 = fft(Nx,Ny,Nz,dV,rtemp1700);

	rtemp1700.free(); // Realspace
	ktemp1701[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1701[i] = std::complex<double>(-1.0*ktemp1701[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1701[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1703(Nx*Ny*Nz); // RS
	rtemp1703 = ifft(Nx,Ny,Nz,dV,ktemp1701);

	ktemp1701.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1703[i] = rtemp1698[i] - 177.10018137314742*rtemp1703[i];
	}

	rtemp1698.free(); // Realspace
	Vector rtemp1705(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1705[i] = rtemp583[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp1706(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1706 = fft(Nx,Ny,Nz,dV,rtemp1705);

	rtemp1705.free(); // Realspace
	ktemp1706[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1706[i] = std::complex<double>(-1.0*ktemp1706[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1706[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1708(Nx*Ny*Nz); // RS
	rtemp1708 = ifft(Nx,Ny,Nz,dV,ktemp1706);

	ktemp1706.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1708[i] = rtemp1703[i] - 138.49028895608586*rtemp1708[i];
	}

	rtemp1703.free(); // Realspace
	Vector rtemp1710(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1710[i] = rtemp590[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp1711(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1711 = fft(Nx,Ny,Nz,dV,rtemp1710);

	rtemp1710.free(); // Realspace
	ktemp1711[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1711[i] = std::complex<double>(-1.0*ktemp1711[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1711[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1713(Nx*Ny*Nz); // RS
	rtemp1713 = ifft(Nx,Ny,Nz,dV,ktemp1711);

	ktemp1711.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1713[i] = rtemp1708[i] + 78.95683520871486*rtemp1713[i];
	}

	rtemp1708.free(); // Realspace
	Vector rtemp1715(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1715[i] = 7.957747154594767e-2*dV*kT*rtemp73[i]/R/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp1716(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1716 = fft(Nx,Ny,Nz,dV,rtemp1715);

	rtemp1715.free(); // Realspace
	ktemp1716[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1716[i] = std::complex<double>(-1.0*ktemp1716[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1716[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1718(Nx*Ny*Nz); // RS
	rtemp1718 = ifft(Nx,Ny,Nz,dV,ktemp1716);

	ktemp1716.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1718[i] = rtemp1713[i] + 12.566370614359172*rtemp1718[i];
	}

	rtemp1713.free(); // Realspace
	Vector rtemp1720(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp1720[i] = dV*kT*rtemp67[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp1721(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1721 = fft(Nx,Ny,Nz,dV,rtemp1720);

	rtemp1720.free(); // Realspace
	ktemp1721[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1721[i] = std::complex<double>(-1.0*ktemp1721[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1721[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1723(Nx*Ny*Nz); // RS
	rtemp1723 = ifft(Nx,Ny,Nz,dV,ktemp1721);

	ktemp1721.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1723[i] = rtemp1718[i] + 0.6666666666666667*rtemp1723[i];
	}

	rtemp1718.free(); // Realspace
	Vector rtemp1725(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1725[i] = 7.957747154594767e-2*rtemp123[i]*rtemp73[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp1726(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1726 = fft(Nx,Ny,Nz,dV,rtemp1725);

	rtemp1725.free(); // Realspace
	ktemp1726[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1726[i] = std::complex<double>(-1.0*ktemp1726[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1726[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1728(Nx*Ny*Nz); // RS
	rtemp1728 = ifft(Nx,Ny,Nz,dV,ktemp1726);

	ktemp1726.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1728[i] = rtemp1723[i] + 325.4418800364269*rtemp1728[i];
	}

	rtemp1723.free(); // Realspace
	Vector rtemp1730(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1730[i] = 7.957747154594767e-2*rtemp132[i]*rtemp73[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp1731(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1731 = fft(Nx,Ny,Nz,dV,rtemp1730);

	rtemp1730.free(); // Realspace
	ktemp1731[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1731[i] = std::complex<double>(-1.0*ktemp1731[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1731[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1733(Nx*Ny*Nz); // RS
	rtemp1733 = ifft(Nx,Ny,Nz,dV,ktemp1731);

	ktemp1731.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1733[i] = rtemp1728[i] - 964.4192298640455*rtemp1733[i];
	}

	rtemp1728.free(); // Realspace
	Vector rtemp1735(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1735[i] = 7.957747154594767e-2*rtemp141[i]*rtemp73[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp1736(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1736 = fft(Nx,Ny,Nz,dV,rtemp1735);

	rtemp1735.free(); // Realspace
	ktemp1736[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1736[i] = std::complex<double>(-1.0*ktemp1736[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1736[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1738(Nx*Ny*Nz); // RS
	rtemp1738 = ifft(Nx,Ny,Nz,dV,ktemp1736);

	ktemp1736.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1738[i] = rtemp1733[i] + 642.946153242697*rtemp1738[i];
	}

	rtemp1733.free(); // Realspace
	Vector rtemp1740(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1740[i] = 7.957747154594767e-2*rtemp150[i]*rtemp73[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp1741(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1741 = fft(Nx,Ny,Nz,dV,rtemp1740);

	rtemp1740.free(); // Realspace
	ktemp1741[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1741[i] = std::complex<double>(-1.0*ktemp1741[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1741[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1743(Nx*Ny*Nz); // RS
	rtemp1743 = ifft(Nx,Ny,Nz,dV,ktemp1741);

	ktemp1741.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1743[i] = rtemp1738[i] - 1412.894015767902*rtemp1743[i];
	}

	rtemp1738.free(); // Realspace
	Vector rtemp1745(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1745[i] = 7.957747154594767e-2*rtemp159[i]*rtemp73[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp1746(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1746 = fft(Nx,Ny,Nz,dV,rtemp1745);

	rtemp1745.free(); // Realspace
	ktemp1746[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1746[i] = std::complex<double>(-1.0*ktemp1746[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1746[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1748(Nx*Ny*Nz); // RS
	rtemp1748 = ifft(Nx,Ny,Nz,dV,ktemp1746);

	ktemp1746.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1748[i] = rtemp1743[i] + 5810.328199674744*rtemp1748[i];
	}

	rtemp1743.free(); // Realspace
	Vector rtemp1750(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1750[i] = 7.957747154594767e-2*rtemp168[i]*rtemp73[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp1751(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1751 = fft(Nx,Ny,Nz,dV,rtemp1750);

	rtemp1750.free(); // Realspace
	ktemp1751[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1751[i] = std::complex<double>(-1.0*ktemp1751[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1751[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1753(Nx*Ny*Nz); // RS
	rtemp1753 = ifft(Nx,Ny,Nz,dV,ktemp1751);

	ktemp1751.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1753[i] = rtemp1748[i] - 4151.368372171983*rtemp1753[i];
	}

	rtemp1748.free(); // Realspace
	Vector rtemp1755(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1755[i] = 7.957747154594767e-2*rtemp16[i]*rtemp73[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp1756(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1756 = fft(Nx,Ny,Nz,dV,rtemp1755);

	rtemp1755.free(); // Realspace
	ktemp1756[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1756[i] = std::complex<double>(-1.0*ktemp1756[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1756[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1758(Nx*Ny*Nz); // RS
	rtemp1758 = ifft(Nx,Ny,Nz,dV,ktemp1756);

	ktemp1756.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1758[i] = rtemp1753[i] + 1.9844017075391884*rtemp1758[i];
	}

	rtemp1753.free(); // Realspace
	Vector rtemp1760(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1760[i] = 7.957747154594767e-2*rtemp177[i]*rtemp73[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp1761(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1761 = fft(Nx,Ny,Nz,dV,rtemp1760);

	rtemp1760.free(); // Realspace
	ktemp1761[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1761[i] = std::complex<double>(-1.0*ktemp1761[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1761[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1763(Nx*Ny*Nz); // RS
	rtemp1763 = ifft(Nx,Ny,Nz,dV,ktemp1761);

	ktemp1761.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1763[i] = rtemp1758[i] - 8737.320718295045*rtemp1763[i];
	}

	rtemp1758.free(); // Realspace
	Vector rtemp1765(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1765[i] = 7.957747154594767e-2*rtemp186[i]*rtemp73[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp1766(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1766 = fft(Nx,Ny,Nz,dV,rtemp1765);

	rtemp1765.free(); // Realspace
	ktemp1766[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1766[i] = std::complex<double>(-1.0*ktemp1766[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1766[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1768(Nx*Ny*Nz); // RS
	rtemp1768 = ifft(Nx,Ny,Nz,dV,ktemp1766);

	ktemp1766.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1768[i] = rtemp1763[i] + 7381.9743520457805*rtemp1768[i];
	}

	rtemp1763.free(); // Realspace
	Vector rtemp1770(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1770[i] = 7.957747154594767e-2*rtemp195[i]*rtemp73[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp1771(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1771 = fft(Nx,Ny,Nz,dV,rtemp1770);

	rtemp1770.free(); // Realspace
	ktemp1771[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1771[i] = std::complex<double>(-1.0*ktemp1771[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1771[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1773(Nx*Ny*Nz); // RS
	rtemp1773 = ifft(Nx,Ny,Nz,dV,ktemp1771);

	ktemp1771.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1773[i] = rtemp1768[i] - 1440.6756396734506*rtemp1773[i];
	}

	rtemp1768.free(); // Realspace
	Vector rtemp1775(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1775[i] = 7.957747154594767e-2*rtemp204[i]*rtemp73[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp1776(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1776 = fft(Nx,Ny,Nz,dV,rtemp1775);

	rtemp1775.free(); // Realspace
	ktemp1776[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1776[i] = std::complex<double>(-1.0*ktemp1776[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1776[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1778(Nx*Ny*Nz); // RS
	rtemp1778 = ifft(Nx,Ny,Nz,dV,ktemp1776);

	ktemp1776.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1778[i] = rtemp1773[i] - 53.578846103558085*rtemp1778[i];
	}

	rtemp1773.free(); // Realspace
	Vector rtemp1780(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1780[i] = 7.957747154594767e-2*rtemp213[i]*rtemp73[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp1781(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1781 = fft(Nx,Ny,Nz,dV,rtemp1780);

	rtemp1780.free(); // Realspace
	ktemp1781[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1781[i] = std::complex<double>(-1.0*ktemp1781[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1781[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1783(Nx*Ny*Nz); // RS
	rtemp1783 = ifft(Nx,Ny,Nz,dV,ktemp1781);

	ktemp1781.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1783[i] = rtemp1778[i] - 2494.3929463767595*rtemp1783[i];
	}

	rtemp1778.free(); // Realspace
	Vector rtemp1785(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1785[i] = 7.957747154594767e-2*rtemp222[i]*rtemp73[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp1786(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1786 = fft(Nx,Ny,Nz,dV,rtemp1785);

	rtemp1785.free(); // Realspace
	ktemp1786[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1786[i] = std::complex<double>(-1.0*ktemp1786[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1786[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1788(Nx*Ny*Nz); // RS
	rtemp1788 = ifft(Nx,Ny,Nz,dV,ktemp1786);

	ktemp1786.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1788[i] = rtemp1783[i] + 706.447007883951*rtemp1788[i];
	}

	rtemp1783.free(); // Realspace
	Vector rtemp1790(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1790[i] = 7.957747154594767e-2*rtemp27[i]*rtemp73[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp1791(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1791 = fft(Nx,Ny,Nz,dV,rtemp1790);

	rtemp1790.free(); // Realspace
	ktemp1791[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1791[i] = std::complex<double>(-1.0*ktemp1791[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1791[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1793(Nx*Ny*Nz); // RS
	rtemp1793 = ifft(Nx,Ny,Nz,dV,ktemp1791);

	ktemp1791.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1793[i] = rtemp1788[i] - 205.38557673030598*rtemp1793[i];
	}

	rtemp1788.free(); // Realspace
	Vector rtemp1795(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1795[i] = 7.957747154594767e-2*rtemp38[i]*rtemp73[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp1796(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1796 = fft(Nx,Ny,Nz,dV,rtemp1795);

	rtemp1795.free(); // Realspace
	ktemp1796[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1796[i] = std::complex<double>(-1.0*ktemp1796[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1796[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1798(Nx*Ny*Nz); // RS
	rtemp1798 = ifft(Nx,Ny,Nz,dV,ktemp1796);

	ktemp1796.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1798[i] = rtemp1793[i] + 2225.5065150051996*rtemp1798[i];
	}

	rtemp1793.free(); // Realspace
	Vector rtemp1800(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1800[i] = 7.957747154594767e-2*rtemp49[i]*rtemp73[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp1801(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1801 = fft(Nx,Ny,Nz,dV,rtemp1800);

	rtemp1800.free(); // Realspace
	ktemp1801[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1801[i] = std::complex<double>(-1.0*ktemp1801[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1801[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1803(Nx*Ny*Nz); // RS
	rtemp1803 = ifft(Nx,Ny,Nz,dV,ktemp1801);

	ktemp1801.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1803[i] = rtemp1798[i] + 1740.320297511868*rtemp1803[i];
	}

	rtemp1798.free(); // Realspace
	Vector rtemp1805(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1805[i] = 7.957747154594767e-2*rtemp60[i]*rtemp73[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp1806(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1806 = fft(Nx,Ny,Nz,dV,rtemp1805);

	rtemp1805.free(); // Realspace
	ktemp1806[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1806[i] = std::complex<double>(-1.0*ktemp1806[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1806[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1808(Nx*Ny*Nz); // RS
	rtemp1808 = ifft(Nx,Ny,Nz,dV,ktemp1806);

	ktemp1806.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1808[i] = rtemp1803[i] - 992.2008537695941*rtemp1808[i];
	}

	rtemp1803.free(); // Realspace
	Vector rtemp1810(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp1810[i] = t3*t4*t4*rtemp123[i]*rtemp67[i]*rtemp73[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp1811(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1811 = fft(Nx,Ny,Nz,dV,rtemp1810);

	rtemp1810.free(); // Realspace
	ktemp1811[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1811[i] = std::complex<double>(-1.0*ktemp1811[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1811[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1813(Nx*Ny*Nz); // RS
	rtemp1813 = ifft(Nx,Ny,Nz,dV,ktemp1811);

	ktemp1811.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1813[i] = rtemp1808[i] + 1952.6512802185614*rtemp1813[i];
	}

	rtemp1808.free(); // Realspace
	Vector rtemp1815(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp1815[i] = t3*t4*t4*rtemp132[i]*rtemp67[i]*rtemp73[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp1816(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1816 = fft(Nx,Ny,Nz,dV,rtemp1815);

	rtemp1815.free(); // Realspace
	ktemp1816[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1816[i] = std::complex<double>(-1.0*ktemp1816[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1816[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1818(Nx*Ny*Nz); // RS
	rtemp1818 = ifft(Nx,Ny,Nz,dV,ktemp1816);

	ktemp1816.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1818[i] = rtemp1813[i] - 5786.515379184273*rtemp1818[i];
	}

	rtemp1813.free(); // Realspace
	Vector rtemp1820(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp1820[i] = t3*t4*t4*rtemp141[i]*rtemp67[i]*rtemp73[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp1821(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1821 = fft(Nx,Ny,Nz,dV,rtemp1820);

	rtemp1820.free(); // Realspace
	ktemp1821[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1821[i] = std::complex<double>(-1.0*ktemp1821[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1821[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1823(Nx*Ny*Nz); // RS
	rtemp1823 = ifft(Nx,Ny,Nz,dV,ktemp1821);

	ktemp1821.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1823[i] = rtemp1818[i] + 3857.676919456182*rtemp1823[i];
	}

	rtemp1818.free(); // Realspace
	Vector rtemp1825(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp1825[i] = t3*t4*t4*rtemp150[i]*rtemp67[i]*rtemp73[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp1826(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1826 = fft(Nx,Ny,Nz,dV,rtemp1825);

	rtemp1825.free(); // Realspace
	ktemp1826[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1826[i] = std::complex<double>(-1.0*ktemp1826[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1826[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1828(Nx*Ny*Nz); // RS
	rtemp1828 = ifft(Nx,Ny,Nz,dV,ktemp1826);

	ktemp1826.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1828[i] = rtemp1823[i] - 8477.364094607412*rtemp1828[i];
	}

	rtemp1823.free(); // Realspace
	Vector rtemp1830(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp1830[i] = t3*t4*t4*rtemp159[i]*rtemp67[i]*rtemp73[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp1831(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1831 = fft(Nx,Ny,Nz,dV,rtemp1830);

	rtemp1830.free(); // Realspace
	ktemp1831[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1831[i] = std::complex<double>(-1.0*ktemp1831[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1831[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1833(Nx*Ny*Nz); // RS
	rtemp1833 = ifft(Nx,Ny,Nz,dV,ktemp1831);

	ktemp1831.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1833[i] = rtemp1828[i] + 34861.96919804846*rtemp1833[i];
	}

	rtemp1828.free(); // Realspace
	Vector rtemp1835(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp1835[i] = t3*t4*t4*rtemp168[i]*rtemp67[i]*rtemp73[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp1836(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1836 = fft(Nx,Ny,Nz,dV,rtemp1835);

	rtemp1835.free(); // Realspace
	ktemp1836[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1836[i] = std::complex<double>(-1.0*ktemp1836[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1836[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1838(Nx*Ny*Nz); // RS
	rtemp1838 = ifft(Nx,Ny,Nz,dV,ktemp1836);

	ktemp1836.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1838[i] = rtemp1833[i] - 24908.210233031892*rtemp1838[i];
	}

	rtemp1833.free(); // Realspace
	Vector rtemp1840(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp1840[i] = t3*t4*t4*rtemp16[i]*rtemp67[i]*rtemp73[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp1841(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1841 = fft(Nx,Ny,Nz,dV,rtemp1840);

	rtemp1840.free(); // Realspace
	ktemp1841[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1841[i] = std::complex<double>(-1.0*ktemp1841[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1841[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1843(Nx*Ny*Nz); // RS
	rtemp1843 = ifft(Nx,Ny,Nz,dV,ktemp1841);

	ktemp1841.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1843[i] = rtemp1838[i] + 11.90641024523513*rtemp1843[i];
	}

	rtemp1838.free(); // Realspace
	Vector rtemp1845(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp1845[i] = t3*t4*t4*rtemp177[i]*rtemp67[i]*rtemp73[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp1846(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1846 = fft(Nx,Ny,Nz,dV,rtemp1845);

	rtemp1845.free(); // Realspace
	ktemp1846[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1846[i] = std::complex<double>(-1.0*ktemp1846[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1846[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1848(Nx*Ny*Nz); // RS
	rtemp1848 = ifft(Nx,Ny,Nz,dV,ktemp1846);

	ktemp1846.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1848[i] = rtemp1843[i] - 52423.92430977027*rtemp1848[i];
	}

	rtemp1843.free(); // Realspace
	Vector rtemp1850(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp1850[i] = t3*t4*t4*rtemp186[i]*rtemp67[i]*rtemp73[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp1851(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1851 = fft(Nx,Ny,Nz,dV,rtemp1850);

	rtemp1850.free(); // Realspace
	ktemp1851[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1851[i] = std::complex<double>(-1.0*ktemp1851[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1851[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1853(Nx*Ny*Nz); // RS
	rtemp1853 = ifft(Nx,Ny,Nz,dV,ktemp1851);

	ktemp1851.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1853[i] = rtemp1848[i] + 44291.84611227468*rtemp1853[i];
	}

	rtemp1848.free(); // Realspace
	Vector rtemp1855(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp1855[i] = t3*t4*t4*rtemp195[i]*rtemp67[i]*rtemp73[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp1856(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1856 = fft(Nx,Ny,Nz,dV,rtemp1855);

	rtemp1855.free(); // Realspace
	ktemp1856[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1856[i] = std::complex<double>(-1.0*ktemp1856[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1856[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1858(Nx*Ny*Nz); // RS
	rtemp1858 = ifft(Nx,Ny,Nz,dV,ktemp1856);

	ktemp1856.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1858[i] = rtemp1853[i] - 8644.053838040703*rtemp1858[i];
	}

	rtemp1853.free(); // Realspace
	Vector rtemp1860(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp1860[i] = t3*t4*t4*rtemp204[i]*rtemp67[i]*rtemp73[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp1861(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1861 = fft(Nx,Ny,Nz,dV,rtemp1860);

	rtemp1860.free(); // Realspace
	ktemp1861[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1861[i] = std::complex<double>(-1.0*ktemp1861[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1861[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1863(Nx*Ny*Nz); // RS
	rtemp1863 = ifft(Nx,Ny,Nz,dV,ktemp1861);

	ktemp1861.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1863[i] = rtemp1858[i] - 321.4730766213485*rtemp1863[i];
	}

	rtemp1858.free(); // Realspace
	Vector rtemp1865(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp1865[i] = t3*t4*t4*rtemp213[i]*rtemp67[i]*rtemp73[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp1866(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1866 = fft(Nx,Ny,Nz,dV,rtemp1865);

	rtemp1865.free(); // Realspace
	ktemp1866[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1866[i] = std::complex<double>(-1.0*ktemp1866[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1866[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1868(Nx*Ny*Nz); // RS
	rtemp1868 = ifft(Nx,Ny,Nz,dV,ktemp1866);

	ktemp1866.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1868[i] = rtemp1863[i] - 14966.357678260558*rtemp1868[i];
	}

	rtemp1863.free(); // Realspace
	Vector rtemp1870(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp1870[i] = t3*t4*t4*rtemp222[i]*rtemp67[i]*rtemp73[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp1871(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1871 = fft(Nx,Ny,Nz,dV,rtemp1870);

	rtemp1870.free(); // Realspace
	ktemp1871[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1871[i] = std::complex<double>(-1.0*ktemp1871[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1871[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1873(Nx*Ny*Nz); // RS
	rtemp1873 = ifft(Nx,Ny,Nz,dV,ktemp1871);

	ktemp1871.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1873[i] = rtemp1868[i] + 4238.682047303706*rtemp1873[i];
	}

	rtemp1868.free(); // Realspace
	Vector rtemp1875(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp1875[i] = t3*t4*t4*rtemp27[i]*rtemp67[i]*rtemp73[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp1876(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1876 = fft(Nx,Ny,Nz,dV,rtemp1875);

	rtemp1875.free(); // Realspace
	ktemp1876[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1876[i] = std::complex<double>(-1.0*ktemp1876[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1876[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1878(Nx*Ny*Nz); // RS
	rtemp1878 = ifft(Nx,Ny,Nz,dV,ktemp1876);

	ktemp1876.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1878[i] = rtemp1873[i] - 1232.313460381836*rtemp1878[i];
	}

	rtemp1873.free(); // Realspace
	Vector rtemp1880(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp1880[i] = t3*t4*t4*rtemp38[i]*rtemp67[i]*rtemp73[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp1881(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1881 = fft(Nx,Ny,Nz,dV,rtemp1880);

	rtemp1880.free(); // Realspace
	ktemp1881[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1881[i] = std::complex<double>(-1.0*ktemp1881[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1881[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1883(Nx*Ny*Nz); // RS
	rtemp1883 = ifft(Nx,Ny,Nz,dV,ktemp1881);

	ktemp1881.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1883[i] = rtemp1878[i] + 13353.039090031198*rtemp1883[i];
	}

	rtemp1878.free(); // Realspace
	Vector rtemp1885(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp1885[i] = t3*t4*t4*rtemp49[i]*rtemp67[i]*rtemp73[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp1886(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1886 = fft(Nx,Ny,Nz,dV,rtemp1885);

	rtemp1885.free(); // Realspace
	ktemp1886[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1886[i] = std::complex<double>(-1.0*ktemp1886[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1886[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1888(Nx*Ny*Nz); // RS
	rtemp1888 = ifft(Nx,Ny,Nz,dV,ktemp1886);

	ktemp1886.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1888[i] = rtemp1883[i] + 10441.921785071208*rtemp1888[i];
	}

	rtemp1883.free(); // Realspace
	Vector rtemp1890(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp1890[i] = t3*t4*t4*rtemp60[i]*rtemp67[i]*rtemp73[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp1891(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1891 = fft(Nx,Ny,Nz,dV,rtemp1890);

	rtemp1890.free(); // Realspace
	ktemp1891[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1891[i] = std::complex<double>(-1.0*ktemp1891[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1891[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1893(Nx*Ny*Nz); // RS
	rtemp1893 = ifft(Nx,Ny,Nz,dV,ktemp1891);

	ktemp1891.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1893[i] = rtemp1888[i] - 5953.2051226175645*rtemp1893[i];
	}

	rtemp1888.free(); // Realspace
	Vector rtemp1895(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp1895[i] = rtemp478[i]*rtemp67[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp1896(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1896 = fft(Nx,Ny,Nz,dV,rtemp1895);

	rtemp1895.free(); // Realspace
	ktemp1896[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1896[i] = std::complex<double>(-1.0*ktemp1896[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1896[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1898(Nx*Ny*Nz); // RS
	rtemp1898 = ifft(Nx,Ny,Nz,dV,ktemp1896);

	ktemp1896.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1898[i] = rtemp1893[i] - 17.265227965638985*rtemp1898[i];
	}

	rtemp1893.free(); // Realspace
	Vector rtemp1900(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp1900[i] = rtemp485[i]*rtemp67[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp1901(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1901 = fft(Nx,Ny,Nz,dV,rtemp1900);

	rtemp1900.free(); // Realspace
	ktemp1901[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1901[i] = std::complex<double>(-1.0*ktemp1901[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1901[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1903(Nx*Ny*Nz); // RS
	rtemp1903 = ifft(Nx,Ny,Nz,dV,ktemp1901);

	ktemp1901.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1903[i] = rtemp1898[i] + 51.16402921524723*rtemp1903[i];
	}

	rtemp1898.free(); // Realspace
	Vector rtemp1905(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp1905[i] = rtemp492[i]*rtemp67[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp1906(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1906 = fft(Nx,Ny,Nz,dV,rtemp1905);

	rtemp1905.free(); // Realspace
	ktemp1906[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1906[i] = std::complex<double>(-1.0*ktemp1906[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1906[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1908(Nx*Ny*Nz); // RS
	rtemp1908 = ifft(Nx,Ny,Nz,dV,ktemp1906);

	ktemp1906.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1908[i] = rtemp1903[i] - 34.10935281016482*rtemp1908[i];
	}

	rtemp1903.free(); // Realspace
	Vector rtemp1910(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp1910[i] = rtemp499[i]*rtemp67[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp1911(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1911 = fft(Nx,Ny,Nz,dV,rtemp1910);

	rtemp1910.free(); // Realspace
	ktemp1911[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1911[i] = std::complex<double>(-1.0*ktemp1911[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1911[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1913(Nx*Ny*Nz); // RS
	rtemp1913 = ifft(Nx,Ny,Nz,dV,ktemp1911);

	ktemp1911.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1913[i] = rtemp1908[i] + 74.95635555813998*rtemp1913[i];
	}

	rtemp1908.free(); // Realspace
	Vector rtemp1915(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp1915[i] = rtemp506[i]*rtemp67[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp1916(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1916 = fft(Nx,Ny,Nz,dV,rtemp1915);

	rtemp1915.free(); // Realspace
	ktemp1916[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1916[i] = std::complex<double>(-1.0*ktemp1916[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1916[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1918(Nx*Ny*Nz); // RS
	rtemp1918 = ifft(Nx,Ny,Nz,dV,ktemp1916);

	ktemp1916.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1918[i] = rtemp1913[i] - 308.2474846548228*rtemp1918[i];
	}

	rtemp1913.free(); // Realspace
	Vector rtemp1920(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp1920[i] = rtemp513[i]*rtemp67[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp1921(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1921 = fft(Nx,Ny,Nz,dV,rtemp1920);

	rtemp1920.free(); // Realspace
	ktemp1921[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1921[i] = std::complex<double>(-1.0*ktemp1921[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1921[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1923(Nx*Ny*Nz); // RS
	rtemp1923 = ifft(Nx,Ny,Nz,dV,ktemp1921);

	ktemp1921.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1923[i] = rtemp1918[i] - 0.10527578027828648*rtemp1923[i];
	}

	rtemp1918.free(); // Realspace
	Vector rtemp1925(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp1925[i] = rtemp520[i]*rtemp67[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp1926(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1926 = fft(Nx,Ny,Nz,dV,rtemp1925);

	rtemp1925.free(); // Realspace
	ktemp1926[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1926[i] = std::complex<double>(-1.0*ktemp1926[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1926[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1928(Nx*Ny*Nz); // RS
	rtemp1928 = ifft(Nx,Ny,Nz,dV,ktemp1926);

	ktemp1926.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1928[i] = rtemp1923[i] + 220.23693234217532*rtemp1928[i];
	}

	rtemp1923.free(); // Realspace
	Vector rtemp1930(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp1930[i] = rtemp527[i]*rtemp67[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp1931(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1931 = fft(Nx,Ny,Nz,dV,rtemp1930);

	rtemp1930.free(); // Realspace
	ktemp1931[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1931[i] = std::complex<double>(-1.0*ktemp1931[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1931[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1933(Nx*Ny*Nz); // RS
	rtemp1933 = ifft(Nx,Ny,Nz,dV,ktemp1931);

	ktemp1931.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1933[i] = rtemp1928[i] + 463.5292605652953*rtemp1933[i];
	}

	rtemp1928.free(); // Realspace
	Vector rtemp1935(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp1935[i] = rtemp534[i]*rtemp67[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp1936(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1936 = fft(Nx,Ny,Nz,dV,rtemp1935);

	rtemp1935.free(); // Realspace
	ktemp1936[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1936[i] = std::complex<double>(-1.0*ktemp1936[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1936[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1938(Nx*Ny*Nz); // RS
	rtemp1938 = ifft(Nx,Ny,Nz,dV,ktemp1936);

	ktemp1936.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1938[i] = rtemp1933[i] - 391.6259026352257*rtemp1938[i];
	}

	rtemp1933.free(); // Realspace
	Vector rtemp1940(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp1940[i] = rtemp541[i]*rtemp67[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp1941(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1941 = fft(Nx,Ny,Nz,dV,rtemp1940);

	rtemp1940.free(); // Realspace
	ktemp1941[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1941[i] = std::complex<double>(-1.0*ktemp1941[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1941[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1943(Nx*Ny*Nz); // RS
	rtemp1943 = ifft(Nx,Ny,Nz,dV,ktemp1941);

	ktemp1941.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1943[i] = rtemp1938[i] + 76.43021648203597*rtemp1943[i];
	}

	rtemp1938.free(); // Realspace
	Vector rtemp1945(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp1945[i] = rtemp548[i]*rtemp67[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp1946(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1946 = fft(Nx,Ny,Nz,dV,rtemp1945);

	rtemp1945.free(); // Realspace
	ktemp1946[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1946[i] = std::complex<double>(-1.0*ktemp1946[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1946[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1948(Nx*Ny*Nz); // RS
	rtemp1948 = ifft(Nx,Ny,Nz,dV,ktemp1946);

	ktemp1946.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1948[i] = rtemp1943[i] + 2.842446067513735*rtemp1948[i];
	}

	rtemp1943.free(); // Realspace
	Vector rtemp1950(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp1950[i] = rtemp555[i]*rtemp67[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp1951(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1951 = fft(Nx,Ny,Nz,dV,rtemp1950);

	rtemp1950.free(); // Realspace
	ktemp1951[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1951[i] = std::complex<double>(-1.0*ktemp1951[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1951[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1953(Nx*Ny*Nz); // RS
	rtemp1953 = ifft(Nx,Ny,Nz,dV,ktemp1951);

	ktemp1951.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1953[i] = rtemp1948[i] + 132.3316558098061*rtemp1953[i];
	}

	rtemp1948.free(); // Realspace
	Vector rtemp1955(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp1955[i] = rtemp562[i]*rtemp67[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp1956(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1956 = fft(Nx,Ny,Nz,dV,rtemp1955);

	rtemp1955.free(); // Realspace
	ktemp1956[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1956[i] = std::complex<double>(-1.0*ktemp1956[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1956[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1958(Nx*Ny*Nz); // RS
	rtemp1958 = ifft(Nx,Ny,Nz,dV,ktemp1956);

	ktemp1956.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1958[i] = rtemp1953[i] - 37.47817777906999*rtemp1958[i];
	}

	rtemp1953.free(); // Realspace
	Vector rtemp1960(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp1960[i] = rtemp569[i]*rtemp67[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp1961(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1961 = fft(Nx,Ny,Nz,dV,rtemp1960);

	rtemp1960.free(); // Realspace
	ktemp1961[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1961[i] = std::complex<double>(-1.0*ktemp1961[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1961[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1963(Nx*Ny*Nz); // RS
	rtemp1963 = ifft(Nx,Ny,Nz,dV,ktemp1961);

	ktemp1961.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1963[i] = rtemp1958[i] + 10.89604325880265*rtemp1963[i];
	}

	rtemp1958.free(); // Realspace
	Vector rtemp1965(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp1965[i] = rtemp576[i]*rtemp67[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp1966(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1966 = fft(Nx,Ny,Nz,dV,rtemp1965);

	rtemp1965.free(); // Realspace
	ktemp1966[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1966[i] = std::complex<double>(-1.0*ktemp1966[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1966[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1968(Nx*Ny*Nz); // RS
	rtemp1968 = ifft(Nx,Ny,Nz,dV,ktemp1966);

	ktemp1966.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1968[i] = rtemp1963[i] - 118.06678758209827*rtemp1968[i];
	}

	rtemp1963.free(); // Realspace
	Vector rtemp1970(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp1970[i] = rtemp583[i]*rtemp67[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp1971(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1971 = fft(Nx,Ny,Nz,dV,rtemp1970);

	rtemp1970.free(); // Realspace
	ktemp1971[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1971[i] = std::complex<double>(-1.0*ktemp1971[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1971[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1973(Nx*Ny*Nz); // RS
	rtemp1973 = ifft(Nx,Ny,Nz,dV,ktemp1971);

	ktemp1971.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1973[i] = rtemp1968[i] - 92.32685930405724*rtemp1973[i];
	}

	rtemp1968.free(); // Realspace
	Vector rtemp1975(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp1975[i] = rtemp590[i]*rtemp67[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp1976(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1976 = fft(Nx,Ny,Nz,dV,rtemp1975);

	rtemp1975.free(); // Realspace
	ktemp1976[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1976[i] = std::complex<double>(-1.0*ktemp1976[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1976[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1978(Nx*Ny*Nz); // RS
	rtemp1978 = ifft(Nx,Ny,Nz,dV,ktemp1976);

	ktemp1976.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1978[i] = rtemp1973[i] + 52.63789013914324*rtemp1978[i];
	}

	rtemp1973.free(); // Realspace
	Vector rtemp1980(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp1980[i] = rtemp319[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp1981(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1981 = fft(Nx,Ny,Nz,dV,rtemp1980);

	rtemp1980.free(); // Realspace
	ktemp1981[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1981[i] = std::complex<double>(-1.0*ktemp1981[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1981[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1983(Nx*Ny*Nz); // RS
	rtemp1983 = ifft(Nx,Ny,Nz,dV,ktemp1981);

	ktemp1981.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1983[i] = rtemp1978[i] - 17.265227965638985*rtemp1983[i];
	}

	rtemp1978.free(); // Realspace
	Vector rtemp1985(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp1985[i] = rtemp326[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp1986(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1986 = fft(Nx,Ny,Nz,dV,rtemp1985);

	rtemp1985.free(); // Realspace
	ktemp1986[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1986[i] = std::complex<double>(-1.0*ktemp1986[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1986[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1988(Nx*Ny*Nz); // RS
	rtemp1988 = ifft(Nx,Ny,Nz,dV,ktemp1986);

	ktemp1986.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1988[i] = rtemp1983[i] + 51.16402921524723*rtemp1988[i];
	}

	rtemp1983.free(); // Realspace
	Vector rtemp1990(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp1990[i] = rtemp333[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp1991(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1991 = fft(Nx,Ny,Nz,dV,rtemp1990);

	rtemp1990.free(); // Realspace
	ktemp1991[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1991[i] = std::complex<double>(-1.0*ktemp1991[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1991[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1993(Nx*Ny*Nz); // RS
	rtemp1993 = ifft(Nx,Ny,Nz,dV,ktemp1991);

	ktemp1991.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1993[i] = rtemp1988[i] - 34.10935281016482*rtemp1993[i];
	}

	rtemp1988.free(); // Realspace
	Vector rtemp1995(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp1995[i] = rtemp340[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp1996(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1996 = fft(Nx,Ny,Nz,dV,rtemp1995);

	rtemp1995.free(); // Realspace
	ktemp1996[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1996[i] = std::complex<double>(-1.0*ktemp1996[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1996[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp1998(Nx*Ny*Nz); // RS
	rtemp1998 = ifft(Nx,Ny,Nz,dV,ktemp1996);

	ktemp1996.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1998[i] = rtemp1993[i] + 74.95635555813998*rtemp1998[i];
	}

	rtemp1993.free(); // Realspace
	Vector rtemp2000(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp2000[i] = rtemp347[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp2001(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2001 = fft(Nx,Ny,Nz,dV,rtemp2000);

	rtemp2000.free(); // Realspace
	ktemp2001[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2001[i] = std::complex<double>(-1.0*ktemp2001[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2001[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2003(Nx*Ny*Nz); // RS
	rtemp2003 = ifft(Nx,Ny,Nz,dV,ktemp2001);

	ktemp2001.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2003[i] = rtemp1998[i] - 0.10527578027828648*rtemp2003[i];
	}

	rtemp1998.free(); // Realspace
	Vector rtemp2005(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp2005[i] = rtemp354[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp2006(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2006 = fft(Nx,Ny,Nz,dV,rtemp2005);

	rtemp2005.free(); // Realspace
	ktemp2006[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2006[i] = std::complex<double>(-1.0*ktemp2006[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2006[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2008(Nx*Ny*Nz); // RS
	rtemp2008 = ifft(Nx,Ny,Nz,dV,ktemp2006);

	ktemp2006.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2008[i] = rtemp2003[i] - 308.2474846548228*rtemp2008[i];
	}

	rtemp2003.free(); // Realspace
	Vector rtemp2010(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp2010[i] = rtemp361[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp2011(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2011 = fft(Nx,Ny,Nz,dV,rtemp2010);

	rtemp2010.free(); // Realspace
	ktemp2011[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2011[i] = std::complex<double>(-1.0*ktemp2011[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2011[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2013(Nx*Ny*Nz); // RS
	rtemp2013 = ifft(Nx,Ny,Nz,dV,ktemp2011);

	ktemp2011.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2013[i] = rtemp2008[i] + 220.23693234217532*rtemp2013[i];
	}

	rtemp2008.free(); // Realspace
	Vector rtemp2015(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp2015[i] = rtemp368[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp2016(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2016 = fft(Nx,Ny,Nz,dV,rtemp2015);

	rtemp2015.free(); // Realspace
	ktemp2016[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2016[i] = std::complex<double>(-1.0*ktemp2016[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2016[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2018(Nx*Ny*Nz); // RS
	rtemp2018 = ifft(Nx,Ny,Nz,dV,ktemp2016);

	ktemp2016.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2018[i] = rtemp2013[i] + 463.5292605652953*rtemp2018[i];
	}

	rtemp2013.free(); // Realspace
	Vector rtemp2020(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp2020[i] = rtemp375[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp2021(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2021 = fft(Nx,Ny,Nz,dV,rtemp2020);

	rtemp2020.free(); // Realspace
	ktemp2021[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2021[i] = std::complex<double>(-1.0*ktemp2021[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2021[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2023(Nx*Ny*Nz); // RS
	rtemp2023 = ifft(Nx,Ny,Nz,dV,ktemp2021);

	ktemp2021.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2023[i] = rtemp2018[i] - 391.6259026352257*rtemp2023[i];
	}

	rtemp2018.free(); // Realspace
	Vector rtemp2025(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp2025[i] = rtemp382[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp2026(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2026 = fft(Nx,Ny,Nz,dV,rtemp2025);

	rtemp2025.free(); // Realspace
	ktemp2026[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2026[i] = std::complex<double>(-1.0*ktemp2026[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2026[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2028(Nx*Ny*Nz); // RS
	rtemp2028 = ifft(Nx,Ny,Nz,dV,ktemp2026);

	ktemp2026.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2028[i] = rtemp2023[i] + 76.43021648203597*rtemp2028[i];
	}

	rtemp2023.free(); // Realspace
	Vector rtemp2030(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp2030[i] = rtemp389[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp2031(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2031 = fft(Nx,Ny,Nz,dV,rtemp2030);

	rtemp2030.free(); // Realspace
	ktemp2031[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2031[i] = std::complex<double>(-1.0*ktemp2031[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2031[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2033(Nx*Ny*Nz); // RS
	rtemp2033 = ifft(Nx,Ny,Nz,dV,ktemp2031);

	ktemp2031.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2033[i] = rtemp2028[i] + 2.842446067513735*rtemp2033[i];
	}

	rtemp2028.free(); // Realspace
	Vector rtemp2035(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp2035[i] = rtemp396[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp2036(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2036 = fft(Nx,Ny,Nz,dV,rtemp2035);

	rtemp2035.free(); // Realspace
	ktemp2036[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2036[i] = std::complex<double>(-1.0*ktemp2036[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2036[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2038(Nx*Ny*Nz); // RS
	rtemp2038 = ifft(Nx,Ny,Nz,dV,ktemp2036);

	ktemp2036.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2038[i] = rtemp2033[i] + 132.3316558098061*rtemp2038[i];
	}

	rtemp2033.free(); // Realspace
	Vector rtemp2040(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp2040[i] = rtemp403[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp2041(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2041 = fft(Nx,Ny,Nz,dV,rtemp2040);

	rtemp2040.free(); // Realspace
	ktemp2041[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2041[i] = std::complex<double>(-1.0*ktemp2041[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2041[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2043(Nx*Ny*Nz); // RS
	rtemp2043 = ifft(Nx,Ny,Nz,dV,ktemp2041);

	ktemp2041.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2043[i] = rtemp2038[i] - 37.47817777906999*rtemp2043[i];
	}

	rtemp2038.free(); // Realspace
	Vector rtemp2045(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp2045[i] = rtemp410[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp2046(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2046 = fft(Nx,Ny,Nz,dV,rtemp2045);

	rtemp2045.free(); // Realspace
	ktemp2046[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2046[i] = std::complex<double>(-1.0*ktemp2046[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2046[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2048(Nx*Ny*Nz); // RS
	rtemp2048 = ifft(Nx,Ny,Nz,dV,ktemp2046);

	ktemp2046.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2048[i] = rtemp2043[i] + 10.89604325880265*rtemp2048[i];
	}

	rtemp2043.free(); // Realspace
	Vector rtemp2050(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp2050[i] = rtemp417[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp2051(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2051 = fft(Nx,Ny,Nz,dV,rtemp2050);

	rtemp2050.free(); // Realspace
	ktemp2051[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2051[i] = std::complex<double>(-1.0*ktemp2051[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2051[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2053(Nx*Ny*Nz); // RS
	rtemp2053 = ifft(Nx,Ny,Nz,dV,ktemp2051);

	ktemp2051.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2053[i] = rtemp2048[i] - 118.06678758209827*rtemp2053[i];
	}

	rtemp2048.free(); // Realspace
	Vector rtemp2055(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp2055[i] = rtemp424[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp2056(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2056 = fft(Nx,Ny,Nz,dV,rtemp2055);

	rtemp2055.free(); // Realspace
	ktemp2056[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2056[i] = std::complex<double>(-1.0*ktemp2056[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2056[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2058(Nx*Ny*Nz); // RS
	rtemp2058 = ifft(Nx,Ny,Nz,dV,ktemp2056);

	ktemp2056.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2058[i] = rtemp2053[i] - 92.32685930405724*rtemp2058[i];
	}

	rtemp2053.free(); // Realspace
	Vector rtemp2060(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp2060[i] = rtemp431[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp2061(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2061 = fft(Nx,Ny,Nz,dV,rtemp2060);

	rtemp2060.free(); // Realspace
	ktemp2061[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2061[i] = std::complex<double>(-1.0*ktemp2061[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2061[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2063(Nx*Ny*Nz); // RS
	rtemp2063 = ifft(Nx,Ny,Nz,dV,ktemp2061);

	ktemp2061.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2063[i] = rtemp2058[i] + 52.63789013914324*rtemp2063[i];
	}

	rtemp2058.free(); // Realspace
	ComplexVector ktemp2065(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2065[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp2065[i] = std::complex<double>(-1.0*ktemp1388[i].imag()*R*k_i[0]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1388[i].real()*R*k_i[0]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp2066(Nx*Ny*Nz); // RS
	rtemp2066 = ifft(Nx,Ny,Nz,dV,ktemp2065);

	ktemp2065.free(); // KSpace
	Vector rtemp2067(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2067[i] = rtemp2066[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp2068(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2068 = fft(Nx,Ny,Nz,dV,rtemp2067);

	rtemp2067.free(); // Realspace
	ktemp2068[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2068[i] = std::complex<double>(-1.0*ktemp2068[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2068[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2070(Nx*Ny*Nz); // RS
	rtemp2070 = ifft(Nx,Ny,Nz,dV,ktemp2068);

	ktemp2068.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2070[i] = rtemp2063[i] - 25.897841948458478*rtemp2070[i];
	}

	rtemp2063.free(); // Realspace
	ComplexVector ktemp2072(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2072[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp2072[i] = std::complex<double>(-1.0*ktemp1397[i].imag()*R*k_i[0]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1397[i].real()*R*k_i[0]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp2073(Nx*Ny*Nz); // RS
	rtemp2073 = ifft(Nx,Ny,Nz,dV,ktemp2072);

	ktemp2072.free(); // KSpace
	Vector rtemp2074(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2074[i] = rtemp2073[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp2075(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2075 = fft(Nx,Ny,Nz,dV,rtemp2074);

	rtemp2074.free(); // Realspace
	ktemp2075[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2075[i] = std::complex<double>(-1.0*ktemp2075[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2075[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2077(Nx*Ny*Nz); // RS
	rtemp2077 = ifft(Nx,Ny,Nz,dV,ktemp2075);

	ktemp2075.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2077[i] = rtemp2070[i] + 76.74604382287085*rtemp2077[i];
	}

	rtemp2070.free(); // Realspace
	ComplexVector ktemp2079(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2079[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp2079[i] = std::complex<double>(-1.0*ktemp1406[i].imag()*R*k_i[0]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1406[i].real()*R*k_i[0]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp2080(Nx*Ny*Nz); // RS
	rtemp2080 = ifft(Nx,Ny,Nz,dV,ktemp2079);

	ktemp2079.free(); // KSpace
	Vector rtemp2081(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2081[i] = rtemp2080[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp2082(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2082 = fft(Nx,Ny,Nz,dV,rtemp2081);

	rtemp2081.free(); // Realspace
	ktemp2082[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2082[i] = std::complex<double>(-1.0*ktemp2082[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2082[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2084(Nx*Ny*Nz); // RS
	rtemp2084 = ifft(Nx,Ny,Nz,dV,ktemp2082);

	ktemp2082.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2084[i] = rtemp2077[i] - 51.16402921524723*rtemp2084[i];
	}

	rtemp2077.free(); // Realspace
	ComplexVector ktemp2086(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2086[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp2086[i] = std::complex<double>(-1.0*ktemp1415[i].imag()*R*k_i[0]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1415[i].real()*R*k_i[0]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp2087(Nx*Ny*Nz); // RS
	rtemp2087 = ifft(Nx,Ny,Nz,dV,ktemp2086);

	ktemp2086.free(); // KSpace
	Vector rtemp2088(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2088[i] = rtemp2087[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp2089(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2089 = fft(Nx,Ny,Nz,dV,rtemp2088);

	rtemp2088.free(); // Realspace
	ktemp2089[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2089[i] = std::complex<double>(-1.0*ktemp2089[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2089[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2091(Nx*Ny*Nz); // RS
	rtemp2091 = ifft(Nx,Ny,Nz,dV,ktemp2089);

	ktemp2089.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2091[i] = rtemp2084[i] - 0.15791367041742974*rtemp2091[i];
	}

	rtemp2084.free(); // Realspace
	ComplexVector ktemp2093(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2093[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp2093[i] = std::complex<double>(-1.0*ktemp1424[i].imag()*R*k_i[0]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1424[i].real()*R*k_i[0]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp2094(Nx*Ny*Nz); // RS
	rtemp2094 = ifft(Nx,Ny,Nz,dV,ktemp2093);

	ktemp2093.free(); // KSpace
	Vector rtemp2095(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2095[i] = rtemp2094[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp2096(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2096 = fft(Nx,Ny,Nz,dV,rtemp2095);

	rtemp2095.free(); // Realspace
	ktemp2096[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2096[i] = std::complex<double>(-1.0*ktemp2096[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2096[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2098(Nx*Ny*Nz); // RS
	rtemp2098 = ifft(Nx,Ny,Nz,dV,ktemp2096);

	ktemp2096.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2098[i] = rtemp2091[i] + 112.43453333720996*rtemp2098[i];
	}

	rtemp2091.free(); // Realspace
	ComplexVector ktemp2100(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2100[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp2100[i] = std::complex<double>(-1.0*ktemp1433[i].imag()*R*k_i[0]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1433[i].real()*R*k_i[0]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp2101(Nx*Ny*Nz); // RS
	rtemp2101 = ifft(Nx,Ny,Nz,dV,ktemp2100);

	ktemp2100.free(); // KSpace
	Vector rtemp2102(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2102[i] = rtemp2101[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp2103(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2103 = fft(Nx,Ny,Nz,dV,rtemp2102);

	rtemp2102.free(); // Realspace
	ktemp2103[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2103[i] = std::complex<double>(-1.0*ktemp2103[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2103[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2105(Nx*Ny*Nz); // RS
	rtemp2105 = ifft(Nx,Ny,Nz,dV,ktemp2103);

	ktemp2103.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2105[i] = rtemp2098[i] - 462.37122698223425*rtemp2105[i];
	}

	rtemp2098.free(); // Realspace
	ComplexVector ktemp2107(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2107[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp2107[i] = std::complex<double>(-1.0*ktemp1442[i].imag()*R*k_i[0]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1442[i].real()*R*k_i[0]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp2108(Nx*Ny*Nz); // RS
	rtemp2108 = ifft(Nx,Ny,Nz,dV,ktemp2107);

	ktemp2107.free(); // KSpace
	Vector rtemp2109(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2109[i] = rtemp2108[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp2110(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2110 = fft(Nx,Ny,Nz,dV,rtemp2109);

	rtemp2109.free(); // Realspace
	ktemp2110[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2110[i] = std::complex<double>(-1.0*ktemp2110[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2110[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2112(Nx*Ny*Nz); // RS
	rtemp2112 = ifft(Nx,Ny,Nz,dV,ktemp2110);

	ktemp2110.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2112[i] = rtemp2105[i] + 330.355398513263*rtemp2112[i];
	}

	rtemp2105.free(); // Realspace
	ComplexVector ktemp2114(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2114[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp2114[i] = std::complex<double>(-1.0*ktemp1451[i].imag()*R*k_i[0]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1451[i].real()*R*k_i[0]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp2115(Nx*Ny*Nz); // RS
	rtemp2115 = ifft(Nx,Ny,Nz,dV,ktemp2114);

	ktemp2114.free(); // KSpace
	Vector rtemp2116(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2116[i] = rtemp2115[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp2117(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2117 = fft(Nx,Ny,Nz,dV,rtemp2116);

	rtemp2116.free(); // Realspace
	ktemp2117[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2117[i] = std::complex<double>(-1.0*ktemp2117[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2117[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2119(Nx*Ny*Nz); // RS
	rtemp2119 = ifft(Nx,Ny,Nz,dV,ktemp2117);

	ktemp2117.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2119[i] = rtemp2112[i] + 695.2938908479431*rtemp2119[i];
	}

	rtemp2112.free(); // Realspace
	ComplexVector ktemp2121(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2121[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp2121[i] = std::complex<double>(-1.0*ktemp1460[i].imag()*R*k_i[0]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1460[i].real()*R*k_i[0]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp2122(Nx*Ny*Nz); // RS
	rtemp2122 = ifft(Nx,Ny,Nz,dV,ktemp2121);

	ktemp2121.free(); // KSpace
	Vector rtemp2123(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2123[i] = rtemp2122[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp2124(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2124 = fft(Nx,Ny,Nz,dV,rtemp2123);

	rtemp2123.free(); // Realspace
	ktemp2124[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2124[i] = std::complex<double>(-1.0*ktemp2124[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2124[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2126(Nx*Ny*Nz); // RS
	rtemp2126 = ifft(Nx,Ny,Nz,dV,ktemp2124);

	ktemp2124.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2126[i] = rtemp2119[i] - 587.4388539528386*rtemp2126[i];
	}

	rtemp2119.free(); // Realspace
	ComplexVector ktemp2128(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2128[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp2128[i] = std::complex<double>(-1.0*ktemp1469[i].imag()*R*k_i[0]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1469[i].real()*R*k_i[0]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp2129(Nx*Ny*Nz); // RS
	rtemp2129 = ifft(Nx,Ny,Nz,dV,ktemp2128);

	ktemp2128.free(); // KSpace
	Vector rtemp2130(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2130[i] = rtemp2129[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp2131(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2131 = fft(Nx,Ny,Nz,dV,rtemp2130);

	rtemp2130.free(); // Realspace
	ktemp2131[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2131[i] = std::complex<double>(-1.0*ktemp2131[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2131[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2133(Nx*Ny*Nz); // RS
	rtemp2133 = ifft(Nx,Ny,Nz,dV,ktemp2131);

	ktemp2131.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2133[i] = rtemp2126[i] + 114.64532472305397*rtemp2133[i];
	}

	rtemp2126.free(); // Realspace
	ComplexVector ktemp2135(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2135[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp2135[i] = std::complex<double>(-1.0*ktemp1478[i].imag()*R*k_i[0]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1478[i].real()*R*k_i[0]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp2136(Nx*Ny*Nz); // RS
	rtemp2136 = ifft(Nx,Ny,Nz,dV,ktemp2135);

	ktemp2135.free(); // KSpace
	Vector rtemp2137(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2137[i] = rtemp2136[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp2138(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2138 = fft(Nx,Ny,Nz,dV,rtemp2137);

	rtemp2137.free(); // Realspace
	ktemp2138[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2138[i] = std::complex<double>(-1.0*ktemp2138[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2138[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2140(Nx*Ny*Nz); // RS
	rtemp2140 = ifft(Nx,Ny,Nz,dV,ktemp2138);

	ktemp2138.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2140[i] = rtemp2133[i] + 4.263669101270603*rtemp2140[i];
	}

	rtemp2133.free(); // Realspace
	ComplexVector ktemp2142(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2142[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp2142[i] = std::complex<double>(-1.0*ktemp1487[i].imag()*R*k_i[0]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1487[i].real()*R*k_i[0]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp2143(Nx*Ny*Nz); // RS
	rtemp2143 = ifft(Nx,Ny,Nz,dV,ktemp2142);

	ktemp2142.free(); // KSpace
	Vector rtemp2144(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2144[i] = rtemp2143[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp2145(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2145 = fft(Nx,Ny,Nz,dV,rtemp2144);

	rtemp2144.free(); // Realspace
	ktemp2145[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2145[i] = std::complex<double>(-1.0*ktemp2145[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2145[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2147(Nx*Ny*Nz); // RS
	rtemp2147 = ifft(Nx,Ny,Nz,dV,ktemp2145);

	ktemp2145.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2147[i] = rtemp2140[i] + 198.49748371470918*rtemp2147[i];
	}

	rtemp2140.free(); // Realspace
	ComplexVector ktemp2149(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2149[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp2149[i] = std::complex<double>(-1.0*ktemp1496[i].imag()*R*k_i[0]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1496[i].real()*R*k_i[0]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp2150(Nx*Ny*Nz); // RS
	rtemp2150 = ifft(Nx,Ny,Nz,dV,ktemp2149);

	ktemp2149.free(); // KSpace
	Vector rtemp2151(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2151[i] = rtemp2150[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp2152(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2152 = fft(Nx,Ny,Nz,dV,rtemp2151);

	rtemp2151.free(); // Realspace
	ktemp2152[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2152[i] = std::complex<double>(-1.0*ktemp2152[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2152[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2154(Nx*Ny*Nz); // RS
	rtemp2154 = ifft(Nx,Ny,Nz,dV,ktemp2152);

	ktemp2152.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2154[i] = rtemp2147[i] - 56.21726666860498*rtemp2154[i];
	}

	rtemp2147.free(); // Realspace
	ComplexVector ktemp2156(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2156[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp2156[i] = std::complex<double>(-1.0*ktemp1505[i].imag()*R*k_i[0]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1505[i].real()*R*k_i[0]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp2157(Nx*Ny*Nz); // RS
	rtemp2157 = ifft(Nx,Ny,Nz,dV,ktemp2156);

	ktemp2156.free(); // KSpace
	Vector rtemp2158(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2158[i] = rtemp2157[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp2159(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2159 = fft(Nx,Ny,Nz,dV,rtemp2158);

	rtemp2158.free(); // Realspace
	ktemp2159[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2159[i] = std::complex<double>(-1.0*ktemp2159[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2159[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2161(Nx*Ny*Nz); // RS
	rtemp2161 = ifft(Nx,Ny,Nz,dV,ktemp2159);

	ktemp2159.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2161[i] = rtemp2154[i] + 16.344064888203977*rtemp2161[i];
	}

	rtemp2154.free(); // Realspace
	ComplexVector ktemp2163(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2163[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp2163[i] = std::complex<double>(-1.0*ktemp1514[i].imag()*R*k_i[0]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1514[i].real()*R*k_i[0]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp2164(Nx*Ny*Nz); // RS
	rtemp2164 = ifft(Nx,Ny,Nz,dV,ktemp2163);

	ktemp2163.free(); // KSpace
	Vector rtemp2165(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2165[i] = rtemp2164[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp2166(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2166 = fft(Nx,Ny,Nz,dV,rtemp2165);

	rtemp2165.free(); // Realspace
	ktemp2166[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2166[i] = std::complex<double>(-1.0*ktemp2166[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2166[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2168(Nx*Ny*Nz); // RS
	rtemp2168 = ifft(Nx,Ny,Nz,dV,ktemp2166);

	ktemp2166.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2168[i] = rtemp2161[i] - 177.10018137314742*rtemp2168[i];
	}

	rtemp2161.free(); // Realspace
	ComplexVector ktemp2170(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2170[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp2170[i] = std::complex<double>(-1.0*ktemp1523[i].imag()*R*k_i[0]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1523[i].real()*R*k_i[0]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp2171(Nx*Ny*Nz); // RS
	rtemp2171 = ifft(Nx,Ny,Nz,dV,ktemp2170);

	ktemp2170.free(); // KSpace
	Vector rtemp2172(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2172[i] = rtemp2171[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp2173(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2173 = fft(Nx,Ny,Nz,dV,rtemp2172);

	rtemp2172.free(); // Realspace
	ktemp2173[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2173[i] = std::complex<double>(-1.0*ktemp2173[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2173[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2175(Nx*Ny*Nz); // RS
	rtemp2175 = ifft(Nx,Ny,Nz,dV,ktemp2173);

	ktemp2173.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2175[i] = rtemp2168[i] - 138.49028895608586*rtemp2175[i];
	}

	rtemp2168.free(); // Realspace
	ComplexVector ktemp2177(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2177[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp2177[i] = std::complex<double>(-1.0*ktemp1532[i].imag()*R*k_i[0]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1532[i].real()*R*k_i[0]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp2178(Nx*Ny*Nz); // RS
	rtemp2178 = ifft(Nx,Ny,Nz,dV,ktemp2177);

	ktemp2177.free(); // KSpace
	Vector rtemp2179(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2179[i] = rtemp2178[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp2180(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2180 = fft(Nx,Ny,Nz,dV,rtemp2179);

	rtemp2179.free(); // Realspace
	ktemp2180[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2180[i] = std::complex<double>(-1.0*ktemp2180[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2180[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2182(Nx*Ny*Nz); // RS
	rtemp2182 = ifft(Nx,Ny,Nz,dV,ktemp2180);

	ktemp2180.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2182[i] = rtemp2175[i] + 78.95683520871486*rtemp2182[i];
	}

	rtemp2175.free(); // Realspace
	ComplexVector ktemp2184(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2184[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2184[i] = std::complex<double>(-1.0*ktemp1235[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1235[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2185(Nx*Ny*Nz); // RS
	rtemp2185 = ifft(Nx,Ny,Nz,dV,ktemp2184);

	ktemp2184.free(); // KSpace
	Vector rtemp2186(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2186[i] = rtemp2185[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp2187(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2187 = fft(Nx,Ny,Nz,dV,rtemp2186);

	rtemp2186.free(); // Realspace
	ktemp2187[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2187[i] = std::complex<double>(-1.0*ktemp2187[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2187[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2189(Nx*Ny*Nz); // RS
	rtemp2189 = ifft(Nx,Ny,Nz,dV,ktemp2187);

	ktemp2187.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2189[i] = rtemp2182[i] - 25.897841948458478*rtemp2189[i];
	}

	rtemp2182.free(); // Realspace
	ComplexVector ktemp2191(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2191[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2191[i] = std::complex<double>(-1.0*ktemp1244[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1244[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2192(Nx*Ny*Nz); // RS
	rtemp2192 = ifft(Nx,Ny,Nz,dV,ktemp2191);

	ktemp2191.free(); // KSpace
	Vector rtemp2193(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2193[i] = rtemp2192[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp2194(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2194 = fft(Nx,Ny,Nz,dV,rtemp2193);

	rtemp2193.free(); // Realspace
	ktemp2194[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2194[i] = std::complex<double>(-1.0*ktemp2194[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2194[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2196(Nx*Ny*Nz); // RS
	rtemp2196 = ifft(Nx,Ny,Nz,dV,ktemp2194);

	ktemp2194.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2196[i] = rtemp2189[i] + 76.74604382287085*rtemp2196[i];
	}

	rtemp2189.free(); // Realspace
	ComplexVector ktemp2198(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2198[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2198[i] = std::complex<double>(-1.0*ktemp1253[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1253[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2199(Nx*Ny*Nz); // RS
	rtemp2199 = ifft(Nx,Ny,Nz,dV,ktemp2198);

	ktemp2198.free(); // KSpace
	Vector rtemp2200(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2200[i] = rtemp2199[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp2201(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2201 = fft(Nx,Ny,Nz,dV,rtemp2200);

	rtemp2200.free(); // Realspace
	ktemp2201[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2201[i] = std::complex<double>(-1.0*ktemp2201[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2201[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2203(Nx*Ny*Nz); // RS
	rtemp2203 = ifft(Nx,Ny,Nz,dV,ktemp2201);

	ktemp2201.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2203[i] = rtemp2196[i] - 51.16402921524723*rtemp2203[i];
	}

	rtemp2196.free(); // Realspace
	ComplexVector ktemp2205(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2205[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2205[i] = std::complex<double>(-1.0*ktemp1262[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1262[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2206(Nx*Ny*Nz); // RS
	rtemp2206 = ifft(Nx,Ny,Nz,dV,ktemp2205);

	ktemp2205.free(); // KSpace
	Vector rtemp2207(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2207[i] = rtemp2206[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp2208(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2208 = fft(Nx,Ny,Nz,dV,rtemp2207);

	rtemp2207.free(); // Realspace
	ktemp2208[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2208[i] = std::complex<double>(-1.0*ktemp2208[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2208[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2210(Nx*Ny*Nz); // RS
	rtemp2210 = ifft(Nx,Ny,Nz,dV,ktemp2208);

	ktemp2208.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2210[i] = rtemp2203[i] - 0.15791367041742974*rtemp2210[i];
	}

	rtemp2203.free(); // Realspace
	ComplexVector ktemp2212(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2212[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2212[i] = std::complex<double>(-1.0*ktemp1271[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1271[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2213(Nx*Ny*Nz); // RS
	rtemp2213 = ifft(Nx,Ny,Nz,dV,ktemp2212);

	ktemp2212.free(); // KSpace
	Vector rtemp2214(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2214[i] = rtemp2213[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp2215(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2215 = fft(Nx,Ny,Nz,dV,rtemp2214);

	rtemp2214.free(); // Realspace
	ktemp2215[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2215[i] = std::complex<double>(-1.0*ktemp2215[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2215[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2217(Nx*Ny*Nz); // RS
	rtemp2217 = ifft(Nx,Ny,Nz,dV,ktemp2215);

	ktemp2215.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2217[i] = rtemp2210[i] + 112.43453333720996*rtemp2217[i];
	}

	rtemp2210.free(); // Realspace
	ComplexVector ktemp2219(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2219[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2219[i] = std::complex<double>(-1.0*ktemp1280[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1280[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2220(Nx*Ny*Nz); // RS
	rtemp2220 = ifft(Nx,Ny,Nz,dV,ktemp2219);

	ktemp2219.free(); // KSpace
	Vector rtemp2221(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2221[i] = rtemp2220[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp2222(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2222 = fft(Nx,Ny,Nz,dV,rtemp2221);

	rtemp2221.free(); // Realspace
	ktemp2222[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2222[i] = std::complex<double>(-1.0*ktemp2222[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2222[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2224(Nx*Ny*Nz); // RS
	rtemp2224 = ifft(Nx,Ny,Nz,dV,ktemp2222);

	ktemp2222.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2224[i] = rtemp2217[i] - 462.37122698223425*rtemp2224[i];
	}

	rtemp2217.free(); // Realspace
	ComplexVector ktemp2226(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2226[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2226[i] = std::complex<double>(-1.0*ktemp1289[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1289[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2227(Nx*Ny*Nz); // RS
	rtemp2227 = ifft(Nx,Ny,Nz,dV,ktemp2226);

	ktemp2226.free(); // KSpace
	Vector rtemp2228(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2228[i] = rtemp2227[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp2229(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2229 = fft(Nx,Ny,Nz,dV,rtemp2228);

	rtemp2228.free(); // Realspace
	ktemp2229[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2229[i] = std::complex<double>(-1.0*ktemp2229[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2229[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2231(Nx*Ny*Nz); // RS
	rtemp2231 = ifft(Nx,Ny,Nz,dV,ktemp2229);

	ktemp2229.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2231[i] = rtemp2224[i] + 330.355398513263*rtemp2231[i];
	}

	rtemp2224.free(); // Realspace
	ComplexVector ktemp2233(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2233[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2233[i] = std::complex<double>(-1.0*ktemp1298[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1298[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2234(Nx*Ny*Nz); // RS
	rtemp2234 = ifft(Nx,Ny,Nz,dV,ktemp2233);

	ktemp2233.free(); // KSpace
	Vector rtemp2235(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2235[i] = rtemp2234[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp2236(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2236 = fft(Nx,Ny,Nz,dV,rtemp2235);

	rtemp2235.free(); // Realspace
	ktemp2236[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2236[i] = std::complex<double>(-1.0*ktemp2236[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2236[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2238(Nx*Ny*Nz); // RS
	rtemp2238 = ifft(Nx,Ny,Nz,dV,ktemp2236);

	ktemp2236.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2238[i] = rtemp2231[i] + 695.2938908479431*rtemp2238[i];
	}

	rtemp2231.free(); // Realspace
	ComplexVector ktemp2240(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2240[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2240[i] = std::complex<double>(-1.0*ktemp1307[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1307[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2241(Nx*Ny*Nz); // RS
	rtemp2241 = ifft(Nx,Ny,Nz,dV,ktemp2240);

	ktemp2240.free(); // KSpace
	Vector rtemp2242(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2242[i] = rtemp2241[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp2243(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2243 = fft(Nx,Ny,Nz,dV,rtemp2242);

	rtemp2242.free(); // Realspace
	ktemp2243[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2243[i] = std::complex<double>(-1.0*ktemp2243[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2243[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2245(Nx*Ny*Nz); // RS
	rtemp2245 = ifft(Nx,Ny,Nz,dV,ktemp2243);

	ktemp2243.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2245[i] = rtemp2238[i] - 587.4388539528386*rtemp2245[i];
	}

	rtemp2238.free(); // Realspace
	ComplexVector ktemp2247(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2247[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2247[i] = std::complex<double>(-1.0*ktemp1316[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1316[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2248(Nx*Ny*Nz); // RS
	rtemp2248 = ifft(Nx,Ny,Nz,dV,ktemp2247);

	ktemp2247.free(); // KSpace
	Vector rtemp2249(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2249[i] = rtemp2248[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp2250(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2250 = fft(Nx,Ny,Nz,dV,rtemp2249);

	rtemp2249.free(); // Realspace
	ktemp2250[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2250[i] = std::complex<double>(-1.0*ktemp2250[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2250[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2252(Nx*Ny*Nz); // RS
	rtemp2252 = ifft(Nx,Ny,Nz,dV,ktemp2250);

	ktemp2250.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2252[i] = rtemp2245[i] + 114.64532472305397*rtemp2252[i];
	}

	rtemp2245.free(); // Realspace
	ComplexVector ktemp2254(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2254[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2254[i] = std::complex<double>(-1.0*ktemp1325[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1325[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2255(Nx*Ny*Nz); // RS
	rtemp2255 = ifft(Nx,Ny,Nz,dV,ktemp2254);

	ktemp2254.free(); // KSpace
	Vector rtemp2256(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2256[i] = rtemp2255[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp2257(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2257 = fft(Nx,Ny,Nz,dV,rtemp2256);

	rtemp2256.free(); // Realspace
	ktemp2257[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2257[i] = std::complex<double>(-1.0*ktemp2257[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2257[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2259(Nx*Ny*Nz); // RS
	rtemp2259 = ifft(Nx,Ny,Nz,dV,ktemp2257);

	ktemp2257.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2259[i] = rtemp2252[i] + 4.263669101270603*rtemp2259[i];
	}

	rtemp2252.free(); // Realspace
	ComplexVector ktemp2261(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2261[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2261[i] = std::complex<double>(-1.0*ktemp1334[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1334[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2262(Nx*Ny*Nz); // RS
	rtemp2262 = ifft(Nx,Ny,Nz,dV,ktemp2261);

	ktemp2261.free(); // KSpace
	Vector rtemp2263(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2263[i] = rtemp2262[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp2264(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2264 = fft(Nx,Ny,Nz,dV,rtemp2263);

	rtemp2263.free(); // Realspace
	ktemp2264[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2264[i] = std::complex<double>(-1.0*ktemp2264[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2264[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2266(Nx*Ny*Nz); // RS
	rtemp2266 = ifft(Nx,Ny,Nz,dV,ktemp2264);

	ktemp2264.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2266[i] = rtemp2259[i] + 198.49748371470918*rtemp2266[i];
	}

	rtemp2259.free(); // Realspace
	ComplexVector ktemp2268(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2268[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2268[i] = std::complex<double>(-1.0*ktemp1343[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1343[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2269(Nx*Ny*Nz); // RS
	rtemp2269 = ifft(Nx,Ny,Nz,dV,ktemp2268);

	ktemp2268.free(); // KSpace
	Vector rtemp2270(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2270[i] = rtemp2269[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp2271(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2271 = fft(Nx,Ny,Nz,dV,rtemp2270);

	rtemp2270.free(); // Realspace
	ktemp2271[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2271[i] = std::complex<double>(-1.0*ktemp2271[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2271[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2273(Nx*Ny*Nz); // RS
	rtemp2273 = ifft(Nx,Ny,Nz,dV,ktemp2271);

	ktemp2271.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2273[i] = rtemp2266[i] - 56.21726666860498*rtemp2273[i];
	}

	rtemp2266.free(); // Realspace
	ComplexVector ktemp2275(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2275[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2275[i] = std::complex<double>(-1.0*ktemp1352[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1352[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2276(Nx*Ny*Nz); // RS
	rtemp2276 = ifft(Nx,Ny,Nz,dV,ktemp2275);

	ktemp2275.free(); // KSpace
	Vector rtemp2277(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2277[i] = rtemp2276[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp2278(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2278 = fft(Nx,Ny,Nz,dV,rtemp2277);

	rtemp2277.free(); // Realspace
	ktemp2278[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2278[i] = std::complex<double>(-1.0*ktemp2278[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2278[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2280(Nx*Ny*Nz); // RS
	rtemp2280 = ifft(Nx,Ny,Nz,dV,ktemp2278);

	ktemp2278.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2280[i] = rtemp2273[i] + 16.344064888203977*rtemp2280[i];
	}

	rtemp2273.free(); // Realspace
	ComplexVector ktemp2282(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2282[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2282[i] = std::complex<double>(-1.0*ktemp1361[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1361[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2283(Nx*Ny*Nz); // RS
	rtemp2283 = ifft(Nx,Ny,Nz,dV,ktemp2282);

	ktemp2282.free(); // KSpace
	Vector rtemp2284(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2284[i] = rtemp2283[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp2285(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2285 = fft(Nx,Ny,Nz,dV,rtemp2284);

	rtemp2284.free(); // Realspace
	ktemp2285[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2285[i] = std::complex<double>(-1.0*ktemp2285[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2285[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2287(Nx*Ny*Nz); // RS
	rtemp2287 = ifft(Nx,Ny,Nz,dV,ktemp2285);

	ktemp2285.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2287[i] = rtemp2280[i] - 177.10018137314742*rtemp2287[i];
	}

	rtemp2280.free(); // Realspace
	ComplexVector ktemp2289(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2289[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2289[i] = std::complex<double>(-1.0*ktemp1370[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1370[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2290(Nx*Ny*Nz); // RS
	rtemp2290 = ifft(Nx,Ny,Nz,dV,ktemp2289);

	ktemp2289.free(); // KSpace
	Vector rtemp2291(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2291[i] = rtemp2290[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp2292(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2292 = fft(Nx,Ny,Nz,dV,rtemp2291);

	rtemp2291.free(); // Realspace
	ktemp2292[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2292[i] = std::complex<double>(-1.0*ktemp2292[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2292[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2294(Nx*Ny*Nz); // RS
	rtemp2294 = ifft(Nx,Ny,Nz,dV,ktemp2292);

	ktemp2292.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2294[i] = rtemp2287[i] - 138.49028895608586*rtemp2294[i];
	}

	rtemp2287.free(); // Realspace
	ComplexVector ktemp2296(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2296[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2296[i] = std::complex<double>(-1.0*ktemp1379[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1379[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2297(Nx*Ny*Nz); // RS
	rtemp2297 = ifft(Nx,Ny,Nz,dV,ktemp2296);

	ktemp2296.free(); // KSpace
	Vector rtemp2298(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2298[i] = rtemp2297[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp2299(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2299 = fft(Nx,Ny,Nz,dV,rtemp2298);

	rtemp2298.free(); // Realspace
	ktemp2299[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2299[i] = std::complex<double>(-1.0*ktemp2299[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2299[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2301(Nx*Ny*Nz); // RS
	rtemp2301 = ifft(Nx,Ny,Nz,dV,ktemp2299);

	ktemp2299.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2301[i] = rtemp2294[i] + 78.95683520871486*rtemp2301[i];
	}

	rtemp2294.free(); // Realspace
	Vector rtemp2303(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2303[i] = dV*kT*rtemp77[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp2304(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2304 = fft(Nx,Ny,Nz,dV,rtemp2303);

	rtemp2303.free(); // Realspace
	ktemp2304[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2304[i] = std::complex<double>(-1.0*ktemp2304[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2304[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2306(Nx*Ny*Nz); // RS
	rtemp2306 = ifft(Nx,Ny,Nz,dV,ktemp2304);

	ktemp2304.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2306[i] = rtemp2301[i] + rtemp2306[i];
	}

	rtemp2301.free(); // Realspace
	Vector rtemp2308(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2308[i] = rtemp123[i]*rtemp77[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp2309(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2309 = fft(Nx,Ny,Nz,dV,rtemp2308);

	rtemp2308.free(); // Realspace
	ktemp2309[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2309[i] = std::complex<double>(-1.0*ktemp2309[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2309[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2311(Nx*Ny*Nz); // RS
	rtemp2311 = ifft(Nx,Ny,Nz,dV,ktemp2309);

	ktemp2309.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2311[i] = rtemp2306[i] + 25.897841948458478*rtemp2311[i];
	}

	rtemp2306.free(); // Realspace
	Vector rtemp2313(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2313[i] = rtemp132[i]*rtemp77[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp2314(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2314 = fft(Nx,Ny,Nz,dV,rtemp2313);

	rtemp2313.free(); // Realspace
	ktemp2314[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2314[i] = std::complex<double>(-1.0*ktemp2314[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2314[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2316(Nx*Ny*Nz); // RS
	rtemp2316 = ifft(Nx,Ny,Nz,dV,ktemp2314);

	ktemp2314.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2316[i] = rtemp2311[i] - 76.74604382287085*rtemp2316[i];
	}

	rtemp2311.free(); // Realspace
	Vector rtemp2318(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2318[i] = rtemp141[i]*rtemp77[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp2319(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2319 = fft(Nx,Ny,Nz,dV,rtemp2318);

	rtemp2318.free(); // Realspace
	ktemp2319[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2319[i] = std::complex<double>(-1.0*ktemp2319[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2319[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2321(Nx*Ny*Nz); // RS
	rtemp2321 = ifft(Nx,Ny,Nz,dV,ktemp2319);

	ktemp2319.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2321[i] = rtemp2316[i] + 51.16402921524723*rtemp2321[i];
	}

	rtemp2316.free(); // Realspace
	Vector rtemp2323(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2323[i] = rtemp150[i]*rtemp77[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp2324(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2324 = fft(Nx,Ny,Nz,dV,rtemp2323);

	rtemp2323.free(); // Realspace
	ktemp2324[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2324[i] = std::complex<double>(-1.0*ktemp2324[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2324[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2326(Nx*Ny*Nz); // RS
	rtemp2326 = ifft(Nx,Ny,Nz,dV,ktemp2324);

	ktemp2324.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2326[i] = rtemp2321[i] - 112.43453333720996*rtemp2326[i];
	}

	rtemp2321.free(); // Realspace
	Vector rtemp2328(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2328[i] = rtemp159[i]*rtemp77[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp2329(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2329 = fft(Nx,Ny,Nz,dV,rtemp2328);

	rtemp2328.free(); // Realspace
	ktemp2329[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2329[i] = std::complex<double>(-1.0*ktemp2329[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2329[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2331(Nx*Ny*Nz); // RS
	rtemp2331 = ifft(Nx,Ny,Nz,dV,ktemp2329);

	ktemp2329.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2331[i] = rtemp2326[i] + 462.37122698223425*rtemp2331[i];
	}

	rtemp2326.free(); // Realspace
	Vector rtemp2333(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2333[i] = rtemp168[i]*rtemp77[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp2334(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2334 = fft(Nx,Ny,Nz,dV,rtemp2333);

	rtemp2333.free(); // Realspace
	ktemp2334[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2334[i] = std::complex<double>(-1.0*ktemp2334[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2334[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2336(Nx*Ny*Nz); // RS
	rtemp2336 = ifft(Nx,Ny,Nz,dV,ktemp2334);

	ktemp2334.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2336[i] = rtemp2331[i] - 330.355398513263*rtemp2336[i];
	}

	rtemp2331.free(); // Realspace
	Vector rtemp2338(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2338[i] = rtemp16[i]*rtemp77[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp2339(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2339 = fft(Nx,Ny,Nz,dV,rtemp2338);

	rtemp2338.free(); // Realspace
	ktemp2339[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2339[i] = std::complex<double>(-1.0*ktemp2339[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2339[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2341(Nx*Ny*Nz); // RS
	rtemp2341 = ifft(Nx,Ny,Nz,dV,ktemp2339);

	ktemp2339.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2341[i] = rtemp2336[i] + 0.15791367041742974*rtemp2341[i];
	}

	rtemp2336.free(); // Realspace
	Vector rtemp2343(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2343[i] = rtemp177[i]*rtemp77[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp2344(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2344 = fft(Nx,Ny,Nz,dV,rtemp2343);

	rtemp2343.free(); // Realspace
	ktemp2344[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2344[i] = std::complex<double>(-1.0*ktemp2344[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2344[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2346(Nx*Ny*Nz); // RS
	rtemp2346 = ifft(Nx,Ny,Nz,dV,ktemp2344);

	ktemp2344.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2346[i] = rtemp2341[i] - 695.2938908479431*rtemp2346[i];
	}

	rtemp2341.free(); // Realspace
	Vector rtemp2348(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2348[i] = rtemp186[i]*rtemp77[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp2349(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2349 = fft(Nx,Ny,Nz,dV,rtemp2348);

	rtemp2348.free(); // Realspace
	ktemp2349[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2349[i] = std::complex<double>(-1.0*ktemp2349[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2349[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2351(Nx*Ny*Nz); // RS
	rtemp2351 = ifft(Nx,Ny,Nz,dV,ktemp2349);

	ktemp2349.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2351[i] = rtemp2346[i] + 587.4388539528386*rtemp2351[i];
	}

	rtemp2346.free(); // Realspace
	Vector rtemp2353(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2353[i] = rtemp195[i]*rtemp77[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp2354(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2354 = fft(Nx,Ny,Nz,dV,rtemp2353);

	rtemp2353.free(); // Realspace
	ktemp2354[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2354[i] = std::complex<double>(-1.0*ktemp2354[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2354[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2356(Nx*Ny*Nz); // RS
	rtemp2356 = ifft(Nx,Ny,Nz,dV,ktemp2354);

	ktemp2354.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2356[i] = rtemp2351[i] - 114.64532472305397*rtemp2356[i];
	}

	rtemp2351.free(); // Realspace
	Vector rtemp2358(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2358[i] = rtemp204[i]*rtemp77[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp2359(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2359 = fft(Nx,Ny,Nz,dV,rtemp2358);

	rtemp2358.free(); // Realspace
	ktemp2359[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2359[i] = std::complex<double>(-1.0*ktemp2359[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2359[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2361(Nx*Ny*Nz); // RS
	rtemp2361 = ifft(Nx,Ny,Nz,dV,ktemp2359);

	ktemp2359.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2361[i] = rtemp2356[i] - 4.263669101270603*rtemp2361[i];
	}

	rtemp2356.free(); // Realspace
	Vector rtemp2363(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2363[i] = rtemp213[i]*rtemp77[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp2364(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2364 = fft(Nx,Ny,Nz,dV,rtemp2363);

	rtemp2363.free(); // Realspace
	ktemp2364[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2364[i] = std::complex<double>(-1.0*ktemp2364[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2364[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2366(Nx*Ny*Nz); // RS
	rtemp2366 = ifft(Nx,Ny,Nz,dV,ktemp2364);

	ktemp2364.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2366[i] = rtemp2361[i] - 198.49748371470918*rtemp2366[i];
	}

	rtemp2361.free(); // Realspace
	Vector rtemp2368(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2368[i] = rtemp222[i]*rtemp77[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp2369(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2369 = fft(Nx,Ny,Nz,dV,rtemp2368);

	rtemp2368.free(); // Realspace
	ktemp2369[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2369[i] = std::complex<double>(-1.0*ktemp2369[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2369[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2371(Nx*Ny*Nz); // RS
	rtemp2371 = ifft(Nx,Ny,Nz,dV,ktemp2369);

	ktemp2369.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2371[i] = rtemp2366[i] + 56.21726666860498*rtemp2371[i];
	}

	rtemp2366.free(); // Realspace
	Vector rtemp2373(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2373[i] = rtemp27[i]*rtemp77[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp2374(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2374 = fft(Nx,Ny,Nz,dV,rtemp2373);

	rtemp2373.free(); // Realspace
	ktemp2374[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2374[i] = std::complex<double>(-1.0*ktemp2374[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2374[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2376(Nx*Ny*Nz); // RS
	rtemp2376 = ifft(Nx,Ny,Nz,dV,ktemp2374);

	ktemp2374.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2376[i] = rtemp2371[i] - 16.344064888203977*rtemp2376[i];
	}

	rtemp2371.free(); // Realspace
	Vector rtemp2378(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2378[i] = rtemp38[i]*rtemp77[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp2379(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2379 = fft(Nx,Ny,Nz,dV,rtemp2378);

	rtemp2378.free(); // Realspace
	ktemp2379[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2379[i] = std::complex<double>(-1.0*ktemp2379[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2379[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2381(Nx*Ny*Nz); // RS
	rtemp2381 = ifft(Nx,Ny,Nz,dV,ktemp2379);

	ktemp2379.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2381[i] = rtemp2376[i] + 177.10018137314742*rtemp2381[i];
	}

	rtemp2376.free(); // Realspace
	Vector rtemp2383(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2383[i] = rtemp49[i]*rtemp77[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp2384(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2384 = fft(Nx,Ny,Nz,dV,rtemp2383);

	rtemp2383.free(); // Realspace
	ktemp2384[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2384[i] = std::complex<double>(-1.0*ktemp2384[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2384[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2386(Nx*Ny*Nz); // RS
	rtemp2386 = ifft(Nx,Ny,Nz,dV,ktemp2384);

	ktemp2384.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2386[i] = rtemp2381[i] + 138.49028895608586*rtemp2386[i];
	}

	rtemp2381.free(); // Realspace
	Vector rtemp2388(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2388[i] = rtemp60[i]*rtemp77[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp2389(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2389 = fft(Nx,Ny,Nz,dV,rtemp2388);

	rtemp2388.free(); // Realspace
	ktemp2389[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2389[i] = std::complex<double>(-1.0*ktemp2389[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2389[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2391(Nx*Ny*Nz); // RS
	rtemp2391 = ifft(Nx,Ny,Nz,dV,ktemp2389);

	ktemp2389.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2391[i] = rtemp2386[i] - 78.95683520871486*rtemp2391[i];
	}

	rtemp2386.free(); // Realspace
	Vector rtemp2393(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2393[i] = rtemp597[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp2394(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2394 = fft(Nx,Ny,Nz,dV,rtemp2393);

	rtemp2393.free(); // Realspace
	ktemp2394[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2394[i] = std::complex<double>(-1.0*ktemp2394[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2394[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2396(Nx*Ny*Nz); // RS
	rtemp2396 = ifft(Nx,Ny,Nz,dV,ktemp2394);

	ktemp2394.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2396[i] = rtemp2391[i] - 25.897841948458478*rtemp2396[i];
	}

	rtemp2391.free(); // Realspace
	Vector rtemp2398(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2398[i] = rtemp604[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp2399(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2399 = fft(Nx,Ny,Nz,dV,rtemp2398);

	rtemp2398.free(); // Realspace
	ktemp2399[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2399[i] = std::complex<double>(-1.0*ktemp2399[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2399[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2401(Nx*Ny*Nz); // RS
	rtemp2401 = ifft(Nx,Ny,Nz,dV,ktemp2399);

	ktemp2399.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2401[i] = rtemp2396[i] + 76.74604382287085*rtemp2401[i];
	}

	rtemp2396.free(); // Realspace
	Vector rtemp2403(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2403[i] = rtemp611[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp2404(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2404 = fft(Nx,Ny,Nz,dV,rtemp2403);

	rtemp2403.free(); // Realspace
	ktemp2404[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2404[i] = std::complex<double>(-1.0*ktemp2404[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2404[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2406(Nx*Ny*Nz); // RS
	rtemp2406 = ifft(Nx,Ny,Nz,dV,ktemp2404);

	ktemp2404.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2406[i] = rtemp2401[i] - 51.16402921524723*rtemp2406[i];
	}

	rtemp2401.free(); // Realspace
	Vector rtemp2408(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2408[i] = rtemp618[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp2409(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2409 = fft(Nx,Ny,Nz,dV,rtemp2408);

	rtemp2408.free(); // Realspace
	ktemp2409[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2409[i] = std::complex<double>(-1.0*ktemp2409[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2409[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2411(Nx*Ny*Nz); // RS
	rtemp2411 = ifft(Nx,Ny,Nz,dV,ktemp2409);

	ktemp2409.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2411[i] = rtemp2406[i] + 112.43453333720996*rtemp2411[i];
	}

	rtemp2406.free(); // Realspace
	Vector rtemp2413(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2413[i] = rtemp625[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp2414(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2414 = fft(Nx,Ny,Nz,dV,rtemp2413);

	rtemp2413.free(); // Realspace
	ktemp2414[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2414[i] = std::complex<double>(-1.0*ktemp2414[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2414[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2416(Nx*Ny*Nz); // RS
	rtemp2416 = ifft(Nx,Ny,Nz,dV,ktemp2414);

	ktemp2414.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2416[i] = rtemp2411[i] - 462.37122698223425*rtemp2416[i];
	}

	rtemp2411.free(); // Realspace
	Vector rtemp2418(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2418[i] = rtemp632[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp2419(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2419 = fft(Nx,Ny,Nz,dV,rtemp2418);

	rtemp2418.free(); // Realspace
	ktemp2419[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2419[i] = std::complex<double>(-1.0*ktemp2419[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2419[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2421(Nx*Ny*Nz); // RS
	rtemp2421 = ifft(Nx,Ny,Nz,dV,ktemp2419);

	ktemp2419.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2421[i] = rtemp2416[i] - 0.15791367041742974*rtemp2421[i];
	}

	rtemp2416.free(); // Realspace
	Vector rtemp2423(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2423[i] = rtemp639[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp2424(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2424 = fft(Nx,Ny,Nz,dV,rtemp2423);

	rtemp2423.free(); // Realspace
	ktemp2424[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2424[i] = std::complex<double>(-1.0*ktemp2424[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2424[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2426(Nx*Ny*Nz); // RS
	rtemp2426 = ifft(Nx,Ny,Nz,dV,ktemp2424);

	ktemp2424.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2426[i] = rtemp2421[i] + 330.355398513263*rtemp2426[i];
	}

	rtemp2421.free(); // Realspace
	Vector rtemp2428(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2428[i] = rtemp646[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp2429(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2429 = fft(Nx,Ny,Nz,dV,rtemp2428);

	rtemp2428.free(); // Realspace
	ktemp2429[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2429[i] = std::complex<double>(-1.0*ktemp2429[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2429[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2431(Nx*Ny*Nz); // RS
	rtemp2431 = ifft(Nx,Ny,Nz,dV,ktemp2429);

	ktemp2429.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2431[i] = rtemp2426[i] + 695.2938908479431*rtemp2431[i];
	}

	rtemp2426.free(); // Realspace
	Vector rtemp2433(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2433[i] = rtemp653[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp2434(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2434 = fft(Nx,Ny,Nz,dV,rtemp2433);

	rtemp2433.free(); // Realspace
	ktemp2434[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2434[i] = std::complex<double>(-1.0*ktemp2434[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2434[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2436(Nx*Ny*Nz); // RS
	rtemp2436 = ifft(Nx,Ny,Nz,dV,ktemp2434);

	ktemp2434.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2436[i] = rtemp2431[i] - 587.4388539528386*rtemp2436[i];
	}

	rtemp2431.free(); // Realspace
	Vector rtemp2438(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2438[i] = rtemp660[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp2439(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2439 = fft(Nx,Ny,Nz,dV,rtemp2438);

	rtemp2438.free(); // Realspace
	ktemp2439[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2439[i] = std::complex<double>(-1.0*ktemp2439[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2439[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2441(Nx*Ny*Nz); // RS
	rtemp2441 = ifft(Nx,Ny,Nz,dV,ktemp2439);

	ktemp2439.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2441[i] = rtemp2436[i] + 114.64532472305397*rtemp2441[i];
	}

	rtemp2436.free(); // Realspace
	Vector rtemp2443(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2443[i] = rtemp667[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp2444(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2444 = fft(Nx,Ny,Nz,dV,rtemp2443);

	rtemp2443.free(); // Realspace
	ktemp2444[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2444[i] = std::complex<double>(-1.0*ktemp2444[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2444[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2446(Nx*Ny*Nz); // RS
	rtemp2446 = ifft(Nx,Ny,Nz,dV,ktemp2444);

	ktemp2444.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2446[i] = rtemp2441[i] + 4.263669101270603*rtemp2446[i];
	}

	rtemp2441.free(); // Realspace
	Vector rtemp2448(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2448[i] = rtemp674[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp2449(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2449 = fft(Nx,Ny,Nz,dV,rtemp2448);

	rtemp2448.free(); // Realspace
	ktemp2449[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2449[i] = std::complex<double>(-1.0*ktemp2449[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2449[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2451(Nx*Ny*Nz); // RS
	rtemp2451 = ifft(Nx,Ny,Nz,dV,ktemp2449);

	ktemp2449.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2451[i] = rtemp2446[i] + 198.49748371470918*rtemp2451[i];
	}

	rtemp2446.free(); // Realspace
	Vector rtemp2453(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2453[i] = rtemp681[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp2454(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2454 = fft(Nx,Ny,Nz,dV,rtemp2453);

	rtemp2453.free(); // Realspace
	ktemp2454[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2454[i] = std::complex<double>(-1.0*ktemp2454[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2454[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2456(Nx*Ny*Nz); // RS
	rtemp2456 = ifft(Nx,Ny,Nz,dV,ktemp2454);

	ktemp2454.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2456[i] = rtemp2451[i] - 56.21726666860498*rtemp2456[i];
	}

	rtemp2451.free(); // Realspace
	Vector rtemp2458(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2458[i] = rtemp688[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp2459(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2459 = fft(Nx,Ny,Nz,dV,rtemp2458);

	rtemp2458.free(); // Realspace
	ktemp2459[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2459[i] = std::complex<double>(-1.0*ktemp2459[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2459[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2461(Nx*Ny*Nz); // RS
	rtemp2461 = ifft(Nx,Ny,Nz,dV,ktemp2459);

	ktemp2459.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2461[i] = rtemp2456[i] + 16.344064888203977*rtemp2461[i];
	}

	rtemp2456.free(); // Realspace
	Vector rtemp2463(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2463[i] = rtemp695[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp2464(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2464 = fft(Nx,Ny,Nz,dV,rtemp2463);

	rtemp2463.free(); // Realspace
	ktemp2464[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2464[i] = std::complex<double>(-1.0*ktemp2464[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2464[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2466(Nx*Ny*Nz); // RS
	rtemp2466 = ifft(Nx,Ny,Nz,dV,ktemp2464);

	ktemp2464.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2466[i] = rtemp2461[i] - 177.10018137314742*rtemp2466[i];
	}

	rtemp2461.free(); // Realspace
	Vector rtemp2468(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2468[i] = rtemp702[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp2469(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2469 = fft(Nx,Ny,Nz,dV,rtemp2468);

	rtemp2468.free(); // Realspace
	ktemp2469[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2469[i] = std::complex<double>(-1.0*ktemp2469[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2469[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2471(Nx*Ny*Nz); // RS
	rtemp2471 = ifft(Nx,Ny,Nz,dV,ktemp2469);

	ktemp2469.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2471[i] = rtemp2466[i] - 138.49028895608586*rtemp2471[i];
	}

	rtemp2466.free(); // Realspace
	Vector rtemp2473(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2473[i] = rtemp709[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp2474(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2474 = fft(Nx,Ny,Nz,dV,rtemp2473);

	rtemp2473.free(); // Realspace
	ktemp2474[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2474[i] = std::complex<double>(-1.0*ktemp2474[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2474[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2476(Nx*Ny*Nz); // RS
	rtemp2476 = ifft(Nx,Ny,Nz,dV,ktemp2474);

	ktemp2474.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2476[i] = rtemp2471[i] + 78.95683520871486*rtemp2476[i];
	}

	rtemp2471.free(); // Realspace
	Vector rtemp2478(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2478[i] = 7.957747154594767e-2*dV*kT*rtemp77[i]/R/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp2479(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2479 = fft(Nx,Ny,Nz,dV,rtemp2478);

	rtemp2478.free(); // Realspace
	ktemp2479[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2479[i] = std::complex<double>(-1.0*ktemp2479[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2479[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2481(Nx*Ny*Nz); // RS
	rtemp2481 = ifft(Nx,Ny,Nz,dV,ktemp2479);

	ktemp2479.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2481[i] = rtemp2476[i] + 12.566370614359172*rtemp2481[i];
	}

	rtemp2476.free(); // Realspace
	Vector rtemp2483(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp2483[i] = dV*kT*rtemp67[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp2484(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2484 = fft(Nx,Ny,Nz,dV,rtemp2483);

	rtemp2483.free(); // Realspace
	ktemp2484[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2484[i] = std::complex<double>(-1.0*ktemp2484[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2484[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2486(Nx*Ny*Nz); // RS
	rtemp2486 = ifft(Nx,Ny,Nz,dV,ktemp2484);

	ktemp2484.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2486[i] = rtemp2481[i] + 0.6666666666666667*rtemp2486[i];
	}

	rtemp2481.free(); // Realspace
	Vector rtemp2488(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2488[i] = 7.957747154594767e-2*rtemp123[i]*rtemp77[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp2489(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2489 = fft(Nx,Ny,Nz,dV,rtemp2488);

	rtemp2488.free(); // Realspace
	ktemp2489[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2489[i] = std::complex<double>(-1.0*ktemp2489[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2489[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2491(Nx*Ny*Nz); // RS
	rtemp2491 = ifft(Nx,Ny,Nz,dV,ktemp2489);

	ktemp2489.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2491[i] = rtemp2486[i] + 325.4418800364269*rtemp2491[i];
	}

	rtemp2486.free(); // Realspace
	Vector rtemp2493(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2493[i] = 7.957747154594767e-2*rtemp132[i]*rtemp77[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp2494(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2494 = fft(Nx,Ny,Nz,dV,rtemp2493);

	rtemp2493.free(); // Realspace
	ktemp2494[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2494[i] = std::complex<double>(-1.0*ktemp2494[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2494[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2496(Nx*Ny*Nz); // RS
	rtemp2496 = ifft(Nx,Ny,Nz,dV,ktemp2494);

	ktemp2494.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2496[i] = rtemp2491[i] - 964.4192298640455*rtemp2496[i];
	}

	rtemp2491.free(); // Realspace
	Vector rtemp2498(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2498[i] = 7.957747154594767e-2*rtemp141[i]*rtemp77[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp2499(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2499 = fft(Nx,Ny,Nz,dV,rtemp2498);

	rtemp2498.free(); // Realspace
	ktemp2499[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2499[i] = std::complex<double>(-1.0*ktemp2499[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2499[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2501(Nx*Ny*Nz); // RS
	rtemp2501 = ifft(Nx,Ny,Nz,dV,ktemp2499);

	ktemp2499.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2501[i] = rtemp2496[i] + 642.946153242697*rtemp2501[i];
	}

	rtemp2496.free(); // Realspace
	Vector rtemp2503(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2503[i] = 7.957747154594767e-2*rtemp150[i]*rtemp77[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp2504(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2504 = fft(Nx,Ny,Nz,dV,rtemp2503);

	rtemp2503.free(); // Realspace
	ktemp2504[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2504[i] = std::complex<double>(-1.0*ktemp2504[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2504[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2506(Nx*Ny*Nz); // RS
	rtemp2506 = ifft(Nx,Ny,Nz,dV,ktemp2504);

	ktemp2504.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2506[i] = rtemp2501[i] - 1412.894015767902*rtemp2506[i];
	}

	rtemp2501.free(); // Realspace
	Vector rtemp2508(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2508[i] = 7.957747154594767e-2*rtemp159[i]*rtemp77[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp2509(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2509 = fft(Nx,Ny,Nz,dV,rtemp2508);

	rtemp2508.free(); // Realspace
	ktemp2509[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2509[i] = std::complex<double>(-1.0*ktemp2509[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2509[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2511(Nx*Ny*Nz); // RS
	rtemp2511 = ifft(Nx,Ny,Nz,dV,ktemp2509);

	ktemp2509.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2511[i] = rtemp2506[i] + 5810.328199674744*rtemp2511[i];
	}

	rtemp2506.free(); // Realspace
	Vector rtemp2513(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2513[i] = 7.957747154594767e-2*rtemp168[i]*rtemp77[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp2514(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2514 = fft(Nx,Ny,Nz,dV,rtemp2513);

	rtemp2513.free(); // Realspace
	ktemp2514[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2514[i] = std::complex<double>(-1.0*ktemp2514[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2514[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2516(Nx*Ny*Nz); // RS
	rtemp2516 = ifft(Nx,Ny,Nz,dV,ktemp2514);

	ktemp2514.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2516[i] = rtemp2511[i] - 4151.368372171983*rtemp2516[i];
	}

	rtemp2511.free(); // Realspace
	Vector rtemp2518(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2518[i] = 7.957747154594767e-2*rtemp16[i]*rtemp77[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp2519(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2519 = fft(Nx,Ny,Nz,dV,rtemp2518);

	rtemp2518.free(); // Realspace
	ktemp2519[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2519[i] = std::complex<double>(-1.0*ktemp2519[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2519[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2521(Nx*Ny*Nz); // RS
	rtemp2521 = ifft(Nx,Ny,Nz,dV,ktemp2519);

	ktemp2519.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2521[i] = rtemp2516[i] + 1.9844017075391884*rtemp2521[i];
	}

	rtemp2516.free(); // Realspace
	Vector rtemp2523(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2523[i] = 7.957747154594767e-2*rtemp177[i]*rtemp77[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp2524(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2524 = fft(Nx,Ny,Nz,dV,rtemp2523);

	rtemp2523.free(); // Realspace
	ktemp2524[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2524[i] = std::complex<double>(-1.0*ktemp2524[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2524[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2526(Nx*Ny*Nz); // RS
	rtemp2526 = ifft(Nx,Ny,Nz,dV,ktemp2524);

	ktemp2524.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2526[i] = rtemp2521[i] - 8737.320718295045*rtemp2526[i];
	}

	rtemp2521.free(); // Realspace
	Vector rtemp2528(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2528[i] = 7.957747154594767e-2*rtemp186[i]*rtemp77[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp2529(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2529 = fft(Nx,Ny,Nz,dV,rtemp2528);

	rtemp2528.free(); // Realspace
	ktemp2529[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2529[i] = std::complex<double>(-1.0*ktemp2529[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2529[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2531(Nx*Ny*Nz); // RS
	rtemp2531 = ifft(Nx,Ny,Nz,dV,ktemp2529);

	ktemp2529.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2531[i] = rtemp2526[i] + 7381.9743520457805*rtemp2531[i];
	}

	rtemp2526.free(); // Realspace
	Vector rtemp2533(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2533[i] = 7.957747154594767e-2*rtemp195[i]*rtemp77[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp2534(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2534 = fft(Nx,Ny,Nz,dV,rtemp2533);

	rtemp2533.free(); // Realspace
	ktemp2534[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2534[i] = std::complex<double>(-1.0*ktemp2534[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2534[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2536(Nx*Ny*Nz); // RS
	rtemp2536 = ifft(Nx,Ny,Nz,dV,ktemp2534);

	ktemp2534.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2536[i] = rtemp2531[i] - 1440.6756396734506*rtemp2536[i];
	}

	rtemp2531.free(); // Realspace
	Vector rtemp2538(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2538[i] = 7.957747154594767e-2*rtemp204[i]*rtemp77[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp2539(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2539 = fft(Nx,Ny,Nz,dV,rtemp2538);

	rtemp2538.free(); // Realspace
	ktemp2539[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2539[i] = std::complex<double>(-1.0*ktemp2539[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2539[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2541(Nx*Ny*Nz); // RS
	rtemp2541 = ifft(Nx,Ny,Nz,dV,ktemp2539);

	ktemp2539.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2541[i] = rtemp2536[i] - 53.578846103558085*rtemp2541[i];
	}

	rtemp2536.free(); // Realspace
	Vector rtemp2543(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2543[i] = 7.957747154594767e-2*rtemp213[i]*rtemp77[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp2544(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2544 = fft(Nx,Ny,Nz,dV,rtemp2543);

	rtemp2543.free(); // Realspace
	ktemp2544[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2544[i] = std::complex<double>(-1.0*ktemp2544[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2544[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2546(Nx*Ny*Nz); // RS
	rtemp2546 = ifft(Nx,Ny,Nz,dV,ktemp2544);

	ktemp2544.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2546[i] = rtemp2541[i] - 2494.3929463767595*rtemp2546[i];
	}

	rtemp2541.free(); // Realspace
	Vector rtemp2548(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2548[i] = 7.957747154594767e-2*rtemp222[i]*rtemp77[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp2549(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2549 = fft(Nx,Ny,Nz,dV,rtemp2548);

	rtemp2548.free(); // Realspace
	ktemp2549[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2549[i] = std::complex<double>(-1.0*ktemp2549[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2549[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2551(Nx*Ny*Nz); // RS
	rtemp2551 = ifft(Nx,Ny,Nz,dV,ktemp2549);

	ktemp2549.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2551[i] = rtemp2546[i] + 706.447007883951*rtemp2551[i];
	}

	rtemp2546.free(); // Realspace
	Vector rtemp2553(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2553[i] = 7.957747154594767e-2*rtemp27[i]*rtemp77[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp2554(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2554 = fft(Nx,Ny,Nz,dV,rtemp2553);

	rtemp2553.free(); // Realspace
	ktemp2554[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2554[i] = std::complex<double>(-1.0*ktemp2554[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2554[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2556(Nx*Ny*Nz); // RS
	rtemp2556 = ifft(Nx,Ny,Nz,dV,ktemp2554);

	ktemp2554.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2556[i] = rtemp2551[i] - 205.38557673030598*rtemp2556[i];
	}

	rtemp2551.free(); // Realspace
	Vector rtemp2558(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2558[i] = 7.957747154594767e-2*rtemp38[i]*rtemp77[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp2559(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2559 = fft(Nx,Ny,Nz,dV,rtemp2558);

	rtemp2558.free(); // Realspace
	ktemp2559[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2559[i] = std::complex<double>(-1.0*ktemp2559[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2559[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2561(Nx*Ny*Nz); // RS
	rtemp2561 = ifft(Nx,Ny,Nz,dV,ktemp2559);

	ktemp2559.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2561[i] = rtemp2556[i] + 2225.5065150051996*rtemp2561[i];
	}

	rtemp2556.free(); // Realspace
	Vector rtemp2563(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2563[i] = 7.957747154594767e-2*rtemp49[i]*rtemp77[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp2564(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2564 = fft(Nx,Ny,Nz,dV,rtemp2563);

	rtemp2563.free(); // Realspace
	ktemp2564[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2564[i] = std::complex<double>(-1.0*ktemp2564[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2564[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2566(Nx*Ny*Nz); // RS
	rtemp2566 = ifft(Nx,Ny,Nz,dV,ktemp2564);

	ktemp2564.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2566[i] = rtemp2561[i] + 1740.320297511868*rtemp2566[i];
	}

	rtemp2561.free(); // Realspace
	Vector rtemp2568(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2568[i] = 7.957747154594767e-2*rtemp60[i]*rtemp77[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp2569(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2569 = fft(Nx,Ny,Nz,dV,rtemp2568);

	rtemp2568.free(); // Realspace
	ktemp2569[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2569[i] = std::complex<double>(-1.0*ktemp2569[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2569[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2571(Nx*Ny*Nz); // RS
	rtemp2571 = ifft(Nx,Ny,Nz,dV,ktemp2569);

	ktemp2569.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2571[i] = rtemp2566[i] - 992.2008537695941*rtemp2571[i];
	}

	rtemp2566.free(); // Realspace
	Vector rtemp2573(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp2573[i] = t3*t4*t4*rtemp123[i]*rtemp67[i]*rtemp77[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp2574(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2574 = fft(Nx,Ny,Nz,dV,rtemp2573);

	rtemp2573.free(); // Realspace
	ktemp2574[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2574[i] = std::complex<double>(-1.0*ktemp2574[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2574[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2576(Nx*Ny*Nz); // RS
	rtemp2576 = ifft(Nx,Ny,Nz,dV,ktemp2574);

	ktemp2574.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2576[i] = rtemp2571[i] + 1952.6512802185614*rtemp2576[i];
	}

	rtemp2571.free(); // Realspace
	Vector rtemp2578(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp2578[i] = t3*t4*t4*rtemp132[i]*rtemp67[i]*rtemp77[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp2579(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2579 = fft(Nx,Ny,Nz,dV,rtemp2578);

	rtemp2578.free(); // Realspace
	ktemp2579[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2579[i] = std::complex<double>(-1.0*ktemp2579[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2579[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2581(Nx*Ny*Nz); // RS
	rtemp2581 = ifft(Nx,Ny,Nz,dV,ktemp2579);

	ktemp2579.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2581[i] = rtemp2576[i] - 5786.515379184273*rtemp2581[i];
	}

	rtemp2576.free(); // Realspace
	Vector rtemp2583(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp2583[i] = t3*t4*t4*rtemp141[i]*rtemp67[i]*rtemp77[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp2584(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2584 = fft(Nx,Ny,Nz,dV,rtemp2583);

	rtemp2583.free(); // Realspace
	ktemp2584[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2584[i] = std::complex<double>(-1.0*ktemp2584[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2584[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2586(Nx*Ny*Nz); // RS
	rtemp2586 = ifft(Nx,Ny,Nz,dV,ktemp2584);

	ktemp2584.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2586[i] = rtemp2581[i] + 3857.676919456182*rtemp2586[i];
	}

	rtemp2581.free(); // Realspace
	Vector rtemp2588(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp2588[i] = t3*t4*t4*rtemp150[i]*rtemp67[i]*rtemp77[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp2589(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2589 = fft(Nx,Ny,Nz,dV,rtemp2588);

	rtemp2588.free(); // Realspace
	ktemp2589[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2589[i] = std::complex<double>(-1.0*ktemp2589[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2589[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2591(Nx*Ny*Nz); // RS
	rtemp2591 = ifft(Nx,Ny,Nz,dV,ktemp2589);

	ktemp2589.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2591[i] = rtemp2586[i] - 8477.364094607412*rtemp2591[i];
	}

	rtemp2586.free(); // Realspace
	Vector rtemp2593(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp2593[i] = t3*t4*t4*rtemp159[i]*rtemp67[i]*rtemp77[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp2594(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2594 = fft(Nx,Ny,Nz,dV,rtemp2593);

	rtemp2593.free(); // Realspace
	ktemp2594[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2594[i] = std::complex<double>(-1.0*ktemp2594[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2594[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2596(Nx*Ny*Nz); // RS
	rtemp2596 = ifft(Nx,Ny,Nz,dV,ktemp2594);

	ktemp2594.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2596[i] = rtemp2591[i] + 34861.96919804846*rtemp2596[i];
	}

	rtemp2591.free(); // Realspace
	Vector rtemp2598(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp2598[i] = t3*t4*t4*rtemp168[i]*rtemp67[i]*rtemp77[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp2599(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2599 = fft(Nx,Ny,Nz,dV,rtemp2598);

	rtemp2598.free(); // Realspace
	ktemp2599[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2599[i] = std::complex<double>(-1.0*ktemp2599[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2599[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2601(Nx*Ny*Nz); // RS
	rtemp2601 = ifft(Nx,Ny,Nz,dV,ktemp2599);

	ktemp2599.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2601[i] = rtemp2596[i] - 24908.210233031892*rtemp2601[i];
	}

	rtemp2596.free(); // Realspace
	Vector rtemp2603(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp2603[i] = t3*t4*t4*rtemp16[i]*rtemp67[i]*rtemp77[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp2604(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2604 = fft(Nx,Ny,Nz,dV,rtemp2603);

	rtemp2603.free(); // Realspace
	ktemp2604[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2604[i] = std::complex<double>(-1.0*ktemp2604[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2604[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2606(Nx*Ny*Nz); // RS
	rtemp2606 = ifft(Nx,Ny,Nz,dV,ktemp2604);

	ktemp2604.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2606[i] = rtemp2601[i] + 11.90641024523513*rtemp2606[i];
	}

	rtemp2601.free(); // Realspace
	Vector rtemp2608(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp2608[i] = t3*t4*t4*rtemp177[i]*rtemp67[i]*rtemp77[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp2609(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2609 = fft(Nx,Ny,Nz,dV,rtemp2608);

	rtemp2608.free(); // Realspace
	ktemp2609[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2609[i] = std::complex<double>(-1.0*ktemp2609[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2609[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2611(Nx*Ny*Nz); // RS
	rtemp2611 = ifft(Nx,Ny,Nz,dV,ktemp2609);

	ktemp2609.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2611[i] = rtemp2606[i] - 52423.92430977027*rtemp2611[i];
	}

	rtemp2606.free(); // Realspace
	Vector rtemp2613(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp2613[i] = t3*t4*t4*rtemp186[i]*rtemp67[i]*rtemp77[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp2614(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2614 = fft(Nx,Ny,Nz,dV,rtemp2613);

	rtemp2613.free(); // Realspace
	ktemp2614[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2614[i] = std::complex<double>(-1.0*ktemp2614[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2614[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2616(Nx*Ny*Nz); // RS
	rtemp2616 = ifft(Nx,Ny,Nz,dV,ktemp2614);

	ktemp2614.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2616[i] = rtemp2611[i] + 44291.84611227468*rtemp2616[i];
	}

	rtemp2611.free(); // Realspace
	Vector rtemp2618(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp2618[i] = t3*t4*t4*rtemp195[i]*rtemp67[i]*rtemp77[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp2619(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2619 = fft(Nx,Ny,Nz,dV,rtemp2618);

	rtemp2618.free(); // Realspace
	ktemp2619[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2619[i] = std::complex<double>(-1.0*ktemp2619[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2619[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2621(Nx*Ny*Nz); // RS
	rtemp2621 = ifft(Nx,Ny,Nz,dV,ktemp2619);

	ktemp2619.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2621[i] = rtemp2616[i] - 8644.053838040703*rtemp2621[i];
	}

	rtemp2616.free(); // Realspace
	Vector rtemp2623(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp2623[i] = t3*t4*t4*rtemp204[i]*rtemp67[i]*rtemp77[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp2624(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2624 = fft(Nx,Ny,Nz,dV,rtemp2623);

	rtemp2623.free(); // Realspace
	ktemp2624[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2624[i] = std::complex<double>(-1.0*ktemp2624[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2624[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2626(Nx*Ny*Nz); // RS
	rtemp2626 = ifft(Nx,Ny,Nz,dV,ktemp2624);

	ktemp2624.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2626[i] = rtemp2621[i] - 321.4730766213485*rtemp2626[i];
	}

	rtemp2621.free(); // Realspace
	Vector rtemp2628(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp2628[i] = t3*t4*t4*rtemp213[i]*rtemp67[i]*rtemp77[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp2629(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2629 = fft(Nx,Ny,Nz,dV,rtemp2628);

	rtemp2628.free(); // Realspace
	ktemp2629[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2629[i] = std::complex<double>(-1.0*ktemp2629[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2629[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2631(Nx*Ny*Nz); // RS
	rtemp2631 = ifft(Nx,Ny,Nz,dV,ktemp2629);

	ktemp2629.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2631[i] = rtemp2626[i] - 14966.357678260558*rtemp2631[i];
	}

	rtemp2626.free(); // Realspace
	Vector rtemp2633(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp2633[i] = t3*t4*t4*rtemp222[i]*rtemp67[i]*rtemp77[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp2634(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2634 = fft(Nx,Ny,Nz,dV,rtemp2633);

	rtemp2633.free(); // Realspace
	ktemp2634[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2634[i] = std::complex<double>(-1.0*ktemp2634[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2634[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2636(Nx*Ny*Nz); // RS
	rtemp2636 = ifft(Nx,Ny,Nz,dV,ktemp2634);

	ktemp2634.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2636[i] = rtemp2631[i] + 4238.682047303706*rtemp2636[i];
	}

	rtemp2631.free(); // Realspace
	Vector rtemp2638(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp2638[i] = t3*t4*t4*rtemp27[i]*rtemp67[i]*rtemp77[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp2639(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2639 = fft(Nx,Ny,Nz,dV,rtemp2638);

	rtemp2638.free(); // Realspace
	ktemp2639[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2639[i] = std::complex<double>(-1.0*ktemp2639[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2639[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2641(Nx*Ny*Nz); // RS
	rtemp2641 = ifft(Nx,Ny,Nz,dV,ktemp2639);

	ktemp2639.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2641[i] = rtemp2636[i] - 1232.313460381836*rtemp2641[i];
	}

	rtemp2636.free(); // Realspace
	Vector rtemp2643(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp2643[i] = t3*t4*t4*rtemp38[i]*rtemp67[i]*rtemp77[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp2644(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2644 = fft(Nx,Ny,Nz,dV,rtemp2643);

	rtemp2643.free(); // Realspace
	ktemp2644[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2644[i] = std::complex<double>(-1.0*ktemp2644[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2644[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2646(Nx*Ny*Nz); // RS
	rtemp2646 = ifft(Nx,Ny,Nz,dV,ktemp2644);

	ktemp2644.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2646[i] = rtemp2641[i] + 13353.039090031198*rtemp2646[i];
	}

	rtemp2641.free(); // Realspace
	Vector rtemp2648(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp2648[i] = t3*t4*t4*rtemp49[i]*rtemp67[i]*rtemp77[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp2649(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2649 = fft(Nx,Ny,Nz,dV,rtemp2648);

	rtemp2648.free(); // Realspace
	ktemp2649[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2649[i] = std::complex<double>(-1.0*ktemp2649[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2649[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2651(Nx*Ny*Nz); // RS
	rtemp2651 = ifft(Nx,Ny,Nz,dV,ktemp2649);

	ktemp2649.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2651[i] = rtemp2646[i] + 10441.921785071208*rtemp2651[i];
	}

	rtemp2646.free(); // Realspace
	Vector rtemp2653(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp2653[i] = t3*t4*t4*rtemp60[i]*rtemp67[i]*rtemp77[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp2654(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2654 = fft(Nx,Ny,Nz,dV,rtemp2653);

	rtemp2653.free(); // Realspace
	ktemp2654[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2654[i] = std::complex<double>(-1.0*ktemp2654[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2654[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2656(Nx*Ny*Nz); // RS
	rtemp2656 = ifft(Nx,Ny,Nz,dV,ktemp2654);

	ktemp2654.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2656[i] = rtemp2651[i] - 5953.2051226175645*rtemp2656[i];
	}

	rtemp2651.free(); // Realspace
	Vector rtemp2658(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp2658[i] = rtemp597[i]*rtemp67[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp2659(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2659 = fft(Nx,Ny,Nz,dV,rtemp2658);

	rtemp2658.free(); // Realspace
	ktemp2659[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2659[i] = std::complex<double>(-1.0*ktemp2659[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2659[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2661(Nx*Ny*Nz); // RS
	rtemp2661 = ifft(Nx,Ny,Nz,dV,ktemp2659);

	ktemp2659.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2661[i] = rtemp2656[i] - 17.265227965638985*rtemp2661[i];
	}

	rtemp2656.free(); // Realspace
	Vector rtemp2663(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp2663[i] = rtemp604[i]*rtemp67[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp2664(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2664 = fft(Nx,Ny,Nz,dV,rtemp2663);

	rtemp2663.free(); // Realspace
	ktemp2664[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2664[i] = std::complex<double>(-1.0*ktemp2664[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2664[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2666(Nx*Ny*Nz); // RS
	rtemp2666 = ifft(Nx,Ny,Nz,dV,ktemp2664);

	ktemp2664.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2666[i] = rtemp2661[i] + 51.16402921524723*rtemp2666[i];
	}

	rtemp2661.free(); // Realspace
	Vector rtemp2668(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp2668[i] = rtemp611[i]*rtemp67[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp2669(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2669 = fft(Nx,Ny,Nz,dV,rtemp2668);

	rtemp2668.free(); // Realspace
	ktemp2669[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2669[i] = std::complex<double>(-1.0*ktemp2669[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2669[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2671(Nx*Ny*Nz); // RS
	rtemp2671 = ifft(Nx,Ny,Nz,dV,ktemp2669);

	ktemp2669.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2671[i] = rtemp2666[i] - 34.10935281016482*rtemp2671[i];
	}

	rtemp2666.free(); // Realspace
	Vector rtemp2673(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp2673[i] = rtemp618[i]*rtemp67[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp2674(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2674 = fft(Nx,Ny,Nz,dV,rtemp2673);

	rtemp2673.free(); // Realspace
	ktemp2674[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2674[i] = std::complex<double>(-1.0*ktemp2674[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2674[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2676(Nx*Ny*Nz); // RS
	rtemp2676 = ifft(Nx,Ny,Nz,dV,ktemp2674);

	ktemp2674.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2676[i] = rtemp2671[i] + 74.95635555813998*rtemp2676[i];
	}

	rtemp2671.free(); // Realspace
	Vector rtemp2678(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp2678[i] = rtemp625[i]*rtemp67[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp2679(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2679 = fft(Nx,Ny,Nz,dV,rtemp2678);

	rtemp2678.free(); // Realspace
	ktemp2679[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2679[i] = std::complex<double>(-1.0*ktemp2679[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2679[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2681(Nx*Ny*Nz); // RS
	rtemp2681 = ifft(Nx,Ny,Nz,dV,ktemp2679);

	ktemp2679.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2681[i] = rtemp2676[i] - 308.2474846548228*rtemp2681[i];
	}

	rtemp2676.free(); // Realspace
	Vector rtemp2683(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp2683[i] = rtemp632[i]*rtemp67[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp2684(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2684 = fft(Nx,Ny,Nz,dV,rtemp2683);

	rtemp2683.free(); // Realspace
	ktemp2684[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2684[i] = std::complex<double>(-1.0*ktemp2684[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2684[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2686(Nx*Ny*Nz); // RS
	rtemp2686 = ifft(Nx,Ny,Nz,dV,ktemp2684);

	ktemp2684.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2686[i] = rtemp2681[i] - 0.10527578027828648*rtemp2686[i];
	}

	rtemp2681.free(); // Realspace
	Vector rtemp2688(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp2688[i] = rtemp639[i]*rtemp67[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp2689(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2689 = fft(Nx,Ny,Nz,dV,rtemp2688);

	rtemp2688.free(); // Realspace
	ktemp2689[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2689[i] = std::complex<double>(-1.0*ktemp2689[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2689[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2691(Nx*Ny*Nz); // RS
	rtemp2691 = ifft(Nx,Ny,Nz,dV,ktemp2689);

	ktemp2689.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2691[i] = rtemp2686[i] + 220.23693234217532*rtemp2691[i];
	}

	rtemp2686.free(); // Realspace
	Vector rtemp2693(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp2693[i] = rtemp646[i]*rtemp67[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp2694(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2694 = fft(Nx,Ny,Nz,dV,rtemp2693);

	rtemp2693.free(); // Realspace
	ktemp2694[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2694[i] = std::complex<double>(-1.0*ktemp2694[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2694[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2696(Nx*Ny*Nz); // RS
	rtemp2696 = ifft(Nx,Ny,Nz,dV,ktemp2694);

	ktemp2694.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2696[i] = rtemp2691[i] + 463.5292605652953*rtemp2696[i];
	}

	rtemp2691.free(); // Realspace
	Vector rtemp2698(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp2698[i] = rtemp653[i]*rtemp67[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp2699(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2699 = fft(Nx,Ny,Nz,dV,rtemp2698);

	rtemp2698.free(); // Realspace
	ktemp2699[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2699[i] = std::complex<double>(-1.0*ktemp2699[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2699[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2701(Nx*Ny*Nz); // RS
	rtemp2701 = ifft(Nx,Ny,Nz,dV,ktemp2699);

	ktemp2699.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2701[i] = rtemp2696[i] - 391.6259026352257*rtemp2701[i];
	}

	rtemp2696.free(); // Realspace
	Vector rtemp2703(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp2703[i] = rtemp660[i]*rtemp67[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp2704(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2704 = fft(Nx,Ny,Nz,dV,rtemp2703);

	rtemp2703.free(); // Realspace
	ktemp2704[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2704[i] = std::complex<double>(-1.0*ktemp2704[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2704[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2706(Nx*Ny*Nz); // RS
	rtemp2706 = ifft(Nx,Ny,Nz,dV,ktemp2704);

	ktemp2704.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2706[i] = rtemp2701[i] + 76.43021648203597*rtemp2706[i];
	}

	rtemp2701.free(); // Realspace
	Vector rtemp2708(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp2708[i] = rtemp667[i]*rtemp67[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp2709(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2709 = fft(Nx,Ny,Nz,dV,rtemp2708);

	rtemp2708.free(); // Realspace
	ktemp2709[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2709[i] = std::complex<double>(-1.0*ktemp2709[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2709[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2711(Nx*Ny*Nz); // RS
	rtemp2711 = ifft(Nx,Ny,Nz,dV,ktemp2709);

	ktemp2709.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2711[i] = rtemp2706[i] + 2.842446067513735*rtemp2711[i];
	}

	rtemp2706.free(); // Realspace
	Vector rtemp2713(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp2713[i] = rtemp674[i]*rtemp67[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp2714(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2714 = fft(Nx,Ny,Nz,dV,rtemp2713);

	rtemp2713.free(); // Realspace
	ktemp2714[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2714[i] = std::complex<double>(-1.0*ktemp2714[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2714[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2716(Nx*Ny*Nz); // RS
	rtemp2716 = ifft(Nx,Ny,Nz,dV,ktemp2714);

	ktemp2714.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2716[i] = rtemp2711[i] + 132.3316558098061*rtemp2716[i];
	}

	rtemp2711.free(); // Realspace
	Vector rtemp2718(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp2718[i] = rtemp67[i]*rtemp681[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp2719(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2719 = fft(Nx,Ny,Nz,dV,rtemp2718);

	rtemp2718.free(); // Realspace
	ktemp2719[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2719[i] = std::complex<double>(-1.0*ktemp2719[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2719[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2721(Nx*Ny*Nz); // RS
	rtemp2721 = ifft(Nx,Ny,Nz,dV,ktemp2719);

	ktemp2719.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2721[i] = rtemp2716[i] - 37.47817777906999*rtemp2721[i];
	}

	rtemp2716.free(); // Realspace
	Vector rtemp2723(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp2723[i] = rtemp67[i]*rtemp688[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp2724(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2724 = fft(Nx,Ny,Nz,dV,rtemp2723);

	rtemp2723.free(); // Realspace
	ktemp2724[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2724[i] = std::complex<double>(-1.0*ktemp2724[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2724[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2726(Nx*Ny*Nz); // RS
	rtemp2726 = ifft(Nx,Ny,Nz,dV,ktemp2724);

	ktemp2724.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2726[i] = rtemp2721[i] + 10.89604325880265*rtemp2726[i];
	}

	rtemp2721.free(); // Realspace
	Vector rtemp2728(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp2728[i] = rtemp67[i]*rtemp695[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp2729(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2729 = fft(Nx,Ny,Nz,dV,rtemp2728);

	rtemp2728.free(); // Realspace
	ktemp2729[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2729[i] = std::complex<double>(-1.0*ktemp2729[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2729[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2731(Nx*Ny*Nz); // RS
	rtemp2731 = ifft(Nx,Ny,Nz,dV,ktemp2729);

	ktemp2729.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2731[i] = rtemp2726[i] - 118.06678758209827*rtemp2731[i];
	}

	rtemp2726.free(); // Realspace
	Vector rtemp2733(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp2733[i] = rtemp67[i]*rtemp702[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp2734(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2734 = fft(Nx,Ny,Nz,dV,rtemp2733);

	rtemp2733.free(); // Realspace
	ktemp2734[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2734[i] = std::complex<double>(-1.0*ktemp2734[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2734[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2736(Nx*Ny*Nz); // RS
	rtemp2736 = ifft(Nx,Ny,Nz,dV,ktemp2734);

	ktemp2734.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2736[i] = rtemp2731[i] - 92.32685930405724*rtemp2736[i];
	}

	rtemp2731.free(); // Realspace
	Vector rtemp2738(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp2738[i] = rtemp67[i]*rtemp709[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp2739(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2739 = fft(Nx,Ny,Nz,dV,rtemp2738);

	rtemp2738.free(); // Realspace
	ktemp2739[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2739[i] = std::complex<double>(-1.0*ktemp2739[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2739[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2741(Nx*Ny*Nz); // RS
	rtemp2741 = ifft(Nx,Ny,Nz,dV,ktemp2739);

	ktemp2739.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2741[i] = rtemp2736[i] + 52.63789013914324*rtemp2741[i];
	}

	rtemp2736.free(); // Realspace
	Vector rtemp2743(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp2743[i] = rtemp319[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp2744(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2744 = fft(Nx,Ny,Nz,dV,rtemp2743);

	rtemp2743.free(); // Realspace
	ktemp2744[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2744[i] = std::complex<double>(-1.0*ktemp2744[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2744[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2746(Nx*Ny*Nz); // RS
	rtemp2746 = ifft(Nx,Ny,Nz,dV,ktemp2744);

	ktemp2744.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2746[i] = rtemp2741[i] - 17.265227965638985*rtemp2746[i];
	}

	rtemp2741.free(); // Realspace
	Vector rtemp2748(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp2748[i] = rtemp326[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp2749(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2749 = fft(Nx,Ny,Nz,dV,rtemp2748);

	rtemp2748.free(); // Realspace
	ktemp2749[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2749[i] = std::complex<double>(-1.0*ktemp2749[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2749[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2751(Nx*Ny*Nz); // RS
	rtemp2751 = ifft(Nx,Ny,Nz,dV,ktemp2749);

	ktemp2749.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2751[i] = rtemp2746[i] + 51.16402921524723*rtemp2751[i];
	}

	rtemp2746.free(); // Realspace
	Vector rtemp2753(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp2753[i] = rtemp333[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp2754(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2754 = fft(Nx,Ny,Nz,dV,rtemp2753);

	rtemp2753.free(); // Realspace
	ktemp2754[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2754[i] = std::complex<double>(-1.0*ktemp2754[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2754[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2756(Nx*Ny*Nz); // RS
	rtemp2756 = ifft(Nx,Ny,Nz,dV,ktemp2754);

	ktemp2754.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2756[i] = rtemp2751[i] - 34.10935281016482*rtemp2756[i];
	}

	rtemp2751.free(); // Realspace
	Vector rtemp2758(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp2758[i] = rtemp340[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp2759(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2759 = fft(Nx,Ny,Nz,dV,rtemp2758);

	rtemp2758.free(); // Realspace
	ktemp2759[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2759[i] = std::complex<double>(-1.0*ktemp2759[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2759[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2761(Nx*Ny*Nz); // RS
	rtemp2761 = ifft(Nx,Ny,Nz,dV,ktemp2759);

	ktemp2759.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2761[i] = rtemp2756[i] + 74.95635555813998*rtemp2761[i];
	}

	rtemp2756.free(); // Realspace
	Vector rtemp2763(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp2763[i] = rtemp347[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp2764(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2764 = fft(Nx,Ny,Nz,dV,rtemp2763);

	rtemp2763.free(); // Realspace
	ktemp2764[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2764[i] = std::complex<double>(-1.0*ktemp2764[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2764[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2766(Nx*Ny*Nz); // RS
	rtemp2766 = ifft(Nx,Ny,Nz,dV,ktemp2764);

	ktemp2764.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2766[i] = rtemp2761[i] - 0.10527578027828648*rtemp2766[i];
	}

	rtemp2761.free(); // Realspace
	Vector rtemp2768(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp2768[i] = rtemp354[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp2769(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2769 = fft(Nx,Ny,Nz,dV,rtemp2768);

	rtemp2768.free(); // Realspace
	ktemp2769[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2769[i] = std::complex<double>(-1.0*ktemp2769[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2769[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2771(Nx*Ny*Nz); // RS
	rtemp2771 = ifft(Nx,Ny,Nz,dV,ktemp2769);

	ktemp2769.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2771[i] = rtemp2766[i] - 308.2474846548228*rtemp2771[i];
	}

	rtemp2766.free(); // Realspace
	Vector rtemp2773(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp2773[i] = rtemp361[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp2774(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2774 = fft(Nx,Ny,Nz,dV,rtemp2773);

	rtemp2773.free(); // Realspace
	ktemp2774[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2774[i] = std::complex<double>(-1.0*ktemp2774[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2774[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2776(Nx*Ny*Nz); // RS
	rtemp2776 = ifft(Nx,Ny,Nz,dV,ktemp2774);

	ktemp2774.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2776[i] = rtemp2771[i] + 220.23693234217532*rtemp2776[i];
	}

	rtemp2771.free(); // Realspace
	Vector rtemp2778(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp2778[i] = rtemp368[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp2779(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2779 = fft(Nx,Ny,Nz,dV,rtemp2778);

	rtemp2778.free(); // Realspace
	ktemp2779[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2779[i] = std::complex<double>(-1.0*ktemp2779[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2779[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2781(Nx*Ny*Nz); // RS
	rtemp2781 = ifft(Nx,Ny,Nz,dV,ktemp2779);

	ktemp2779.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2781[i] = rtemp2776[i] + 463.5292605652953*rtemp2781[i];
	}

	rtemp2776.free(); // Realspace
	Vector rtemp2783(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp2783[i] = rtemp375[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp2784(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2784 = fft(Nx,Ny,Nz,dV,rtemp2783);

	rtemp2783.free(); // Realspace
	ktemp2784[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2784[i] = std::complex<double>(-1.0*ktemp2784[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2784[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2786(Nx*Ny*Nz); // RS
	rtemp2786 = ifft(Nx,Ny,Nz,dV,ktemp2784);

	ktemp2784.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2786[i] = rtemp2781[i] - 391.6259026352257*rtemp2786[i];
	}

	rtemp2781.free(); // Realspace
	Vector rtemp2788(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp2788[i] = rtemp382[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp2789(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2789 = fft(Nx,Ny,Nz,dV,rtemp2788);

	rtemp2788.free(); // Realspace
	ktemp2789[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2789[i] = std::complex<double>(-1.0*ktemp2789[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2789[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2791(Nx*Ny*Nz); // RS
	rtemp2791 = ifft(Nx,Ny,Nz,dV,ktemp2789);

	ktemp2789.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2791[i] = rtemp2786[i] + 76.43021648203597*rtemp2791[i];
	}

	rtemp2786.free(); // Realspace
	Vector rtemp2793(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp2793[i] = rtemp389[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp2794(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2794 = fft(Nx,Ny,Nz,dV,rtemp2793);

	rtemp2793.free(); // Realspace
	ktemp2794[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2794[i] = std::complex<double>(-1.0*ktemp2794[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2794[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2796(Nx*Ny*Nz); // RS
	rtemp2796 = ifft(Nx,Ny,Nz,dV,ktemp2794);

	ktemp2794.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2796[i] = rtemp2791[i] + 2.842446067513735*rtemp2796[i];
	}

	rtemp2791.free(); // Realspace
	Vector rtemp2798(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp2798[i] = rtemp396[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp2799(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2799 = fft(Nx,Ny,Nz,dV,rtemp2798);

	rtemp2798.free(); // Realspace
	ktemp2799[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2799[i] = std::complex<double>(-1.0*ktemp2799[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2799[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2801(Nx*Ny*Nz); // RS
	rtemp2801 = ifft(Nx,Ny,Nz,dV,ktemp2799);

	ktemp2799.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2801[i] = rtemp2796[i] + 132.3316558098061*rtemp2801[i];
	}

	rtemp2796.free(); // Realspace
	Vector rtemp2803(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp2803[i] = rtemp403[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp2804(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2804 = fft(Nx,Ny,Nz,dV,rtemp2803);

	rtemp2803.free(); // Realspace
	ktemp2804[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2804[i] = std::complex<double>(-1.0*ktemp2804[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2804[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2806(Nx*Ny*Nz); // RS
	rtemp2806 = ifft(Nx,Ny,Nz,dV,ktemp2804);

	ktemp2804.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2806[i] = rtemp2801[i] - 37.47817777906999*rtemp2806[i];
	}

	rtemp2801.free(); // Realspace
	Vector rtemp2808(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp2808[i] = rtemp410[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp2809(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2809 = fft(Nx,Ny,Nz,dV,rtemp2808);

	rtemp2808.free(); // Realspace
	ktemp2809[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2809[i] = std::complex<double>(-1.0*ktemp2809[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2809[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2811(Nx*Ny*Nz); // RS
	rtemp2811 = ifft(Nx,Ny,Nz,dV,ktemp2809);

	ktemp2809.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2811[i] = rtemp2806[i] + 10.89604325880265*rtemp2811[i];
	}

	rtemp2806.free(); // Realspace
	Vector rtemp2813(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp2813[i] = rtemp417[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp2814(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2814 = fft(Nx,Ny,Nz,dV,rtemp2813);

	rtemp2813.free(); // Realspace
	ktemp2814[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2814[i] = std::complex<double>(-1.0*ktemp2814[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2814[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2816(Nx*Ny*Nz); // RS
	rtemp2816 = ifft(Nx,Ny,Nz,dV,ktemp2814);

	ktemp2814.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2816[i] = rtemp2811[i] - 118.06678758209827*rtemp2816[i];
	}

	rtemp2811.free(); // Realspace
	Vector rtemp2818(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp2818[i] = rtemp424[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp2819(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2819 = fft(Nx,Ny,Nz,dV,rtemp2818);

	rtemp2818.free(); // Realspace
	ktemp2819[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2819[i] = std::complex<double>(-1.0*ktemp2819[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2819[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2821(Nx*Ny*Nz); // RS
	rtemp2821 = ifft(Nx,Ny,Nz,dV,ktemp2819);

	ktemp2819.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2821[i] = rtemp2816[i] - 92.32685930405724*rtemp2821[i];
	}

	rtemp2816.free(); // Realspace
	Vector rtemp2823(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp2823[i] = rtemp431[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp2824(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2824 = fft(Nx,Ny,Nz,dV,rtemp2823);

	rtemp2823.free(); // Realspace
	ktemp2824[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2824[i] = std::complex<double>(-1.0*ktemp2824[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2824[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2826(Nx*Ny*Nz); // RS
	rtemp2826 = ifft(Nx,Ny,Nz,dV,ktemp2824);

	ktemp2824.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2826[i] = rtemp2821[i] + 52.63789013914324*rtemp2826[i];
	}

	rtemp2821.free(); // Realspace
	ComplexVector ktemp2828(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2828[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp2828[i] = std::complex<double>(-1.0*ktemp1388[i].imag()*R*k_i[1]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1388[i].real()*R*k_i[1]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp2829(Nx*Ny*Nz); // RS
	rtemp2829 = ifft(Nx,Ny,Nz,dV,ktemp2828);

	ktemp2828.free(); // KSpace
	Vector rtemp2830(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2830[i] = rtemp2829[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp2831(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2831 = fft(Nx,Ny,Nz,dV,rtemp2830);

	rtemp2830.free(); // Realspace
	ktemp2831[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2831[i] = std::complex<double>(-1.0*ktemp2831[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2831[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2833(Nx*Ny*Nz); // RS
	rtemp2833 = ifft(Nx,Ny,Nz,dV,ktemp2831);

	ktemp2831.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2833[i] = rtemp2826[i] - 25.897841948458478*rtemp2833[i];
	}

	rtemp2826.free(); // Realspace
	ComplexVector ktemp2835(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2835[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp2835[i] = std::complex<double>(-1.0*ktemp1397[i].imag()*R*k_i[1]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1397[i].real()*R*k_i[1]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp2836(Nx*Ny*Nz); // RS
	rtemp2836 = ifft(Nx,Ny,Nz,dV,ktemp2835);

	ktemp2835.free(); // KSpace
	Vector rtemp2837(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2837[i] = rtemp2836[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp2838(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2838 = fft(Nx,Ny,Nz,dV,rtemp2837);

	rtemp2837.free(); // Realspace
	ktemp2838[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2838[i] = std::complex<double>(-1.0*ktemp2838[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2838[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2840(Nx*Ny*Nz); // RS
	rtemp2840 = ifft(Nx,Ny,Nz,dV,ktemp2838);

	ktemp2838.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2840[i] = rtemp2833[i] + 76.74604382287085*rtemp2840[i];
	}

	rtemp2833.free(); // Realspace
	ComplexVector ktemp2842(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2842[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp2842[i] = std::complex<double>(-1.0*ktemp1406[i].imag()*R*k_i[1]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1406[i].real()*R*k_i[1]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp2843(Nx*Ny*Nz); // RS
	rtemp2843 = ifft(Nx,Ny,Nz,dV,ktemp2842);

	ktemp2842.free(); // KSpace
	Vector rtemp2844(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2844[i] = rtemp2843[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp2845(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2845 = fft(Nx,Ny,Nz,dV,rtemp2844);

	rtemp2844.free(); // Realspace
	ktemp2845[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2845[i] = std::complex<double>(-1.0*ktemp2845[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2845[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2847(Nx*Ny*Nz); // RS
	rtemp2847 = ifft(Nx,Ny,Nz,dV,ktemp2845);

	ktemp2845.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2847[i] = rtemp2840[i] - 51.16402921524723*rtemp2847[i];
	}

	rtemp2840.free(); // Realspace
	ComplexVector ktemp2849(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2849[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp2849[i] = std::complex<double>(-1.0*ktemp1415[i].imag()*R*k_i[1]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1415[i].real()*R*k_i[1]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp2850(Nx*Ny*Nz); // RS
	rtemp2850 = ifft(Nx,Ny,Nz,dV,ktemp2849);

	ktemp2849.free(); // KSpace
	Vector rtemp2851(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2851[i] = rtemp2850[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp2852(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2852 = fft(Nx,Ny,Nz,dV,rtemp2851);

	rtemp2851.free(); // Realspace
	ktemp2852[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2852[i] = std::complex<double>(-1.0*ktemp2852[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2852[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2854(Nx*Ny*Nz); // RS
	rtemp2854 = ifft(Nx,Ny,Nz,dV,ktemp2852);

	ktemp2852.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2854[i] = rtemp2847[i] - 0.15791367041742974*rtemp2854[i];
	}

	rtemp2847.free(); // Realspace
	ComplexVector ktemp2856(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2856[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp2856[i] = std::complex<double>(-1.0*ktemp1424[i].imag()*R*k_i[1]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1424[i].real()*R*k_i[1]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp2857(Nx*Ny*Nz); // RS
	rtemp2857 = ifft(Nx,Ny,Nz,dV,ktemp2856);

	ktemp2856.free(); // KSpace
	Vector rtemp2858(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2858[i] = rtemp2857[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp2859(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2859 = fft(Nx,Ny,Nz,dV,rtemp2858);

	rtemp2858.free(); // Realspace
	ktemp2859[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2859[i] = std::complex<double>(-1.0*ktemp2859[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2859[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2861(Nx*Ny*Nz); // RS
	rtemp2861 = ifft(Nx,Ny,Nz,dV,ktemp2859);

	ktemp2859.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2861[i] = rtemp2854[i] + 112.43453333720996*rtemp2861[i];
	}

	rtemp2854.free(); // Realspace
	ComplexVector ktemp2863(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2863[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp2863[i] = std::complex<double>(-1.0*ktemp1433[i].imag()*R*k_i[1]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1433[i].real()*R*k_i[1]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp2864(Nx*Ny*Nz); // RS
	rtemp2864 = ifft(Nx,Ny,Nz,dV,ktemp2863);

	ktemp2863.free(); // KSpace
	Vector rtemp2865(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2865[i] = rtemp2864[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp2866(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2866 = fft(Nx,Ny,Nz,dV,rtemp2865);

	rtemp2865.free(); // Realspace
	ktemp2866[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2866[i] = std::complex<double>(-1.0*ktemp2866[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2866[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2868(Nx*Ny*Nz); // RS
	rtemp2868 = ifft(Nx,Ny,Nz,dV,ktemp2866);

	ktemp2866.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2868[i] = rtemp2861[i] - 462.37122698223425*rtemp2868[i];
	}

	rtemp2861.free(); // Realspace
	ComplexVector ktemp2870(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2870[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp2870[i] = std::complex<double>(-1.0*ktemp1442[i].imag()*R*k_i[1]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1442[i].real()*R*k_i[1]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp2871(Nx*Ny*Nz); // RS
	rtemp2871 = ifft(Nx,Ny,Nz,dV,ktemp2870);

	ktemp2870.free(); // KSpace
	Vector rtemp2872(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2872[i] = rtemp2871[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp2873(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2873 = fft(Nx,Ny,Nz,dV,rtemp2872);

	rtemp2872.free(); // Realspace
	ktemp2873[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2873[i] = std::complex<double>(-1.0*ktemp2873[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2873[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2875(Nx*Ny*Nz); // RS
	rtemp2875 = ifft(Nx,Ny,Nz,dV,ktemp2873);

	ktemp2873.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2875[i] = rtemp2868[i] + 330.355398513263*rtemp2875[i];
	}

	rtemp2868.free(); // Realspace
	ComplexVector ktemp2877(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2877[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp2877[i] = std::complex<double>(-1.0*ktemp1451[i].imag()*R*k_i[1]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1451[i].real()*R*k_i[1]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp2878(Nx*Ny*Nz); // RS
	rtemp2878 = ifft(Nx,Ny,Nz,dV,ktemp2877);

	ktemp2877.free(); // KSpace
	Vector rtemp2879(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2879[i] = rtemp2878[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp2880(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2880 = fft(Nx,Ny,Nz,dV,rtemp2879);

	rtemp2879.free(); // Realspace
	ktemp2880[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2880[i] = std::complex<double>(-1.0*ktemp2880[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2880[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2882(Nx*Ny*Nz); // RS
	rtemp2882 = ifft(Nx,Ny,Nz,dV,ktemp2880);

	ktemp2880.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2882[i] = rtemp2875[i] + 695.2938908479431*rtemp2882[i];
	}

	rtemp2875.free(); // Realspace
	ComplexVector ktemp2884(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2884[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp2884[i] = std::complex<double>(-1.0*ktemp1460[i].imag()*R*k_i[1]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1460[i].real()*R*k_i[1]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp2885(Nx*Ny*Nz); // RS
	rtemp2885 = ifft(Nx,Ny,Nz,dV,ktemp2884);

	ktemp2884.free(); // KSpace
	Vector rtemp2886(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2886[i] = rtemp2885[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp2887(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2887 = fft(Nx,Ny,Nz,dV,rtemp2886);

	rtemp2886.free(); // Realspace
	ktemp2887[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2887[i] = std::complex<double>(-1.0*ktemp2887[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2887[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2889(Nx*Ny*Nz); // RS
	rtemp2889 = ifft(Nx,Ny,Nz,dV,ktemp2887);

	ktemp2887.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2889[i] = rtemp2882[i] - 587.4388539528386*rtemp2889[i];
	}

	rtemp2882.free(); // Realspace
	ComplexVector ktemp2891(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2891[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp2891[i] = std::complex<double>(-1.0*ktemp1469[i].imag()*R*k_i[1]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1469[i].real()*R*k_i[1]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp2892(Nx*Ny*Nz); // RS
	rtemp2892 = ifft(Nx,Ny,Nz,dV,ktemp2891);

	ktemp2891.free(); // KSpace
	Vector rtemp2893(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2893[i] = rtemp2892[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp2894(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2894 = fft(Nx,Ny,Nz,dV,rtemp2893);

	rtemp2893.free(); // Realspace
	ktemp2894[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2894[i] = std::complex<double>(-1.0*ktemp2894[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2894[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2896(Nx*Ny*Nz); // RS
	rtemp2896 = ifft(Nx,Ny,Nz,dV,ktemp2894);

	ktemp2894.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2896[i] = rtemp2889[i] + 114.64532472305397*rtemp2896[i];
	}

	rtemp2889.free(); // Realspace
	ComplexVector ktemp2898(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2898[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp2898[i] = std::complex<double>(-1.0*ktemp1478[i].imag()*R*k_i[1]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1478[i].real()*R*k_i[1]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp2899(Nx*Ny*Nz); // RS
	rtemp2899 = ifft(Nx,Ny,Nz,dV,ktemp2898);

	ktemp2898.free(); // KSpace
	Vector rtemp2900(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2900[i] = rtemp2899[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp2901(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2901 = fft(Nx,Ny,Nz,dV,rtemp2900);

	rtemp2900.free(); // Realspace
	ktemp2901[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2901[i] = std::complex<double>(-1.0*ktemp2901[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2901[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2903(Nx*Ny*Nz); // RS
	rtemp2903 = ifft(Nx,Ny,Nz,dV,ktemp2901);

	ktemp2901.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2903[i] = rtemp2896[i] + 4.263669101270603*rtemp2903[i];
	}

	rtemp2896.free(); // Realspace
	ComplexVector ktemp2905(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2905[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp2905[i] = std::complex<double>(-1.0*ktemp1487[i].imag()*R*k_i[1]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1487[i].real()*R*k_i[1]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp2906(Nx*Ny*Nz); // RS
	rtemp2906 = ifft(Nx,Ny,Nz,dV,ktemp2905);

	ktemp2905.free(); // KSpace
	Vector rtemp2907(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2907[i] = rtemp2906[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp2908(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2908 = fft(Nx,Ny,Nz,dV,rtemp2907);

	rtemp2907.free(); // Realspace
	ktemp2908[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2908[i] = std::complex<double>(-1.0*ktemp2908[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2908[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2910(Nx*Ny*Nz); // RS
	rtemp2910 = ifft(Nx,Ny,Nz,dV,ktemp2908);

	ktemp2908.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2910[i] = rtemp2903[i] + 198.49748371470918*rtemp2910[i];
	}

	rtemp2903.free(); // Realspace
	ComplexVector ktemp2912(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2912[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp2912[i] = std::complex<double>(-1.0*ktemp1496[i].imag()*R*k_i[1]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1496[i].real()*R*k_i[1]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp2913(Nx*Ny*Nz); // RS
	rtemp2913 = ifft(Nx,Ny,Nz,dV,ktemp2912);

	ktemp2912.free(); // KSpace
	Vector rtemp2914(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2914[i] = rtemp2913[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp2915(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2915 = fft(Nx,Ny,Nz,dV,rtemp2914);

	rtemp2914.free(); // Realspace
	ktemp2915[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2915[i] = std::complex<double>(-1.0*ktemp2915[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2915[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2917(Nx*Ny*Nz); // RS
	rtemp2917 = ifft(Nx,Ny,Nz,dV,ktemp2915);

	ktemp2915.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2917[i] = rtemp2910[i] - 56.21726666860498*rtemp2917[i];
	}

	rtemp2910.free(); // Realspace
	ComplexVector ktemp2919(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2919[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp2919[i] = std::complex<double>(-1.0*ktemp1505[i].imag()*R*k_i[1]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1505[i].real()*R*k_i[1]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp2920(Nx*Ny*Nz); // RS
	rtemp2920 = ifft(Nx,Ny,Nz,dV,ktemp2919);

	ktemp2919.free(); // KSpace
	Vector rtemp2921(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2921[i] = rtemp2920[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp2922(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2922 = fft(Nx,Ny,Nz,dV,rtemp2921);

	rtemp2921.free(); // Realspace
	ktemp2922[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2922[i] = std::complex<double>(-1.0*ktemp2922[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2922[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2924(Nx*Ny*Nz); // RS
	rtemp2924 = ifft(Nx,Ny,Nz,dV,ktemp2922);

	ktemp2922.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2924[i] = rtemp2917[i] + 16.344064888203977*rtemp2924[i];
	}

	rtemp2917.free(); // Realspace
	ComplexVector ktemp2926(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2926[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp2926[i] = std::complex<double>(-1.0*ktemp1514[i].imag()*R*k_i[1]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1514[i].real()*R*k_i[1]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp2927(Nx*Ny*Nz); // RS
	rtemp2927 = ifft(Nx,Ny,Nz,dV,ktemp2926);

	ktemp2926.free(); // KSpace
	Vector rtemp2928(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2928[i] = rtemp2927[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp2929(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2929 = fft(Nx,Ny,Nz,dV,rtemp2928);

	rtemp2928.free(); // Realspace
	ktemp2929[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2929[i] = std::complex<double>(-1.0*ktemp2929[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2929[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2931(Nx*Ny*Nz); // RS
	rtemp2931 = ifft(Nx,Ny,Nz,dV,ktemp2929);

	ktemp2929.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2931[i] = rtemp2924[i] - 177.10018137314742*rtemp2931[i];
	}

	rtemp2924.free(); // Realspace
	ComplexVector ktemp2933(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2933[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp2933[i] = std::complex<double>(-1.0*ktemp1523[i].imag()*R*k_i[1]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1523[i].real()*R*k_i[1]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp2934(Nx*Ny*Nz); // RS
	rtemp2934 = ifft(Nx,Ny,Nz,dV,ktemp2933);

	ktemp2933.free(); // KSpace
	Vector rtemp2935(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2935[i] = rtemp2934[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp2936(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2936 = fft(Nx,Ny,Nz,dV,rtemp2935);

	rtemp2935.free(); // Realspace
	ktemp2936[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2936[i] = std::complex<double>(-1.0*ktemp2936[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2936[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2938(Nx*Ny*Nz); // RS
	rtemp2938 = ifft(Nx,Ny,Nz,dV,ktemp2936);

	ktemp2936.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2938[i] = rtemp2931[i] - 138.49028895608586*rtemp2938[i];
	}

	rtemp2931.free(); // Realspace
	ComplexVector ktemp2940(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2940[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp2940[i] = std::complex<double>(-1.0*ktemp1532[i].imag()*R*k_i[1]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1532[i].real()*R*k_i[1]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp2941(Nx*Ny*Nz); // RS
	rtemp2941 = ifft(Nx,Ny,Nz,dV,ktemp2940);

	ktemp2940.free(); // KSpace
	Vector rtemp2942(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2942[i] = rtemp2941[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp2943(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2943 = fft(Nx,Ny,Nz,dV,rtemp2942);

	rtemp2942.free(); // Realspace
	ktemp2943[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2943[i] = std::complex<double>(-1.0*ktemp2943[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2943[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2945(Nx*Ny*Nz); // RS
	rtemp2945 = ifft(Nx,Ny,Nz,dV,ktemp2943);

	ktemp2943.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2945[i] = rtemp2938[i] + 78.95683520871486*rtemp2945[i];
	}

	rtemp2938.free(); // Realspace
	ComplexVector ktemp2947(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2947[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2947[i] = std::complex<double>(-1.0*ktemp1235[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1235[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2948(Nx*Ny*Nz); // RS
	rtemp2948 = ifft(Nx,Ny,Nz,dV,ktemp2947);

	ktemp2947.free(); // KSpace
	Vector rtemp2949(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2949[i] = rtemp2948[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp2950(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2950 = fft(Nx,Ny,Nz,dV,rtemp2949);

	rtemp2949.free(); // Realspace
	ktemp2950[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2950[i] = std::complex<double>(-1.0*ktemp2950[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2950[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2952(Nx*Ny*Nz); // RS
	rtemp2952 = ifft(Nx,Ny,Nz,dV,ktemp2950);

	ktemp2950.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2952[i] = rtemp2945[i] - 25.897841948458478*rtemp2952[i];
	}

	rtemp2945.free(); // Realspace
	ComplexVector ktemp2954(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2954[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2954[i] = std::complex<double>(-1.0*ktemp1244[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1244[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2955(Nx*Ny*Nz); // RS
	rtemp2955 = ifft(Nx,Ny,Nz,dV,ktemp2954);

	ktemp2954.free(); // KSpace
	Vector rtemp2956(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2956[i] = rtemp2955[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp2957(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2957 = fft(Nx,Ny,Nz,dV,rtemp2956);

	rtemp2956.free(); // Realspace
	ktemp2957[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2957[i] = std::complex<double>(-1.0*ktemp2957[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2957[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2959(Nx*Ny*Nz); // RS
	rtemp2959 = ifft(Nx,Ny,Nz,dV,ktemp2957);

	ktemp2957.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2959[i] = rtemp2952[i] + 76.74604382287085*rtemp2959[i];
	}

	rtemp2952.free(); // Realspace
	ComplexVector ktemp2961(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2961[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2961[i] = std::complex<double>(-1.0*ktemp1253[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1253[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2962(Nx*Ny*Nz); // RS
	rtemp2962 = ifft(Nx,Ny,Nz,dV,ktemp2961);

	ktemp2961.free(); // KSpace
	Vector rtemp2963(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2963[i] = rtemp2962[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp2964(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2964 = fft(Nx,Ny,Nz,dV,rtemp2963);

	rtemp2963.free(); // Realspace
	ktemp2964[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2964[i] = std::complex<double>(-1.0*ktemp2964[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2964[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2966(Nx*Ny*Nz); // RS
	rtemp2966 = ifft(Nx,Ny,Nz,dV,ktemp2964);

	ktemp2964.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2966[i] = rtemp2959[i] - 51.16402921524723*rtemp2966[i];
	}

	rtemp2959.free(); // Realspace
	ComplexVector ktemp2968(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2968[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2968[i] = std::complex<double>(-1.0*ktemp1262[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1262[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2969(Nx*Ny*Nz); // RS
	rtemp2969 = ifft(Nx,Ny,Nz,dV,ktemp2968);

	ktemp2968.free(); // KSpace
	Vector rtemp2970(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2970[i] = rtemp2969[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp2971(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2971 = fft(Nx,Ny,Nz,dV,rtemp2970);

	rtemp2970.free(); // Realspace
	ktemp2971[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2971[i] = std::complex<double>(-1.0*ktemp2971[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2971[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2973(Nx*Ny*Nz); // RS
	rtemp2973 = ifft(Nx,Ny,Nz,dV,ktemp2971);

	ktemp2971.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2973[i] = rtemp2966[i] - 0.15791367041742974*rtemp2973[i];
	}

	rtemp2966.free(); // Realspace
	ComplexVector ktemp2975(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2975[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2975[i] = std::complex<double>(-1.0*ktemp1271[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1271[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2976(Nx*Ny*Nz); // RS
	rtemp2976 = ifft(Nx,Ny,Nz,dV,ktemp2975);

	ktemp2975.free(); // KSpace
	Vector rtemp2977(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2977[i] = rtemp2976[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp2978(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2978 = fft(Nx,Ny,Nz,dV,rtemp2977);

	rtemp2977.free(); // Realspace
	ktemp2978[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2978[i] = std::complex<double>(-1.0*ktemp2978[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2978[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2980(Nx*Ny*Nz); // RS
	rtemp2980 = ifft(Nx,Ny,Nz,dV,ktemp2978);

	ktemp2978.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2980[i] = rtemp2973[i] + 112.43453333720996*rtemp2980[i];
	}

	rtemp2973.free(); // Realspace
	ComplexVector ktemp2982(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2982[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2982[i] = std::complex<double>(-1.0*ktemp1280[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1280[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2983(Nx*Ny*Nz); // RS
	rtemp2983 = ifft(Nx,Ny,Nz,dV,ktemp2982);

	ktemp2982.free(); // KSpace
	Vector rtemp2984(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2984[i] = rtemp2983[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp2985(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2985 = fft(Nx,Ny,Nz,dV,rtemp2984);

	rtemp2984.free(); // Realspace
	ktemp2985[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2985[i] = std::complex<double>(-1.0*ktemp2985[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2985[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2987(Nx*Ny*Nz); // RS
	rtemp2987 = ifft(Nx,Ny,Nz,dV,ktemp2985);

	ktemp2985.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2987[i] = rtemp2980[i] - 462.37122698223425*rtemp2987[i];
	}

	rtemp2980.free(); // Realspace
	ComplexVector ktemp2989(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2989[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2989[i] = std::complex<double>(-1.0*ktemp1289[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1289[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2990(Nx*Ny*Nz); // RS
	rtemp2990 = ifft(Nx,Ny,Nz,dV,ktemp2989);

	ktemp2989.free(); // KSpace
	Vector rtemp2991(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2991[i] = rtemp2990[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp2992(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2992 = fft(Nx,Ny,Nz,dV,rtemp2991);

	rtemp2991.free(); // Realspace
	ktemp2992[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2992[i] = std::complex<double>(-1.0*ktemp2992[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2992[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2994(Nx*Ny*Nz); // RS
	rtemp2994 = ifft(Nx,Ny,Nz,dV,ktemp2992);

	ktemp2992.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2994[i] = rtemp2987[i] + 330.355398513263*rtemp2994[i];
	}

	rtemp2987.free(); // Realspace
	ComplexVector ktemp2996(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2996[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2996[i] = std::complex<double>(-1.0*ktemp1298[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1298[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2997(Nx*Ny*Nz); // RS
	rtemp2997 = ifft(Nx,Ny,Nz,dV,ktemp2996);

	ktemp2996.free(); // KSpace
	Vector rtemp2998(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2998[i] = rtemp2997[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp2999(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2999 = fft(Nx,Ny,Nz,dV,rtemp2998);

	rtemp2998.free(); // Realspace
	ktemp2999[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp2999[i] = std::complex<double>(-1.0*ktemp2999[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp2999[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3001(Nx*Ny*Nz); // RS
	rtemp3001 = ifft(Nx,Ny,Nz,dV,ktemp2999);

	ktemp2999.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3001[i] = rtemp2994[i] + 695.2938908479431*rtemp3001[i];
	}

	rtemp2994.free(); // Realspace
	ComplexVector ktemp3003(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3003[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3003[i] = std::complex<double>(-1.0*ktemp1307[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1307[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3004(Nx*Ny*Nz); // RS
	rtemp3004 = ifft(Nx,Ny,Nz,dV,ktemp3003);

	ktemp3003.free(); // KSpace
	Vector rtemp3005(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3005[i] = rtemp3004[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp3006(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3006 = fft(Nx,Ny,Nz,dV,rtemp3005);

	rtemp3005.free(); // Realspace
	ktemp3006[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3006[i] = std::complex<double>(-1.0*ktemp3006[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3006[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3008(Nx*Ny*Nz); // RS
	rtemp3008 = ifft(Nx,Ny,Nz,dV,ktemp3006);

	ktemp3006.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3008[i] = rtemp3001[i] - 587.4388539528386*rtemp3008[i];
	}

	rtemp3001.free(); // Realspace
	ComplexVector ktemp3010(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3010[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3010[i] = std::complex<double>(-1.0*ktemp1316[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1316[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3011(Nx*Ny*Nz); // RS
	rtemp3011 = ifft(Nx,Ny,Nz,dV,ktemp3010);

	ktemp3010.free(); // KSpace
	Vector rtemp3012(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3012[i] = rtemp3011[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp3013(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3013 = fft(Nx,Ny,Nz,dV,rtemp3012);

	rtemp3012.free(); // Realspace
	ktemp3013[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3013[i] = std::complex<double>(-1.0*ktemp3013[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3013[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3015(Nx*Ny*Nz); // RS
	rtemp3015 = ifft(Nx,Ny,Nz,dV,ktemp3013);

	ktemp3013.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3015[i] = rtemp3008[i] + 114.64532472305397*rtemp3015[i];
	}

	rtemp3008.free(); // Realspace
	ComplexVector ktemp3017(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3017[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3017[i] = std::complex<double>(-1.0*ktemp1325[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1325[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3018(Nx*Ny*Nz); // RS
	rtemp3018 = ifft(Nx,Ny,Nz,dV,ktemp3017);

	ktemp3017.free(); // KSpace
	Vector rtemp3019(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3019[i] = rtemp3018[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp3020(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3020 = fft(Nx,Ny,Nz,dV,rtemp3019);

	rtemp3019.free(); // Realspace
	ktemp3020[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3020[i] = std::complex<double>(-1.0*ktemp3020[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3020[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3022(Nx*Ny*Nz); // RS
	rtemp3022 = ifft(Nx,Ny,Nz,dV,ktemp3020);

	ktemp3020.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3022[i] = rtemp3015[i] + 4.263669101270603*rtemp3022[i];
	}

	rtemp3015.free(); // Realspace
	ComplexVector ktemp3024(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3024[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3024[i] = std::complex<double>(-1.0*ktemp1334[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1334[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3025(Nx*Ny*Nz); // RS
	rtemp3025 = ifft(Nx,Ny,Nz,dV,ktemp3024);

	ktemp3024.free(); // KSpace
	Vector rtemp3026(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3026[i] = rtemp3025[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp3027(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3027 = fft(Nx,Ny,Nz,dV,rtemp3026);

	rtemp3026.free(); // Realspace
	ktemp3027[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3027[i] = std::complex<double>(-1.0*ktemp3027[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3027[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3029(Nx*Ny*Nz); // RS
	rtemp3029 = ifft(Nx,Ny,Nz,dV,ktemp3027);

	ktemp3027.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3029[i] = rtemp3022[i] + 198.49748371470918*rtemp3029[i];
	}

	rtemp3022.free(); // Realspace
	ComplexVector ktemp3031(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3031[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3031[i] = std::complex<double>(-1.0*ktemp1343[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1343[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3032(Nx*Ny*Nz); // RS
	rtemp3032 = ifft(Nx,Ny,Nz,dV,ktemp3031);

	ktemp3031.free(); // KSpace
	Vector rtemp3033(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3033[i] = rtemp3032[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp3034(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3034 = fft(Nx,Ny,Nz,dV,rtemp3033);

	rtemp3033.free(); // Realspace
	ktemp3034[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3034[i] = std::complex<double>(-1.0*ktemp3034[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3034[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3036(Nx*Ny*Nz); // RS
	rtemp3036 = ifft(Nx,Ny,Nz,dV,ktemp3034);

	ktemp3034.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3036[i] = rtemp3029[i] - 56.21726666860498*rtemp3036[i];
	}

	rtemp3029.free(); // Realspace
	ComplexVector ktemp3038(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3038[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3038[i] = std::complex<double>(-1.0*ktemp1352[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1352[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3039(Nx*Ny*Nz); // RS
	rtemp3039 = ifft(Nx,Ny,Nz,dV,ktemp3038);

	ktemp3038.free(); // KSpace
	Vector rtemp3040(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3040[i] = rtemp3039[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp3041(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3041 = fft(Nx,Ny,Nz,dV,rtemp3040);

	rtemp3040.free(); // Realspace
	ktemp3041[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3041[i] = std::complex<double>(-1.0*ktemp3041[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3041[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3043(Nx*Ny*Nz); // RS
	rtemp3043 = ifft(Nx,Ny,Nz,dV,ktemp3041);

	ktemp3041.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3043[i] = rtemp3036[i] + 16.344064888203977*rtemp3043[i];
	}

	rtemp3036.free(); // Realspace
	ComplexVector ktemp3045(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3045[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3045[i] = std::complex<double>(-1.0*ktemp1361[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1361[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3046(Nx*Ny*Nz); // RS
	rtemp3046 = ifft(Nx,Ny,Nz,dV,ktemp3045);

	ktemp3045.free(); // KSpace
	Vector rtemp3047(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3047[i] = rtemp3046[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp3048(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3048 = fft(Nx,Ny,Nz,dV,rtemp3047);

	rtemp3047.free(); // Realspace
	ktemp3048[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3048[i] = std::complex<double>(-1.0*ktemp3048[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3048[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3050(Nx*Ny*Nz); // RS
	rtemp3050 = ifft(Nx,Ny,Nz,dV,ktemp3048);

	ktemp3048.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3050[i] = rtemp3043[i] - 177.10018137314742*rtemp3050[i];
	}

	rtemp3043.free(); // Realspace
	ComplexVector ktemp3052(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3052[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3052[i] = std::complex<double>(-1.0*ktemp1370[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1370[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3053(Nx*Ny*Nz); // RS
	rtemp3053 = ifft(Nx,Ny,Nz,dV,ktemp3052);

	ktemp3052.free(); // KSpace
	Vector rtemp3054(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3054[i] = rtemp3053[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp3055(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3055 = fft(Nx,Ny,Nz,dV,rtemp3054);

	rtemp3054.free(); // Realspace
	ktemp3055[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3055[i] = std::complex<double>(-1.0*ktemp3055[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3055[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3057(Nx*Ny*Nz); // RS
	rtemp3057 = ifft(Nx,Ny,Nz,dV,ktemp3055);

	ktemp3055.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3057[i] = rtemp3050[i] - 138.49028895608586*rtemp3057[i];
	}

	rtemp3050.free(); // Realspace
	ComplexVector ktemp3059(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3059[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3059[i] = std::complex<double>(-1.0*ktemp1379[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1379[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3060(Nx*Ny*Nz); // RS
	rtemp3060 = ifft(Nx,Ny,Nz,dV,ktemp3059);

	ktemp3059.free(); // KSpace
	Vector rtemp3061(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3061[i] = rtemp3060[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp3062(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3062 = fft(Nx,Ny,Nz,dV,rtemp3061);

	rtemp3061.free(); // Realspace
	ktemp3062[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3062[i] = std::complex<double>(-1.0*ktemp3062[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3062[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3064(Nx*Ny*Nz); // RS
	rtemp3064 = ifft(Nx,Ny,Nz,dV,ktemp3062);

	ktemp3062.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3064[i] = rtemp3057[i] + 78.95683520871486*rtemp3064[i];
	}

	rtemp3057.free(); // Realspace
	Vector rtemp3066(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3066[i] = dV*kT*rtemp81[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3067(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3067 = fft(Nx,Ny,Nz,dV,rtemp3066);

	rtemp3066.free(); // Realspace
	ktemp3067[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3067[i] = std::complex<double>(-1.0*ktemp3067[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3067[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3069(Nx*Ny*Nz); // RS
	rtemp3069 = ifft(Nx,Ny,Nz,dV,ktemp3067);

	ktemp3067.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3069[i] = rtemp3064[i] + rtemp3069[i];
	}

	rtemp3064.free(); // Realspace
	Vector rtemp3071(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3071[i] = rtemp123[i]*rtemp81[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3072(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3072 = fft(Nx,Ny,Nz,dV,rtemp3071);

	rtemp3071.free(); // Realspace
	ktemp3072[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3072[i] = std::complex<double>(-1.0*ktemp3072[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3072[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3074(Nx*Ny*Nz); // RS
	rtemp3074 = ifft(Nx,Ny,Nz,dV,ktemp3072);

	ktemp3072.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3074[i] = rtemp3069[i] + 25.897841948458478*rtemp3074[i];
	}

	rtemp3069.free(); // Realspace
	Vector rtemp3076(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3076[i] = rtemp132[i]*rtemp81[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3077(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3077 = fft(Nx,Ny,Nz,dV,rtemp3076);

	rtemp3076.free(); // Realspace
	ktemp3077[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3077[i] = std::complex<double>(-1.0*ktemp3077[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3077[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3079(Nx*Ny*Nz); // RS
	rtemp3079 = ifft(Nx,Ny,Nz,dV,ktemp3077);

	ktemp3077.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3079[i] = rtemp3074[i] - 76.74604382287085*rtemp3079[i];
	}

	rtemp3074.free(); // Realspace
	Vector rtemp3081(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3081[i] = rtemp141[i]*rtemp81[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3082(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3082 = fft(Nx,Ny,Nz,dV,rtemp3081);

	rtemp3081.free(); // Realspace
	ktemp3082[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3082[i] = std::complex<double>(-1.0*ktemp3082[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3082[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3084(Nx*Ny*Nz); // RS
	rtemp3084 = ifft(Nx,Ny,Nz,dV,ktemp3082);

	ktemp3082.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3084[i] = rtemp3079[i] + 51.16402921524723*rtemp3084[i];
	}

	rtemp3079.free(); // Realspace
	Vector rtemp3086(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3086[i] = rtemp150[i]*rtemp81[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3087(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3087 = fft(Nx,Ny,Nz,dV,rtemp3086);

	rtemp3086.free(); // Realspace
	ktemp3087[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3087[i] = std::complex<double>(-1.0*ktemp3087[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3087[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3089(Nx*Ny*Nz); // RS
	rtemp3089 = ifft(Nx,Ny,Nz,dV,ktemp3087);

	ktemp3087.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3089[i] = rtemp3084[i] - 112.43453333720996*rtemp3089[i];
	}

	rtemp3084.free(); // Realspace
	Vector rtemp3091(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3091[i] = rtemp159[i]*rtemp81[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3092(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3092 = fft(Nx,Ny,Nz,dV,rtemp3091);

	rtemp3091.free(); // Realspace
	ktemp3092[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3092[i] = std::complex<double>(-1.0*ktemp3092[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3092[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3094(Nx*Ny*Nz); // RS
	rtemp3094 = ifft(Nx,Ny,Nz,dV,ktemp3092);

	ktemp3092.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3094[i] = rtemp3089[i] + 462.37122698223425*rtemp3094[i];
	}

	rtemp3089.free(); // Realspace
	Vector rtemp3096(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3096[i] = rtemp168[i]*rtemp81[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3097(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3097 = fft(Nx,Ny,Nz,dV,rtemp3096);

	rtemp3096.free(); // Realspace
	ktemp3097[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3097[i] = std::complex<double>(-1.0*ktemp3097[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3097[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3099(Nx*Ny*Nz); // RS
	rtemp3099 = ifft(Nx,Ny,Nz,dV,ktemp3097);

	ktemp3097.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3099[i] = rtemp3094[i] - 330.355398513263*rtemp3099[i];
	}

	rtemp3094.free(); // Realspace
	Vector rtemp3101(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3101[i] = rtemp16[i]*rtemp81[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3102(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3102 = fft(Nx,Ny,Nz,dV,rtemp3101);

	rtemp3101.free(); // Realspace
	ktemp3102[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3102[i] = std::complex<double>(-1.0*ktemp3102[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3102[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3104(Nx*Ny*Nz); // RS
	rtemp3104 = ifft(Nx,Ny,Nz,dV,ktemp3102);

	ktemp3102.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3104[i] = rtemp3099[i] + 0.15791367041742974*rtemp3104[i];
	}

	rtemp3099.free(); // Realspace
	Vector rtemp3106(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3106[i] = rtemp177[i]*rtemp81[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3107(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3107 = fft(Nx,Ny,Nz,dV,rtemp3106);

	rtemp3106.free(); // Realspace
	ktemp3107[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3107[i] = std::complex<double>(-1.0*ktemp3107[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3107[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3109(Nx*Ny*Nz); // RS
	rtemp3109 = ifft(Nx,Ny,Nz,dV,ktemp3107);

	ktemp3107.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3109[i] = rtemp3104[i] - 695.2938908479431*rtemp3109[i];
	}

	rtemp3104.free(); // Realspace
	Vector rtemp3111(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3111[i] = rtemp186[i]*rtemp81[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3112(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3112 = fft(Nx,Ny,Nz,dV,rtemp3111);

	rtemp3111.free(); // Realspace
	ktemp3112[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3112[i] = std::complex<double>(-1.0*ktemp3112[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3112[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3114(Nx*Ny*Nz); // RS
	rtemp3114 = ifft(Nx,Ny,Nz,dV,ktemp3112);

	ktemp3112.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3114[i] = rtemp3109[i] + 587.4388539528386*rtemp3114[i];
	}

	rtemp3109.free(); // Realspace
	Vector rtemp3116(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3116[i] = rtemp195[i]*rtemp81[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3117(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3117 = fft(Nx,Ny,Nz,dV,rtemp3116);

	rtemp3116.free(); // Realspace
	ktemp3117[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3117[i] = std::complex<double>(-1.0*ktemp3117[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3117[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3119(Nx*Ny*Nz); // RS
	rtemp3119 = ifft(Nx,Ny,Nz,dV,ktemp3117);

	ktemp3117.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3119[i] = rtemp3114[i] - 114.64532472305397*rtemp3119[i];
	}

	rtemp3114.free(); // Realspace
	Vector rtemp3121(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3121[i] = rtemp204[i]*rtemp81[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3122(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3122 = fft(Nx,Ny,Nz,dV,rtemp3121);

	rtemp3121.free(); // Realspace
	ktemp3122[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3122[i] = std::complex<double>(-1.0*ktemp3122[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3122[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3124(Nx*Ny*Nz); // RS
	rtemp3124 = ifft(Nx,Ny,Nz,dV,ktemp3122);

	ktemp3122.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3124[i] = rtemp3119[i] - 4.263669101270603*rtemp3124[i];
	}

	rtemp3119.free(); // Realspace
	Vector rtemp3126(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3126[i] = rtemp213[i]*rtemp81[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3127(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3127 = fft(Nx,Ny,Nz,dV,rtemp3126);

	rtemp3126.free(); // Realspace
	ktemp3127[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3127[i] = std::complex<double>(-1.0*ktemp3127[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3127[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3129(Nx*Ny*Nz); // RS
	rtemp3129 = ifft(Nx,Ny,Nz,dV,ktemp3127);

	ktemp3127.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3129[i] = rtemp3124[i] - 198.49748371470918*rtemp3129[i];
	}

	rtemp3124.free(); // Realspace
	Vector rtemp3131(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3131[i] = rtemp222[i]*rtemp81[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3132(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3132 = fft(Nx,Ny,Nz,dV,rtemp3131);

	rtemp3131.free(); // Realspace
	ktemp3132[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3132[i] = std::complex<double>(-1.0*ktemp3132[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3132[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3134(Nx*Ny*Nz); // RS
	rtemp3134 = ifft(Nx,Ny,Nz,dV,ktemp3132);

	ktemp3132.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3134[i] = rtemp3129[i] + 56.21726666860498*rtemp3134[i];
	}

	rtemp3129.free(); // Realspace
	Vector rtemp3136(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3136[i] = rtemp27[i]*rtemp81[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3137(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3137 = fft(Nx,Ny,Nz,dV,rtemp3136);

	rtemp3136.free(); // Realspace
	ktemp3137[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3137[i] = std::complex<double>(-1.0*ktemp3137[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3137[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3139(Nx*Ny*Nz); // RS
	rtemp3139 = ifft(Nx,Ny,Nz,dV,ktemp3137);

	ktemp3137.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3139[i] = rtemp3134[i] - 16.344064888203977*rtemp3139[i];
	}

	rtemp3134.free(); // Realspace
	Vector rtemp3141(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3141[i] = rtemp38[i]*rtemp81[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3142(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3142 = fft(Nx,Ny,Nz,dV,rtemp3141);

	rtemp3141.free(); // Realspace
	ktemp3142[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3142[i] = std::complex<double>(-1.0*ktemp3142[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3142[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3144(Nx*Ny*Nz); // RS
	rtemp3144 = ifft(Nx,Ny,Nz,dV,ktemp3142);

	ktemp3142.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3144[i] = rtemp3139[i] + 177.10018137314742*rtemp3144[i];
	}

	rtemp3139.free(); // Realspace
	Vector rtemp3146(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3146[i] = rtemp49[i]*rtemp81[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3147(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3147 = fft(Nx,Ny,Nz,dV,rtemp3146);

	rtemp3146.free(); // Realspace
	ktemp3147[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3147[i] = std::complex<double>(-1.0*ktemp3147[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3147[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3149(Nx*Ny*Nz); // RS
	rtemp3149 = ifft(Nx,Ny,Nz,dV,ktemp3147);

	ktemp3147.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3149[i] = rtemp3144[i] + 138.49028895608586*rtemp3149[i];
	}

	rtemp3144.free(); // Realspace
	Vector rtemp3151(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3151[i] = rtemp60[i]*rtemp81[i]/(R*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3152(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3152 = fft(Nx,Ny,Nz,dV,rtemp3151);

	rtemp3151.free(); // Realspace
	ktemp3152[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3152[i] = std::complex<double>(-1.0*ktemp3152[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3152[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3154(Nx*Ny*Nz); // RS
	rtemp3154 = ifft(Nx,Ny,Nz,dV,ktemp3152);

	ktemp3152.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3154[i] = rtemp3149[i] - 78.95683520871486*rtemp3154[i];
	}

	rtemp3149.free(); // Realspace
	Vector rtemp3156(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3156[i] = rtemp716[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3157(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3157 = fft(Nx,Ny,Nz,dV,rtemp3156);

	rtemp3156.free(); // Realspace
	ktemp3157[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3157[i] = std::complex<double>(-1.0*ktemp3157[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3157[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3159(Nx*Ny*Nz); // RS
	rtemp3159 = ifft(Nx,Ny,Nz,dV,ktemp3157);

	ktemp3157.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3159[i] = rtemp3154[i] - 25.897841948458478*rtemp3159[i];
	}

	rtemp3154.free(); // Realspace
	Vector rtemp3161(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3161[i] = rtemp723[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3162(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3162 = fft(Nx,Ny,Nz,dV,rtemp3161);

	rtemp3161.free(); // Realspace
	ktemp3162[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3162[i] = std::complex<double>(-1.0*ktemp3162[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3162[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3164(Nx*Ny*Nz); // RS
	rtemp3164 = ifft(Nx,Ny,Nz,dV,ktemp3162);

	ktemp3162.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3164[i] = rtemp3159[i] + 76.74604382287085*rtemp3164[i];
	}

	rtemp3159.free(); // Realspace
	Vector rtemp3166(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3166[i] = rtemp730[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3167(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3167 = fft(Nx,Ny,Nz,dV,rtemp3166);

	rtemp3166.free(); // Realspace
	ktemp3167[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3167[i] = std::complex<double>(-1.0*ktemp3167[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3167[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3169(Nx*Ny*Nz); // RS
	rtemp3169 = ifft(Nx,Ny,Nz,dV,ktemp3167);

	ktemp3167.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3169[i] = rtemp3164[i] - 51.16402921524723*rtemp3169[i];
	}

	rtemp3164.free(); // Realspace
	Vector rtemp3171(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3171[i] = rtemp737[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3172(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3172 = fft(Nx,Ny,Nz,dV,rtemp3171);

	rtemp3171.free(); // Realspace
	ktemp3172[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3172[i] = std::complex<double>(-1.0*ktemp3172[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3172[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3174(Nx*Ny*Nz); // RS
	rtemp3174 = ifft(Nx,Ny,Nz,dV,ktemp3172);

	ktemp3172.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3174[i] = rtemp3169[i] + 112.43453333720996*rtemp3174[i];
	}

	rtemp3169.free(); // Realspace
	Vector rtemp3176(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3176[i] = rtemp744[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3177(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3177 = fft(Nx,Ny,Nz,dV,rtemp3176);

	rtemp3176.free(); // Realspace
	ktemp3177[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3177[i] = std::complex<double>(-1.0*ktemp3177[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3177[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3179(Nx*Ny*Nz); // RS
	rtemp3179 = ifft(Nx,Ny,Nz,dV,ktemp3177);

	ktemp3177.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3179[i] = rtemp3174[i] - 462.37122698223425*rtemp3179[i];
	}

	rtemp3174.free(); // Realspace
	Vector rtemp3181(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3181[i] = rtemp751[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3182(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3182 = fft(Nx,Ny,Nz,dV,rtemp3181);

	rtemp3181.free(); // Realspace
	ktemp3182[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3182[i] = std::complex<double>(-1.0*ktemp3182[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3182[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3184(Nx*Ny*Nz); // RS
	rtemp3184 = ifft(Nx,Ny,Nz,dV,ktemp3182);

	ktemp3182.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3184[i] = rtemp3179[i] - 0.15791367041742974*rtemp3184[i];
	}

	rtemp3179.free(); // Realspace
	Vector rtemp3186(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3186[i] = rtemp758[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3187(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3187 = fft(Nx,Ny,Nz,dV,rtemp3186);

	rtemp3186.free(); // Realspace
	ktemp3187[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3187[i] = std::complex<double>(-1.0*ktemp3187[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3187[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3189(Nx*Ny*Nz); // RS
	rtemp3189 = ifft(Nx,Ny,Nz,dV,ktemp3187);

	ktemp3187.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3189[i] = rtemp3184[i] + 330.355398513263*rtemp3189[i];
	}

	rtemp3184.free(); // Realspace
	Vector rtemp3191(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3191[i] = rtemp765[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3192(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3192 = fft(Nx,Ny,Nz,dV,rtemp3191);

	rtemp3191.free(); // Realspace
	ktemp3192[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3192[i] = std::complex<double>(-1.0*ktemp3192[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3192[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3194(Nx*Ny*Nz); // RS
	rtemp3194 = ifft(Nx,Ny,Nz,dV,ktemp3192);

	ktemp3192.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3194[i] = rtemp3189[i] + 695.2938908479431*rtemp3194[i];
	}

	rtemp3189.free(); // Realspace
	Vector rtemp3196(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3196[i] = rtemp772[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3197(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3197 = fft(Nx,Ny,Nz,dV,rtemp3196);

	rtemp3196.free(); // Realspace
	ktemp3197[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3197[i] = std::complex<double>(-1.0*ktemp3197[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3197[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3199(Nx*Ny*Nz); // RS
	rtemp3199 = ifft(Nx,Ny,Nz,dV,ktemp3197);

	ktemp3197.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3199[i] = rtemp3194[i] - 587.4388539528386*rtemp3199[i];
	}

	rtemp3194.free(); // Realspace
	Vector rtemp3201(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3201[i] = rtemp779[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3202(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3202 = fft(Nx,Ny,Nz,dV,rtemp3201);

	rtemp3201.free(); // Realspace
	ktemp3202[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3202[i] = std::complex<double>(-1.0*ktemp3202[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3202[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3204(Nx*Ny*Nz); // RS
	rtemp3204 = ifft(Nx,Ny,Nz,dV,ktemp3202);

	ktemp3202.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3204[i] = rtemp3199[i] + 114.64532472305397*rtemp3204[i];
	}

	rtemp3199.free(); // Realspace
	Vector rtemp3206(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3206[i] = rtemp786[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3207(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3207 = fft(Nx,Ny,Nz,dV,rtemp3206);

	rtemp3206.free(); // Realspace
	ktemp3207[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3207[i] = std::complex<double>(-1.0*ktemp3207[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3207[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3209(Nx*Ny*Nz); // RS
	rtemp3209 = ifft(Nx,Ny,Nz,dV,ktemp3207);

	ktemp3207.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3209[i] = rtemp3204[i] + 4.263669101270603*rtemp3209[i];
	}

	rtemp3204.free(); // Realspace
	Vector rtemp3211(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3211[i] = rtemp793[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3212(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3212 = fft(Nx,Ny,Nz,dV,rtemp3211);

	rtemp3211.free(); // Realspace
	ktemp3212[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3212[i] = std::complex<double>(-1.0*ktemp3212[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3212[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3214(Nx*Ny*Nz); // RS
	rtemp3214 = ifft(Nx,Ny,Nz,dV,ktemp3212);

	ktemp3212.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3214[i] = rtemp3209[i] + 198.49748371470918*rtemp3214[i];
	}

	rtemp3209.free(); // Realspace
	Vector rtemp3216(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3216[i] = rtemp800[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3217(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3217 = fft(Nx,Ny,Nz,dV,rtemp3216);

	rtemp3216.free(); // Realspace
	ktemp3217[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3217[i] = std::complex<double>(-1.0*ktemp3217[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3217[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3219(Nx*Ny*Nz); // RS
	rtemp3219 = ifft(Nx,Ny,Nz,dV,ktemp3217);

	ktemp3217.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3219[i] = rtemp3214[i] - 56.21726666860498*rtemp3219[i];
	}

	rtemp3214.free(); // Realspace
	Vector rtemp3221(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3221[i] = rtemp807[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3222(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3222 = fft(Nx,Ny,Nz,dV,rtemp3221);

	rtemp3221.free(); // Realspace
	ktemp3222[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3222[i] = std::complex<double>(-1.0*ktemp3222[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3222[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3224(Nx*Ny*Nz); // RS
	rtemp3224 = ifft(Nx,Ny,Nz,dV,ktemp3222);

	ktemp3222.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3224[i] = rtemp3219[i] + 16.344064888203977*rtemp3224[i];
	}

	rtemp3219.free(); // Realspace
	Vector rtemp3226(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3226[i] = rtemp814[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3227(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3227 = fft(Nx,Ny,Nz,dV,rtemp3226);

	rtemp3226.free(); // Realspace
	ktemp3227[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3227[i] = std::complex<double>(-1.0*ktemp3227[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3227[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3229(Nx*Ny*Nz); // RS
	rtemp3229 = ifft(Nx,Ny,Nz,dV,ktemp3227);

	ktemp3227.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3229[i] = rtemp3224[i] - 177.10018137314742*rtemp3229[i];
	}

	rtemp3224.free(); // Realspace
	Vector rtemp3231(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3231[i] = rtemp821[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3232(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3232 = fft(Nx,Ny,Nz,dV,rtemp3231);

	rtemp3231.free(); // Realspace
	ktemp3232[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3232[i] = std::complex<double>(-1.0*ktemp3232[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3232[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3234(Nx*Ny*Nz); // RS
	rtemp3234 = ifft(Nx,Ny,Nz,dV,ktemp3232);

	ktemp3232.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3234[i] = rtemp3229[i] - 138.49028895608586*rtemp3234[i];
	}

	rtemp3229.free(); // Realspace
	Vector rtemp3236(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3236[i] = rtemp828[i]/(R*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3237(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3237 = fft(Nx,Ny,Nz,dV,rtemp3236);

	rtemp3236.free(); // Realspace
	ktemp3237[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3237[i] = std::complex<double>(-1.0*ktemp3237[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3237[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3239(Nx*Ny*Nz); // RS
	rtemp3239 = ifft(Nx,Ny,Nz,dV,ktemp3237);

	ktemp3237.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3239[i] = rtemp3234[i] + 78.95683520871486*rtemp3239[i];
	}

	rtemp3234.free(); // Realspace
	Vector rtemp3241(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3241[i] = 7.957747154594767e-2*dV*kT*rtemp81[i]/R/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp3242(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3242 = fft(Nx,Ny,Nz,dV,rtemp3241);

	rtemp3241.free(); // Realspace
	ktemp3242[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3242[i] = std::complex<double>(-1.0*ktemp3242[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3242[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3244(Nx*Ny*Nz); // RS
	rtemp3244 = ifft(Nx,Ny,Nz,dV,ktemp3242);

	ktemp3242.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3244[i] = rtemp3239[i] + 12.566370614359172*rtemp3244[i];
	}

	rtemp3239.free(); // Realspace
	Vector rtemp3246(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp3246[i] = dV*kT*rtemp67[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp3247(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3247 = fft(Nx,Ny,Nz,dV,rtemp3246);

	rtemp3246.free(); // Realspace
	ktemp3247[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3247[i] = std::complex<double>(-1.0*ktemp3247[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3247[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3249(Nx*Ny*Nz); // RS
	rtemp3249 = ifft(Nx,Ny,Nz,dV,ktemp3247);

	ktemp3247.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3249[i] = rtemp3244[i] + 0.6666666666666667*rtemp3249[i];
	}

	rtemp3244.free(); // Realspace
	Vector rtemp3251(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3251[i] = 7.957747154594767e-2*rtemp123[i]*rtemp81[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3252(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3252 = fft(Nx,Ny,Nz,dV,rtemp3251);

	rtemp3251.free(); // Realspace
	ktemp3252[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3252[i] = std::complex<double>(-1.0*ktemp3252[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3252[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3254(Nx*Ny*Nz); // RS
	rtemp3254 = ifft(Nx,Ny,Nz,dV,ktemp3252);

	ktemp3252.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3254[i] = rtemp3249[i] + 325.4418800364269*rtemp3254[i];
	}

	rtemp3249.free(); // Realspace
	Vector rtemp3256(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3256[i] = 7.957747154594767e-2*rtemp132[i]*rtemp81[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3257(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3257 = fft(Nx,Ny,Nz,dV,rtemp3256);

	rtemp3256.free(); // Realspace
	ktemp3257[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3257[i] = std::complex<double>(-1.0*ktemp3257[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3257[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3259(Nx*Ny*Nz); // RS
	rtemp3259 = ifft(Nx,Ny,Nz,dV,ktemp3257);

	ktemp3257.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3259[i] = rtemp3254[i] - 964.4192298640455*rtemp3259[i];
	}

	rtemp3254.free(); // Realspace
	Vector rtemp3261(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3261[i] = 7.957747154594767e-2*rtemp141[i]*rtemp81[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3262(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3262 = fft(Nx,Ny,Nz,dV,rtemp3261);

	rtemp3261.free(); // Realspace
	ktemp3262[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3262[i] = std::complex<double>(-1.0*ktemp3262[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3262[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3264(Nx*Ny*Nz); // RS
	rtemp3264 = ifft(Nx,Ny,Nz,dV,ktemp3262);

	ktemp3262.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3264[i] = rtemp3259[i] + 642.946153242697*rtemp3264[i];
	}

	rtemp3259.free(); // Realspace
	Vector rtemp3266(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3266[i] = 7.957747154594767e-2*rtemp150[i]*rtemp81[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3267(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3267 = fft(Nx,Ny,Nz,dV,rtemp3266);

	rtemp3266.free(); // Realspace
	ktemp3267[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3267[i] = std::complex<double>(-1.0*ktemp3267[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3267[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3269(Nx*Ny*Nz); // RS
	rtemp3269 = ifft(Nx,Ny,Nz,dV,ktemp3267);

	ktemp3267.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3269[i] = rtemp3264[i] - 1412.894015767902*rtemp3269[i];
	}

	rtemp3264.free(); // Realspace
	Vector rtemp3271(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3271[i] = 7.957747154594767e-2*rtemp159[i]*rtemp81[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3272(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3272 = fft(Nx,Ny,Nz,dV,rtemp3271);

	rtemp3271.free(); // Realspace
	ktemp3272[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3272[i] = std::complex<double>(-1.0*ktemp3272[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3272[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3274(Nx*Ny*Nz); // RS
	rtemp3274 = ifft(Nx,Ny,Nz,dV,ktemp3272);

	ktemp3272.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3274[i] = rtemp3269[i] + 5810.328199674744*rtemp3274[i];
	}

	rtemp3269.free(); // Realspace
	Vector rtemp3276(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3276[i] = 7.957747154594767e-2*rtemp168[i]*rtemp81[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3277(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3277 = fft(Nx,Ny,Nz,dV,rtemp3276);

	rtemp3276.free(); // Realspace
	ktemp3277[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3277[i] = std::complex<double>(-1.0*ktemp3277[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3277[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3279(Nx*Ny*Nz); // RS
	rtemp3279 = ifft(Nx,Ny,Nz,dV,ktemp3277);

	ktemp3277.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3279[i] = rtemp3274[i] - 4151.368372171983*rtemp3279[i];
	}

	rtemp3274.free(); // Realspace
	Vector rtemp3281(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3281[i] = 7.957747154594767e-2*rtemp16[i]*rtemp81[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3282(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3282 = fft(Nx,Ny,Nz,dV,rtemp3281);

	rtemp3281.free(); // Realspace
	ktemp3282[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3282[i] = std::complex<double>(-1.0*ktemp3282[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3282[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3284(Nx*Ny*Nz); // RS
	rtemp3284 = ifft(Nx,Ny,Nz,dV,ktemp3282);

	ktemp3282.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3284[i] = rtemp3279[i] + 1.9844017075391884*rtemp3284[i];
	}

	rtemp3279.free(); // Realspace
	Vector rtemp3286(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3286[i] = 7.957747154594767e-2*rtemp177[i]*rtemp81[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3287(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3287 = fft(Nx,Ny,Nz,dV,rtemp3286);

	rtemp3286.free(); // Realspace
	ktemp3287[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3287[i] = std::complex<double>(-1.0*ktemp3287[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3287[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3289(Nx*Ny*Nz); // RS
	rtemp3289 = ifft(Nx,Ny,Nz,dV,ktemp3287);

	ktemp3287.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3289[i] = rtemp3284[i] - 8737.320718295045*rtemp3289[i];
	}

	rtemp3284.free(); // Realspace
	Vector rtemp3291(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3291[i] = 7.957747154594767e-2*rtemp186[i]*rtemp81[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3292(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3292 = fft(Nx,Ny,Nz,dV,rtemp3291);

	rtemp3291.free(); // Realspace
	ktemp3292[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3292[i] = std::complex<double>(-1.0*ktemp3292[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3292[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3294(Nx*Ny*Nz); // RS
	rtemp3294 = ifft(Nx,Ny,Nz,dV,ktemp3292);

	ktemp3292.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3294[i] = rtemp3289[i] + 7381.9743520457805*rtemp3294[i];
	}

	rtemp3289.free(); // Realspace
	Vector rtemp3296(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3296[i] = 7.957747154594767e-2*rtemp195[i]*rtemp81[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3297(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3297 = fft(Nx,Ny,Nz,dV,rtemp3296);

	rtemp3296.free(); // Realspace
	ktemp3297[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3297[i] = std::complex<double>(-1.0*ktemp3297[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3297[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3299(Nx*Ny*Nz); // RS
	rtemp3299 = ifft(Nx,Ny,Nz,dV,ktemp3297);

	ktemp3297.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3299[i] = rtemp3294[i] - 1440.6756396734506*rtemp3299[i];
	}

	rtemp3294.free(); // Realspace
	Vector rtemp3301(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3301[i] = 7.957747154594767e-2*rtemp204[i]*rtemp81[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3302(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3302 = fft(Nx,Ny,Nz,dV,rtemp3301);

	rtemp3301.free(); // Realspace
	ktemp3302[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3302[i] = std::complex<double>(-1.0*ktemp3302[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3302[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3304(Nx*Ny*Nz); // RS
	rtemp3304 = ifft(Nx,Ny,Nz,dV,ktemp3302);

	ktemp3302.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3304[i] = rtemp3299[i] - 53.578846103558085*rtemp3304[i];
	}

	rtemp3299.free(); // Realspace
	Vector rtemp3306(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3306[i] = 7.957747154594767e-2*rtemp213[i]*rtemp81[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3307(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3307 = fft(Nx,Ny,Nz,dV,rtemp3306);

	rtemp3306.free(); // Realspace
	ktemp3307[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3307[i] = std::complex<double>(-1.0*ktemp3307[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3307[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3309(Nx*Ny*Nz); // RS
	rtemp3309 = ifft(Nx,Ny,Nz,dV,ktemp3307);

	ktemp3307.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3309[i] = rtemp3304[i] - 2494.3929463767595*rtemp3309[i];
	}

	rtemp3304.free(); // Realspace
	Vector rtemp3311(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3311[i] = 7.957747154594767e-2*rtemp222[i]*rtemp81[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3312(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3312 = fft(Nx,Ny,Nz,dV,rtemp3311);

	rtemp3311.free(); // Realspace
	ktemp3312[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3312[i] = std::complex<double>(-1.0*ktemp3312[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3312[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3314(Nx*Ny*Nz); // RS
	rtemp3314 = ifft(Nx,Ny,Nz,dV,ktemp3312);

	ktemp3312.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3314[i] = rtemp3309[i] + 706.447007883951*rtemp3314[i];
	}

	rtemp3309.free(); // Realspace
	Vector rtemp3316(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3316[i] = 7.957747154594767e-2*rtemp27[i]*rtemp81[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3317(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3317 = fft(Nx,Ny,Nz,dV,rtemp3316);

	rtemp3316.free(); // Realspace
	ktemp3317[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3317[i] = std::complex<double>(-1.0*ktemp3317[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3317[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3319(Nx*Ny*Nz); // RS
	rtemp3319 = ifft(Nx,Ny,Nz,dV,ktemp3317);

	ktemp3317.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3319[i] = rtemp3314[i] - 205.38557673030598*rtemp3319[i];
	}

	rtemp3314.free(); // Realspace
	Vector rtemp3321(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3321[i] = 7.957747154594767e-2*rtemp38[i]*rtemp81[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3322(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3322 = fft(Nx,Ny,Nz,dV,rtemp3321);

	rtemp3321.free(); // Realspace
	ktemp3322[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3322[i] = std::complex<double>(-1.0*ktemp3322[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3322[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3324(Nx*Ny*Nz); // RS
	rtemp3324 = ifft(Nx,Ny,Nz,dV,ktemp3322);

	ktemp3322.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3324[i] = rtemp3319[i] + 2225.5065150051996*rtemp3324[i];
	}

	rtemp3319.free(); // Realspace
	Vector rtemp3326(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3326[i] = 7.957747154594767e-2*rtemp49[i]*rtemp81[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3327(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3327 = fft(Nx,Ny,Nz,dV,rtemp3326);

	rtemp3326.free(); // Realspace
	ktemp3327[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3327[i] = std::complex<double>(-1.0*ktemp3327[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3327[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3329(Nx*Ny*Nz); // RS
	rtemp3329 = ifft(Nx,Ny,Nz,dV,ktemp3327);

	ktemp3327.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3329[i] = rtemp3324[i] + 1740.320297511868*rtemp3329[i];
	}

	rtemp3324.free(); // Realspace
	Vector rtemp3331(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3331[i] = 7.957747154594767e-2*rtemp60[i]*rtemp81[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3332(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3332 = fft(Nx,Ny,Nz,dV,rtemp3331);

	rtemp3331.free(); // Realspace
	ktemp3332[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3332[i] = std::complex<double>(-1.0*ktemp3332[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3332[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3334(Nx*Ny*Nz); // RS
	rtemp3334 = ifft(Nx,Ny,Nz,dV,ktemp3332);

	ktemp3332.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3334[i] = rtemp3329[i] - 992.2008537695941*rtemp3334[i];
	}

	rtemp3329.free(); // Realspace
	Vector rtemp3336(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp3336[i] = t3*t4*t4*rtemp123[i]*rtemp67[i]*rtemp81[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp3337(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3337 = fft(Nx,Ny,Nz,dV,rtemp3336);

	rtemp3336.free(); // Realspace
	ktemp3337[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3337[i] = std::complex<double>(-1.0*ktemp3337[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3337[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3339(Nx*Ny*Nz); // RS
	rtemp3339 = ifft(Nx,Ny,Nz,dV,ktemp3337);

	ktemp3337.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3339[i] = rtemp3334[i] + 1952.6512802185614*rtemp3339[i];
	}

	rtemp3334.free(); // Realspace
	Vector rtemp3341(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp3341[i] = t3*t4*t4*rtemp132[i]*rtemp67[i]*rtemp81[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp3342(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3342 = fft(Nx,Ny,Nz,dV,rtemp3341);

	rtemp3341.free(); // Realspace
	ktemp3342[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3342[i] = std::complex<double>(-1.0*ktemp3342[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3342[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3344(Nx*Ny*Nz); // RS
	rtemp3344 = ifft(Nx,Ny,Nz,dV,ktemp3342);

	ktemp3342.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3344[i] = rtemp3339[i] - 5786.515379184273*rtemp3344[i];
	}

	rtemp3339.free(); // Realspace
	Vector rtemp3346(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp3346[i] = t3*t4*t4*rtemp141[i]*rtemp67[i]*rtemp81[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp3347(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3347 = fft(Nx,Ny,Nz,dV,rtemp3346);

	rtemp3346.free(); // Realspace
	ktemp3347[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3347[i] = std::complex<double>(-1.0*ktemp3347[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3347[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3349(Nx*Ny*Nz); // RS
	rtemp3349 = ifft(Nx,Ny,Nz,dV,ktemp3347);

	ktemp3347.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3349[i] = rtemp3344[i] + 3857.676919456182*rtemp3349[i];
	}

	rtemp3344.free(); // Realspace
	Vector rtemp3351(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp3351[i] = t3*t4*t4*rtemp150[i]*rtemp67[i]*rtemp81[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp3352(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3352 = fft(Nx,Ny,Nz,dV,rtemp3351);

	rtemp3351.free(); // Realspace
	ktemp3352[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3352[i] = std::complex<double>(-1.0*ktemp3352[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3352[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3354(Nx*Ny*Nz); // RS
	rtemp3354 = ifft(Nx,Ny,Nz,dV,ktemp3352);

	ktemp3352.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3354[i] = rtemp3349[i] - 8477.364094607412*rtemp3354[i];
	}

	rtemp3349.free(); // Realspace
	Vector rtemp3356(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp3356[i] = t3*t4*t4*rtemp159[i]*rtemp67[i]*rtemp81[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp3357(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3357 = fft(Nx,Ny,Nz,dV,rtemp3356);

	rtemp3356.free(); // Realspace
	ktemp3357[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3357[i] = std::complex<double>(-1.0*ktemp3357[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3357[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3359(Nx*Ny*Nz); // RS
	rtemp3359 = ifft(Nx,Ny,Nz,dV,ktemp3357);

	ktemp3357.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3359[i] = rtemp3354[i] + 34861.96919804846*rtemp3359[i];
	}

	rtemp3354.free(); // Realspace
	Vector rtemp3361(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp3361[i] = t3*t4*t4*rtemp168[i]*rtemp67[i]*rtemp81[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp3362(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3362 = fft(Nx,Ny,Nz,dV,rtemp3361);

	rtemp3361.free(); // Realspace
	ktemp3362[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3362[i] = std::complex<double>(-1.0*ktemp3362[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3362[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3364(Nx*Ny*Nz); // RS
	rtemp3364 = ifft(Nx,Ny,Nz,dV,ktemp3362);

	ktemp3362.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3364[i] = rtemp3359[i] - 24908.210233031892*rtemp3364[i];
	}

	rtemp3359.free(); // Realspace
	Vector rtemp3366(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp3366[i] = t3*t4*t4*rtemp16[i]*rtemp67[i]*rtemp81[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp3367(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3367 = fft(Nx,Ny,Nz,dV,rtemp3366);

	rtemp3366.free(); // Realspace
	ktemp3367[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3367[i] = std::complex<double>(-1.0*ktemp3367[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3367[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3369(Nx*Ny*Nz); // RS
	rtemp3369 = ifft(Nx,Ny,Nz,dV,ktemp3367);

	ktemp3367.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3369[i] = rtemp3364[i] + 11.90641024523513*rtemp3369[i];
	}

	rtemp3364.free(); // Realspace
	Vector rtemp3371(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp3371[i] = t3*t4*t4*rtemp177[i]*rtemp67[i]*rtemp81[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp3372(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3372 = fft(Nx,Ny,Nz,dV,rtemp3371);

	rtemp3371.free(); // Realspace
	ktemp3372[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3372[i] = std::complex<double>(-1.0*ktemp3372[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3372[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3374(Nx*Ny*Nz); // RS
	rtemp3374 = ifft(Nx,Ny,Nz,dV,ktemp3372);

	ktemp3372.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3374[i] = rtemp3369[i] - 52423.92430977027*rtemp3374[i];
	}

	rtemp3369.free(); // Realspace
	Vector rtemp3376(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp3376[i] = t3*t4*t4*rtemp186[i]*rtemp67[i]*rtemp81[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp3377(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3377 = fft(Nx,Ny,Nz,dV,rtemp3376);

	rtemp3376.free(); // Realspace
	ktemp3377[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3377[i] = std::complex<double>(-1.0*ktemp3377[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3377[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3379(Nx*Ny*Nz); // RS
	rtemp3379 = ifft(Nx,Ny,Nz,dV,ktemp3377);

	ktemp3377.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3379[i] = rtemp3374[i] + 44291.84611227468*rtemp3379[i];
	}

	rtemp3374.free(); // Realspace
	Vector rtemp3381(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp3381[i] = t3*t4*t4*rtemp195[i]*rtemp67[i]*rtemp81[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp3382(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3382 = fft(Nx,Ny,Nz,dV,rtemp3381);

	rtemp3381.free(); // Realspace
	ktemp3382[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3382[i] = std::complex<double>(-1.0*ktemp3382[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3382[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3384(Nx*Ny*Nz); // RS
	rtemp3384 = ifft(Nx,Ny,Nz,dV,ktemp3382);

	ktemp3382.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3384[i] = rtemp3379[i] - 8644.053838040703*rtemp3384[i];
	}

	rtemp3379.free(); // Realspace
	Vector rtemp3386(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp3386[i] = t3*t4*t4*rtemp204[i]*rtemp67[i]*rtemp81[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp3387(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3387 = fft(Nx,Ny,Nz,dV,rtemp3386);

	rtemp3386.free(); // Realspace
	ktemp3387[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3387[i] = std::complex<double>(-1.0*ktemp3387[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3387[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3389(Nx*Ny*Nz); // RS
	rtemp3389 = ifft(Nx,Ny,Nz,dV,ktemp3387);

	ktemp3387.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3389[i] = rtemp3384[i] - 321.4730766213485*rtemp3389[i];
	}

	rtemp3384.free(); // Realspace
	Vector rtemp3391(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp3391[i] = t3*t4*t4*rtemp213[i]*rtemp67[i]*rtemp81[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp3392(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3392 = fft(Nx,Ny,Nz,dV,rtemp3391);

	rtemp3391.free(); // Realspace
	ktemp3392[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3392[i] = std::complex<double>(-1.0*ktemp3392[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3392[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3394(Nx*Ny*Nz); // RS
	rtemp3394 = ifft(Nx,Ny,Nz,dV,ktemp3392);

	ktemp3392.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3394[i] = rtemp3389[i] - 14966.357678260558*rtemp3394[i];
	}

	rtemp3389.free(); // Realspace
	Vector rtemp3396(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp3396[i] = t3*t4*t4*rtemp222[i]*rtemp67[i]*rtemp81[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp3397(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3397 = fft(Nx,Ny,Nz,dV,rtemp3396);

	rtemp3396.free(); // Realspace
	ktemp3397[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3397[i] = std::complex<double>(-1.0*ktemp3397[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3397[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3399(Nx*Ny*Nz); // RS
	rtemp3399 = ifft(Nx,Ny,Nz,dV,ktemp3397);

	ktemp3397.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3399[i] = rtemp3394[i] + 4238.682047303706*rtemp3399[i];
	}

	rtemp3394.free(); // Realspace
	Vector rtemp3401(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp3401[i] = t3*t4*t4*rtemp27[i]*rtemp67[i]*rtemp81[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp3402(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3402 = fft(Nx,Ny,Nz,dV,rtemp3401);

	rtemp3401.free(); // Realspace
	ktemp3402[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3402[i] = std::complex<double>(-1.0*ktemp3402[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3402[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3404(Nx*Ny*Nz); // RS
	rtemp3404 = ifft(Nx,Ny,Nz,dV,ktemp3402);

	ktemp3402.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3404[i] = rtemp3399[i] - 1232.313460381836*rtemp3404[i];
	}

	rtemp3399.free(); // Realspace
	Vector rtemp3406(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp3406[i] = t3*t4*t4*rtemp38[i]*rtemp67[i]*rtemp81[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp3407(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3407 = fft(Nx,Ny,Nz,dV,rtemp3406);

	rtemp3406.free(); // Realspace
	ktemp3407[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3407[i] = std::complex<double>(-1.0*ktemp3407[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3407[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3409(Nx*Ny*Nz); // RS
	rtemp3409 = ifft(Nx,Ny,Nz,dV,ktemp3407);

	ktemp3407.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3409[i] = rtemp3404[i] + 13353.039090031198*rtemp3409[i];
	}

	rtemp3404.free(); // Realspace
	Vector rtemp3411(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp3411[i] = t3*t4*t4*rtemp49[i]*rtemp67[i]*rtemp81[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp3412(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3412 = fft(Nx,Ny,Nz,dV,rtemp3411);

	rtemp3411.free(); // Realspace
	ktemp3412[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3412[i] = std::complex<double>(-1.0*ktemp3412[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3412[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3414(Nx*Ny*Nz); // RS
	rtemp3414 = ifft(Nx,Ny,Nz,dV,ktemp3412);

	ktemp3412.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3414[i] = rtemp3409[i] + 10441.921785071208*rtemp3414[i];
	}

	rtemp3409.free(); // Realspace
	Vector rtemp3416(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		rtemp3416[i] = t3*t4*t4*rtemp60[i]*rtemp67[i]*rtemp81[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	ComplexVector ktemp3417(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3417 = fft(Nx,Ny,Nz,dV,rtemp3416);

	rtemp3416.free(); // Realspace
	ktemp3417[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3417[i] = std::complex<double>(-1.0*ktemp3417[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3417[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3419(Nx*Ny*Nz); // RS
	rtemp3419 = ifft(Nx,Ny,Nz,dV,ktemp3417);

	ktemp3417.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3419[i] = rtemp3414[i] - 5953.2051226175645*rtemp3419[i];
	}

	rtemp3414.free(); // Realspace
	Vector rtemp3421(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp3421[i] = rtemp67[i]*rtemp716[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp3422(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3422 = fft(Nx,Ny,Nz,dV,rtemp3421);

	rtemp3421.free(); // Realspace
	ktemp3422[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3422[i] = std::complex<double>(-1.0*ktemp3422[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3422[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3424(Nx*Ny*Nz); // RS
	rtemp3424 = ifft(Nx,Ny,Nz,dV,ktemp3422);

	ktemp3422.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3424[i] = rtemp3419[i] - 17.265227965638985*rtemp3424[i];
	}

	rtemp3419.free(); // Realspace
	Vector rtemp3426(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp3426[i] = rtemp67[i]*rtemp723[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp3427(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3427 = fft(Nx,Ny,Nz,dV,rtemp3426);

	rtemp3426.free(); // Realspace
	ktemp3427[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3427[i] = std::complex<double>(-1.0*ktemp3427[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3427[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3429(Nx*Ny*Nz); // RS
	rtemp3429 = ifft(Nx,Ny,Nz,dV,ktemp3427);

	ktemp3427.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3429[i] = rtemp3424[i] + 51.16402921524723*rtemp3429[i];
	}

	rtemp3424.free(); // Realspace
	Vector rtemp3431(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp3431[i] = rtemp67[i]*rtemp730[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp3432(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3432 = fft(Nx,Ny,Nz,dV,rtemp3431);

	rtemp3431.free(); // Realspace
	ktemp3432[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3432[i] = std::complex<double>(-1.0*ktemp3432[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3432[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3434(Nx*Ny*Nz); // RS
	rtemp3434 = ifft(Nx,Ny,Nz,dV,ktemp3432);

	ktemp3432.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3434[i] = rtemp3429[i] - 34.10935281016482*rtemp3434[i];
	}

	rtemp3429.free(); // Realspace
	Vector rtemp3436(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp3436[i] = rtemp67[i]*rtemp737[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp3437(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3437 = fft(Nx,Ny,Nz,dV,rtemp3436);

	rtemp3436.free(); // Realspace
	ktemp3437[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3437[i] = std::complex<double>(-1.0*ktemp3437[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3437[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3439(Nx*Ny*Nz); // RS
	rtemp3439 = ifft(Nx,Ny,Nz,dV,ktemp3437);

	ktemp3437.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3439[i] = rtemp3434[i] + 74.95635555813998*rtemp3439[i];
	}

	rtemp3434.free(); // Realspace
	Vector rtemp3441(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp3441[i] = rtemp67[i]*rtemp744[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp3442(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3442 = fft(Nx,Ny,Nz,dV,rtemp3441);

	rtemp3441.free(); // Realspace
	ktemp3442[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3442[i] = std::complex<double>(-1.0*ktemp3442[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3442[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3444(Nx*Ny*Nz); // RS
	rtemp3444 = ifft(Nx,Ny,Nz,dV,ktemp3442);

	ktemp3442.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3444[i] = rtemp3439[i] - 308.2474846548228*rtemp3444[i];
	}

	rtemp3439.free(); // Realspace
	Vector rtemp3446(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp3446[i] = rtemp67[i]*rtemp751[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp3447(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3447 = fft(Nx,Ny,Nz,dV,rtemp3446);

	rtemp3446.free(); // Realspace
	ktemp3447[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3447[i] = std::complex<double>(-1.0*ktemp3447[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3447[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3449(Nx*Ny*Nz); // RS
	rtemp3449 = ifft(Nx,Ny,Nz,dV,ktemp3447);

	ktemp3447.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3449[i] = rtemp3444[i] - 0.10527578027828648*rtemp3449[i];
	}

	rtemp3444.free(); // Realspace
	Vector rtemp3451(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp3451[i] = rtemp67[i]*rtemp758[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp3452(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3452 = fft(Nx,Ny,Nz,dV,rtemp3451);

	rtemp3451.free(); // Realspace
	ktemp3452[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3452[i] = std::complex<double>(-1.0*ktemp3452[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3452[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3454(Nx*Ny*Nz); // RS
	rtemp3454 = ifft(Nx,Ny,Nz,dV,ktemp3452);

	ktemp3452.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3454[i] = rtemp3449[i] + 220.23693234217532*rtemp3454[i];
	}

	rtemp3449.free(); // Realspace
	Vector rtemp3456(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp3456[i] = rtemp67[i]*rtemp765[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp3457(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3457 = fft(Nx,Ny,Nz,dV,rtemp3456);

	rtemp3456.free(); // Realspace
	ktemp3457[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3457[i] = std::complex<double>(-1.0*ktemp3457[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3457[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3459(Nx*Ny*Nz); // RS
	rtemp3459 = ifft(Nx,Ny,Nz,dV,ktemp3457);

	ktemp3457.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3459[i] = rtemp3454[i] + 463.5292605652953*rtemp3459[i];
	}

	rtemp3454.free(); // Realspace
	Vector rtemp3461(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp3461[i] = rtemp67[i]*rtemp772[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp3462(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3462 = fft(Nx,Ny,Nz,dV,rtemp3461);

	rtemp3461.free(); // Realspace
	ktemp3462[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3462[i] = std::complex<double>(-1.0*ktemp3462[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3462[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3464(Nx*Ny*Nz); // RS
	rtemp3464 = ifft(Nx,Ny,Nz,dV,ktemp3462);

	ktemp3462.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3464[i] = rtemp3459[i] - 391.6259026352257*rtemp3464[i];
	}

	rtemp3459.free(); // Realspace
	Vector rtemp3466(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp3466[i] = rtemp67[i]*rtemp779[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp3467(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3467 = fft(Nx,Ny,Nz,dV,rtemp3466);

	rtemp3466.free(); // Realspace
	ktemp3467[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3467[i] = std::complex<double>(-1.0*ktemp3467[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3467[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3469(Nx*Ny*Nz); // RS
	rtemp3469 = ifft(Nx,Ny,Nz,dV,ktemp3467);

	ktemp3467.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3469[i] = rtemp3464[i] + 76.43021648203597*rtemp3469[i];
	}

	rtemp3464.free(); // Realspace
	Vector rtemp3471(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp3471[i] = rtemp67[i]*rtemp786[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp3472(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3472 = fft(Nx,Ny,Nz,dV,rtemp3471);

	rtemp3471.free(); // Realspace
	ktemp3472[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3472[i] = std::complex<double>(-1.0*ktemp3472[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3472[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3474(Nx*Ny*Nz); // RS
	rtemp3474 = ifft(Nx,Ny,Nz,dV,ktemp3472);

	ktemp3472.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3474[i] = rtemp3469[i] + 2.842446067513735*rtemp3474[i];
	}

	rtemp3469.free(); // Realspace
	Vector rtemp3476(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp3476[i] = rtemp67[i]*rtemp793[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp3477(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3477 = fft(Nx,Ny,Nz,dV,rtemp3476);

	rtemp3476.free(); // Realspace
	ktemp3477[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3477[i] = std::complex<double>(-1.0*ktemp3477[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3477[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3479(Nx*Ny*Nz); // RS
	rtemp3479 = ifft(Nx,Ny,Nz,dV,ktemp3477);

	ktemp3477.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3479[i] = rtemp3474[i] + 132.3316558098061*rtemp3479[i];
	}

	rtemp3474.free(); // Realspace
	Vector rtemp3481(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp3481[i] = rtemp67[i]*rtemp800[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp3482(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3482 = fft(Nx,Ny,Nz,dV,rtemp3481);

	rtemp3481.free(); // Realspace
	ktemp3482[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3482[i] = std::complex<double>(-1.0*ktemp3482[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3482[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3484(Nx*Ny*Nz); // RS
	rtemp3484 = ifft(Nx,Ny,Nz,dV,ktemp3482);

	ktemp3482.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3484[i] = rtemp3479[i] - 37.47817777906999*rtemp3484[i];
	}

	rtemp3479.free(); // Realspace
	Vector rtemp3486(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp3486[i] = rtemp67[i]*rtemp807[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp3487(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3487 = fft(Nx,Ny,Nz,dV,rtemp3486);

	rtemp3486.free(); // Realspace
	ktemp3487[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3487[i] = std::complex<double>(-1.0*ktemp3487[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3487[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3489(Nx*Ny*Nz); // RS
	rtemp3489 = ifft(Nx,Ny,Nz,dV,ktemp3487);

	ktemp3487.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3489[i] = rtemp3484[i] + 10.89604325880265*rtemp3489[i];
	}

	rtemp3484.free(); // Realspace
	Vector rtemp3491(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp3491[i] = rtemp67[i]*rtemp814[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp3492(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3492 = fft(Nx,Ny,Nz,dV,rtemp3491);

	rtemp3491.free(); // Realspace
	ktemp3492[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3492[i] = std::complex<double>(-1.0*ktemp3492[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3492[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3494(Nx*Ny*Nz); // RS
	rtemp3494 = ifft(Nx,Ny,Nz,dV,ktemp3492);

	ktemp3492.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3494[i] = rtemp3489[i] - 118.06678758209827*rtemp3494[i];
	}

	rtemp3489.free(); // Realspace
	Vector rtemp3496(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp3496[i] = rtemp67[i]*rtemp821[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp3497(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3497 = fft(Nx,Ny,Nz,dV,rtemp3496);

	rtemp3496.free(); // Realspace
	ktemp3497[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3497[i] = std::complex<double>(-1.0*ktemp3497[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3497[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3499(Nx*Ny*Nz); // RS
	rtemp3499 = ifft(Nx,Ny,Nz,dV,ktemp3497);

	ktemp3497.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3499[i] = rtemp3494[i] - 92.32685930405724*rtemp3499[i];
	}

	rtemp3494.free(); // Realspace
	Vector rtemp3501(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp3501[i] = rtemp67[i]*rtemp828[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp3502(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3502 = fft(Nx,Ny,Nz,dV,rtemp3501);

	rtemp3501.free(); // Realspace
	ktemp3502[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3502[i] = std::complex<double>(-1.0*ktemp3502[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3502[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3504(Nx*Ny*Nz); // RS
	rtemp3504 = ifft(Nx,Ny,Nz,dV,ktemp3502);

	ktemp3502.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3504[i] = rtemp3499[i] + 52.63789013914324*rtemp3504[i];
	}

	rtemp3499.free(); // Realspace
	Vector rtemp3506(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp3506[i] = rtemp319[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp3507(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3507 = fft(Nx,Ny,Nz,dV,rtemp3506);

	rtemp3506.free(); // Realspace
	ktemp3507[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3507[i] = std::complex<double>(-1.0*ktemp3507[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3507[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3509(Nx*Ny*Nz); // RS
	rtemp3509 = ifft(Nx,Ny,Nz,dV,ktemp3507);

	ktemp3507.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3509[i] = rtemp3504[i] - 17.265227965638985*rtemp3509[i];
	}

	rtemp3504.free(); // Realspace
	Vector rtemp3511(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp3511[i] = rtemp326[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp3512(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3512 = fft(Nx,Ny,Nz,dV,rtemp3511);

	rtemp3511.free(); // Realspace
	ktemp3512[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3512[i] = std::complex<double>(-1.0*ktemp3512[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3512[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3514(Nx*Ny*Nz); // RS
	rtemp3514 = ifft(Nx,Ny,Nz,dV,ktemp3512);

	ktemp3512.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3514[i] = rtemp3509[i] + 51.16402921524723*rtemp3514[i];
	}

	rtemp3509.free(); // Realspace
	Vector rtemp3516(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp3516[i] = rtemp333[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp3517(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3517 = fft(Nx,Ny,Nz,dV,rtemp3516);

	rtemp3516.free(); // Realspace
	ktemp3517[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3517[i] = std::complex<double>(-1.0*ktemp3517[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3517[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3519(Nx*Ny*Nz); // RS
	rtemp3519 = ifft(Nx,Ny,Nz,dV,ktemp3517);

	ktemp3517.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3519[i] = rtemp3514[i] - 34.10935281016482*rtemp3519[i];
	}

	rtemp3514.free(); // Realspace
	Vector rtemp3521(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp3521[i] = rtemp340[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp3522(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3522 = fft(Nx,Ny,Nz,dV,rtemp3521);

	rtemp3521.free(); // Realspace
	ktemp3522[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3522[i] = std::complex<double>(-1.0*ktemp3522[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3522[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3524(Nx*Ny*Nz); // RS
	rtemp3524 = ifft(Nx,Ny,Nz,dV,ktemp3522);

	ktemp3522.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3524[i] = rtemp3519[i] + 74.95635555813998*rtemp3524[i];
	}

	rtemp3519.free(); // Realspace
	Vector rtemp3526(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp3526[i] = rtemp347[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp3527(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3527 = fft(Nx,Ny,Nz,dV,rtemp3526);

	rtemp3526.free(); // Realspace
	ktemp3527[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3527[i] = std::complex<double>(-1.0*ktemp3527[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3527[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3529(Nx*Ny*Nz); // RS
	rtemp3529 = ifft(Nx,Ny,Nz,dV,ktemp3527);

	ktemp3527.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3529[i] = rtemp3524[i] - 0.10527578027828648*rtemp3529[i];
	}

	rtemp3524.free(); // Realspace
	Vector rtemp3531(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp3531[i] = rtemp354[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp3532(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3532 = fft(Nx,Ny,Nz,dV,rtemp3531);

	rtemp3531.free(); // Realspace
	ktemp3532[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3532[i] = std::complex<double>(-1.0*ktemp3532[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3532[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3534(Nx*Ny*Nz); // RS
	rtemp3534 = ifft(Nx,Ny,Nz,dV,ktemp3532);

	ktemp3532.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3534[i] = rtemp3529[i] - 308.2474846548228*rtemp3534[i];
	}

	rtemp3529.free(); // Realspace
	Vector rtemp3536(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp3536[i] = rtemp361[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp3537(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3537 = fft(Nx,Ny,Nz,dV,rtemp3536);

	rtemp3536.free(); // Realspace
	ktemp3537[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3537[i] = std::complex<double>(-1.0*ktemp3537[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3537[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3539(Nx*Ny*Nz); // RS
	rtemp3539 = ifft(Nx,Ny,Nz,dV,ktemp3537);

	ktemp3537.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3539[i] = rtemp3534[i] + 220.23693234217532*rtemp3539[i];
	}

	rtemp3534.free(); // Realspace
	Vector rtemp3541(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp3541[i] = rtemp368[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp3542(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3542 = fft(Nx,Ny,Nz,dV,rtemp3541);

	rtemp3541.free(); // Realspace
	ktemp3542[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3542[i] = std::complex<double>(-1.0*ktemp3542[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3542[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3544(Nx*Ny*Nz); // RS
	rtemp3544 = ifft(Nx,Ny,Nz,dV,ktemp3542);

	ktemp3542.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3544[i] = rtemp3539[i] + 463.5292605652953*rtemp3544[i];
	}

	rtemp3539.free(); // Realspace
	Vector rtemp3546(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp3546[i] = rtemp375[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp3547(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3547 = fft(Nx,Ny,Nz,dV,rtemp3546);

	rtemp3546.free(); // Realspace
	ktemp3547[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3547[i] = std::complex<double>(-1.0*ktemp3547[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3547[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3549(Nx*Ny*Nz); // RS
	rtemp3549 = ifft(Nx,Ny,Nz,dV,ktemp3547);

	ktemp3547.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3549[i] = rtemp3544[i] - 391.6259026352257*rtemp3549[i];
	}

	rtemp3544.free(); // Realspace
	Vector rtemp3551(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp3551[i] = rtemp382[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp3552(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3552 = fft(Nx,Ny,Nz,dV,rtemp3551);

	rtemp3551.free(); // Realspace
	ktemp3552[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3552[i] = std::complex<double>(-1.0*ktemp3552[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3552[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3554(Nx*Ny*Nz); // RS
	rtemp3554 = ifft(Nx,Ny,Nz,dV,ktemp3552);

	ktemp3552.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3554[i] = rtemp3549[i] + 76.43021648203597*rtemp3554[i];
	}

	rtemp3549.free(); // Realspace
	Vector rtemp3556(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp3556[i] = rtemp389[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp3557(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3557 = fft(Nx,Ny,Nz,dV,rtemp3556);

	rtemp3556.free(); // Realspace
	ktemp3557[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3557[i] = std::complex<double>(-1.0*ktemp3557[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3557[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3559(Nx*Ny*Nz); // RS
	rtemp3559 = ifft(Nx,Ny,Nz,dV,ktemp3557);

	ktemp3557.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3559[i] = rtemp3554[i] + 2.842446067513735*rtemp3559[i];
	}

	rtemp3554.free(); // Realspace
	Vector rtemp3561(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp3561[i] = rtemp396[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp3562(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3562 = fft(Nx,Ny,Nz,dV,rtemp3561);

	rtemp3561.free(); // Realspace
	ktemp3562[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3562[i] = std::complex<double>(-1.0*ktemp3562[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3562[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3564(Nx*Ny*Nz); // RS
	rtemp3564 = ifft(Nx,Ny,Nz,dV,ktemp3562);

	ktemp3562.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3564[i] = rtemp3559[i] + 132.3316558098061*rtemp3564[i];
	}

	rtemp3559.free(); // Realspace
	Vector rtemp3566(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp3566[i] = rtemp403[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp3567(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3567 = fft(Nx,Ny,Nz,dV,rtemp3566);

	rtemp3566.free(); // Realspace
	ktemp3567[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3567[i] = std::complex<double>(-1.0*ktemp3567[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3567[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3569(Nx*Ny*Nz); // RS
	rtemp3569 = ifft(Nx,Ny,Nz,dV,ktemp3567);

	ktemp3567.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3569[i] = rtemp3564[i] - 37.47817777906999*rtemp3569[i];
	}

	rtemp3564.free(); // Realspace
	Vector rtemp3571(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp3571[i] = rtemp410[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp3572(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3572 = fft(Nx,Ny,Nz,dV,rtemp3571);

	rtemp3571.free(); // Realspace
	ktemp3572[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3572[i] = std::complex<double>(-1.0*ktemp3572[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3572[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3574(Nx*Ny*Nz); // RS
	rtemp3574 = ifft(Nx,Ny,Nz,dV,ktemp3572);

	ktemp3572.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3574[i] = rtemp3569[i] + 10.89604325880265*rtemp3574[i];
	}

	rtemp3569.free(); // Realspace
	Vector rtemp3576(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp3576[i] = rtemp417[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp3577(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3577 = fft(Nx,Ny,Nz,dV,rtemp3576);

	rtemp3576.free(); // Realspace
	ktemp3577[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3577[i] = std::complex<double>(-1.0*ktemp3577[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3577[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3579(Nx*Ny*Nz); // RS
	rtemp3579 = ifft(Nx,Ny,Nz,dV,ktemp3577);

	ktemp3577.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3579[i] = rtemp3574[i] - 118.06678758209827*rtemp3579[i];
	}

	rtemp3574.free(); // Realspace
	Vector rtemp3581(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp3581[i] = rtemp424[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp3582(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3582 = fft(Nx,Ny,Nz,dV,rtemp3581);

	rtemp3581.free(); // Realspace
	ktemp3582[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3582[i] = std::complex<double>(-1.0*ktemp3582[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3582[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3584(Nx*Ny*Nz); // RS
	rtemp3584 = ifft(Nx,Ny,Nz,dV,ktemp3582);

	ktemp3582.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3584[i] = rtemp3579[i] - 92.32685930405724*rtemp3584[i];
	}

	rtemp3579.free(); // Realspace
	Vector rtemp3586(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp3586[i] = rtemp431[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp3587(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3587 = fft(Nx,Ny,Nz,dV,rtemp3586);

	rtemp3586.free(); // Realspace
	ktemp3587[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3587[i] = std::complex<double>(-1.0*ktemp3587[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3587[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3589(Nx*Ny*Nz); // RS
	rtemp3589 = ifft(Nx,Ny,Nz,dV,ktemp3587);

	ktemp3587.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3589[i] = rtemp3584[i] + 52.63789013914324*rtemp3589[i];
	}

	rtemp3584.free(); // Realspace
	ktemp1388[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1388[i] = std::complex<double>(-1.0*ktemp1388[i].imag()*R*k_i[2]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1388[i].real()*R*k_i[2]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp3592(Nx*Ny*Nz); // RS
	rtemp3592 = ifft(Nx,Ny,Nz,dV,ktemp1388);

	ktemp1388.free(); // KSpace
	Vector rtemp3593(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3593[i] = rtemp3592[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp3594(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3594 = fft(Nx,Ny,Nz,dV,rtemp3593);

	rtemp3593.free(); // Realspace
	ktemp3594[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3594[i] = std::complex<double>(-1.0*ktemp3594[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3594[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3596(Nx*Ny*Nz); // RS
	rtemp3596 = ifft(Nx,Ny,Nz,dV,ktemp3594);

	ktemp3594.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3596[i] = rtemp3589[i] - 25.897841948458478*rtemp3596[i];
	}

	rtemp3589.free(); // Realspace
	ktemp1397[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1397[i] = std::complex<double>(-1.0*ktemp1397[i].imag()*R*k_i[2]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1397[i].real()*R*k_i[2]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp3599(Nx*Ny*Nz); // RS
	rtemp3599 = ifft(Nx,Ny,Nz,dV,ktemp1397);

	ktemp1397.free(); // KSpace
	Vector rtemp3600(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3600[i] = rtemp3599[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp3601(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3601 = fft(Nx,Ny,Nz,dV,rtemp3600);

	rtemp3600.free(); // Realspace
	ktemp3601[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3601[i] = std::complex<double>(-1.0*ktemp3601[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3601[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3603(Nx*Ny*Nz); // RS
	rtemp3603 = ifft(Nx,Ny,Nz,dV,ktemp3601);

	ktemp3601.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3603[i] = rtemp3596[i] + 76.74604382287085*rtemp3603[i];
	}

	rtemp3596.free(); // Realspace
	ktemp1406[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1406[i] = std::complex<double>(-1.0*ktemp1406[i].imag()*R*k_i[2]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1406[i].real()*R*k_i[2]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp3606(Nx*Ny*Nz); // RS
	rtemp3606 = ifft(Nx,Ny,Nz,dV,ktemp1406);

	ktemp1406.free(); // KSpace
	Vector rtemp3607(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3607[i] = rtemp3606[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp3608(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3608 = fft(Nx,Ny,Nz,dV,rtemp3607);

	rtemp3607.free(); // Realspace
	ktemp3608[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3608[i] = std::complex<double>(-1.0*ktemp3608[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3608[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3610(Nx*Ny*Nz); // RS
	rtemp3610 = ifft(Nx,Ny,Nz,dV,ktemp3608);

	ktemp3608.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3610[i] = rtemp3603[i] - 51.16402921524723*rtemp3610[i];
	}

	rtemp3603.free(); // Realspace
	ktemp1415[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1415[i] = std::complex<double>(-1.0*ktemp1415[i].imag()*R*k_i[2]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1415[i].real()*R*k_i[2]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp3613(Nx*Ny*Nz); // RS
	rtemp3613 = ifft(Nx,Ny,Nz,dV,ktemp1415);

	ktemp1415.free(); // KSpace
	Vector rtemp3614(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3614[i] = rtemp3613[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp3615(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3615 = fft(Nx,Ny,Nz,dV,rtemp3614);

	rtemp3614.free(); // Realspace
	ktemp3615[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3615[i] = std::complex<double>(-1.0*ktemp3615[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3615[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3617(Nx*Ny*Nz); // RS
	rtemp3617 = ifft(Nx,Ny,Nz,dV,ktemp3615);

	ktemp3615.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3617[i] = rtemp3610[i] - 0.15791367041742974*rtemp3617[i];
	}

	rtemp3610.free(); // Realspace
	ktemp1424[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1424[i] = std::complex<double>(-1.0*ktemp1424[i].imag()*R*k_i[2]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1424[i].real()*R*k_i[2]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp3620(Nx*Ny*Nz); // RS
	rtemp3620 = ifft(Nx,Ny,Nz,dV,ktemp1424);

	ktemp1424.free(); // KSpace
	Vector rtemp3621(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3621[i] = rtemp3620[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp3622(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3622 = fft(Nx,Ny,Nz,dV,rtemp3621);

	rtemp3621.free(); // Realspace
	ktemp3622[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3622[i] = std::complex<double>(-1.0*ktemp3622[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3622[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3624(Nx*Ny*Nz); // RS
	rtemp3624 = ifft(Nx,Ny,Nz,dV,ktemp3622);

	ktemp3622.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3624[i] = rtemp3617[i] + 112.43453333720996*rtemp3624[i];
	}

	rtemp3617.free(); // Realspace
	ktemp1433[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1433[i] = std::complex<double>(-1.0*ktemp1433[i].imag()*R*k_i[2]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1433[i].real()*R*k_i[2]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp3627(Nx*Ny*Nz); // RS
	rtemp3627 = ifft(Nx,Ny,Nz,dV,ktemp1433);

	ktemp1433.free(); // KSpace
	Vector rtemp3628(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3628[i] = rtemp3627[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp3629(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3629 = fft(Nx,Ny,Nz,dV,rtemp3628);

	rtemp3628.free(); // Realspace
	ktemp3629[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3629[i] = std::complex<double>(-1.0*ktemp3629[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3629[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3631(Nx*Ny*Nz); // RS
	rtemp3631 = ifft(Nx,Ny,Nz,dV,ktemp3629);

	ktemp3629.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3631[i] = rtemp3624[i] - 462.37122698223425*rtemp3631[i];
	}

	rtemp3624.free(); // Realspace
	ktemp1442[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1442[i] = std::complex<double>(-1.0*ktemp1442[i].imag()*R*k_i[2]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1442[i].real()*R*k_i[2]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp3634(Nx*Ny*Nz); // RS
	rtemp3634 = ifft(Nx,Ny,Nz,dV,ktemp1442);

	ktemp1442.free(); // KSpace
	Vector rtemp3635(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3635[i] = rtemp3634[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp3636(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3636 = fft(Nx,Ny,Nz,dV,rtemp3635);

	rtemp3635.free(); // Realspace
	ktemp3636[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3636[i] = std::complex<double>(-1.0*ktemp3636[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3636[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3638(Nx*Ny*Nz); // RS
	rtemp3638 = ifft(Nx,Ny,Nz,dV,ktemp3636);

	ktemp3636.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3638[i] = rtemp3631[i] + 330.355398513263*rtemp3638[i];
	}

	rtemp3631.free(); // Realspace
	ktemp1451[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1451[i] = std::complex<double>(-1.0*ktemp1451[i].imag()*R*k_i[2]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1451[i].real()*R*k_i[2]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp3641(Nx*Ny*Nz); // RS
	rtemp3641 = ifft(Nx,Ny,Nz,dV,ktemp1451);

	ktemp1451.free(); // KSpace
	Vector rtemp3642(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3642[i] = rtemp3641[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp3643(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3643 = fft(Nx,Ny,Nz,dV,rtemp3642);

	rtemp3642.free(); // Realspace
	ktemp3643[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3643[i] = std::complex<double>(-1.0*ktemp3643[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3643[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3645(Nx*Ny*Nz); // RS
	rtemp3645 = ifft(Nx,Ny,Nz,dV,ktemp3643);

	ktemp3643.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3645[i] = rtemp3638[i] + 695.2938908479431*rtemp3645[i];
	}

	rtemp3638.free(); // Realspace
	ktemp1460[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1460[i] = std::complex<double>(-1.0*ktemp1460[i].imag()*R*k_i[2]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1460[i].real()*R*k_i[2]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp3648(Nx*Ny*Nz); // RS
	rtemp3648 = ifft(Nx,Ny,Nz,dV,ktemp1460);

	ktemp1460.free(); // KSpace
	Vector rtemp3649(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3649[i] = rtemp3648[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp3650(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3650 = fft(Nx,Ny,Nz,dV,rtemp3649);

	rtemp3649.free(); // Realspace
	ktemp3650[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3650[i] = std::complex<double>(-1.0*ktemp3650[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3650[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3652(Nx*Ny*Nz); // RS
	rtemp3652 = ifft(Nx,Ny,Nz,dV,ktemp3650);

	ktemp3650.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3652[i] = rtemp3645[i] - 587.4388539528386*rtemp3652[i];
	}

	rtemp3645.free(); // Realspace
	ktemp1469[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1469[i] = std::complex<double>(-1.0*ktemp1469[i].imag()*R*k_i[2]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1469[i].real()*R*k_i[2]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp3655(Nx*Ny*Nz); // RS
	rtemp3655 = ifft(Nx,Ny,Nz,dV,ktemp1469);

	ktemp1469.free(); // KSpace
	Vector rtemp3656(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3656[i] = rtemp3655[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp3657(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3657 = fft(Nx,Ny,Nz,dV,rtemp3656);

	rtemp3656.free(); // Realspace
	ktemp3657[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3657[i] = std::complex<double>(-1.0*ktemp3657[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3657[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3659(Nx*Ny*Nz); // RS
	rtemp3659 = ifft(Nx,Ny,Nz,dV,ktemp3657);

	ktemp3657.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3659[i] = rtemp3652[i] + 114.64532472305397*rtemp3659[i];
	}

	rtemp3652.free(); // Realspace
	ktemp1478[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1478[i] = std::complex<double>(-1.0*ktemp1478[i].imag()*R*k_i[2]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1478[i].real()*R*k_i[2]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp3662(Nx*Ny*Nz); // RS
	rtemp3662 = ifft(Nx,Ny,Nz,dV,ktemp1478);

	ktemp1478.free(); // KSpace
	Vector rtemp3663(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3663[i] = rtemp3662[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp3664(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3664 = fft(Nx,Ny,Nz,dV,rtemp3663);

	rtemp3663.free(); // Realspace
	ktemp3664[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3664[i] = std::complex<double>(-1.0*ktemp3664[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3664[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3666(Nx*Ny*Nz); // RS
	rtemp3666 = ifft(Nx,Ny,Nz,dV,ktemp3664);

	ktemp3664.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3666[i] = rtemp3659[i] + 4.263669101270603*rtemp3666[i];
	}

	rtemp3659.free(); // Realspace
	ktemp1487[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1487[i] = std::complex<double>(-1.0*ktemp1487[i].imag()*R*k_i[2]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1487[i].real()*R*k_i[2]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp3669(Nx*Ny*Nz); // RS
	rtemp3669 = ifft(Nx,Ny,Nz,dV,ktemp1487);

	ktemp1487.free(); // KSpace
	Vector rtemp3670(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3670[i] = rtemp3669[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp3671(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3671 = fft(Nx,Ny,Nz,dV,rtemp3670);

	rtemp3670.free(); // Realspace
	ktemp3671[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3671[i] = std::complex<double>(-1.0*ktemp3671[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3671[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3673(Nx*Ny*Nz); // RS
	rtemp3673 = ifft(Nx,Ny,Nz,dV,ktemp3671);

	ktemp3671.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3673[i] = rtemp3666[i] + 198.49748371470918*rtemp3673[i];
	}

	rtemp3666.free(); // Realspace
	ktemp1496[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1496[i] = std::complex<double>(-1.0*ktemp1496[i].imag()*R*k_i[2]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1496[i].real()*R*k_i[2]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp3676(Nx*Ny*Nz); // RS
	rtemp3676 = ifft(Nx,Ny,Nz,dV,ktemp1496);

	ktemp1496.free(); // KSpace
	Vector rtemp3677(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3677[i] = rtemp3676[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp3678(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3678 = fft(Nx,Ny,Nz,dV,rtemp3677);

	rtemp3677.free(); // Realspace
	ktemp3678[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3678[i] = std::complex<double>(-1.0*ktemp3678[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3678[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3680(Nx*Ny*Nz); // RS
	rtemp3680 = ifft(Nx,Ny,Nz,dV,ktemp3678);

	ktemp3678.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3680[i] = rtemp3673[i] - 56.21726666860498*rtemp3680[i];
	}

	rtemp3673.free(); // Realspace
	ktemp1505[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1505[i] = std::complex<double>(-1.0*ktemp1505[i].imag()*R*k_i[2]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1505[i].real()*R*k_i[2]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp3683(Nx*Ny*Nz); // RS
	rtemp3683 = ifft(Nx,Ny,Nz,dV,ktemp1505);

	ktemp1505.free(); // KSpace
	Vector rtemp3684(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3684[i] = rtemp3683[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp3685(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3685 = fft(Nx,Ny,Nz,dV,rtemp3684);

	rtemp3684.free(); // Realspace
	ktemp3685[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3685[i] = std::complex<double>(-1.0*ktemp3685[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3685[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3687(Nx*Ny*Nz); // RS
	rtemp3687 = ifft(Nx,Ny,Nz,dV,ktemp3685);

	ktemp3685.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3687[i] = rtemp3680[i] + 16.344064888203977*rtemp3687[i];
	}

	rtemp3680.free(); // Realspace
	ktemp1514[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1514[i] = std::complex<double>(-1.0*ktemp1514[i].imag()*R*k_i[2]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1514[i].real()*R*k_i[2]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp3690(Nx*Ny*Nz); // RS
	rtemp3690 = ifft(Nx,Ny,Nz,dV,ktemp1514);

	ktemp1514.free(); // KSpace
	Vector rtemp3691(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3691[i] = rtemp3690[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp3692(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3692 = fft(Nx,Ny,Nz,dV,rtemp3691);

	rtemp3691.free(); // Realspace
	ktemp3692[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3692[i] = std::complex<double>(-1.0*ktemp3692[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3692[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3694(Nx*Ny*Nz); // RS
	rtemp3694 = ifft(Nx,Ny,Nz,dV,ktemp3692);

	ktemp3692.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3694[i] = rtemp3687[i] - 177.10018137314742*rtemp3694[i];
	}

	rtemp3687.free(); // Realspace
	ktemp1523[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1523[i] = std::complex<double>(-1.0*ktemp1523[i].imag()*R*k_i[2]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1523[i].real()*R*k_i[2]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp3697(Nx*Ny*Nz); // RS
	rtemp3697 = ifft(Nx,Ny,Nz,dV,ktemp1523);

	ktemp1523.free(); // KSpace
	Vector rtemp3698(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3698[i] = rtemp3697[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp3699(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3699 = fft(Nx,Ny,Nz,dV,rtemp3698);

	rtemp3698.free(); // Realspace
	ktemp3699[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3699[i] = std::complex<double>(-1.0*ktemp3699[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3699[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3701(Nx*Ny*Nz); // RS
	rtemp3701 = ifft(Nx,Ny,Nz,dV,ktemp3699);

	ktemp3699.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3701[i] = rtemp3694[i] - 138.49028895608586*rtemp3701[i];
	}

	rtemp3694.free(); // Realspace
	ktemp1532[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1532[i] = std::complex<double>(-1.0*ktemp1532[i].imag()*R*k_i[2]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp1532[i].real()*R*k_i[2]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp3704(Nx*Ny*Nz); // RS
	rtemp3704 = ifft(Nx,Ny,Nz,dV,ktemp1532);

	ktemp1532.free(); // KSpace
	Vector rtemp3705(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3705[i] = rtemp3704[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp3706(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3706 = fft(Nx,Ny,Nz,dV,rtemp3705);

	rtemp3705.free(); // Realspace
	ktemp3706[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3706[i] = std::complex<double>(-1.0*ktemp3706[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3706[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3708(Nx*Ny*Nz); // RS
	rtemp3708 = ifft(Nx,Ny,Nz,dV,ktemp3706);

	ktemp3706.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3708[i] = rtemp3701[i] + 78.95683520871486*rtemp3708[i];
	}

	rtemp3701.free(); // Realspace
	ComplexVector ktemp3710(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3710[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3710[i] = std::complex<double>(-1.0*ktemp1235[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1235[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3711(Nx*Ny*Nz); // RS
	rtemp3711 = ifft(Nx,Ny,Nz,dV,ktemp3710);

	ktemp3710.free(); // KSpace
	Vector rtemp3712(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3712[i] = rtemp3711[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp3713(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3713 = fft(Nx,Ny,Nz,dV,rtemp3712);

	rtemp3712.free(); // Realspace
	ktemp3713[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3713[i] = std::complex<double>(-1.0*ktemp3713[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3713[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3715(Nx*Ny*Nz); // RS
	rtemp3715 = ifft(Nx,Ny,Nz,dV,ktemp3713);

	ktemp3713.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3715[i] = rtemp3708[i] - 25.897841948458478*rtemp3715[i];
	}

	rtemp3708.free(); // Realspace
	ComplexVector ktemp3717(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3717[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3717[i] = std::complex<double>(-1.0*ktemp1244[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1244[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3718(Nx*Ny*Nz); // RS
	rtemp3718 = ifft(Nx,Ny,Nz,dV,ktemp3717);

	ktemp3717.free(); // KSpace
	Vector rtemp3719(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3719[i] = rtemp3718[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp3720(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3720 = fft(Nx,Ny,Nz,dV,rtemp3719);

	rtemp3719.free(); // Realspace
	ktemp3720[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3720[i] = std::complex<double>(-1.0*ktemp3720[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3720[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3722(Nx*Ny*Nz); // RS
	rtemp3722 = ifft(Nx,Ny,Nz,dV,ktemp3720);

	ktemp3720.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3722[i] = rtemp3715[i] + 76.74604382287085*rtemp3722[i];
	}

	rtemp3715.free(); // Realspace
	ComplexVector ktemp3724(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3724[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3724[i] = std::complex<double>(-1.0*ktemp1253[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1253[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3725(Nx*Ny*Nz); // RS
	rtemp3725 = ifft(Nx,Ny,Nz,dV,ktemp3724);

	ktemp3724.free(); // KSpace
	Vector rtemp3726(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3726[i] = rtemp3725[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp3727(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3727 = fft(Nx,Ny,Nz,dV,rtemp3726);

	rtemp3726.free(); // Realspace
	ktemp3727[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3727[i] = std::complex<double>(-1.0*ktemp3727[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3727[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3729(Nx*Ny*Nz); // RS
	rtemp3729 = ifft(Nx,Ny,Nz,dV,ktemp3727);

	ktemp3727.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3729[i] = rtemp3722[i] - 51.16402921524723*rtemp3729[i];
	}

	rtemp3722.free(); // Realspace
	ComplexVector ktemp3731(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3731[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3731[i] = std::complex<double>(-1.0*ktemp1262[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1262[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3732(Nx*Ny*Nz); // RS
	rtemp3732 = ifft(Nx,Ny,Nz,dV,ktemp3731);

	ktemp3731.free(); // KSpace
	Vector rtemp3733(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3733[i] = rtemp3732[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp3734(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3734 = fft(Nx,Ny,Nz,dV,rtemp3733);

	rtemp3733.free(); // Realspace
	ktemp3734[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3734[i] = std::complex<double>(-1.0*ktemp3734[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3734[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3736(Nx*Ny*Nz); // RS
	rtemp3736 = ifft(Nx,Ny,Nz,dV,ktemp3734);

	ktemp3734.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3736[i] = rtemp3729[i] - 0.15791367041742974*rtemp3736[i];
	}

	rtemp3729.free(); // Realspace
	ComplexVector ktemp3738(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3738[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3738[i] = std::complex<double>(-1.0*ktemp1271[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1271[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3739(Nx*Ny*Nz); // RS
	rtemp3739 = ifft(Nx,Ny,Nz,dV,ktemp3738);

	ktemp3738.free(); // KSpace
	Vector rtemp3740(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3740[i] = rtemp3739[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp3741(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3741 = fft(Nx,Ny,Nz,dV,rtemp3740);

	rtemp3740.free(); // Realspace
	ktemp3741[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3741[i] = std::complex<double>(-1.0*ktemp3741[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3741[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3743(Nx*Ny*Nz); // RS
	rtemp3743 = ifft(Nx,Ny,Nz,dV,ktemp3741);

	ktemp3741.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3743[i] = rtemp3736[i] + 112.43453333720996*rtemp3743[i];
	}

	rtemp3736.free(); // Realspace
	ComplexVector ktemp3745(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3745[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3745[i] = std::complex<double>(-1.0*ktemp1280[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1280[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3746(Nx*Ny*Nz); // RS
	rtemp3746 = ifft(Nx,Ny,Nz,dV,ktemp3745);

	ktemp3745.free(); // KSpace
	Vector rtemp3747(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3747[i] = rtemp3746[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp3748(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3748 = fft(Nx,Ny,Nz,dV,rtemp3747);

	rtemp3747.free(); // Realspace
	ktemp3748[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3748[i] = std::complex<double>(-1.0*ktemp3748[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3748[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3750(Nx*Ny*Nz); // RS
	rtemp3750 = ifft(Nx,Ny,Nz,dV,ktemp3748);

	ktemp3748.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3750[i] = rtemp3743[i] - 462.37122698223425*rtemp3750[i];
	}

	rtemp3743.free(); // Realspace
	ComplexVector ktemp3752(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3752[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3752[i] = std::complex<double>(-1.0*ktemp1289[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1289[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3753(Nx*Ny*Nz); // RS
	rtemp3753 = ifft(Nx,Ny,Nz,dV,ktemp3752);

	ktemp3752.free(); // KSpace
	Vector rtemp3754(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3754[i] = rtemp3753[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp3755(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3755 = fft(Nx,Ny,Nz,dV,rtemp3754);

	rtemp3754.free(); // Realspace
	ktemp3755[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3755[i] = std::complex<double>(-1.0*ktemp3755[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3755[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3757(Nx*Ny*Nz); // RS
	rtemp3757 = ifft(Nx,Ny,Nz,dV,ktemp3755);

	ktemp3755.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3757[i] = rtemp3750[i] + 330.355398513263*rtemp3757[i];
	}

	rtemp3750.free(); // Realspace
	ComplexVector ktemp3759(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3759[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3759[i] = std::complex<double>(-1.0*ktemp1298[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1298[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3760(Nx*Ny*Nz); // RS
	rtemp3760 = ifft(Nx,Ny,Nz,dV,ktemp3759);

	ktemp3759.free(); // KSpace
	Vector rtemp3761(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3761[i] = rtemp3760[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp3762(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3762 = fft(Nx,Ny,Nz,dV,rtemp3761);

	rtemp3761.free(); // Realspace
	ktemp3762[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3762[i] = std::complex<double>(-1.0*ktemp3762[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3762[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3764(Nx*Ny*Nz); // RS
	rtemp3764 = ifft(Nx,Ny,Nz,dV,ktemp3762);

	ktemp3762.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3764[i] = rtemp3757[i] + 695.2938908479431*rtemp3764[i];
	}

	rtemp3757.free(); // Realspace
	ComplexVector ktemp3766(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3766[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3766[i] = std::complex<double>(-1.0*ktemp1307[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1307[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3767(Nx*Ny*Nz); // RS
	rtemp3767 = ifft(Nx,Ny,Nz,dV,ktemp3766);

	ktemp3766.free(); // KSpace
	Vector rtemp3768(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3768[i] = rtemp3767[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp3769(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3769 = fft(Nx,Ny,Nz,dV,rtemp3768);

	rtemp3768.free(); // Realspace
	ktemp3769[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3769[i] = std::complex<double>(-1.0*ktemp3769[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3769[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3771(Nx*Ny*Nz); // RS
	rtemp3771 = ifft(Nx,Ny,Nz,dV,ktemp3769);

	ktemp3769.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3771[i] = rtemp3764[i] - 587.4388539528386*rtemp3771[i];
	}

	rtemp3764.free(); // Realspace
	ComplexVector ktemp3773(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3773[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3773[i] = std::complex<double>(-1.0*ktemp1316[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1316[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3774(Nx*Ny*Nz); // RS
	rtemp3774 = ifft(Nx,Ny,Nz,dV,ktemp3773);

	ktemp3773.free(); // KSpace
	Vector rtemp3775(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3775[i] = rtemp3774[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp3776(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3776 = fft(Nx,Ny,Nz,dV,rtemp3775);

	rtemp3775.free(); // Realspace
	ktemp3776[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3776[i] = std::complex<double>(-1.0*ktemp3776[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3776[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3778(Nx*Ny*Nz); // RS
	rtemp3778 = ifft(Nx,Ny,Nz,dV,ktemp3776);

	ktemp3776.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3778[i] = rtemp3771[i] + 114.64532472305397*rtemp3778[i];
	}

	rtemp3771.free(); // Realspace
	ComplexVector ktemp3780(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3780[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3780[i] = std::complex<double>(-1.0*ktemp1325[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1325[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3781(Nx*Ny*Nz); // RS
	rtemp3781 = ifft(Nx,Ny,Nz,dV,ktemp3780);

	ktemp3780.free(); // KSpace
	Vector rtemp3782(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3782[i] = rtemp3781[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp3783(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3783 = fft(Nx,Ny,Nz,dV,rtemp3782);

	rtemp3782.free(); // Realspace
	ktemp3783[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3783[i] = std::complex<double>(-1.0*ktemp3783[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3783[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3785(Nx*Ny*Nz); // RS
	rtemp3785 = ifft(Nx,Ny,Nz,dV,ktemp3783);

	ktemp3783.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3785[i] = rtemp3778[i] + 4.263669101270603*rtemp3785[i];
	}

	rtemp3778.free(); // Realspace
	ComplexVector ktemp3787(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3787[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3787[i] = std::complex<double>(-1.0*ktemp1334[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1334[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3788(Nx*Ny*Nz); // RS
	rtemp3788 = ifft(Nx,Ny,Nz,dV,ktemp3787);

	ktemp3787.free(); // KSpace
	Vector rtemp3789(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3789[i] = rtemp3788[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp3790(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3790 = fft(Nx,Ny,Nz,dV,rtemp3789);

	rtemp3789.free(); // Realspace
	ktemp3790[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3790[i] = std::complex<double>(-1.0*ktemp3790[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3790[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3792(Nx*Ny*Nz); // RS
	rtemp3792 = ifft(Nx,Ny,Nz,dV,ktemp3790);

	ktemp3790.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3792[i] = rtemp3785[i] + 198.49748371470918*rtemp3792[i];
	}

	rtemp3785.free(); // Realspace
	ComplexVector ktemp3794(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3794[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3794[i] = std::complex<double>(-1.0*ktemp1343[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1343[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3795(Nx*Ny*Nz); // RS
	rtemp3795 = ifft(Nx,Ny,Nz,dV,ktemp3794);

	ktemp3794.free(); // KSpace
	Vector rtemp3796(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3796[i] = rtemp3795[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp3797(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3797 = fft(Nx,Ny,Nz,dV,rtemp3796);

	rtemp3796.free(); // Realspace
	ktemp3797[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3797[i] = std::complex<double>(-1.0*ktemp3797[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3797[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3799(Nx*Ny*Nz); // RS
	rtemp3799 = ifft(Nx,Ny,Nz,dV,ktemp3797);

	ktemp3797.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3799[i] = rtemp3792[i] - 56.21726666860498*rtemp3799[i];
	}

	rtemp3792.free(); // Realspace
	ComplexVector ktemp3801(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3801[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3801[i] = std::complex<double>(-1.0*ktemp1352[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1352[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3802(Nx*Ny*Nz); // RS
	rtemp3802 = ifft(Nx,Ny,Nz,dV,ktemp3801);

	ktemp3801.free(); // KSpace
	Vector rtemp3803(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3803[i] = rtemp3802[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp3804(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3804 = fft(Nx,Ny,Nz,dV,rtemp3803);

	rtemp3803.free(); // Realspace
	ktemp3804[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3804[i] = std::complex<double>(-1.0*ktemp3804[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3804[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3806(Nx*Ny*Nz); // RS
	rtemp3806 = ifft(Nx,Ny,Nz,dV,ktemp3804);

	ktemp3804.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3806[i] = rtemp3799[i] + 16.344064888203977*rtemp3806[i];
	}

	rtemp3799.free(); // Realspace
	ComplexVector ktemp3808(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3808[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3808[i] = std::complex<double>(-1.0*ktemp1361[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1361[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3809(Nx*Ny*Nz); // RS
	rtemp3809 = ifft(Nx,Ny,Nz,dV,ktemp3808);

	ktemp3808.free(); // KSpace
	Vector rtemp3810(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3810[i] = rtemp3809[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp3811(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3811 = fft(Nx,Ny,Nz,dV,rtemp3810);

	rtemp3810.free(); // Realspace
	ktemp3811[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3811[i] = std::complex<double>(-1.0*ktemp3811[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3811[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3813(Nx*Ny*Nz); // RS
	rtemp3813 = ifft(Nx,Ny,Nz,dV,ktemp3811);

	ktemp3811.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3813[i] = rtemp3806[i] - 177.10018137314742*rtemp3813[i];
	}

	rtemp3806.free(); // Realspace
	ComplexVector ktemp3815(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3815[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3815[i] = std::complex<double>(-1.0*ktemp1370[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1370[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3816(Nx*Ny*Nz); // RS
	rtemp3816 = ifft(Nx,Ny,Nz,dV,ktemp3815);

	ktemp3815.free(); // KSpace
	Vector rtemp3817(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3817[i] = rtemp3816[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp3818(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3818 = fft(Nx,Ny,Nz,dV,rtemp3817);

	rtemp3817.free(); // Realspace
	ktemp3818[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3818[i] = std::complex<double>(-1.0*ktemp3818[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3818[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3820(Nx*Ny*Nz); // RS
	rtemp3820 = ifft(Nx,Ny,Nz,dV,ktemp3818);

	ktemp3818.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3820[i] = rtemp3813[i] - 138.49028895608586*rtemp3820[i];
	}

	rtemp3813.free(); // Realspace
	ComplexVector ktemp3822(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3822[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3822[i] = std::complex<double>(-1.0*ktemp1379[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp1379[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3823(Nx*Ny*Nz); // RS
	rtemp3823 = ifft(Nx,Ny,Nz,dV,ktemp3822);

	ktemp3822.free(); // KSpace
	Vector rtemp3824(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3824[i] = rtemp3823[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp3825(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3825 = fft(Nx,Ny,Nz,dV,rtemp3824);

	rtemp3824.free(); // Realspace
	ktemp3825[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3825[i] = std::complex<double>(-1.0*ktemp3825[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				ktemp3825[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp3827(Nx*Ny*Nz); // RS
	rtemp3827 = ifft(Nx,Ny,Nz,dV,ktemp3825);

	ktemp3825.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3827[i] = rtemp3820[i] + 78.95683520871486*rtemp3827[i];
	}

	rtemp3820.free(); // Realspace
	Vector rtemp3829(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3829[i] = 7.957747154594767e-2*dV*kT*rtemp67[i]/(R*R)/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp3830(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3830 = fft(Nx,Ny,Nz,dV,rtemp3829);

	rtemp3829.free(); // Realspace
	{
		const int i = 0;
		ktemp3830[0] = 0.33333333333333337*R*R*R*ktemp3830[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3830[i] = std::complex<double>(ktemp3830[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp3830[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp3832(Nx*Ny*Nz); // RS
	rtemp3832 = ifft(Nx,Ny,Nz,dV,ktemp3830);

	ktemp3830.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3832[i] = rtemp3827[i] + 12.566370614359172*rtemp3832[i];
	}

	rtemp3827.free(); // Realspace
	Vector rtemp3834(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		rtemp3834[i] = dV*kT*t1*(n3[i] + t2*t2*log(t2))*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i])/(t2*t2*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp3835(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3835 = fft(Nx,Ny,Nz,dV,rtemp3834);

	rtemp3834.free(); // Realspace
	{
		const int i = 0;
		ktemp3835[0] = 0.33333333333333337*R*R*R*ktemp3835[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3835[i] = std::complex<double>(ktemp3835[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp3835[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp3837(Nx*Ny*Nz); // RS
	rtemp3837 = ifft(Nx,Ny,Nz,dV,ktemp3835);

	ktemp3835.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3837[i] = rtemp3832[i] - 0.22222222222222224*rtemp3837[i];
	}

	rtemp3832.free(); // Realspace
	Vector rtemp3839(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		rtemp3839[i] = dV*kT*t1*log(t2)*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i])/(t2*n3[i]*n3[i]);
	}

	ComplexVector ktemp3840(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3840 = fft(Nx,Ny,Nz,dV,rtemp3839);

	rtemp3839.free(); // Realspace
	{
		const int i = 0;
		ktemp3840[0] = 0.33333333333333337*R*R*R*ktemp3840[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3840[i] = std::complex<double>(ktemp3840[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp3840[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp3842(Nx*Ny*Nz); // RS
	rtemp3842 = ifft(Nx,Ny,Nz,dV,ktemp3840);

	ktemp3840.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3842[i] = rtemp3837[i] - 0.22222222222222224*rtemp3842[i];
	}

	rtemp3837.free(); // Realspace
	Vector rtemp3844(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		rtemp3844[i] = dV*kT*t1*(n3[i] + t2*t2*log(t2))*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i])/(t2*t2*t2*n3[i]*n3[i]);
	}

	ComplexVector ktemp3845(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3845 = fft(Nx,Ny,Nz,dV,rtemp3844);

	rtemp3844.free(); // Realspace
	{
		const int i = 0;
		ktemp3845[0] = 0.33333333333333337*R*R*R*ktemp3845[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3845[i] = std::complex<double>(ktemp3845[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp3845[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp3847(Nx*Ny*Nz); // RS
	rtemp3847 = ifft(Nx,Ny,Nz,dV,ktemp3845);

	ktemp3845.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3847[i] = rtemp3842[i] + 0.22222222222222224*rtemp3847[i];
	}

	rtemp3842.free(); // Realspace
	Vector rtemp3849(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		rtemp3849[i] = dV*kT*t1*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i])/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3850(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3850 = fft(Nx,Ny,Nz,dV,rtemp3849);

	rtemp3849.free(); // Realspace
	{
		const int i = 0;
		ktemp3850[0] = 0.33333333333333337*R*R*R*ktemp3850[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3850[i] = std::complex<double>(ktemp3850[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp3850[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp3852(Nx*Ny*Nz); // RS
	rtemp3852 = ifft(Nx,Ny,Nz,dV,ktemp3850);

	ktemp3850.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3852[i] = rtemp3847[i] + 0.11111111111111112*rtemp3852[i];
	}

	rtemp3847.free(); // Realspace
	Vector rtemp3854(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		rtemp3854[i] = dV*kT*t1*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i])/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3855(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3855 = fft(Nx,Ny,Nz,dV,rtemp3854);

	rtemp3854.free(); // Realspace
	{
		const int i = 0;
		ktemp3855[0] = 0.33333333333333337*R*R*R*ktemp3855[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3855[i] = std::complex<double>(ktemp3855[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp3855[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp3857(Nx*Ny*Nz); // RS
	rtemp3857 = ifft(Nx,Ny,Nz,dV,ktemp3855);

	ktemp3855.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3857[i] = rtemp3852[i] - 0.11111111111111112*rtemp3857[i];
	}

	rtemp3852.free(); // Realspace
	Vector rtemp3859(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3859[i] = dV*kT*(7.957747154594767e-2*rtemp67[i]*rtemp67[i]/R - 7.957747154594767e-2*rtemp73[i]*rtemp73[i]/R - 7.957747154594767e-2*rtemp77[i]*rtemp77[i]/R - 7.957747154594767e-2*rtemp81[i]*rtemp81[i]/R)/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3860(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3860 = fft(Nx,Ny,Nz,dV,rtemp3859);

	rtemp3859.free(); // Realspace
	{
		const int i = 0;
		ktemp3860[0] = 0.33333333333333337*R*R*R*ktemp3860[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3860[i] = std::complex<double>(ktemp3860[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp3860[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp3862(Nx*Ny*Nz); // RS
	rtemp3862 = ifft(Nx,Ny,Nz,dV,ktemp3860);

	ktemp3860.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3862[i] = rtemp3857[i] + 12.566370614359172*rtemp3862[i];
	}

	rtemp3857.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2066[i] = rtemp2066[i]*rtemp73[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3865(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3865 = fft(Nx,Ny,Nz,dV,rtemp2066);

	rtemp2066.free(); // Realspace
	{
		const int i = 0;
		ktemp3865[0] = 0.33333333333333337*R*R*R*ktemp3865[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3865[i] = std::complex<double>(ktemp3865[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp3865[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp3867(Nx*Ny*Nz); // RS
	rtemp3867 = ifft(Nx,Ny,Nz,dV,ktemp3865);

	ktemp3865.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3867[i] = rtemp3862[i] + 25.897841948458478*rtemp3867[i];
	}

	rtemp3862.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2073[i] = rtemp2073[i]*rtemp73[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3870(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3870 = fft(Nx,Ny,Nz,dV,rtemp2073);

	rtemp2073.free(); // Realspace
	{
		const int i = 0;
		ktemp3870[0] = 0.33333333333333337*R*R*R*ktemp3870[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3870[i] = std::complex<double>(ktemp3870[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp3870[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp3872(Nx*Ny*Nz); // RS
	rtemp3872 = ifft(Nx,Ny,Nz,dV,ktemp3870);

	ktemp3870.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3872[i] = rtemp3867[i] - 76.74604382287085*rtemp3872[i];
	}

	rtemp3867.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2080[i] = rtemp2080[i]*rtemp73[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3875(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3875 = fft(Nx,Ny,Nz,dV,rtemp2080);

	rtemp2080.free(); // Realspace
	{
		const int i = 0;
		ktemp3875[0] = 0.33333333333333337*R*R*R*ktemp3875[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3875[i] = std::complex<double>(ktemp3875[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp3875[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp3877(Nx*Ny*Nz); // RS
	rtemp3877 = ifft(Nx,Ny,Nz,dV,ktemp3875);

	ktemp3875.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3877[i] = rtemp3872[i] + 51.16402921524723*rtemp3877[i];
	}

	rtemp3872.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2087[i] = rtemp2087[i]*rtemp73[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3880(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3880 = fft(Nx,Ny,Nz,dV,rtemp2087);

	rtemp2087.free(); // Realspace
	{
		const int i = 0;
		ktemp3880[0] = 0.33333333333333337*R*R*R*ktemp3880[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3880[i] = std::complex<double>(ktemp3880[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp3880[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp3882(Nx*Ny*Nz); // RS
	rtemp3882 = ifft(Nx,Ny,Nz,dV,ktemp3880);

	ktemp3880.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3882[i] = rtemp3877[i] + 0.15791367041742974*rtemp3882[i];
	}

	rtemp3877.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2094[i] = rtemp2094[i]*rtemp73[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3885(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3885 = fft(Nx,Ny,Nz,dV,rtemp2094);

	rtemp2094.free(); // Realspace
	{
		const int i = 0;
		ktemp3885[0] = 0.33333333333333337*R*R*R*ktemp3885[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3885[i] = std::complex<double>(ktemp3885[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp3885[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp3887(Nx*Ny*Nz); // RS
	rtemp3887 = ifft(Nx,Ny,Nz,dV,ktemp3885);

	ktemp3885.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3887[i] = rtemp3882[i] - 112.43453333720996*rtemp3887[i];
	}

	rtemp3882.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2101[i] = rtemp2101[i]*rtemp73[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3890(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3890 = fft(Nx,Ny,Nz,dV,rtemp2101);

	rtemp2101.free(); // Realspace
	{
		const int i = 0;
		ktemp3890[0] = 0.33333333333333337*R*R*R*ktemp3890[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3890[i] = std::complex<double>(ktemp3890[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp3890[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp3892(Nx*Ny*Nz); // RS
	rtemp3892 = ifft(Nx,Ny,Nz,dV,ktemp3890);

	ktemp3890.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3892[i] = rtemp3887[i] + 462.37122698223425*rtemp3892[i];
	}

	rtemp3887.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2108[i] = rtemp2108[i]*rtemp73[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3895(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3895 = fft(Nx,Ny,Nz,dV,rtemp2108);

	rtemp2108.free(); // Realspace
	{
		const int i = 0;
		ktemp3895[0] = 0.33333333333333337*R*R*R*ktemp3895[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3895[i] = std::complex<double>(ktemp3895[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp3895[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp3897(Nx*Ny*Nz); // RS
	rtemp3897 = ifft(Nx,Ny,Nz,dV,ktemp3895);

	ktemp3895.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3897[i] = rtemp3892[i] - 330.355398513263*rtemp3897[i];
	}

	rtemp3892.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2115[i] = rtemp2115[i]*rtemp73[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3900(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3900 = fft(Nx,Ny,Nz,dV,rtemp2115);

	rtemp2115.free(); // Realspace
	{
		const int i = 0;
		ktemp3900[0] = 0.33333333333333337*R*R*R*ktemp3900[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3900[i] = std::complex<double>(ktemp3900[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp3900[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp3902(Nx*Ny*Nz); // RS
	rtemp3902 = ifft(Nx,Ny,Nz,dV,ktemp3900);

	ktemp3900.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3902[i] = rtemp3897[i] - 695.2938908479431*rtemp3902[i];
	}

	rtemp3897.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2122[i] = rtemp2122[i]*rtemp73[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3905(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3905 = fft(Nx,Ny,Nz,dV,rtemp2122);

	rtemp2122.free(); // Realspace
	{
		const int i = 0;
		ktemp3905[0] = 0.33333333333333337*R*R*R*ktemp3905[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3905[i] = std::complex<double>(ktemp3905[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp3905[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp3907(Nx*Ny*Nz); // RS
	rtemp3907 = ifft(Nx,Ny,Nz,dV,ktemp3905);

	ktemp3905.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3907[i] = rtemp3902[i] + 587.4388539528386*rtemp3907[i];
	}

	rtemp3902.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2129[i] = rtemp2129[i]*rtemp73[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3910(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3910 = fft(Nx,Ny,Nz,dV,rtemp2129);

	rtemp2129.free(); // Realspace
	{
		const int i = 0;
		ktemp3910[0] = 0.33333333333333337*R*R*R*ktemp3910[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3910[i] = std::complex<double>(ktemp3910[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp3910[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp3912(Nx*Ny*Nz); // RS
	rtemp3912 = ifft(Nx,Ny,Nz,dV,ktemp3910);

	ktemp3910.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3912[i] = rtemp3907[i] - 114.64532472305397*rtemp3912[i];
	}

	rtemp3907.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2136[i] = rtemp2136[i]*rtemp73[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3915(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3915 = fft(Nx,Ny,Nz,dV,rtemp2136);

	rtemp2136.free(); // Realspace
	{
		const int i = 0;
		ktemp3915[0] = 0.33333333333333337*R*R*R*ktemp3915[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3915[i] = std::complex<double>(ktemp3915[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp3915[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp3917(Nx*Ny*Nz); // RS
	rtemp3917 = ifft(Nx,Ny,Nz,dV,ktemp3915);

	ktemp3915.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3917[i] = rtemp3912[i] - 4.263669101270603*rtemp3917[i];
	}

	rtemp3912.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2143[i] = rtemp2143[i]*rtemp73[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3920(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3920 = fft(Nx,Ny,Nz,dV,rtemp2143);

	rtemp2143.free(); // Realspace
	{
		const int i = 0;
		ktemp3920[0] = 0.33333333333333337*R*R*R*ktemp3920[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3920[i] = std::complex<double>(ktemp3920[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp3920[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp3922(Nx*Ny*Nz); // RS
	rtemp3922 = ifft(Nx,Ny,Nz,dV,ktemp3920);

	ktemp3920.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3922[i] = rtemp3917[i] - 198.49748371470918*rtemp3922[i];
	}

	rtemp3917.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2150[i] = rtemp2150[i]*rtemp73[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3925(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3925 = fft(Nx,Ny,Nz,dV,rtemp2150);

	rtemp2150.free(); // Realspace
	{
		const int i = 0;
		ktemp3925[0] = 0.33333333333333337*R*R*R*ktemp3925[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3925[i] = std::complex<double>(ktemp3925[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp3925[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp3927(Nx*Ny*Nz); // RS
	rtemp3927 = ifft(Nx,Ny,Nz,dV,ktemp3925);

	ktemp3925.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3927[i] = rtemp3922[i] + 56.21726666860498*rtemp3927[i];
	}

	rtemp3922.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2157[i] = rtemp2157[i]*rtemp73[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3930(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3930 = fft(Nx,Ny,Nz,dV,rtemp2157);

	rtemp2157.free(); // Realspace
	{
		const int i = 0;
		ktemp3930[0] = 0.33333333333333337*R*R*R*ktemp3930[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3930[i] = std::complex<double>(ktemp3930[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp3930[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp3932(Nx*Ny*Nz); // RS
	rtemp3932 = ifft(Nx,Ny,Nz,dV,ktemp3930);

	ktemp3930.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3932[i] = rtemp3927[i] - 16.344064888203977*rtemp3932[i];
	}

	rtemp3927.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2164[i] = rtemp2164[i]*rtemp73[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3935(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3935 = fft(Nx,Ny,Nz,dV,rtemp2164);

	rtemp2164.free(); // Realspace
	{
		const int i = 0;
		ktemp3935[0] = 0.33333333333333337*R*R*R*ktemp3935[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3935[i] = std::complex<double>(ktemp3935[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp3935[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp3937(Nx*Ny*Nz); // RS
	rtemp3937 = ifft(Nx,Ny,Nz,dV,ktemp3935);

	ktemp3935.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3937[i] = rtemp3932[i] + 177.10018137314742*rtemp3937[i];
	}

	rtemp3932.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2171[i] = rtemp2171[i]*rtemp73[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3940(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3940 = fft(Nx,Ny,Nz,dV,rtemp2171);

	rtemp2171.free(); // Realspace
	{
		const int i = 0;
		ktemp3940[0] = 0.33333333333333337*R*R*R*ktemp3940[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3940[i] = std::complex<double>(ktemp3940[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp3940[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp3942(Nx*Ny*Nz); // RS
	rtemp3942 = ifft(Nx,Ny,Nz,dV,ktemp3940);

	ktemp3940.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3942[i] = rtemp3937[i] + 138.49028895608586*rtemp3942[i];
	}

	rtemp3937.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2178[i] = rtemp2178[i]*rtemp73[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3945(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3945 = fft(Nx,Ny,Nz,dV,rtemp2178);

	rtemp2178.free(); // Realspace
	{
		const int i = 0;
		ktemp3945[0] = 0.33333333333333337*R*R*R*ktemp3945[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3945[i] = std::complex<double>(ktemp3945[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp3945[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp3947(Nx*Ny*Nz); // RS
	rtemp3947 = ifft(Nx,Ny,Nz,dV,ktemp3945);

	ktemp3945.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3947[i] = rtemp3942[i] - 78.95683520871486*rtemp3947[i];
	}

	rtemp3942.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2185[i] = rtemp2185[i]*rtemp73[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3950(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3950 = fft(Nx,Ny,Nz,dV,rtemp2185);

	rtemp2185.free(); // Realspace
	{
		const int i = 0;
		ktemp3950[0] = 0.33333333333333337*R*R*R*ktemp3950[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3950[i] = std::complex<double>(ktemp3950[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp3950[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp3952(Nx*Ny*Nz); // RS
	rtemp3952 = ifft(Nx,Ny,Nz,dV,ktemp3950);

	ktemp3950.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3952[i] = rtemp3947[i] + 25.897841948458478*rtemp3952[i];
	}

	rtemp3947.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2192[i] = rtemp2192[i]*rtemp73[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3955(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3955 = fft(Nx,Ny,Nz,dV,rtemp2192);

	rtemp2192.free(); // Realspace
	{
		const int i = 0;
		ktemp3955[0] = 0.33333333333333337*R*R*R*ktemp3955[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3955[i] = std::complex<double>(ktemp3955[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp3955[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp3957(Nx*Ny*Nz); // RS
	rtemp3957 = ifft(Nx,Ny,Nz,dV,ktemp3955);

	ktemp3955.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3957[i] = rtemp3952[i] - 76.74604382287085*rtemp3957[i];
	}

	rtemp3952.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2199[i] = rtemp2199[i]*rtemp73[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3960(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3960 = fft(Nx,Ny,Nz,dV,rtemp2199);

	rtemp2199.free(); // Realspace
	{
		const int i = 0;
		ktemp3960[0] = 0.33333333333333337*R*R*R*ktemp3960[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3960[i] = std::complex<double>(ktemp3960[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp3960[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp3962(Nx*Ny*Nz); // RS
	rtemp3962 = ifft(Nx,Ny,Nz,dV,ktemp3960);

	ktemp3960.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3962[i] = rtemp3957[i] + 51.16402921524723*rtemp3962[i];
	}

	rtemp3957.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2206[i] = rtemp2206[i]*rtemp73[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3965(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3965 = fft(Nx,Ny,Nz,dV,rtemp2206);

	rtemp2206.free(); // Realspace
	{
		const int i = 0;
		ktemp3965[0] = 0.33333333333333337*R*R*R*ktemp3965[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3965[i] = std::complex<double>(ktemp3965[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp3965[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp3967(Nx*Ny*Nz); // RS
	rtemp3967 = ifft(Nx,Ny,Nz,dV,ktemp3965);

	ktemp3965.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3967[i] = rtemp3962[i] + 0.15791367041742974*rtemp3967[i];
	}

	rtemp3962.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2213[i] = rtemp2213[i]*rtemp73[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3970(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3970 = fft(Nx,Ny,Nz,dV,rtemp2213);

	rtemp2213.free(); // Realspace
	{
		const int i = 0;
		ktemp3970[0] = 0.33333333333333337*R*R*R*ktemp3970[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3970[i] = std::complex<double>(ktemp3970[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp3970[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp3972(Nx*Ny*Nz); // RS
	rtemp3972 = ifft(Nx,Ny,Nz,dV,ktemp3970);

	ktemp3970.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3972[i] = rtemp3967[i] - 112.43453333720996*rtemp3972[i];
	}

	rtemp3967.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2220[i] = rtemp2220[i]*rtemp73[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3975(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3975 = fft(Nx,Ny,Nz,dV,rtemp2220);

	rtemp2220.free(); // Realspace
	{
		const int i = 0;
		ktemp3975[0] = 0.33333333333333337*R*R*R*ktemp3975[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3975[i] = std::complex<double>(ktemp3975[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp3975[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp3977(Nx*Ny*Nz); // RS
	rtemp3977 = ifft(Nx,Ny,Nz,dV,ktemp3975);

	ktemp3975.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3977[i] = rtemp3972[i] + 462.37122698223425*rtemp3977[i];
	}

	rtemp3972.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2227[i] = rtemp2227[i]*rtemp73[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3980(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3980 = fft(Nx,Ny,Nz,dV,rtemp2227);

	rtemp2227.free(); // Realspace
	{
		const int i = 0;
		ktemp3980[0] = 0.33333333333333337*R*R*R*ktemp3980[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3980[i] = std::complex<double>(ktemp3980[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp3980[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp3982(Nx*Ny*Nz); // RS
	rtemp3982 = ifft(Nx,Ny,Nz,dV,ktemp3980);

	ktemp3980.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3982[i] = rtemp3977[i] - 330.355398513263*rtemp3982[i];
	}

	rtemp3977.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2234[i] = rtemp2234[i]*rtemp73[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3985(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3985 = fft(Nx,Ny,Nz,dV,rtemp2234);

	rtemp2234.free(); // Realspace
	{
		const int i = 0;
		ktemp3985[0] = 0.33333333333333337*R*R*R*ktemp3985[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3985[i] = std::complex<double>(ktemp3985[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp3985[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp3987(Nx*Ny*Nz); // RS
	rtemp3987 = ifft(Nx,Ny,Nz,dV,ktemp3985);

	ktemp3985.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3987[i] = rtemp3982[i] - 695.2938908479431*rtemp3987[i];
	}

	rtemp3982.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2241[i] = rtemp2241[i]*rtemp73[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3990(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3990 = fft(Nx,Ny,Nz,dV,rtemp2241);

	rtemp2241.free(); // Realspace
	{
		const int i = 0;
		ktemp3990[0] = 0.33333333333333337*R*R*R*ktemp3990[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3990[i] = std::complex<double>(ktemp3990[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp3990[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp3992(Nx*Ny*Nz); // RS
	rtemp3992 = ifft(Nx,Ny,Nz,dV,ktemp3990);

	ktemp3990.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3992[i] = rtemp3987[i] + 587.4388539528386*rtemp3992[i];
	}

	rtemp3987.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2248[i] = rtemp2248[i]*rtemp73[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp3995(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3995 = fft(Nx,Ny,Nz,dV,rtemp2248);

	rtemp2248.free(); // Realspace
	{
		const int i = 0;
		ktemp3995[0] = 0.33333333333333337*R*R*R*ktemp3995[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3995[i] = std::complex<double>(ktemp3995[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp3995[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp3997(Nx*Ny*Nz); // RS
	rtemp3997 = ifft(Nx,Ny,Nz,dV,ktemp3995);

	ktemp3995.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3997[i] = rtemp3992[i] - 114.64532472305397*rtemp3997[i];
	}

	rtemp3992.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2255[i] = rtemp2255[i]*rtemp73[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4000(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4000 = fft(Nx,Ny,Nz,dV,rtemp2255);

	rtemp2255.free(); // Realspace
	{
		const int i = 0;
		ktemp4000[0] = 0.33333333333333337*R*R*R*ktemp4000[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4000[i] = std::complex<double>(ktemp4000[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4000[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4002(Nx*Ny*Nz); // RS
	rtemp4002 = ifft(Nx,Ny,Nz,dV,ktemp4000);

	ktemp4000.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4002[i] = rtemp3997[i] - 4.263669101270603*rtemp4002[i];
	}

	rtemp3997.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2262[i] = rtemp2262[i]*rtemp73[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4005(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4005 = fft(Nx,Ny,Nz,dV,rtemp2262);

	rtemp2262.free(); // Realspace
	{
		const int i = 0;
		ktemp4005[0] = 0.33333333333333337*R*R*R*ktemp4005[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4005[i] = std::complex<double>(ktemp4005[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4005[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4007(Nx*Ny*Nz); // RS
	rtemp4007 = ifft(Nx,Ny,Nz,dV,ktemp4005);

	ktemp4005.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4007[i] = rtemp4002[i] - 198.49748371470918*rtemp4007[i];
	}

	rtemp4002.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2269[i] = rtemp2269[i]*rtemp73[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4010(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4010 = fft(Nx,Ny,Nz,dV,rtemp2269);

	rtemp2269.free(); // Realspace
	{
		const int i = 0;
		ktemp4010[0] = 0.33333333333333337*R*R*R*ktemp4010[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4010[i] = std::complex<double>(ktemp4010[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4010[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4012(Nx*Ny*Nz); // RS
	rtemp4012 = ifft(Nx,Ny,Nz,dV,ktemp4010);

	ktemp4010.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4012[i] = rtemp4007[i] + 56.21726666860498*rtemp4012[i];
	}

	rtemp4007.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2276[i] = rtemp2276[i]*rtemp73[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4015(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4015 = fft(Nx,Ny,Nz,dV,rtemp2276);

	rtemp2276.free(); // Realspace
	{
		const int i = 0;
		ktemp4015[0] = 0.33333333333333337*R*R*R*ktemp4015[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4015[i] = std::complex<double>(ktemp4015[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4015[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4017(Nx*Ny*Nz); // RS
	rtemp4017 = ifft(Nx,Ny,Nz,dV,ktemp4015);

	ktemp4015.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4017[i] = rtemp4012[i] - 16.344064888203977*rtemp4017[i];
	}

	rtemp4012.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2283[i] = rtemp2283[i]*rtemp73[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4020(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4020 = fft(Nx,Ny,Nz,dV,rtemp2283);

	rtemp2283.free(); // Realspace
	{
		const int i = 0;
		ktemp4020[0] = 0.33333333333333337*R*R*R*ktemp4020[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4020[i] = std::complex<double>(ktemp4020[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4020[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4022(Nx*Ny*Nz); // RS
	rtemp4022 = ifft(Nx,Ny,Nz,dV,ktemp4020);

	ktemp4020.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4022[i] = rtemp4017[i] + 177.10018137314742*rtemp4022[i];
	}

	rtemp4017.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2290[i] = rtemp2290[i]*rtemp73[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4025(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4025 = fft(Nx,Ny,Nz,dV,rtemp2290);

	rtemp2290.free(); // Realspace
	{
		const int i = 0;
		ktemp4025[0] = 0.33333333333333337*R*R*R*ktemp4025[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4025[i] = std::complex<double>(ktemp4025[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4025[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4027(Nx*Ny*Nz); // RS
	rtemp4027 = ifft(Nx,Ny,Nz,dV,ktemp4025);

	ktemp4025.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4027[i] = rtemp4022[i] + 138.49028895608586*rtemp4027[i];
	}

	rtemp4022.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2297[i] = rtemp2297[i]*rtemp73[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4030(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4030 = fft(Nx,Ny,Nz,dV,rtemp2297);

	rtemp2297.free(); // Realspace
	{
		const int i = 0;
		ktemp4030[0] = 0.33333333333333337*R*R*R*ktemp4030[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4030[i] = std::complex<double>(ktemp4030[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4030[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4032(Nx*Ny*Nz); // RS
	rtemp4032 = ifft(Nx,Ny,Nz,dV,ktemp4030);

	ktemp4030.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4032[i] = rtemp4027[i] - 78.95683520871486*rtemp4032[i];
	}

	rtemp4027.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2829[i] = rtemp2829[i]*rtemp77[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4035(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4035 = fft(Nx,Ny,Nz,dV,rtemp2829);

	rtemp2829.free(); // Realspace
	{
		const int i = 0;
		ktemp4035[0] = 0.33333333333333337*R*R*R*ktemp4035[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4035[i] = std::complex<double>(ktemp4035[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4035[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4037(Nx*Ny*Nz); // RS
	rtemp4037 = ifft(Nx,Ny,Nz,dV,ktemp4035);

	ktemp4035.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4037[i] = rtemp4032[i] + 25.897841948458478*rtemp4037[i];
	}

	rtemp4032.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2836[i] = rtemp2836[i]*rtemp77[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4040(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4040 = fft(Nx,Ny,Nz,dV,rtemp2836);

	rtemp2836.free(); // Realspace
	{
		const int i = 0;
		ktemp4040[0] = 0.33333333333333337*R*R*R*ktemp4040[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4040[i] = std::complex<double>(ktemp4040[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4040[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4042(Nx*Ny*Nz); // RS
	rtemp4042 = ifft(Nx,Ny,Nz,dV,ktemp4040);

	ktemp4040.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4042[i] = rtemp4037[i] - 76.74604382287085*rtemp4042[i];
	}

	rtemp4037.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2843[i] = rtemp2843[i]*rtemp77[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4045(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4045 = fft(Nx,Ny,Nz,dV,rtemp2843);

	rtemp2843.free(); // Realspace
	{
		const int i = 0;
		ktemp4045[0] = 0.33333333333333337*R*R*R*ktemp4045[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4045[i] = std::complex<double>(ktemp4045[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4045[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4047(Nx*Ny*Nz); // RS
	rtemp4047 = ifft(Nx,Ny,Nz,dV,ktemp4045);

	ktemp4045.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4047[i] = rtemp4042[i] + 51.16402921524723*rtemp4047[i];
	}

	rtemp4042.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2850[i] = rtemp2850[i]*rtemp77[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4050(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4050 = fft(Nx,Ny,Nz,dV,rtemp2850);

	rtemp2850.free(); // Realspace
	{
		const int i = 0;
		ktemp4050[0] = 0.33333333333333337*R*R*R*ktemp4050[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4050[i] = std::complex<double>(ktemp4050[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4050[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4052(Nx*Ny*Nz); // RS
	rtemp4052 = ifft(Nx,Ny,Nz,dV,ktemp4050);

	ktemp4050.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4052[i] = rtemp4047[i] + 0.15791367041742974*rtemp4052[i];
	}

	rtemp4047.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2857[i] = rtemp2857[i]*rtemp77[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4055(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4055 = fft(Nx,Ny,Nz,dV,rtemp2857);

	rtemp2857.free(); // Realspace
	{
		const int i = 0;
		ktemp4055[0] = 0.33333333333333337*R*R*R*ktemp4055[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4055[i] = std::complex<double>(ktemp4055[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4055[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4057(Nx*Ny*Nz); // RS
	rtemp4057 = ifft(Nx,Ny,Nz,dV,ktemp4055);

	ktemp4055.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4057[i] = rtemp4052[i] - 112.43453333720996*rtemp4057[i];
	}

	rtemp4052.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2864[i] = rtemp2864[i]*rtemp77[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4060(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4060 = fft(Nx,Ny,Nz,dV,rtemp2864);

	rtemp2864.free(); // Realspace
	{
		const int i = 0;
		ktemp4060[0] = 0.33333333333333337*R*R*R*ktemp4060[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4060[i] = std::complex<double>(ktemp4060[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4060[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4062(Nx*Ny*Nz); // RS
	rtemp4062 = ifft(Nx,Ny,Nz,dV,ktemp4060);

	ktemp4060.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4062[i] = rtemp4057[i] + 462.37122698223425*rtemp4062[i];
	}

	rtemp4057.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2871[i] = rtemp2871[i]*rtemp77[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4065(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4065 = fft(Nx,Ny,Nz,dV,rtemp2871);

	rtemp2871.free(); // Realspace
	{
		const int i = 0;
		ktemp4065[0] = 0.33333333333333337*R*R*R*ktemp4065[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4065[i] = std::complex<double>(ktemp4065[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4065[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4067(Nx*Ny*Nz); // RS
	rtemp4067 = ifft(Nx,Ny,Nz,dV,ktemp4065);

	ktemp4065.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4067[i] = rtemp4062[i] - 330.355398513263*rtemp4067[i];
	}

	rtemp4062.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2878[i] = rtemp2878[i]*rtemp77[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4070(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4070 = fft(Nx,Ny,Nz,dV,rtemp2878);

	rtemp2878.free(); // Realspace
	{
		const int i = 0;
		ktemp4070[0] = 0.33333333333333337*R*R*R*ktemp4070[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4070[i] = std::complex<double>(ktemp4070[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4070[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4072(Nx*Ny*Nz); // RS
	rtemp4072 = ifft(Nx,Ny,Nz,dV,ktemp4070);

	ktemp4070.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4072[i] = rtemp4067[i] - 695.2938908479431*rtemp4072[i];
	}

	rtemp4067.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2885[i] = rtemp2885[i]*rtemp77[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4075(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4075 = fft(Nx,Ny,Nz,dV,rtemp2885);

	rtemp2885.free(); // Realspace
	{
		const int i = 0;
		ktemp4075[0] = 0.33333333333333337*R*R*R*ktemp4075[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4075[i] = std::complex<double>(ktemp4075[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4075[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4077(Nx*Ny*Nz); // RS
	rtemp4077 = ifft(Nx,Ny,Nz,dV,ktemp4075);

	ktemp4075.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4077[i] = rtemp4072[i] + 587.4388539528386*rtemp4077[i];
	}

	rtemp4072.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2892[i] = rtemp2892[i]*rtemp77[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4080(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4080 = fft(Nx,Ny,Nz,dV,rtemp2892);

	rtemp2892.free(); // Realspace
	{
		const int i = 0;
		ktemp4080[0] = 0.33333333333333337*R*R*R*ktemp4080[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4080[i] = std::complex<double>(ktemp4080[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4080[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4082(Nx*Ny*Nz); // RS
	rtemp4082 = ifft(Nx,Ny,Nz,dV,ktemp4080);

	ktemp4080.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4082[i] = rtemp4077[i] - 114.64532472305397*rtemp4082[i];
	}

	rtemp4077.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2899[i] = rtemp2899[i]*rtemp77[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4085(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4085 = fft(Nx,Ny,Nz,dV,rtemp2899);

	rtemp2899.free(); // Realspace
	{
		const int i = 0;
		ktemp4085[0] = 0.33333333333333337*R*R*R*ktemp4085[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4085[i] = std::complex<double>(ktemp4085[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4085[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4087(Nx*Ny*Nz); // RS
	rtemp4087 = ifft(Nx,Ny,Nz,dV,ktemp4085);

	ktemp4085.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4087[i] = rtemp4082[i] - 4.263669101270603*rtemp4087[i];
	}

	rtemp4082.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2906[i] = rtemp2906[i]*rtemp77[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4090(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4090 = fft(Nx,Ny,Nz,dV,rtemp2906);

	rtemp2906.free(); // Realspace
	{
		const int i = 0;
		ktemp4090[0] = 0.33333333333333337*R*R*R*ktemp4090[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4090[i] = std::complex<double>(ktemp4090[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4090[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4092(Nx*Ny*Nz); // RS
	rtemp4092 = ifft(Nx,Ny,Nz,dV,ktemp4090);

	ktemp4090.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4092[i] = rtemp4087[i] - 198.49748371470918*rtemp4092[i];
	}

	rtemp4087.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2913[i] = rtemp2913[i]*rtemp77[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4095(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4095 = fft(Nx,Ny,Nz,dV,rtemp2913);

	rtemp2913.free(); // Realspace
	{
		const int i = 0;
		ktemp4095[0] = 0.33333333333333337*R*R*R*ktemp4095[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4095[i] = std::complex<double>(ktemp4095[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4095[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4097(Nx*Ny*Nz); // RS
	rtemp4097 = ifft(Nx,Ny,Nz,dV,ktemp4095);

	ktemp4095.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4097[i] = rtemp4092[i] + 56.21726666860498*rtemp4097[i];
	}

	rtemp4092.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2920[i] = rtemp2920[i]*rtemp77[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4100(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4100 = fft(Nx,Ny,Nz,dV,rtemp2920);

	rtemp2920.free(); // Realspace
	{
		const int i = 0;
		ktemp4100[0] = 0.33333333333333337*R*R*R*ktemp4100[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4100[i] = std::complex<double>(ktemp4100[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4100[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4102(Nx*Ny*Nz); // RS
	rtemp4102 = ifft(Nx,Ny,Nz,dV,ktemp4100);

	ktemp4100.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4102[i] = rtemp4097[i] - 16.344064888203977*rtemp4102[i];
	}

	rtemp4097.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2927[i] = rtemp2927[i]*rtemp77[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4105(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4105 = fft(Nx,Ny,Nz,dV,rtemp2927);

	rtemp2927.free(); // Realspace
	{
		const int i = 0;
		ktemp4105[0] = 0.33333333333333337*R*R*R*ktemp4105[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4105[i] = std::complex<double>(ktemp4105[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4105[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4107(Nx*Ny*Nz); // RS
	rtemp4107 = ifft(Nx,Ny,Nz,dV,ktemp4105);

	ktemp4105.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4107[i] = rtemp4102[i] + 177.10018137314742*rtemp4107[i];
	}

	rtemp4102.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2934[i] = rtemp2934[i]*rtemp77[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4110(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4110 = fft(Nx,Ny,Nz,dV,rtemp2934);

	rtemp2934.free(); // Realspace
	{
		const int i = 0;
		ktemp4110[0] = 0.33333333333333337*R*R*R*ktemp4110[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4110[i] = std::complex<double>(ktemp4110[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4110[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4112(Nx*Ny*Nz); // RS
	rtemp4112 = ifft(Nx,Ny,Nz,dV,ktemp4110);

	ktemp4110.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4112[i] = rtemp4107[i] + 138.49028895608586*rtemp4112[i];
	}

	rtemp4107.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2941[i] = rtemp2941[i]*rtemp77[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4115(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4115 = fft(Nx,Ny,Nz,dV,rtemp2941);

	rtemp2941.free(); // Realspace
	{
		const int i = 0;
		ktemp4115[0] = 0.33333333333333337*R*R*R*ktemp4115[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4115[i] = std::complex<double>(ktemp4115[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4115[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4117(Nx*Ny*Nz); // RS
	rtemp4117 = ifft(Nx,Ny,Nz,dV,ktemp4115);

	ktemp4115.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4117[i] = rtemp4112[i] - 78.95683520871486*rtemp4117[i];
	}

	rtemp4112.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2948[i] = rtemp2948[i]*rtemp77[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4120(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4120 = fft(Nx,Ny,Nz,dV,rtemp2948);

	rtemp2948.free(); // Realspace
	{
		const int i = 0;
		ktemp4120[0] = 0.33333333333333337*R*R*R*ktemp4120[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4120[i] = std::complex<double>(ktemp4120[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4120[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4122(Nx*Ny*Nz); // RS
	rtemp4122 = ifft(Nx,Ny,Nz,dV,ktemp4120);

	ktemp4120.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4122[i] = rtemp4117[i] + 25.897841948458478*rtemp4122[i];
	}

	rtemp4117.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2955[i] = rtemp2955[i]*rtemp77[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4125(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4125 = fft(Nx,Ny,Nz,dV,rtemp2955);

	rtemp2955.free(); // Realspace
	{
		const int i = 0;
		ktemp4125[0] = 0.33333333333333337*R*R*R*ktemp4125[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4125[i] = std::complex<double>(ktemp4125[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4125[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4127(Nx*Ny*Nz); // RS
	rtemp4127 = ifft(Nx,Ny,Nz,dV,ktemp4125);

	ktemp4125.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4127[i] = rtemp4122[i] - 76.74604382287085*rtemp4127[i];
	}

	rtemp4122.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2962[i] = rtemp2962[i]*rtemp77[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4130(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4130 = fft(Nx,Ny,Nz,dV,rtemp2962);

	rtemp2962.free(); // Realspace
	{
		const int i = 0;
		ktemp4130[0] = 0.33333333333333337*R*R*R*ktemp4130[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4130[i] = std::complex<double>(ktemp4130[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4130[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4132(Nx*Ny*Nz); // RS
	rtemp4132 = ifft(Nx,Ny,Nz,dV,ktemp4130);

	ktemp4130.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4132[i] = rtemp4127[i] + 51.16402921524723*rtemp4132[i];
	}

	rtemp4127.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2969[i] = rtemp2969[i]*rtemp77[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4135(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4135 = fft(Nx,Ny,Nz,dV,rtemp2969);

	rtemp2969.free(); // Realspace
	{
		const int i = 0;
		ktemp4135[0] = 0.33333333333333337*R*R*R*ktemp4135[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4135[i] = std::complex<double>(ktemp4135[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4135[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4137(Nx*Ny*Nz); // RS
	rtemp4137 = ifft(Nx,Ny,Nz,dV,ktemp4135);

	ktemp4135.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4137[i] = rtemp4132[i] + 0.15791367041742974*rtemp4137[i];
	}

	rtemp4132.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2976[i] = rtemp2976[i]*rtemp77[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4140(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4140 = fft(Nx,Ny,Nz,dV,rtemp2976);

	rtemp2976.free(); // Realspace
	{
		const int i = 0;
		ktemp4140[0] = 0.33333333333333337*R*R*R*ktemp4140[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4140[i] = std::complex<double>(ktemp4140[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4140[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4142(Nx*Ny*Nz); // RS
	rtemp4142 = ifft(Nx,Ny,Nz,dV,ktemp4140);

	ktemp4140.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4142[i] = rtemp4137[i] - 112.43453333720996*rtemp4142[i];
	}

	rtemp4137.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2983[i] = rtemp2983[i]*rtemp77[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4145(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4145 = fft(Nx,Ny,Nz,dV,rtemp2983);

	rtemp2983.free(); // Realspace
	{
		const int i = 0;
		ktemp4145[0] = 0.33333333333333337*R*R*R*ktemp4145[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4145[i] = std::complex<double>(ktemp4145[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4145[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4147(Nx*Ny*Nz); // RS
	rtemp4147 = ifft(Nx,Ny,Nz,dV,ktemp4145);

	ktemp4145.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4147[i] = rtemp4142[i] + 462.37122698223425*rtemp4147[i];
	}

	rtemp4142.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2990[i] = rtemp2990[i]*rtemp77[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4150(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4150 = fft(Nx,Ny,Nz,dV,rtemp2990);

	rtemp2990.free(); // Realspace
	{
		const int i = 0;
		ktemp4150[0] = 0.33333333333333337*R*R*R*ktemp4150[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4150[i] = std::complex<double>(ktemp4150[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4150[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4152(Nx*Ny*Nz); // RS
	rtemp4152 = ifft(Nx,Ny,Nz,dV,ktemp4150);

	ktemp4150.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4152[i] = rtemp4147[i] - 330.355398513263*rtemp4152[i];
	}

	rtemp4147.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2997[i] = rtemp2997[i]*rtemp77[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4155(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4155 = fft(Nx,Ny,Nz,dV,rtemp2997);

	rtemp2997.free(); // Realspace
	{
		const int i = 0;
		ktemp4155[0] = 0.33333333333333337*R*R*R*ktemp4155[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4155[i] = std::complex<double>(ktemp4155[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4155[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4157(Nx*Ny*Nz); // RS
	rtemp4157 = ifft(Nx,Ny,Nz,dV,ktemp4155);

	ktemp4155.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4157[i] = rtemp4152[i] - 695.2938908479431*rtemp4157[i];
	}

	rtemp4152.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3004[i] = rtemp3004[i]*rtemp77[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4160(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4160 = fft(Nx,Ny,Nz,dV,rtemp3004);

	rtemp3004.free(); // Realspace
	{
		const int i = 0;
		ktemp4160[0] = 0.33333333333333337*R*R*R*ktemp4160[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4160[i] = std::complex<double>(ktemp4160[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4160[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4162(Nx*Ny*Nz); // RS
	rtemp4162 = ifft(Nx,Ny,Nz,dV,ktemp4160);

	ktemp4160.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4162[i] = rtemp4157[i] + 587.4388539528386*rtemp4162[i];
	}

	rtemp4157.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3011[i] = rtemp3011[i]*rtemp77[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4165(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4165 = fft(Nx,Ny,Nz,dV,rtemp3011);

	rtemp3011.free(); // Realspace
	{
		const int i = 0;
		ktemp4165[0] = 0.33333333333333337*R*R*R*ktemp4165[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4165[i] = std::complex<double>(ktemp4165[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4165[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4167(Nx*Ny*Nz); // RS
	rtemp4167 = ifft(Nx,Ny,Nz,dV,ktemp4165);

	ktemp4165.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4167[i] = rtemp4162[i] - 114.64532472305397*rtemp4167[i];
	}

	rtemp4162.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3018[i] = rtemp3018[i]*rtemp77[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4170(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4170 = fft(Nx,Ny,Nz,dV,rtemp3018);

	rtemp3018.free(); // Realspace
	{
		const int i = 0;
		ktemp4170[0] = 0.33333333333333337*R*R*R*ktemp4170[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4170[i] = std::complex<double>(ktemp4170[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4170[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4172(Nx*Ny*Nz); // RS
	rtemp4172 = ifft(Nx,Ny,Nz,dV,ktemp4170);

	ktemp4170.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4172[i] = rtemp4167[i] - 4.263669101270603*rtemp4172[i];
	}

	rtemp4167.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3025[i] = rtemp3025[i]*rtemp77[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4175(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4175 = fft(Nx,Ny,Nz,dV,rtemp3025);

	rtemp3025.free(); // Realspace
	{
		const int i = 0;
		ktemp4175[0] = 0.33333333333333337*R*R*R*ktemp4175[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4175[i] = std::complex<double>(ktemp4175[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4175[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4177(Nx*Ny*Nz); // RS
	rtemp4177 = ifft(Nx,Ny,Nz,dV,ktemp4175);

	ktemp4175.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4177[i] = rtemp4172[i] - 198.49748371470918*rtemp4177[i];
	}

	rtemp4172.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3032[i] = rtemp3032[i]*rtemp77[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4180(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4180 = fft(Nx,Ny,Nz,dV,rtemp3032);

	rtemp3032.free(); // Realspace
	{
		const int i = 0;
		ktemp4180[0] = 0.33333333333333337*R*R*R*ktemp4180[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4180[i] = std::complex<double>(ktemp4180[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4180[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4182(Nx*Ny*Nz); // RS
	rtemp4182 = ifft(Nx,Ny,Nz,dV,ktemp4180);

	ktemp4180.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4182[i] = rtemp4177[i] + 56.21726666860498*rtemp4182[i];
	}

	rtemp4177.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3039[i] = rtemp3039[i]*rtemp77[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4185(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4185 = fft(Nx,Ny,Nz,dV,rtemp3039);

	rtemp3039.free(); // Realspace
	{
		const int i = 0;
		ktemp4185[0] = 0.33333333333333337*R*R*R*ktemp4185[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4185[i] = std::complex<double>(ktemp4185[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4185[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4187(Nx*Ny*Nz); // RS
	rtemp4187 = ifft(Nx,Ny,Nz,dV,ktemp4185);

	ktemp4185.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4187[i] = rtemp4182[i] - 16.344064888203977*rtemp4187[i];
	}

	rtemp4182.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3046[i] = rtemp3046[i]*rtemp77[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4190(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4190 = fft(Nx,Ny,Nz,dV,rtemp3046);

	rtemp3046.free(); // Realspace
	{
		const int i = 0;
		ktemp4190[0] = 0.33333333333333337*R*R*R*ktemp4190[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4190[i] = std::complex<double>(ktemp4190[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4190[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4192(Nx*Ny*Nz); // RS
	rtemp4192 = ifft(Nx,Ny,Nz,dV,ktemp4190);

	ktemp4190.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4192[i] = rtemp4187[i] + 177.10018137314742*rtemp4192[i];
	}

	rtemp4187.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3053[i] = rtemp3053[i]*rtemp77[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4195(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4195 = fft(Nx,Ny,Nz,dV,rtemp3053);

	rtemp3053.free(); // Realspace
	{
		const int i = 0;
		ktemp4195[0] = 0.33333333333333337*R*R*R*ktemp4195[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4195[i] = std::complex<double>(ktemp4195[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4195[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4197(Nx*Ny*Nz); // RS
	rtemp4197 = ifft(Nx,Ny,Nz,dV,ktemp4195);

	ktemp4195.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4197[i] = rtemp4192[i] + 138.49028895608586*rtemp4197[i];
	}

	rtemp4192.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3060[i] = rtemp3060[i]*rtemp77[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4200(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4200 = fft(Nx,Ny,Nz,dV,rtemp3060);

	rtemp3060.free(); // Realspace
	{
		const int i = 0;
		ktemp4200[0] = 0.33333333333333337*R*R*R*ktemp4200[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4200[i] = std::complex<double>(ktemp4200[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4200[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4202(Nx*Ny*Nz); // RS
	rtemp4202 = ifft(Nx,Ny,Nz,dV,ktemp4200);

	ktemp4200.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4202[i] = rtemp4197[i] - 78.95683520871486*rtemp4202[i];
	}

	rtemp4197.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3592[i] = rtemp3592[i]*rtemp81[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4205(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4205 = fft(Nx,Ny,Nz,dV,rtemp3592);

	rtemp3592.free(); // Realspace
	{
		const int i = 0;
		ktemp4205[0] = 0.33333333333333337*R*R*R*ktemp4205[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4205[i] = std::complex<double>(ktemp4205[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4205[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4207(Nx*Ny*Nz); // RS
	rtemp4207 = ifft(Nx,Ny,Nz,dV,ktemp4205);

	ktemp4205.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4207[i] = rtemp4202[i] + 25.897841948458478*rtemp4207[i];
	}

	rtemp4202.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3599[i] = rtemp3599[i]*rtemp81[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4210(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4210 = fft(Nx,Ny,Nz,dV,rtemp3599);

	rtemp3599.free(); // Realspace
	{
		const int i = 0;
		ktemp4210[0] = 0.33333333333333337*R*R*R*ktemp4210[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4210[i] = std::complex<double>(ktemp4210[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4210[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4212(Nx*Ny*Nz); // RS
	rtemp4212 = ifft(Nx,Ny,Nz,dV,ktemp4210);

	ktemp4210.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4212[i] = rtemp4207[i] - 76.74604382287085*rtemp4212[i];
	}

	rtemp4207.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3606[i] = rtemp3606[i]*rtemp81[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4215(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4215 = fft(Nx,Ny,Nz,dV,rtemp3606);

	rtemp3606.free(); // Realspace
	{
		const int i = 0;
		ktemp4215[0] = 0.33333333333333337*R*R*R*ktemp4215[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4215[i] = std::complex<double>(ktemp4215[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4215[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4217(Nx*Ny*Nz); // RS
	rtemp4217 = ifft(Nx,Ny,Nz,dV,ktemp4215);

	ktemp4215.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4217[i] = rtemp4212[i] + 51.16402921524723*rtemp4217[i];
	}

	rtemp4212.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3613[i] = rtemp3613[i]*rtemp81[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4220(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4220 = fft(Nx,Ny,Nz,dV,rtemp3613);

	rtemp3613.free(); // Realspace
	{
		const int i = 0;
		ktemp4220[0] = 0.33333333333333337*R*R*R*ktemp4220[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4220[i] = std::complex<double>(ktemp4220[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4220[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4222(Nx*Ny*Nz); // RS
	rtemp4222 = ifft(Nx,Ny,Nz,dV,ktemp4220);

	ktemp4220.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4222[i] = rtemp4217[i] + 0.15791367041742974*rtemp4222[i];
	}

	rtemp4217.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3620[i] = rtemp3620[i]*rtemp81[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4225(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4225 = fft(Nx,Ny,Nz,dV,rtemp3620);

	rtemp3620.free(); // Realspace
	{
		const int i = 0;
		ktemp4225[0] = 0.33333333333333337*R*R*R*ktemp4225[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4225[i] = std::complex<double>(ktemp4225[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4225[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4227(Nx*Ny*Nz); // RS
	rtemp4227 = ifft(Nx,Ny,Nz,dV,ktemp4225);

	ktemp4225.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4227[i] = rtemp4222[i] - 112.43453333720996*rtemp4227[i];
	}

	rtemp4222.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3627[i] = rtemp3627[i]*rtemp81[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4230(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4230 = fft(Nx,Ny,Nz,dV,rtemp3627);

	rtemp3627.free(); // Realspace
	{
		const int i = 0;
		ktemp4230[0] = 0.33333333333333337*R*R*R*ktemp4230[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4230[i] = std::complex<double>(ktemp4230[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4230[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4232(Nx*Ny*Nz); // RS
	rtemp4232 = ifft(Nx,Ny,Nz,dV,ktemp4230);

	ktemp4230.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4232[i] = rtemp4227[i] + 462.37122698223425*rtemp4232[i];
	}

	rtemp4227.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3634[i] = rtemp3634[i]*rtemp81[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4235(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4235 = fft(Nx,Ny,Nz,dV,rtemp3634);

	rtemp3634.free(); // Realspace
	{
		const int i = 0;
		ktemp4235[0] = 0.33333333333333337*R*R*R*ktemp4235[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4235[i] = std::complex<double>(ktemp4235[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4235[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4237(Nx*Ny*Nz); // RS
	rtemp4237 = ifft(Nx,Ny,Nz,dV,ktemp4235);

	ktemp4235.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4237[i] = rtemp4232[i] - 330.355398513263*rtemp4237[i];
	}

	rtemp4232.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3641[i] = rtemp3641[i]*rtemp81[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4240(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4240 = fft(Nx,Ny,Nz,dV,rtemp3641);

	rtemp3641.free(); // Realspace
	{
		const int i = 0;
		ktemp4240[0] = 0.33333333333333337*R*R*R*ktemp4240[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4240[i] = std::complex<double>(ktemp4240[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4240[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4242(Nx*Ny*Nz); // RS
	rtemp4242 = ifft(Nx,Ny,Nz,dV,ktemp4240);

	ktemp4240.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4242[i] = rtemp4237[i] - 695.2938908479431*rtemp4242[i];
	}

	rtemp4237.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3648[i] = rtemp3648[i]*rtemp81[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4245(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4245 = fft(Nx,Ny,Nz,dV,rtemp3648);

	rtemp3648.free(); // Realspace
	{
		const int i = 0;
		ktemp4245[0] = 0.33333333333333337*R*R*R*ktemp4245[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4245[i] = std::complex<double>(ktemp4245[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4245[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4247(Nx*Ny*Nz); // RS
	rtemp4247 = ifft(Nx,Ny,Nz,dV,ktemp4245);

	ktemp4245.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4247[i] = rtemp4242[i] + 587.4388539528386*rtemp4247[i];
	}

	rtemp4242.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3655[i] = rtemp3655[i]*rtemp81[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4250(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4250 = fft(Nx,Ny,Nz,dV,rtemp3655);

	rtemp3655.free(); // Realspace
	{
		const int i = 0;
		ktemp4250[0] = 0.33333333333333337*R*R*R*ktemp4250[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4250[i] = std::complex<double>(ktemp4250[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4250[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4252(Nx*Ny*Nz); // RS
	rtemp4252 = ifft(Nx,Ny,Nz,dV,ktemp4250);

	ktemp4250.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4252[i] = rtemp4247[i] - 114.64532472305397*rtemp4252[i];
	}

	rtemp4247.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3662[i] = rtemp3662[i]*rtemp81[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4255(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4255 = fft(Nx,Ny,Nz,dV,rtemp3662);

	rtemp3662.free(); // Realspace
	{
		const int i = 0;
		ktemp4255[0] = 0.33333333333333337*R*R*R*ktemp4255[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4255[i] = std::complex<double>(ktemp4255[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4255[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4257(Nx*Ny*Nz); // RS
	rtemp4257 = ifft(Nx,Ny,Nz,dV,ktemp4255);

	ktemp4255.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4257[i] = rtemp4252[i] - 4.263669101270603*rtemp4257[i];
	}

	rtemp4252.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3669[i] = rtemp3669[i]*rtemp81[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4260(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4260 = fft(Nx,Ny,Nz,dV,rtemp3669);

	rtemp3669.free(); // Realspace
	{
		const int i = 0;
		ktemp4260[0] = 0.33333333333333337*R*R*R*ktemp4260[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4260[i] = std::complex<double>(ktemp4260[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4260[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4262(Nx*Ny*Nz); // RS
	rtemp4262 = ifft(Nx,Ny,Nz,dV,ktemp4260);

	ktemp4260.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4262[i] = rtemp4257[i] - 198.49748371470918*rtemp4262[i];
	}

	rtemp4257.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3676[i] = rtemp3676[i]*rtemp81[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4265(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4265 = fft(Nx,Ny,Nz,dV,rtemp3676);

	rtemp3676.free(); // Realspace
	{
		const int i = 0;
		ktemp4265[0] = 0.33333333333333337*R*R*R*ktemp4265[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4265[i] = std::complex<double>(ktemp4265[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4265[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4267(Nx*Ny*Nz); // RS
	rtemp4267 = ifft(Nx,Ny,Nz,dV,ktemp4265);

	ktemp4265.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4267[i] = rtemp4262[i] + 56.21726666860498*rtemp4267[i];
	}

	rtemp4262.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3683[i] = rtemp3683[i]*rtemp81[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4270(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4270 = fft(Nx,Ny,Nz,dV,rtemp3683);

	rtemp3683.free(); // Realspace
	{
		const int i = 0;
		ktemp4270[0] = 0.33333333333333337*R*R*R*ktemp4270[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4270[i] = std::complex<double>(ktemp4270[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4270[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4272(Nx*Ny*Nz); // RS
	rtemp4272 = ifft(Nx,Ny,Nz,dV,ktemp4270);

	ktemp4270.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4272[i] = rtemp4267[i] - 16.344064888203977*rtemp4272[i];
	}

	rtemp4267.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3690[i] = rtemp3690[i]*rtemp81[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4275(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4275 = fft(Nx,Ny,Nz,dV,rtemp3690);

	rtemp3690.free(); // Realspace
	{
		const int i = 0;
		ktemp4275[0] = 0.33333333333333337*R*R*R*ktemp4275[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4275[i] = std::complex<double>(ktemp4275[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4275[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4277(Nx*Ny*Nz); // RS
	rtemp4277 = ifft(Nx,Ny,Nz,dV,ktemp4275);

	ktemp4275.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4277[i] = rtemp4272[i] + 177.10018137314742*rtemp4277[i];
	}

	rtemp4272.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3697[i] = rtemp3697[i]*rtemp81[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4280(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4280 = fft(Nx,Ny,Nz,dV,rtemp3697);

	rtemp3697.free(); // Realspace
	{
		const int i = 0;
		ktemp4280[0] = 0.33333333333333337*R*R*R*ktemp4280[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4280[i] = std::complex<double>(ktemp4280[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4280[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4282(Nx*Ny*Nz); // RS
	rtemp4282 = ifft(Nx,Ny,Nz,dV,ktemp4280);

	ktemp4280.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4282[i] = rtemp4277[i] + 138.49028895608586*rtemp4282[i];
	}

	rtemp4277.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3704[i] = rtemp3704[i]*rtemp81[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4285(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4285 = fft(Nx,Ny,Nz,dV,rtemp3704);

	rtemp3704.free(); // Realspace
	{
		const int i = 0;
		ktemp4285[0] = 0.33333333333333337*R*R*R*ktemp4285[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4285[i] = std::complex<double>(ktemp4285[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4285[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4287(Nx*Ny*Nz); // RS
	rtemp4287 = ifft(Nx,Ny,Nz,dV,ktemp4285);

	ktemp4285.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4287[i] = rtemp4282[i] - 78.95683520871486*rtemp4287[i];
	}

	rtemp4282.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3711[i] = rtemp3711[i]*rtemp81[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4290(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4290 = fft(Nx,Ny,Nz,dV,rtemp3711);

	rtemp3711.free(); // Realspace
	{
		const int i = 0;
		ktemp4290[0] = 0.33333333333333337*R*R*R*ktemp4290[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4290[i] = std::complex<double>(ktemp4290[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4290[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4292(Nx*Ny*Nz); // RS
	rtemp4292 = ifft(Nx,Ny,Nz,dV,ktemp4290);

	ktemp4290.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4292[i] = rtemp4287[i] + 25.897841948458478*rtemp4292[i];
	}

	rtemp4287.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3718[i] = rtemp3718[i]*rtemp81[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4295(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4295 = fft(Nx,Ny,Nz,dV,rtemp3718);

	rtemp3718.free(); // Realspace
	{
		const int i = 0;
		ktemp4295[0] = 0.33333333333333337*R*R*R*ktemp4295[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4295[i] = std::complex<double>(ktemp4295[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4295[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4297(Nx*Ny*Nz); // RS
	rtemp4297 = ifft(Nx,Ny,Nz,dV,ktemp4295);

	ktemp4295.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4297[i] = rtemp4292[i] - 76.74604382287085*rtemp4297[i];
	}

	rtemp4292.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3725[i] = rtemp3725[i]*rtemp81[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4300(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4300 = fft(Nx,Ny,Nz,dV,rtemp3725);

	rtemp3725.free(); // Realspace
	{
		const int i = 0;
		ktemp4300[0] = 0.33333333333333337*R*R*R*ktemp4300[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4300[i] = std::complex<double>(ktemp4300[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4300[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4302(Nx*Ny*Nz); // RS
	rtemp4302 = ifft(Nx,Ny,Nz,dV,ktemp4300);

	ktemp4300.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4302[i] = rtemp4297[i] + 51.16402921524723*rtemp4302[i];
	}

	rtemp4297.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3732[i] = rtemp3732[i]*rtemp81[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4305(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4305 = fft(Nx,Ny,Nz,dV,rtemp3732);

	rtemp3732.free(); // Realspace
	{
		const int i = 0;
		ktemp4305[0] = 0.33333333333333337*R*R*R*ktemp4305[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4305[i] = std::complex<double>(ktemp4305[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4305[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4307(Nx*Ny*Nz); // RS
	rtemp4307 = ifft(Nx,Ny,Nz,dV,ktemp4305);

	ktemp4305.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4307[i] = rtemp4302[i] + 0.15791367041742974*rtemp4307[i];
	}

	rtemp4302.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3739[i] = rtemp3739[i]*rtemp81[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4310(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4310 = fft(Nx,Ny,Nz,dV,rtemp3739);

	rtemp3739.free(); // Realspace
	{
		const int i = 0;
		ktemp4310[0] = 0.33333333333333337*R*R*R*ktemp4310[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4310[i] = std::complex<double>(ktemp4310[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4310[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4312(Nx*Ny*Nz); // RS
	rtemp4312 = ifft(Nx,Ny,Nz,dV,ktemp4310);

	ktemp4310.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4312[i] = rtemp4307[i] - 112.43453333720996*rtemp4312[i];
	}

	rtemp4307.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3746[i] = rtemp3746[i]*rtemp81[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4315(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4315 = fft(Nx,Ny,Nz,dV,rtemp3746);

	rtemp3746.free(); // Realspace
	{
		const int i = 0;
		ktemp4315[0] = 0.33333333333333337*R*R*R*ktemp4315[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4315[i] = std::complex<double>(ktemp4315[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4315[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4317(Nx*Ny*Nz); // RS
	rtemp4317 = ifft(Nx,Ny,Nz,dV,ktemp4315);

	ktemp4315.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4317[i] = rtemp4312[i] + 462.37122698223425*rtemp4317[i];
	}

	rtemp4312.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3753[i] = rtemp3753[i]*rtemp81[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4320(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4320 = fft(Nx,Ny,Nz,dV,rtemp3753);

	rtemp3753.free(); // Realspace
	{
		const int i = 0;
		ktemp4320[0] = 0.33333333333333337*R*R*R*ktemp4320[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4320[i] = std::complex<double>(ktemp4320[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4320[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4322(Nx*Ny*Nz); // RS
	rtemp4322 = ifft(Nx,Ny,Nz,dV,ktemp4320);

	ktemp4320.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4322[i] = rtemp4317[i] - 330.355398513263*rtemp4322[i];
	}

	rtemp4317.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3760[i] = rtemp3760[i]*rtemp81[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4325(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4325 = fft(Nx,Ny,Nz,dV,rtemp3760);

	rtemp3760.free(); // Realspace
	{
		const int i = 0;
		ktemp4325[0] = 0.33333333333333337*R*R*R*ktemp4325[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4325[i] = std::complex<double>(ktemp4325[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4325[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4327(Nx*Ny*Nz); // RS
	rtemp4327 = ifft(Nx,Ny,Nz,dV,ktemp4325);

	ktemp4325.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4327[i] = rtemp4322[i] - 695.2938908479431*rtemp4327[i];
	}

	rtemp4322.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3767[i] = rtemp3767[i]*rtemp81[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4330(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4330 = fft(Nx,Ny,Nz,dV,rtemp3767);

	rtemp3767.free(); // Realspace
	{
		const int i = 0;
		ktemp4330[0] = 0.33333333333333337*R*R*R*ktemp4330[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4330[i] = std::complex<double>(ktemp4330[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4330[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4332(Nx*Ny*Nz); // RS
	rtemp4332 = ifft(Nx,Ny,Nz,dV,ktemp4330);

	ktemp4330.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4332[i] = rtemp4327[i] + 587.4388539528386*rtemp4332[i];
	}

	rtemp4327.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3774[i] = rtemp3774[i]*rtemp81[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4335(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4335 = fft(Nx,Ny,Nz,dV,rtemp3774);

	rtemp3774.free(); // Realspace
	{
		const int i = 0;
		ktemp4335[0] = 0.33333333333333337*R*R*R*ktemp4335[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4335[i] = std::complex<double>(ktemp4335[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4335[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4337(Nx*Ny*Nz); // RS
	rtemp4337 = ifft(Nx,Ny,Nz,dV,ktemp4335);

	ktemp4335.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4337[i] = rtemp4332[i] - 114.64532472305397*rtemp4337[i];
	}

	rtemp4332.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3781[i] = rtemp3781[i]*rtemp81[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4340(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4340 = fft(Nx,Ny,Nz,dV,rtemp3781);

	rtemp3781.free(); // Realspace
	{
		const int i = 0;
		ktemp4340[0] = 0.33333333333333337*R*R*R*ktemp4340[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4340[i] = std::complex<double>(ktemp4340[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4340[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4342(Nx*Ny*Nz); // RS
	rtemp4342 = ifft(Nx,Ny,Nz,dV,ktemp4340);

	ktemp4340.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4342[i] = rtemp4337[i] - 4.263669101270603*rtemp4342[i];
	}

	rtemp4337.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3788[i] = rtemp3788[i]*rtemp81[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4345(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4345 = fft(Nx,Ny,Nz,dV,rtemp3788);

	rtemp3788.free(); // Realspace
	{
		const int i = 0;
		ktemp4345[0] = 0.33333333333333337*R*R*R*ktemp4345[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4345[i] = std::complex<double>(ktemp4345[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4345[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4347(Nx*Ny*Nz); // RS
	rtemp4347 = ifft(Nx,Ny,Nz,dV,ktemp4345);

	ktemp4345.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4347[i] = rtemp4342[i] - 198.49748371470918*rtemp4347[i];
	}

	rtemp4342.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3795[i] = rtemp3795[i]*rtemp81[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4350(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4350 = fft(Nx,Ny,Nz,dV,rtemp3795);

	rtemp3795.free(); // Realspace
	{
		const int i = 0;
		ktemp4350[0] = 0.33333333333333337*R*R*R*ktemp4350[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4350[i] = std::complex<double>(ktemp4350[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4350[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4352(Nx*Ny*Nz); // RS
	rtemp4352 = ifft(Nx,Ny,Nz,dV,ktemp4350);

	ktemp4350.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4352[i] = rtemp4347[i] + 56.21726666860498*rtemp4352[i];
	}

	rtemp4347.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3802[i] = rtemp3802[i]*rtemp81[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4355(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4355 = fft(Nx,Ny,Nz,dV,rtemp3802);

	rtemp3802.free(); // Realspace
	{
		const int i = 0;
		ktemp4355[0] = 0.33333333333333337*R*R*R*ktemp4355[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4355[i] = std::complex<double>(ktemp4355[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4355[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4357(Nx*Ny*Nz); // RS
	rtemp4357 = ifft(Nx,Ny,Nz,dV,ktemp4355);

	ktemp4355.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4357[i] = rtemp4352[i] - 16.344064888203977*rtemp4357[i];
	}

	rtemp4352.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3809[i] = rtemp3809[i]*rtemp81[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4360(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4360 = fft(Nx,Ny,Nz,dV,rtemp3809);

	rtemp3809.free(); // Realspace
	{
		const int i = 0;
		ktemp4360[0] = 0.33333333333333337*R*R*R*ktemp4360[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4360[i] = std::complex<double>(ktemp4360[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4360[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4362(Nx*Ny*Nz); // RS
	rtemp4362 = ifft(Nx,Ny,Nz,dV,ktemp4360);

	ktemp4360.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4362[i] = rtemp4357[i] + 177.10018137314742*rtemp4362[i];
	}

	rtemp4357.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3816[i] = rtemp3816[i]*rtemp81[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4365(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4365 = fft(Nx,Ny,Nz,dV,rtemp3816);

	rtemp3816.free(); // Realspace
	{
		const int i = 0;
		ktemp4365[0] = 0.33333333333333337*R*R*R*ktemp4365[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4365[i] = std::complex<double>(ktemp4365[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4365[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4367(Nx*Ny*Nz); // RS
	rtemp4367 = ifft(Nx,Ny,Nz,dV,ktemp4365);

	ktemp4365.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4367[i] = rtemp4362[i] + 138.49028895608586*rtemp4367[i];
	}

	rtemp4362.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp3823[i] = rtemp3823[i]*rtemp81[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4370(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4370 = fft(Nx,Ny,Nz,dV,rtemp3823);

	rtemp3823.free(); // Realspace
	{
		const int i = 0;
		ktemp4370[0] = 0.33333333333333337*R*R*R*ktemp4370[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4370[i] = std::complex<double>(ktemp4370[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4370[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4372(Nx*Ny*Nz); // RS
	rtemp4372 = ifft(Nx,Ny,Nz,dV,ktemp4370);

	ktemp4370.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4372[i] = rtemp4367[i] - 78.95683520871486*rtemp4372[i];
	}

	rtemp4367.free(); // Realspace
	Vector rtemp4374(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4374[i] = 7.957747154594767e-2*rtemp478[i]*rtemp73[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4375(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4375 = fft(Nx,Ny,Nz,dV,rtemp4374);

	rtemp4374.free(); // Realspace
	{
		const int i = 0;
		ktemp4375[0] = 0.33333333333333337*R*R*R*ktemp4375[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4375[i] = std::complex<double>(ktemp4375[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4375[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4377(Nx*Ny*Nz); // RS
	rtemp4377 = ifft(Nx,Ny,Nz,dV,ktemp4375);

	ktemp4375.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4377[i] = rtemp4372[i] + 325.4418800364269*rtemp4377[i];
	}

	rtemp4372.free(); // Realspace
	Vector rtemp4379(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4379[i] = 7.957747154594767e-2*rtemp485[i]*rtemp73[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4380(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4380 = fft(Nx,Ny,Nz,dV,rtemp4379);

	rtemp4379.free(); // Realspace
	{
		const int i = 0;
		ktemp4380[0] = 0.33333333333333337*R*R*R*ktemp4380[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4380[i] = std::complex<double>(ktemp4380[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4380[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4382(Nx*Ny*Nz); // RS
	rtemp4382 = ifft(Nx,Ny,Nz,dV,ktemp4380);

	ktemp4380.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4382[i] = rtemp4377[i] - 964.4192298640455*rtemp4382[i];
	}

	rtemp4377.free(); // Realspace
	Vector rtemp4384(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4384[i] = 7.957747154594767e-2*rtemp492[i]*rtemp73[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4385(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4385 = fft(Nx,Ny,Nz,dV,rtemp4384);

	rtemp4384.free(); // Realspace
	{
		const int i = 0;
		ktemp4385[0] = 0.33333333333333337*R*R*R*ktemp4385[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4385[i] = std::complex<double>(ktemp4385[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4385[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4387(Nx*Ny*Nz); // RS
	rtemp4387 = ifft(Nx,Ny,Nz,dV,ktemp4385);

	ktemp4385.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4387[i] = rtemp4382[i] + 642.946153242697*rtemp4387[i];
	}

	rtemp4382.free(); // Realspace
	Vector rtemp4389(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4389[i] = 7.957747154594767e-2*rtemp499[i]*rtemp73[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4390(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4390 = fft(Nx,Ny,Nz,dV,rtemp4389);

	rtemp4389.free(); // Realspace
	{
		const int i = 0;
		ktemp4390[0] = 0.33333333333333337*R*R*R*ktemp4390[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4390[i] = std::complex<double>(ktemp4390[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4390[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4392(Nx*Ny*Nz); // RS
	rtemp4392 = ifft(Nx,Ny,Nz,dV,ktemp4390);

	ktemp4390.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4392[i] = rtemp4387[i] - 1412.894015767902*rtemp4392[i];
	}

	rtemp4387.free(); // Realspace
	Vector rtemp4394(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4394[i] = 7.957747154594767e-2*rtemp506[i]*rtemp73[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4395(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4395 = fft(Nx,Ny,Nz,dV,rtemp4394);

	rtemp4394.free(); // Realspace
	{
		const int i = 0;
		ktemp4395[0] = 0.33333333333333337*R*R*R*ktemp4395[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4395[i] = std::complex<double>(ktemp4395[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4395[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4397(Nx*Ny*Nz); // RS
	rtemp4397 = ifft(Nx,Ny,Nz,dV,ktemp4395);

	ktemp4395.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4397[i] = rtemp4392[i] + 5810.328199674744*rtemp4397[i];
	}

	rtemp4392.free(); // Realspace
	Vector rtemp4399(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4399[i] = 7.957747154594767e-2*rtemp513[i]*rtemp73[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4400(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4400 = fft(Nx,Ny,Nz,dV,rtemp4399);

	rtemp4399.free(); // Realspace
	{
		const int i = 0;
		ktemp4400[0] = 0.33333333333333337*R*R*R*ktemp4400[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4400[i] = std::complex<double>(ktemp4400[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4400[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4402(Nx*Ny*Nz); // RS
	rtemp4402 = ifft(Nx,Ny,Nz,dV,ktemp4400);

	ktemp4400.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4402[i] = rtemp4397[i] + 1.9844017075391884*rtemp4402[i];
	}

	rtemp4397.free(); // Realspace
	Vector rtemp4404(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4404[i] = 7.957747154594767e-2*rtemp520[i]*rtemp73[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4405(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4405 = fft(Nx,Ny,Nz,dV,rtemp4404);

	rtemp4404.free(); // Realspace
	{
		const int i = 0;
		ktemp4405[0] = 0.33333333333333337*R*R*R*ktemp4405[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4405[i] = std::complex<double>(ktemp4405[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4405[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4407(Nx*Ny*Nz); // RS
	rtemp4407 = ifft(Nx,Ny,Nz,dV,ktemp4405);

	ktemp4405.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4407[i] = rtemp4402[i] - 4151.368372171983*rtemp4407[i];
	}

	rtemp4402.free(); // Realspace
	Vector rtemp4409(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4409[i] = 7.957747154594767e-2*rtemp527[i]*rtemp73[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4410(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4410 = fft(Nx,Ny,Nz,dV,rtemp4409);

	rtemp4409.free(); // Realspace
	{
		const int i = 0;
		ktemp4410[0] = 0.33333333333333337*R*R*R*ktemp4410[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4410[i] = std::complex<double>(ktemp4410[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4410[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4412(Nx*Ny*Nz); // RS
	rtemp4412 = ifft(Nx,Ny,Nz,dV,ktemp4410);

	ktemp4410.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4412[i] = rtemp4407[i] - 8737.320718295045*rtemp4412[i];
	}

	rtemp4407.free(); // Realspace
	Vector rtemp4414(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4414[i] = 7.957747154594767e-2*rtemp534[i]*rtemp73[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4415(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4415 = fft(Nx,Ny,Nz,dV,rtemp4414);

	rtemp4414.free(); // Realspace
	{
		const int i = 0;
		ktemp4415[0] = 0.33333333333333337*R*R*R*ktemp4415[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4415[i] = std::complex<double>(ktemp4415[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4415[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4417(Nx*Ny*Nz); // RS
	rtemp4417 = ifft(Nx,Ny,Nz,dV,ktemp4415);

	ktemp4415.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4417[i] = rtemp4412[i] + 7381.9743520457805*rtemp4417[i];
	}

	rtemp4412.free(); // Realspace
	Vector rtemp4419(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4419[i] = 7.957747154594767e-2*rtemp541[i]*rtemp73[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4420(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4420 = fft(Nx,Ny,Nz,dV,rtemp4419);

	rtemp4419.free(); // Realspace
	{
		const int i = 0;
		ktemp4420[0] = 0.33333333333333337*R*R*R*ktemp4420[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4420[i] = std::complex<double>(ktemp4420[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4420[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4422(Nx*Ny*Nz); // RS
	rtemp4422 = ifft(Nx,Ny,Nz,dV,ktemp4420);

	ktemp4420.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4422[i] = rtemp4417[i] - 1440.6756396734506*rtemp4422[i];
	}

	rtemp4417.free(); // Realspace
	Vector rtemp4424(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4424[i] = 7.957747154594767e-2*rtemp548[i]*rtemp73[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4425(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4425 = fft(Nx,Ny,Nz,dV,rtemp4424);

	rtemp4424.free(); // Realspace
	{
		const int i = 0;
		ktemp4425[0] = 0.33333333333333337*R*R*R*ktemp4425[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4425[i] = std::complex<double>(ktemp4425[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4425[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4427(Nx*Ny*Nz); // RS
	rtemp4427 = ifft(Nx,Ny,Nz,dV,ktemp4425);

	ktemp4425.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4427[i] = rtemp4422[i] - 53.578846103558085*rtemp4427[i];
	}

	rtemp4422.free(); // Realspace
	Vector rtemp4429(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4429[i] = 7.957747154594767e-2*rtemp555[i]*rtemp73[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4430(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4430 = fft(Nx,Ny,Nz,dV,rtemp4429);

	rtemp4429.free(); // Realspace
	{
		const int i = 0;
		ktemp4430[0] = 0.33333333333333337*R*R*R*ktemp4430[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4430[i] = std::complex<double>(ktemp4430[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4430[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4432(Nx*Ny*Nz); // RS
	rtemp4432 = ifft(Nx,Ny,Nz,dV,ktemp4430);

	ktemp4430.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4432[i] = rtemp4427[i] - 2494.3929463767595*rtemp4432[i];
	}

	rtemp4427.free(); // Realspace
	Vector rtemp4434(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4434[i] = 7.957747154594767e-2*rtemp562[i]*rtemp73[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4435(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4435 = fft(Nx,Ny,Nz,dV,rtemp4434);

	rtemp4434.free(); // Realspace
	{
		const int i = 0;
		ktemp4435[0] = 0.33333333333333337*R*R*R*ktemp4435[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4435[i] = std::complex<double>(ktemp4435[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4435[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4437(Nx*Ny*Nz); // RS
	rtemp4437 = ifft(Nx,Ny,Nz,dV,ktemp4435);

	ktemp4435.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4437[i] = rtemp4432[i] + 706.447007883951*rtemp4437[i];
	}

	rtemp4432.free(); // Realspace
	Vector rtemp4439(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4439[i] = 7.957747154594767e-2*rtemp569[i]*rtemp73[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4440(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4440 = fft(Nx,Ny,Nz,dV,rtemp4439);

	rtemp4439.free(); // Realspace
	{
		const int i = 0;
		ktemp4440[0] = 0.33333333333333337*R*R*R*ktemp4440[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4440[i] = std::complex<double>(ktemp4440[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4440[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4442(Nx*Ny*Nz); // RS
	rtemp4442 = ifft(Nx,Ny,Nz,dV,ktemp4440);

	ktemp4440.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4442[i] = rtemp4437[i] - 205.38557673030598*rtemp4442[i];
	}

	rtemp4437.free(); // Realspace
	Vector rtemp4444(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4444[i] = 7.957747154594767e-2*rtemp576[i]*rtemp73[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4445(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4445 = fft(Nx,Ny,Nz,dV,rtemp4444);

	rtemp4444.free(); // Realspace
	{
		const int i = 0;
		ktemp4445[0] = 0.33333333333333337*R*R*R*ktemp4445[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4445[i] = std::complex<double>(ktemp4445[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4445[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4447(Nx*Ny*Nz); // RS
	rtemp4447 = ifft(Nx,Ny,Nz,dV,ktemp4445);

	ktemp4445.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4447[i] = rtemp4442[i] + 2225.5065150051996*rtemp4447[i];
	}

	rtemp4442.free(); // Realspace
	Vector rtemp4449(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4449[i] = 7.957747154594767e-2*rtemp583[i]*rtemp73[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4450(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4450 = fft(Nx,Ny,Nz,dV,rtemp4449);

	rtemp4449.free(); // Realspace
	{
		const int i = 0;
		ktemp4450[0] = 0.33333333333333337*R*R*R*ktemp4450[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4450[i] = std::complex<double>(ktemp4450[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4450[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4452(Nx*Ny*Nz); // RS
	rtemp4452 = ifft(Nx,Ny,Nz,dV,ktemp4450);

	ktemp4450.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4452[i] = rtemp4447[i] + 1740.320297511868*rtemp4452[i];
	}

	rtemp4447.free(); // Realspace
	Vector rtemp4454(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4454[i] = 7.957747154594767e-2*rtemp590[i]*rtemp73[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4455(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4455 = fft(Nx,Ny,Nz,dV,rtemp4454);

	rtemp4454.free(); // Realspace
	{
		const int i = 0;
		ktemp4455[0] = 0.33333333333333337*R*R*R*ktemp4455[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4455[i] = std::complex<double>(ktemp4455[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4455[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4457(Nx*Ny*Nz); // RS
	rtemp4457 = ifft(Nx,Ny,Nz,dV,ktemp4455);

	ktemp4455.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4457[i] = rtemp4452[i] - 992.2008537695941*rtemp4457[i];
	}

	rtemp4452.free(); // Realspace
	Vector rtemp4459(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4459[i] = 7.957747154594767e-2*rtemp597[i]*rtemp77[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4460(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4460 = fft(Nx,Ny,Nz,dV,rtemp4459);

	rtemp4459.free(); // Realspace
	{
		const int i = 0;
		ktemp4460[0] = 0.33333333333333337*R*R*R*ktemp4460[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4460[i] = std::complex<double>(ktemp4460[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4460[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4462(Nx*Ny*Nz); // RS
	rtemp4462 = ifft(Nx,Ny,Nz,dV,ktemp4460);

	ktemp4460.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4462[i] = rtemp4457[i] + 325.4418800364269*rtemp4462[i];
	}

	rtemp4457.free(); // Realspace
	Vector rtemp4464(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4464[i] = 7.957747154594767e-2*rtemp604[i]*rtemp77[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4465(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4465 = fft(Nx,Ny,Nz,dV,rtemp4464);

	rtemp4464.free(); // Realspace
	{
		const int i = 0;
		ktemp4465[0] = 0.33333333333333337*R*R*R*ktemp4465[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4465[i] = std::complex<double>(ktemp4465[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4465[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4467(Nx*Ny*Nz); // RS
	rtemp4467 = ifft(Nx,Ny,Nz,dV,ktemp4465);

	ktemp4465.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4467[i] = rtemp4462[i] - 964.4192298640455*rtemp4467[i];
	}

	rtemp4462.free(); // Realspace
	Vector rtemp4469(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4469[i] = 7.957747154594767e-2*rtemp611[i]*rtemp77[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4470(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4470 = fft(Nx,Ny,Nz,dV,rtemp4469);

	rtemp4469.free(); // Realspace
	{
		const int i = 0;
		ktemp4470[0] = 0.33333333333333337*R*R*R*ktemp4470[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4470[i] = std::complex<double>(ktemp4470[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4470[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4472(Nx*Ny*Nz); // RS
	rtemp4472 = ifft(Nx,Ny,Nz,dV,ktemp4470);

	ktemp4470.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4472[i] = rtemp4467[i] + 642.946153242697*rtemp4472[i];
	}

	rtemp4467.free(); // Realspace
	Vector rtemp4474(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4474[i] = 7.957747154594767e-2*rtemp618[i]*rtemp77[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4475(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4475 = fft(Nx,Ny,Nz,dV,rtemp4474);

	rtemp4474.free(); // Realspace
	{
		const int i = 0;
		ktemp4475[0] = 0.33333333333333337*R*R*R*ktemp4475[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4475[i] = std::complex<double>(ktemp4475[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4475[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4477(Nx*Ny*Nz); // RS
	rtemp4477 = ifft(Nx,Ny,Nz,dV,ktemp4475);

	ktemp4475.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4477[i] = rtemp4472[i] - 1412.894015767902*rtemp4477[i];
	}

	rtemp4472.free(); // Realspace
	Vector rtemp4479(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4479[i] = 7.957747154594767e-2*rtemp625[i]*rtemp77[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4480(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4480 = fft(Nx,Ny,Nz,dV,rtemp4479);

	rtemp4479.free(); // Realspace
	{
		const int i = 0;
		ktemp4480[0] = 0.33333333333333337*R*R*R*ktemp4480[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4480[i] = std::complex<double>(ktemp4480[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4480[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4482(Nx*Ny*Nz); // RS
	rtemp4482 = ifft(Nx,Ny,Nz,dV,ktemp4480);

	ktemp4480.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4482[i] = rtemp4477[i] + 5810.328199674744*rtemp4482[i];
	}

	rtemp4477.free(); // Realspace
	Vector rtemp4484(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4484[i] = 7.957747154594767e-2*rtemp632[i]*rtemp77[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4485(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4485 = fft(Nx,Ny,Nz,dV,rtemp4484);

	rtemp4484.free(); // Realspace
	{
		const int i = 0;
		ktemp4485[0] = 0.33333333333333337*R*R*R*ktemp4485[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4485[i] = std::complex<double>(ktemp4485[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4485[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4487(Nx*Ny*Nz); // RS
	rtemp4487 = ifft(Nx,Ny,Nz,dV,ktemp4485);

	ktemp4485.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4487[i] = rtemp4482[i] + 1.9844017075391884*rtemp4487[i];
	}

	rtemp4482.free(); // Realspace
	Vector rtemp4489(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4489[i] = 7.957747154594767e-2*rtemp639[i]*rtemp77[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4490(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4490 = fft(Nx,Ny,Nz,dV,rtemp4489);

	rtemp4489.free(); // Realspace
	{
		const int i = 0;
		ktemp4490[0] = 0.33333333333333337*R*R*R*ktemp4490[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4490[i] = std::complex<double>(ktemp4490[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4490[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4492(Nx*Ny*Nz); // RS
	rtemp4492 = ifft(Nx,Ny,Nz,dV,ktemp4490);

	ktemp4490.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4492[i] = rtemp4487[i] - 4151.368372171983*rtemp4492[i];
	}

	rtemp4487.free(); // Realspace
	Vector rtemp4494(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4494[i] = 7.957747154594767e-2*rtemp646[i]*rtemp77[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4495(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4495 = fft(Nx,Ny,Nz,dV,rtemp4494);

	rtemp4494.free(); // Realspace
	{
		const int i = 0;
		ktemp4495[0] = 0.33333333333333337*R*R*R*ktemp4495[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4495[i] = std::complex<double>(ktemp4495[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4495[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4497(Nx*Ny*Nz); // RS
	rtemp4497 = ifft(Nx,Ny,Nz,dV,ktemp4495);

	ktemp4495.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4497[i] = rtemp4492[i] - 8737.320718295045*rtemp4497[i];
	}

	rtemp4492.free(); // Realspace
	Vector rtemp4499(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4499[i] = 7.957747154594767e-2*rtemp653[i]*rtemp77[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4500(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4500 = fft(Nx,Ny,Nz,dV,rtemp4499);

	rtemp4499.free(); // Realspace
	{
		const int i = 0;
		ktemp4500[0] = 0.33333333333333337*R*R*R*ktemp4500[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4500[i] = std::complex<double>(ktemp4500[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4500[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4502(Nx*Ny*Nz); // RS
	rtemp4502 = ifft(Nx,Ny,Nz,dV,ktemp4500);

	ktemp4500.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4502[i] = rtemp4497[i] + 7381.9743520457805*rtemp4502[i];
	}

	rtemp4497.free(); // Realspace
	Vector rtemp4504(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4504[i] = 7.957747154594767e-2*rtemp660[i]*rtemp77[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4505(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4505 = fft(Nx,Ny,Nz,dV,rtemp4504);

	rtemp4504.free(); // Realspace
	{
		const int i = 0;
		ktemp4505[0] = 0.33333333333333337*R*R*R*ktemp4505[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4505[i] = std::complex<double>(ktemp4505[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4505[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4507(Nx*Ny*Nz); // RS
	rtemp4507 = ifft(Nx,Ny,Nz,dV,ktemp4505);

	ktemp4505.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4507[i] = rtemp4502[i] - 1440.6756396734506*rtemp4507[i];
	}

	rtemp4502.free(); // Realspace
	Vector rtemp4509(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4509[i] = 7.957747154594767e-2*rtemp667[i]*rtemp77[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4510(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4510 = fft(Nx,Ny,Nz,dV,rtemp4509);

	rtemp4509.free(); // Realspace
	{
		const int i = 0;
		ktemp4510[0] = 0.33333333333333337*R*R*R*ktemp4510[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4510[i] = std::complex<double>(ktemp4510[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4510[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4512(Nx*Ny*Nz); // RS
	rtemp4512 = ifft(Nx,Ny,Nz,dV,ktemp4510);

	ktemp4510.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4512[i] = rtemp4507[i] - 53.578846103558085*rtemp4512[i];
	}

	rtemp4507.free(); // Realspace
	Vector rtemp4514(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4514[i] = 7.957747154594767e-2*rtemp674[i]*rtemp77[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4515(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4515 = fft(Nx,Ny,Nz,dV,rtemp4514);

	rtemp4514.free(); // Realspace
	{
		const int i = 0;
		ktemp4515[0] = 0.33333333333333337*R*R*R*ktemp4515[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4515[i] = std::complex<double>(ktemp4515[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4515[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4517(Nx*Ny*Nz); // RS
	rtemp4517 = ifft(Nx,Ny,Nz,dV,ktemp4515);

	ktemp4515.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4517[i] = rtemp4512[i] - 2494.3929463767595*rtemp4517[i];
	}

	rtemp4512.free(); // Realspace
	Vector rtemp4519(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4519[i] = 7.957747154594767e-2*rtemp681[i]*rtemp77[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4520(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4520 = fft(Nx,Ny,Nz,dV,rtemp4519);

	rtemp4519.free(); // Realspace
	{
		const int i = 0;
		ktemp4520[0] = 0.33333333333333337*R*R*R*ktemp4520[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4520[i] = std::complex<double>(ktemp4520[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4520[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4522(Nx*Ny*Nz); // RS
	rtemp4522 = ifft(Nx,Ny,Nz,dV,ktemp4520);

	ktemp4520.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4522[i] = rtemp4517[i] + 706.447007883951*rtemp4522[i];
	}

	rtemp4517.free(); // Realspace
	Vector rtemp4524(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4524[i] = 7.957747154594767e-2*rtemp688[i]*rtemp77[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4525(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4525 = fft(Nx,Ny,Nz,dV,rtemp4524);

	rtemp4524.free(); // Realspace
	{
		const int i = 0;
		ktemp4525[0] = 0.33333333333333337*R*R*R*ktemp4525[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4525[i] = std::complex<double>(ktemp4525[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4525[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4527(Nx*Ny*Nz); // RS
	rtemp4527 = ifft(Nx,Ny,Nz,dV,ktemp4525);

	ktemp4525.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4527[i] = rtemp4522[i] - 205.38557673030598*rtemp4527[i];
	}

	rtemp4522.free(); // Realspace
	Vector rtemp4529(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4529[i] = 7.957747154594767e-2*rtemp695[i]*rtemp77[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4530(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4530 = fft(Nx,Ny,Nz,dV,rtemp4529);

	rtemp4529.free(); // Realspace
	{
		const int i = 0;
		ktemp4530[0] = 0.33333333333333337*R*R*R*ktemp4530[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4530[i] = std::complex<double>(ktemp4530[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4530[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4532(Nx*Ny*Nz); // RS
	rtemp4532 = ifft(Nx,Ny,Nz,dV,ktemp4530);

	ktemp4530.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4532[i] = rtemp4527[i] + 2225.5065150051996*rtemp4532[i];
	}

	rtemp4527.free(); // Realspace
	Vector rtemp4534(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4534[i] = 7.957747154594767e-2*rtemp702[i]*rtemp77[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4535(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4535 = fft(Nx,Ny,Nz,dV,rtemp4534);

	rtemp4534.free(); // Realspace
	{
		const int i = 0;
		ktemp4535[0] = 0.33333333333333337*R*R*R*ktemp4535[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4535[i] = std::complex<double>(ktemp4535[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4535[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4537(Nx*Ny*Nz); // RS
	rtemp4537 = ifft(Nx,Ny,Nz,dV,ktemp4535);

	ktemp4535.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4537[i] = rtemp4532[i] + 1740.320297511868*rtemp4537[i];
	}

	rtemp4532.free(); // Realspace
	Vector rtemp4539(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4539[i] = 7.957747154594767e-2*rtemp709[i]*rtemp77[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4540(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4540 = fft(Nx,Ny,Nz,dV,rtemp4539);

	rtemp4539.free(); // Realspace
	{
		const int i = 0;
		ktemp4540[0] = 0.33333333333333337*R*R*R*ktemp4540[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4540[i] = std::complex<double>(ktemp4540[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4540[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4542(Nx*Ny*Nz); // RS
	rtemp4542 = ifft(Nx,Ny,Nz,dV,ktemp4540);

	ktemp4540.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4542[i] = rtemp4537[i] - 992.2008537695941*rtemp4542[i];
	}

	rtemp4537.free(); // Realspace
	Vector rtemp4544(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4544[i] = 7.957747154594767e-2*rtemp716[i]*rtemp81[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4545(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4545 = fft(Nx,Ny,Nz,dV,rtemp4544);

	rtemp4544.free(); // Realspace
	{
		const int i = 0;
		ktemp4545[0] = 0.33333333333333337*R*R*R*ktemp4545[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4545[i] = std::complex<double>(ktemp4545[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4545[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4547(Nx*Ny*Nz); // RS
	rtemp4547 = ifft(Nx,Ny,Nz,dV,ktemp4545);

	ktemp4545.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4547[i] = rtemp4542[i] + 325.4418800364269*rtemp4547[i];
	}

	rtemp4542.free(); // Realspace
	Vector rtemp4549(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4549[i] = 7.957747154594767e-2*rtemp723[i]*rtemp81[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4550(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4550 = fft(Nx,Ny,Nz,dV,rtemp4549);

	rtemp4549.free(); // Realspace
	{
		const int i = 0;
		ktemp4550[0] = 0.33333333333333337*R*R*R*ktemp4550[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4550[i] = std::complex<double>(ktemp4550[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4550[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4552(Nx*Ny*Nz); // RS
	rtemp4552 = ifft(Nx,Ny,Nz,dV,ktemp4550);

	ktemp4550.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4552[i] = rtemp4547[i] - 964.4192298640455*rtemp4552[i];
	}

	rtemp4547.free(); // Realspace
	Vector rtemp4554(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4554[i] = 7.957747154594767e-2*rtemp730[i]*rtemp81[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4555(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4555 = fft(Nx,Ny,Nz,dV,rtemp4554);

	rtemp4554.free(); // Realspace
	{
		const int i = 0;
		ktemp4555[0] = 0.33333333333333337*R*R*R*ktemp4555[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4555[i] = std::complex<double>(ktemp4555[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4555[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4557(Nx*Ny*Nz); // RS
	rtemp4557 = ifft(Nx,Ny,Nz,dV,ktemp4555);

	ktemp4555.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4557[i] = rtemp4552[i] + 642.946153242697*rtemp4557[i];
	}

	rtemp4552.free(); // Realspace
	Vector rtemp4559(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4559[i] = 7.957747154594767e-2*rtemp737[i]*rtemp81[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4560(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4560 = fft(Nx,Ny,Nz,dV,rtemp4559);

	rtemp4559.free(); // Realspace
	{
		const int i = 0;
		ktemp4560[0] = 0.33333333333333337*R*R*R*ktemp4560[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4560[i] = std::complex<double>(ktemp4560[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4560[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4562(Nx*Ny*Nz); // RS
	rtemp4562 = ifft(Nx,Ny,Nz,dV,ktemp4560);

	ktemp4560.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4562[i] = rtemp4557[i] - 1412.894015767902*rtemp4562[i];
	}

	rtemp4557.free(); // Realspace
	Vector rtemp4564(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4564[i] = 7.957747154594767e-2*rtemp744[i]*rtemp81[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4565(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4565 = fft(Nx,Ny,Nz,dV,rtemp4564);

	rtemp4564.free(); // Realspace
	{
		const int i = 0;
		ktemp4565[0] = 0.33333333333333337*R*R*R*ktemp4565[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4565[i] = std::complex<double>(ktemp4565[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4565[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4567(Nx*Ny*Nz); // RS
	rtemp4567 = ifft(Nx,Ny,Nz,dV,ktemp4565);

	ktemp4565.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4567[i] = rtemp4562[i] + 5810.328199674744*rtemp4567[i];
	}

	rtemp4562.free(); // Realspace
	Vector rtemp4569(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4569[i] = 7.957747154594767e-2*rtemp751[i]*rtemp81[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4570(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4570 = fft(Nx,Ny,Nz,dV,rtemp4569);

	rtemp4569.free(); // Realspace
	{
		const int i = 0;
		ktemp4570[0] = 0.33333333333333337*R*R*R*ktemp4570[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4570[i] = std::complex<double>(ktemp4570[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4570[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4572(Nx*Ny*Nz); // RS
	rtemp4572 = ifft(Nx,Ny,Nz,dV,ktemp4570);

	ktemp4570.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4572[i] = rtemp4567[i] + 1.9844017075391884*rtemp4572[i];
	}

	rtemp4567.free(); // Realspace
	Vector rtemp4574(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4574[i] = 7.957747154594767e-2*rtemp758[i]*rtemp81[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4575(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4575 = fft(Nx,Ny,Nz,dV,rtemp4574);

	rtemp4574.free(); // Realspace
	{
		const int i = 0;
		ktemp4575[0] = 0.33333333333333337*R*R*R*ktemp4575[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4575[i] = std::complex<double>(ktemp4575[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4575[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4577(Nx*Ny*Nz); // RS
	rtemp4577 = ifft(Nx,Ny,Nz,dV,ktemp4575);

	ktemp4575.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4577[i] = rtemp4572[i] - 4151.368372171983*rtemp4577[i];
	}

	rtemp4572.free(); // Realspace
	Vector rtemp4579(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4579[i] = 7.957747154594767e-2*rtemp765[i]*rtemp81[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4580(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4580 = fft(Nx,Ny,Nz,dV,rtemp4579);

	rtemp4579.free(); // Realspace
	{
		const int i = 0;
		ktemp4580[0] = 0.33333333333333337*R*R*R*ktemp4580[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4580[i] = std::complex<double>(ktemp4580[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4580[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4582(Nx*Ny*Nz); // RS
	rtemp4582 = ifft(Nx,Ny,Nz,dV,ktemp4580);

	ktemp4580.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4582[i] = rtemp4577[i] - 8737.320718295045*rtemp4582[i];
	}

	rtemp4577.free(); // Realspace
	Vector rtemp4584(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4584[i] = 7.957747154594767e-2*rtemp772[i]*rtemp81[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4585(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4585 = fft(Nx,Ny,Nz,dV,rtemp4584);

	rtemp4584.free(); // Realspace
	{
		const int i = 0;
		ktemp4585[0] = 0.33333333333333337*R*R*R*ktemp4585[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4585[i] = std::complex<double>(ktemp4585[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4585[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4587(Nx*Ny*Nz); // RS
	rtemp4587 = ifft(Nx,Ny,Nz,dV,ktemp4585);

	ktemp4585.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4587[i] = rtemp4582[i] + 7381.9743520457805*rtemp4587[i];
	}

	rtemp4582.free(); // Realspace
	Vector rtemp4589(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4589[i] = 7.957747154594767e-2*rtemp779[i]*rtemp81[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4590(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4590 = fft(Nx,Ny,Nz,dV,rtemp4589);

	rtemp4589.free(); // Realspace
	{
		const int i = 0;
		ktemp4590[0] = 0.33333333333333337*R*R*R*ktemp4590[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4590[i] = std::complex<double>(ktemp4590[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4590[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4592(Nx*Ny*Nz); // RS
	rtemp4592 = ifft(Nx,Ny,Nz,dV,ktemp4590);

	ktemp4590.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4592[i] = rtemp4587[i] - 1440.6756396734506*rtemp4592[i];
	}

	rtemp4587.free(); // Realspace
	Vector rtemp4594(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4594[i] = 7.957747154594767e-2*rtemp786[i]*rtemp81[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4595(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4595 = fft(Nx,Ny,Nz,dV,rtemp4594);

	rtemp4594.free(); // Realspace
	{
		const int i = 0;
		ktemp4595[0] = 0.33333333333333337*R*R*R*ktemp4595[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4595[i] = std::complex<double>(ktemp4595[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4595[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4597(Nx*Ny*Nz); // RS
	rtemp4597 = ifft(Nx,Ny,Nz,dV,ktemp4595);

	ktemp4595.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4597[i] = rtemp4592[i] - 53.578846103558085*rtemp4597[i];
	}

	rtemp4592.free(); // Realspace
	Vector rtemp4599(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4599[i] = 7.957747154594767e-2*rtemp793[i]*rtemp81[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4600(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4600 = fft(Nx,Ny,Nz,dV,rtemp4599);

	rtemp4599.free(); // Realspace
	{
		const int i = 0;
		ktemp4600[0] = 0.33333333333333337*R*R*R*ktemp4600[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4600[i] = std::complex<double>(ktemp4600[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4600[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4602(Nx*Ny*Nz); // RS
	rtemp4602 = ifft(Nx,Ny,Nz,dV,ktemp4600);

	ktemp4600.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4602[i] = rtemp4597[i] - 2494.3929463767595*rtemp4602[i];
	}

	rtemp4597.free(); // Realspace
	Vector rtemp4604(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4604[i] = 7.957747154594767e-2*rtemp800[i]*rtemp81[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4605(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4605 = fft(Nx,Ny,Nz,dV,rtemp4604);

	rtemp4604.free(); // Realspace
	{
		const int i = 0;
		ktemp4605[0] = 0.33333333333333337*R*R*R*ktemp4605[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4605[i] = std::complex<double>(ktemp4605[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4605[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4607(Nx*Ny*Nz); // RS
	rtemp4607 = ifft(Nx,Ny,Nz,dV,ktemp4605);

	ktemp4605.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4607[i] = rtemp4602[i] + 706.447007883951*rtemp4607[i];
	}

	rtemp4602.free(); // Realspace
	Vector rtemp4609(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4609[i] = 7.957747154594767e-2*rtemp807[i]*rtemp81[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4610(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4610 = fft(Nx,Ny,Nz,dV,rtemp4609);

	rtemp4609.free(); // Realspace
	{
		const int i = 0;
		ktemp4610[0] = 0.33333333333333337*R*R*R*ktemp4610[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4610[i] = std::complex<double>(ktemp4610[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4610[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4612(Nx*Ny*Nz); // RS
	rtemp4612 = ifft(Nx,Ny,Nz,dV,ktemp4610);

	ktemp4610.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4612[i] = rtemp4607[i] - 205.38557673030598*rtemp4612[i];
	}

	rtemp4607.free(); // Realspace
	Vector rtemp4614(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4614[i] = 7.957747154594767e-2*rtemp814[i]*rtemp81[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4615(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4615 = fft(Nx,Ny,Nz,dV,rtemp4614);

	rtemp4614.free(); // Realspace
	{
		const int i = 0;
		ktemp4615[0] = 0.33333333333333337*R*R*R*ktemp4615[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4615[i] = std::complex<double>(ktemp4615[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4615[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4617(Nx*Ny*Nz); // RS
	rtemp4617 = ifft(Nx,Ny,Nz,dV,ktemp4615);

	ktemp4615.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4617[i] = rtemp4612[i] + 2225.5065150051996*rtemp4617[i];
	}

	rtemp4612.free(); // Realspace
	Vector rtemp4619(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4619[i] = 7.957747154594767e-2*rtemp821[i]*rtemp81[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4620(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4620 = fft(Nx,Ny,Nz,dV,rtemp4619);

	rtemp4619.free(); // Realspace
	{
		const int i = 0;
		ktemp4620[0] = 0.33333333333333337*R*R*R*ktemp4620[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4620[i] = std::complex<double>(ktemp4620[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4620[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4622(Nx*Ny*Nz); // RS
	rtemp4622 = ifft(Nx,Ny,Nz,dV,ktemp4620);

	ktemp4620.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4622[i] = rtemp4617[i] + 1740.320297511868*rtemp4622[i];
	}

	rtemp4617.free(); // Realspace
	Vector rtemp4624(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4624[i] = 7.957747154594767e-2*rtemp828[i]*rtemp81[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4625(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4625 = fft(Nx,Ny,Nz,dV,rtemp4624);

	rtemp4624.free(); // Realspace
	{
		const int i = 0;
		ktemp4625[0] = 0.33333333333333337*R*R*R*ktemp4625[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4625[i] = std::complex<double>(ktemp4625[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4625[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4627(Nx*Ny*Nz); // RS
	rtemp4627 = ifft(Nx,Ny,Nz,dV,ktemp4625);

	ktemp4625.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4627[i] = rtemp4622[i] - 992.2008537695941*rtemp4627[i];
	}

	rtemp4622.free(); // Realspace
	Vector rtemp4629(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp4629[i] = 2.0*rtemp478[i]*rtemp67[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp4630(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4630 = fft(Nx,Ny,Nz,dV,rtemp4629);

	rtemp4629.free(); // Realspace
	{
		const int i = 0;
		ktemp4630[0] = 0.33333333333333337*R*R*R*ktemp4630[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4630[i] = std::complex<double>(ktemp4630[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4630[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4632(Nx*Ny*Nz); // RS
	rtemp4632 = ifft(Nx,Ny,Nz,dV,ktemp4630);

	ktemp4630.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4632[i] = rtemp4627[i] - 17.265227965638985*rtemp4632[i];
	}

	rtemp4627.free(); // Realspace
	Vector rtemp4634(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp4634[i] = 2.0*rtemp485[i]*rtemp67[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp4635(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4635 = fft(Nx,Ny,Nz,dV,rtemp4634);

	rtemp4634.free(); // Realspace
	{
		const int i = 0;
		ktemp4635[0] = 0.33333333333333337*R*R*R*ktemp4635[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4635[i] = std::complex<double>(ktemp4635[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4635[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4637(Nx*Ny*Nz); // RS
	rtemp4637 = ifft(Nx,Ny,Nz,dV,ktemp4635);

	ktemp4635.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4637[i] = rtemp4632[i] + 51.16402921524723*rtemp4637[i];
	}

	rtemp4632.free(); // Realspace
	Vector rtemp4639(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp4639[i] = 2.0*rtemp492[i]*rtemp67[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp4640(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4640 = fft(Nx,Ny,Nz,dV,rtemp4639);

	rtemp4639.free(); // Realspace
	{
		const int i = 0;
		ktemp4640[0] = 0.33333333333333337*R*R*R*ktemp4640[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4640[i] = std::complex<double>(ktemp4640[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4640[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4642(Nx*Ny*Nz); // RS
	rtemp4642 = ifft(Nx,Ny,Nz,dV,ktemp4640);

	ktemp4640.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4642[i] = rtemp4637[i] - 34.10935281016482*rtemp4642[i];
	}

	rtemp4637.free(); // Realspace
	Vector rtemp4644(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp4644[i] = 2.0*rtemp499[i]*rtemp67[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp4645(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4645 = fft(Nx,Ny,Nz,dV,rtemp4644);

	rtemp4644.free(); // Realspace
	{
		const int i = 0;
		ktemp4645[0] = 0.33333333333333337*R*R*R*ktemp4645[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4645[i] = std::complex<double>(ktemp4645[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4645[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4647(Nx*Ny*Nz); // RS
	rtemp4647 = ifft(Nx,Ny,Nz,dV,ktemp4645);

	ktemp4645.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4647[i] = rtemp4642[i] + 74.95635555813998*rtemp4647[i];
	}

	rtemp4642.free(); // Realspace
	Vector rtemp4649(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp4649[i] = 2.0*rtemp506[i]*rtemp67[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp4650(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4650 = fft(Nx,Ny,Nz,dV,rtemp4649);

	rtemp4649.free(); // Realspace
	{
		const int i = 0;
		ktemp4650[0] = 0.33333333333333337*R*R*R*ktemp4650[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4650[i] = std::complex<double>(ktemp4650[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4650[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4652(Nx*Ny*Nz); // RS
	rtemp4652 = ifft(Nx,Ny,Nz,dV,ktemp4650);

	ktemp4650.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4652[i] = rtemp4647[i] - 308.2474846548228*rtemp4652[i];
	}

	rtemp4647.free(); // Realspace
	Vector rtemp4654(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp4654[i] = 2.0*rtemp513[i]*rtemp67[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp4655(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4655 = fft(Nx,Ny,Nz,dV,rtemp4654);

	rtemp4654.free(); // Realspace
	{
		const int i = 0;
		ktemp4655[0] = 0.33333333333333337*R*R*R*ktemp4655[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4655[i] = std::complex<double>(ktemp4655[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4655[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4657(Nx*Ny*Nz); // RS
	rtemp4657 = ifft(Nx,Ny,Nz,dV,ktemp4655);

	ktemp4655.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4657[i] = rtemp4652[i] - 0.10527578027828648*rtemp4657[i];
	}

	rtemp4652.free(); // Realspace
	Vector rtemp4659(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp4659[i] = 2.0*rtemp520[i]*rtemp67[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp4660(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4660 = fft(Nx,Ny,Nz,dV,rtemp4659);

	rtemp4659.free(); // Realspace
	{
		const int i = 0;
		ktemp4660[0] = 0.33333333333333337*R*R*R*ktemp4660[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4660[i] = std::complex<double>(ktemp4660[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4660[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4662(Nx*Ny*Nz); // RS
	rtemp4662 = ifft(Nx,Ny,Nz,dV,ktemp4660);

	ktemp4660.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4662[i] = rtemp4657[i] + 220.23693234217532*rtemp4662[i];
	}

	rtemp4657.free(); // Realspace
	Vector rtemp4664(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp4664[i] = 2.0*rtemp527[i]*rtemp67[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp4665(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4665 = fft(Nx,Ny,Nz,dV,rtemp4664);

	rtemp4664.free(); // Realspace
	{
		const int i = 0;
		ktemp4665[0] = 0.33333333333333337*R*R*R*ktemp4665[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4665[i] = std::complex<double>(ktemp4665[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4665[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4667(Nx*Ny*Nz); // RS
	rtemp4667 = ifft(Nx,Ny,Nz,dV,ktemp4665);

	ktemp4665.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4667[i] = rtemp4662[i] + 463.5292605652953*rtemp4667[i];
	}

	rtemp4662.free(); // Realspace
	Vector rtemp4669(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp4669[i] = 2.0*rtemp534[i]*rtemp67[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp4670(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4670 = fft(Nx,Ny,Nz,dV,rtemp4669);

	rtemp4669.free(); // Realspace
	{
		const int i = 0;
		ktemp4670[0] = 0.33333333333333337*R*R*R*ktemp4670[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4670[i] = std::complex<double>(ktemp4670[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4670[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4672(Nx*Ny*Nz); // RS
	rtemp4672 = ifft(Nx,Ny,Nz,dV,ktemp4670);

	ktemp4670.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4672[i] = rtemp4667[i] - 391.6259026352257*rtemp4672[i];
	}

	rtemp4667.free(); // Realspace
	Vector rtemp4674(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp4674[i] = 2.0*rtemp541[i]*rtemp67[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp4675(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4675 = fft(Nx,Ny,Nz,dV,rtemp4674);

	rtemp4674.free(); // Realspace
	{
		const int i = 0;
		ktemp4675[0] = 0.33333333333333337*R*R*R*ktemp4675[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4675[i] = std::complex<double>(ktemp4675[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4675[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4677(Nx*Ny*Nz); // RS
	rtemp4677 = ifft(Nx,Ny,Nz,dV,ktemp4675);

	ktemp4675.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4677[i] = rtemp4672[i] + 76.43021648203597*rtemp4677[i];
	}

	rtemp4672.free(); // Realspace
	Vector rtemp4679(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp4679[i] = 2.0*rtemp548[i]*rtemp67[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp4680(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4680 = fft(Nx,Ny,Nz,dV,rtemp4679);

	rtemp4679.free(); // Realspace
	{
		const int i = 0;
		ktemp4680[0] = 0.33333333333333337*R*R*R*ktemp4680[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4680[i] = std::complex<double>(ktemp4680[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4680[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4682(Nx*Ny*Nz); // RS
	rtemp4682 = ifft(Nx,Ny,Nz,dV,ktemp4680);

	ktemp4680.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4682[i] = rtemp4677[i] + 2.842446067513735*rtemp4682[i];
	}

	rtemp4677.free(); // Realspace
	Vector rtemp4684(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp4684[i] = 2.0*rtemp555[i]*rtemp67[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp4685(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4685 = fft(Nx,Ny,Nz,dV,rtemp4684);

	rtemp4684.free(); // Realspace
	{
		const int i = 0;
		ktemp4685[0] = 0.33333333333333337*R*R*R*ktemp4685[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4685[i] = std::complex<double>(ktemp4685[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4685[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4687(Nx*Ny*Nz); // RS
	rtemp4687 = ifft(Nx,Ny,Nz,dV,ktemp4685);

	ktemp4685.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4687[i] = rtemp4682[i] + 132.3316558098061*rtemp4687[i];
	}

	rtemp4682.free(); // Realspace
	Vector rtemp4689(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp4689[i] = 2.0*rtemp562[i]*rtemp67[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp4690(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4690 = fft(Nx,Ny,Nz,dV,rtemp4689);

	rtemp4689.free(); // Realspace
	{
		const int i = 0;
		ktemp4690[0] = 0.33333333333333337*R*R*R*ktemp4690[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4690[i] = std::complex<double>(ktemp4690[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4690[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4692(Nx*Ny*Nz); // RS
	rtemp4692 = ifft(Nx,Ny,Nz,dV,ktemp4690);

	ktemp4690.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4692[i] = rtemp4687[i] - 37.47817777906999*rtemp4692[i];
	}

	rtemp4687.free(); // Realspace
	Vector rtemp4694(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp4694[i] = 2.0*rtemp569[i]*rtemp67[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp4695(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4695 = fft(Nx,Ny,Nz,dV,rtemp4694);

	rtemp4694.free(); // Realspace
	{
		const int i = 0;
		ktemp4695[0] = 0.33333333333333337*R*R*R*ktemp4695[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4695[i] = std::complex<double>(ktemp4695[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4695[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4697(Nx*Ny*Nz); // RS
	rtemp4697 = ifft(Nx,Ny,Nz,dV,ktemp4695);

	ktemp4695.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4697[i] = rtemp4692[i] + 10.89604325880265*rtemp4697[i];
	}

	rtemp4692.free(); // Realspace
	Vector rtemp4699(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp4699[i] = 2.0*rtemp576[i]*rtemp67[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp4700(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4700 = fft(Nx,Ny,Nz,dV,rtemp4699);

	rtemp4699.free(); // Realspace
	{
		const int i = 0;
		ktemp4700[0] = 0.33333333333333337*R*R*R*ktemp4700[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4700[i] = std::complex<double>(ktemp4700[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4700[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4702(Nx*Ny*Nz); // RS
	rtemp4702 = ifft(Nx,Ny,Nz,dV,ktemp4700);

	ktemp4700.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4702[i] = rtemp4697[i] - 118.06678758209827*rtemp4702[i];
	}

	rtemp4697.free(); // Realspace
	Vector rtemp4704(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp4704[i] = 2.0*rtemp583[i]*rtemp67[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp4705(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4705 = fft(Nx,Ny,Nz,dV,rtemp4704);

	rtemp4704.free(); // Realspace
	{
		const int i = 0;
		ktemp4705[0] = 0.33333333333333337*R*R*R*ktemp4705[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4705[i] = std::complex<double>(ktemp4705[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4705[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4707(Nx*Ny*Nz); // RS
	rtemp4707 = ifft(Nx,Ny,Nz,dV,ktemp4705);

	ktemp4705.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4707[i] = rtemp4702[i] - 92.32685930405724*rtemp4707[i];
	}

	rtemp4702.free(); // Realspace
	Vector rtemp4709(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp4709[i] = 2.0*rtemp590[i]*rtemp67[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp4710(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4710 = fft(Nx,Ny,Nz,dV,rtemp4709);

	rtemp4709.free(); // Realspace
	{
		const int i = 0;
		ktemp4710[0] = 0.33333333333333337*R*R*R*ktemp4710[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4710[i] = std::complex<double>(ktemp4710[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4710[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4712(Nx*Ny*Nz); // RS
	rtemp4712 = ifft(Nx,Ny,Nz,dV,ktemp4710);

	ktemp4710.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4712[i] = rtemp4707[i] + 52.63789013914324*rtemp4712[i];
	}

	rtemp4707.free(); // Realspace
	Vector rtemp4714(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp4714[i] = 2.0*rtemp478[i]*rtemp67[i]*rtemp73[i]*log(t1)/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp4715(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4715 = fft(Nx,Ny,Nz,dV,rtemp4714);

	rtemp4714.free(); // Realspace
	{
		const int i = 0;
		ktemp4715[0] = 0.33333333333333337*R*R*R*ktemp4715[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4715[i] = std::complex<double>(ktemp4715[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4715[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4717(Nx*Ny*Nz); // RS
	rtemp4717 = ifft(Nx,Ny,Nz,dV,ktemp4715);

	ktemp4715.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4717[i] = rtemp4712[i] - 17.265227965638985*rtemp4717[i];
	}

	rtemp4712.free(); // Realspace
	Vector rtemp4719(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp4719[i] = 2.0*rtemp478[i]*rtemp67[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp4720(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4720 = fft(Nx,Ny,Nz,dV,rtemp4719);

	rtemp4719.free(); // Realspace
	{
		const int i = 0;
		ktemp4720[0] = 0.33333333333333337*R*R*R*ktemp4720[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4720[i] = std::complex<double>(ktemp4720[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4720[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4722(Nx*Ny*Nz); // RS
	rtemp4722 = ifft(Nx,Ny,Nz,dV,ktemp4720);

	ktemp4720.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4722[i] = rtemp4717[i] + 17.265227965638985*rtemp4722[i];
	}

	rtemp4717.free(); // Realspace
	Vector rtemp4724(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4724[i] = 2.0*rtemp478[i]*rtemp67[i]*rtemp73[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4725(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4725 = fft(Nx,Ny,Nz,dV,rtemp4724);

	rtemp4724.free(); // Realspace
	{
		const int i = 0;
		ktemp4725[0] = 0.33333333333333337*R*R*R*ktemp4725[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4725[i] = std::complex<double>(ktemp4725[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4725[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4727(Nx*Ny*Nz); // RS
	rtemp4727 = ifft(Nx,Ny,Nz,dV,ktemp4725);

	ktemp4725.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4727[i] = rtemp4722[i] + 8.632613982819493*rtemp4727[i];
	}

	rtemp4722.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp478[i] = 2.0*rtemp478[i]*rtemp67[i]*rtemp73[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4730(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4730 = fft(Nx,Ny,Nz,dV,rtemp478);

	rtemp478.free(); // Realspace
	{
		const int i = 0;
		ktemp4730[0] = 0.33333333333333337*R*R*R*ktemp4730[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4730[i] = std::complex<double>(ktemp4730[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4730[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4732(Nx*Ny*Nz); // RS
	rtemp4732 = ifft(Nx,Ny,Nz,dV,ktemp4730);

	ktemp4730.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4732[i] = rtemp4727[i] - 8.632613982819493*rtemp4732[i];
	}

	rtemp4727.free(); // Realspace
	Vector rtemp4734(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp4734[i] = 2.0*rtemp485[i]*rtemp67[i]*rtemp73[i]*log(t1)/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp4735(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4735 = fft(Nx,Ny,Nz,dV,rtemp4734);

	rtemp4734.free(); // Realspace
	{
		const int i = 0;
		ktemp4735[0] = 0.33333333333333337*R*R*R*ktemp4735[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4735[i] = std::complex<double>(ktemp4735[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4735[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4737(Nx*Ny*Nz); // RS
	rtemp4737 = ifft(Nx,Ny,Nz,dV,ktemp4735);

	ktemp4735.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4737[i] = rtemp4732[i] + 51.16402921524723*rtemp4737[i];
	}

	rtemp4732.free(); // Realspace
	Vector rtemp4739(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp4739[i] = 2.0*rtemp485[i]*rtemp67[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp4740(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4740 = fft(Nx,Ny,Nz,dV,rtemp4739);

	rtemp4739.free(); // Realspace
	{
		const int i = 0;
		ktemp4740[0] = 0.33333333333333337*R*R*R*ktemp4740[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4740[i] = std::complex<double>(ktemp4740[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4740[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4742(Nx*Ny*Nz); // RS
	rtemp4742 = ifft(Nx,Ny,Nz,dV,ktemp4740);

	ktemp4740.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4742[i] = rtemp4737[i] - 51.16402921524723*rtemp4742[i];
	}

	rtemp4737.free(); // Realspace
	Vector rtemp4744(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4744[i] = 2.0*rtemp485[i]*rtemp67[i]*rtemp73[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4745(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4745 = fft(Nx,Ny,Nz,dV,rtemp4744);

	rtemp4744.free(); // Realspace
	{
		const int i = 0;
		ktemp4745[0] = 0.33333333333333337*R*R*R*ktemp4745[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4745[i] = std::complex<double>(ktemp4745[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4745[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4747(Nx*Ny*Nz); // RS
	rtemp4747 = ifft(Nx,Ny,Nz,dV,ktemp4745);

	ktemp4745.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4747[i] = rtemp4742[i] - 25.582014607623616*rtemp4747[i];
	}

	rtemp4742.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp485[i] = 2.0*rtemp485[i]*rtemp67[i]*rtemp73[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4750(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4750 = fft(Nx,Ny,Nz,dV,rtemp485);

	rtemp485.free(); // Realspace
	{
		const int i = 0;
		ktemp4750[0] = 0.33333333333333337*R*R*R*ktemp4750[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4750[i] = std::complex<double>(ktemp4750[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4750[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4752(Nx*Ny*Nz); // RS
	rtemp4752 = ifft(Nx,Ny,Nz,dV,ktemp4750);

	ktemp4750.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4752[i] = rtemp4747[i] + 25.582014607623616*rtemp4752[i];
	}

	rtemp4747.free(); // Realspace
	Vector rtemp4754(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp4754[i] = 2.0*rtemp492[i]*rtemp67[i]*rtemp73[i]*log(t1)/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp4755(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4755 = fft(Nx,Ny,Nz,dV,rtemp4754);

	rtemp4754.free(); // Realspace
	{
		const int i = 0;
		ktemp4755[0] = 0.33333333333333337*R*R*R*ktemp4755[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4755[i] = std::complex<double>(ktemp4755[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4755[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4757(Nx*Ny*Nz); // RS
	rtemp4757 = ifft(Nx,Ny,Nz,dV,ktemp4755);

	ktemp4755.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4757[i] = rtemp4752[i] - 34.10935281016482*rtemp4757[i];
	}

	rtemp4752.free(); // Realspace
	Vector rtemp4759(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp4759[i] = 2.0*rtemp492[i]*rtemp67[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp4760(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4760 = fft(Nx,Ny,Nz,dV,rtemp4759);

	rtemp4759.free(); // Realspace
	{
		const int i = 0;
		ktemp4760[0] = 0.33333333333333337*R*R*R*ktemp4760[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4760[i] = std::complex<double>(ktemp4760[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4760[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4762(Nx*Ny*Nz); // RS
	rtemp4762 = ifft(Nx,Ny,Nz,dV,ktemp4760);

	ktemp4760.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4762[i] = rtemp4757[i] + 34.10935281016482*rtemp4762[i];
	}

	rtemp4757.free(); // Realspace
	Vector rtemp4764(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4764[i] = 2.0*rtemp492[i]*rtemp67[i]*rtemp73[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4765(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4765 = fft(Nx,Ny,Nz,dV,rtemp4764);

	rtemp4764.free(); // Realspace
	{
		const int i = 0;
		ktemp4765[0] = 0.33333333333333337*R*R*R*ktemp4765[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4765[i] = std::complex<double>(ktemp4765[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4765[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4767(Nx*Ny*Nz); // RS
	rtemp4767 = ifft(Nx,Ny,Nz,dV,ktemp4765);

	ktemp4765.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4767[i] = rtemp4762[i] + 17.05467640508241*rtemp4767[i];
	}

	rtemp4762.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp492[i] = 2.0*rtemp492[i]*rtemp67[i]*rtemp73[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4770(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4770 = fft(Nx,Ny,Nz,dV,rtemp492);

	rtemp492.free(); // Realspace
	{
		const int i = 0;
		ktemp4770[0] = 0.33333333333333337*R*R*R*ktemp4770[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4770[i] = std::complex<double>(ktemp4770[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4770[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4772(Nx*Ny*Nz); // RS
	rtemp4772 = ifft(Nx,Ny,Nz,dV,ktemp4770);

	ktemp4770.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4772[i] = rtemp4767[i] - 17.05467640508241*rtemp4772[i];
	}

	rtemp4767.free(); // Realspace
	Vector rtemp4774(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp4774[i] = 2.0*rtemp499[i]*rtemp67[i]*rtemp73[i]*log(t1)/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp4775(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4775 = fft(Nx,Ny,Nz,dV,rtemp4774);

	rtemp4774.free(); // Realspace
	{
		const int i = 0;
		ktemp4775[0] = 0.33333333333333337*R*R*R*ktemp4775[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4775[i] = std::complex<double>(ktemp4775[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4775[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4777(Nx*Ny*Nz); // RS
	rtemp4777 = ifft(Nx,Ny,Nz,dV,ktemp4775);

	ktemp4775.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4777[i] = rtemp4772[i] + 74.95635555813998*rtemp4777[i];
	}

	rtemp4772.free(); // Realspace
	Vector rtemp4779(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp4779[i] = 2.0*rtemp499[i]*rtemp67[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp4780(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4780 = fft(Nx,Ny,Nz,dV,rtemp4779);

	rtemp4779.free(); // Realspace
	{
		const int i = 0;
		ktemp4780[0] = 0.33333333333333337*R*R*R*ktemp4780[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4780[i] = std::complex<double>(ktemp4780[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4780[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4782(Nx*Ny*Nz); // RS
	rtemp4782 = ifft(Nx,Ny,Nz,dV,ktemp4780);

	ktemp4780.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4782[i] = rtemp4777[i] - 74.95635555813998*rtemp4782[i];
	}

	rtemp4777.free(); // Realspace
	Vector rtemp4784(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4784[i] = 2.0*rtemp499[i]*rtemp67[i]*rtemp73[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4785(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4785 = fft(Nx,Ny,Nz,dV,rtemp4784);

	rtemp4784.free(); // Realspace
	{
		const int i = 0;
		ktemp4785[0] = 0.33333333333333337*R*R*R*ktemp4785[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4785[i] = std::complex<double>(ktemp4785[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4785[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4787(Nx*Ny*Nz); // RS
	rtemp4787 = ifft(Nx,Ny,Nz,dV,ktemp4785);

	ktemp4785.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4787[i] = rtemp4782[i] - 37.47817777906999*rtemp4787[i];
	}

	rtemp4782.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp499[i] = 2.0*rtemp499[i]*rtemp67[i]*rtemp73[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4790(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4790 = fft(Nx,Ny,Nz,dV,rtemp499);

	rtemp499.free(); // Realspace
	{
		const int i = 0;
		ktemp4790[0] = 0.33333333333333337*R*R*R*ktemp4790[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4790[i] = std::complex<double>(ktemp4790[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4790[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4792(Nx*Ny*Nz); // RS
	rtemp4792 = ifft(Nx,Ny,Nz,dV,ktemp4790);

	ktemp4790.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4792[i] = rtemp4787[i] + 37.47817777906999*rtemp4792[i];
	}

	rtemp4787.free(); // Realspace
	Vector rtemp4794(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp4794[i] = 2.0*rtemp506[i]*rtemp67[i]*rtemp73[i]*log(t1)/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp4795(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4795 = fft(Nx,Ny,Nz,dV,rtemp4794);

	rtemp4794.free(); // Realspace
	{
		const int i = 0;
		ktemp4795[0] = 0.33333333333333337*R*R*R*ktemp4795[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4795[i] = std::complex<double>(ktemp4795[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4795[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4797(Nx*Ny*Nz); // RS
	rtemp4797 = ifft(Nx,Ny,Nz,dV,ktemp4795);

	ktemp4795.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4797[i] = rtemp4792[i] - 308.2474846548228*rtemp4797[i];
	}

	rtemp4792.free(); // Realspace
	Vector rtemp4799(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp4799[i] = 2.0*rtemp506[i]*rtemp67[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp4800(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4800 = fft(Nx,Ny,Nz,dV,rtemp4799);

	rtemp4799.free(); // Realspace
	{
		const int i = 0;
		ktemp4800[0] = 0.33333333333333337*R*R*R*ktemp4800[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4800[i] = std::complex<double>(ktemp4800[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4800[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4802(Nx*Ny*Nz); // RS
	rtemp4802 = ifft(Nx,Ny,Nz,dV,ktemp4800);

	ktemp4800.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4802[i] = rtemp4797[i] + 308.2474846548228*rtemp4802[i];
	}

	rtemp4797.free(); // Realspace
	Vector rtemp4804(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4804[i] = 2.0*rtemp506[i]*rtemp67[i]*rtemp73[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4805(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4805 = fft(Nx,Ny,Nz,dV,rtemp4804);

	rtemp4804.free(); // Realspace
	{
		const int i = 0;
		ktemp4805[0] = 0.33333333333333337*R*R*R*ktemp4805[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4805[i] = std::complex<double>(ktemp4805[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4805[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4807(Nx*Ny*Nz); // RS
	rtemp4807 = ifft(Nx,Ny,Nz,dV,ktemp4805);

	ktemp4805.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4807[i] = rtemp4802[i] + 154.1237423274114*rtemp4807[i];
	}

	rtemp4802.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp506[i] = 2.0*rtemp506[i]*rtemp67[i]*rtemp73[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4810(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4810 = fft(Nx,Ny,Nz,dV,rtemp506);

	rtemp506.free(); // Realspace
	{
		const int i = 0;
		ktemp4810[0] = 0.33333333333333337*R*R*R*ktemp4810[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4810[i] = std::complex<double>(ktemp4810[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4810[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4812(Nx*Ny*Nz); // RS
	rtemp4812 = ifft(Nx,Ny,Nz,dV,ktemp4810);

	ktemp4810.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4812[i] = rtemp4807[i] - 154.1237423274114*rtemp4812[i];
	}

	rtemp4807.free(); // Realspace
	Vector rtemp4814(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp4814[i] = 2.0*rtemp513[i]*rtemp67[i]*rtemp73[i]*log(t1)/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp4815(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4815 = fft(Nx,Ny,Nz,dV,rtemp4814);

	rtemp4814.free(); // Realspace
	{
		const int i = 0;
		ktemp4815[0] = 0.33333333333333337*R*R*R*ktemp4815[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4815[i] = std::complex<double>(ktemp4815[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4815[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4817(Nx*Ny*Nz); // RS
	rtemp4817 = ifft(Nx,Ny,Nz,dV,ktemp4815);

	ktemp4815.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4817[i] = rtemp4812[i] - 0.10527578027828648*rtemp4817[i];
	}

	rtemp4812.free(); // Realspace
	Vector rtemp4819(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp4819[i] = 2.0*rtemp513[i]*rtemp67[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp4820(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4820 = fft(Nx,Ny,Nz,dV,rtemp4819);

	rtemp4819.free(); // Realspace
	{
		const int i = 0;
		ktemp4820[0] = 0.33333333333333337*R*R*R*ktemp4820[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4820[i] = std::complex<double>(ktemp4820[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4820[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4822(Nx*Ny*Nz); // RS
	rtemp4822 = ifft(Nx,Ny,Nz,dV,ktemp4820);

	ktemp4820.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4822[i] = rtemp4817[i] + 0.10527578027828648*rtemp4822[i];
	}

	rtemp4817.free(); // Realspace
	Vector rtemp4824(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4824[i] = 2.0*rtemp513[i]*rtemp67[i]*rtemp73[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4825(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4825 = fft(Nx,Ny,Nz,dV,rtemp4824);

	rtemp4824.free(); // Realspace
	{
		const int i = 0;
		ktemp4825[0] = 0.33333333333333337*R*R*R*ktemp4825[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4825[i] = std::complex<double>(ktemp4825[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4825[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4827(Nx*Ny*Nz); // RS
	rtemp4827 = ifft(Nx,Ny,Nz,dV,ktemp4825);

	ktemp4825.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4827[i] = rtemp4822[i] + 5.263789013914324e-2*rtemp4827[i];
	}

	rtemp4822.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp513[i] = 2.0*rtemp513[i]*rtemp67[i]*rtemp73[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4830(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4830 = fft(Nx,Ny,Nz,dV,rtemp513);

	rtemp513.free(); // Realspace
	{
		const int i = 0;
		ktemp4830[0] = 0.33333333333333337*R*R*R*ktemp4830[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4830[i] = std::complex<double>(ktemp4830[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4830[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4832(Nx*Ny*Nz); // RS
	rtemp4832 = ifft(Nx,Ny,Nz,dV,ktemp4830);

	ktemp4830.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4832[i] = rtemp4827[i] - 5.263789013914324e-2*rtemp4832[i];
	}

	rtemp4827.free(); // Realspace
	Vector rtemp4834(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp4834[i] = 2.0*rtemp520[i]*rtemp67[i]*rtemp73[i]*log(t1)/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp4835(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4835 = fft(Nx,Ny,Nz,dV,rtemp4834);

	rtemp4834.free(); // Realspace
	{
		const int i = 0;
		ktemp4835[0] = 0.33333333333333337*R*R*R*ktemp4835[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4835[i] = std::complex<double>(ktemp4835[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4835[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4837(Nx*Ny*Nz); // RS
	rtemp4837 = ifft(Nx,Ny,Nz,dV,ktemp4835);

	ktemp4835.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4837[i] = rtemp4832[i] + 220.23693234217532*rtemp4837[i];
	}

	rtemp4832.free(); // Realspace
	Vector rtemp4839(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp4839[i] = 2.0*rtemp520[i]*rtemp67[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp4840(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4840 = fft(Nx,Ny,Nz,dV,rtemp4839);

	rtemp4839.free(); // Realspace
	{
		const int i = 0;
		ktemp4840[0] = 0.33333333333333337*R*R*R*ktemp4840[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4840[i] = std::complex<double>(ktemp4840[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4840[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4842(Nx*Ny*Nz); // RS
	rtemp4842 = ifft(Nx,Ny,Nz,dV,ktemp4840);

	ktemp4840.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4842[i] = rtemp4837[i] - 220.23693234217532*rtemp4842[i];
	}

	rtemp4837.free(); // Realspace
	Vector rtemp4844(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4844[i] = 2.0*rtemp520[i]*rtemp67[i]*rtemp73[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4845(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4845 = fft(Nx,Ny,Nz,dV,rtemp4844);

	rtemp4844.free(); // Realspace
	{
		const int i = 0;
		ktemp4845[0] = 0.33333333333333337*R*R*R*ktemp4845[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4845[i] = std::complex<double>(ktemp4845[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4845[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4847(Nx*Ny*Nz); // RS
	rtemp4847 = ifft(Nx,Ny,Nz,dV,ktemp4845);

	ktemp4845.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4847[i] = rtemp4842[i] - 110.11846617108766*rtemp4847[i];
	}

	rtemp4842.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp520[i] = 2.0*rtemp520[i]*rtemp67[i]*rtemp73[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4850(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4850 = fft(Nx,Ny,Nz,dV,rtemp520);

	rtemp520.free(); // Realspace
	{
		const int i = 0;
		ktemp4850[0] = 0.33333333333333337*R*R*R*ktemp4850[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4850[i] = std::complex<double>(ktemp4850[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4850[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4852(Nx*Ny*Nz); // RS
	rtemp4852 = ifft(Nx,Ny,Nz,dV,ktemp4850);

	ktemp4850.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4852[i] = rtemp4847[i] + 110.11846617108766*rtemp4852[i];
	}

	rtemp4847.free(); // Realspace
	Vector rtemp4854(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp4854[i] = 2.0*rtemp527[i]*rtemp67[i]*rtemp73[i]*log(t1)/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp4855(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4855 = fft(Nx,Ny,Nz,dV,rtemp4854);

	rtemp4854.free(); // Realspace
	{
		const int i = 0;
		ktemp4855[0] = 0.33333333333333337*R*R*R*ktemp4855[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4855[i] = std::complex<double>(ktemp4855[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4855[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4857(Nx*Ny*Nz); // RS
	rtemp4857 = ifft(Nx,Ny,Nz,dV,ktemp4855);

	ktemp4855.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4857[i] = rtemp4852[i] + 463.5292605652953*rtemp4857[i];
	}

	rtemp4852.free(); // Realspace
	Vector rtemp4859(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp4859[i] = 2.0*rtemp527[i]*rtemp67[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp4860(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4860 = fft(Nx,Ny,Nz,dV,rtemp4859);

	rtemp4859.free(); // Realspace
	{
		const int i = 0;
		ktemp4860[0] = 0.33333333333333337*R*R*R*ktemp4860[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4860[i] = std::complex<double>(ktemp4860[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4860[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4862(Nx*Ny*Nz); // RS
	rtemp4862 = ifft(Nx,Ny,Nz,dV,ktemp4860);

	ktemp4860.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4862[i] = rtemp4857[i] - 463.5292605652953*rtemp4862[i];
	}

	rtemp4857.free(); // Realspace
	Vector rtemp4864(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4864[i] = 2.0*rtemp527[i]*rtemp67[i]*rtemp73[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4865(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4865 = fft(Nx,Ny,Nz,dV,rtemp4864);

	rtemp4864.free(); // Realspace
	{
		const int i = 0;
		ktemp4865[0] = 0.33333333333333337*R*R*R*ktemp4865[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4865[i] = std::complex<double>(ktemp4865[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4865[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4867(Nx*Ny*Nz); // RS
	rtemp4867 = ifft(Nx,Ny,Nz,dV,ktemp4865);

	ktemp4865.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4867[i] = rtemp4862[i] - 231.76463028264766*rtemp4867[i];
	}

	rtemp4862.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp527[i] = 2.0*rtemp527[i]*rtemp67[i]*rtemp73[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4870(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4870 = fft(Nx,Ny,Nz,dV,rtemp527);

	rtemp527.free(); // Realspace
	{
		const int i = 0;
		ktemp4870[0] = 0.33333333333333337*R*R*R*ktemp4870[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4870[i] = std::complex<double>(ktemp4870[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4870[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4872(Nx*Ny*Nz); // RS
	rtemp4872 = ifft(Nx,Ny,Nz,dV,ktemp4870);

	ktemp4870.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4872[i] = rtemp4867[i] + 231.76463028264766*rtemp4872[i];
	}

	rtemp4867.free(); // Realspace
	Vector rtemp4874(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp4874[i] = 2.0*rtemp534[i]*rtemp67[i]*rtemp73[i]*log(t1)/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp4875(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4875 = fft(Nx,Ny,Nz,dV,rtemp4874);

	rtemp4874.free(); // Realspace
	{
		const int i = 0;
		ktemp4875[0] = 0.33333333333333337*R*R*R*ktemp4875[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4875[i] = std::complex<double>(ktemp4875[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4875[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4877(Nx*Ny*Nz); // RS
	rtemp4877 = ifft(Nx,Ny,Nz,dV,ktemp4875);

	ktemp4875.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4877[i] = rtemp4872[i] - 391.6259026352257*rtemp4877[i];
	}

	rtemp4872.free(); // Realspace
	Vector rtemp4879(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp4879[i] = 2.0*rtemp534[i]*rtemp67[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp4880(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4880 = fft(Nx,Ny,Nz,dV,rtemp4879);

	rtemp4879.free(); // Realspace
	{
		const int i = 0;
		ktemp4880[0] = 0.33333333333333337*R*R*R*ktemp4880[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4880[i] = std::complex<double>(ktemp4880[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4880[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4882(Nx*Ny*Nz); // RS
	rtemp4882 = ifft(Nx,Ny,Nz,dV,ktemp4880);

	ktemp4880.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4882[i] = rtemp4877[i] + 391.6259026352257*rtemp4882[i];
	}

	rtemp4877.free(); // Realspace
	Vector rtemp4884(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4884[i] = 2.0*rtemp534[i]*rtemp67[i]*rtemp73[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4885(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4885 = fft(Nx,Ny,Nz,dV,rtemp4884);

	rtemp4884.free(); // Realspace
	{
		const int i = 0;
		ktemp4885[0] = 0.33333333333333337*R*R*R*ktemp4885[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4885[i] = std::complex<double>(ktemp4885[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4885[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4887(Nx*Ny*Nz); // RS
	rtemp4887 = ifft(Nx,Ny,Nz,dV,ktemp4885);

	ktemp4885.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4887[i] = rtemp4882[i] + 195.81295131761286*rtemp4887[i];
	}

	rtemp4882.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp534[i] = 2.0*rtemp534[i]*rtemp67[i]*rtemp73[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4890(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4890 = fft(Nx,Ny,Nz,dV,rtemp534);

	rtemp534.free(); // Realspace
	{
		const int i = 0;
		ktemp4890[0] = 0.33333333333333337*R*R*R*ktemp4890[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4890[i] = std::complex<double>(ktemp4890[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4890[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4892(Nx*Ny*Nz); // RS
	rtemp4892 = ifft(Nx,Ny,Nz,dV,ktemp4890);

	ktemp4890.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4892[i] = rtemp4887[i] - 195.81295131761286*rtemp4892[i];
	}

	rtemp4887.free(); // Realspace
	Vector rtemp4894(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp4894[i] = 2.0*rtemp541[i]*rtemp67[i]*rtemp73[i]*log(t1)/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp4895(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4895 = fft(Nx,Ny,Nz,dV,rtemp4894);

	rtemp4894.free(); // Realspace
	{
		const int i = 0;
		ktemp4895[0] = 0.33333333333333337*R*R*R*ktemp4895[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4895[i] = std::complex<double>(ktemp4895[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4895[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4897(Nx*Ny*Nz); // RS
	rtemp4897 = ifft(Nx,Ny,Nz,dV,ktemp4895);

	ktemp4895.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4897[i] = rtemp4892[i] + 76.43021648203597*rtemp4897[i];
	}

	rtemp4892.free(); // Realspace
	Vector rtemp4899(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp4899[i] = 2.0*rtemp541[i]*rtemp67[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp4900(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4900 = fft(Nx,Ny,Nz,dV,rtemp4899);

	rtemp4899.free(); // Realspace
	{
		const int i = 0;
		ktemp4900[0] = 0.33333333333333337*R*R*R*ktemp4900[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4900[i] = std::complex<double>(ktemp4900[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4900[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4902(Nx*Ny*Nz); // RS
	rtemp4902 = ifft(Nx,Ny,Nz,dV,ktemp4900);

	ktemp4900.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4902[i] = rtemp4897[i] - 76.43021648203597*rtemp4902[i];
	}

	rtemp4897.free(); // Realspace
	Vector rtemp4904(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4904[i] = 2.0*rtemp541[i]*rtemp67[i]*rtemp73[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4905(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4905 = fft(Nx,Ny,Nz,dV,rtemp4904);

	rtemp4904.free(); // Realspace
	{
		const int i = 0;
		ktemp4905[0] = 0.33333333333333337*R*R*R*ktemp4905[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4905[i] = std::complex<double>(ktemp4905[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4905[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4907(Nx*Ny*Nz); // RS
	rtemp4907 = ifft(Nx,Ny,Nz,dV,ktemp4905);

	ktemp4905.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4907[i] = rtemp4902[i] - 38.21510824101799*rtemp4907[i];
	}

	rtemp4902.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp541[i] = 2.0*rtemp541[i]*rtemp67[i]*rtemp73[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4910(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4910 = fft(Nx,Ny,Nz,dV,rtemp541);

	rtemp541.free(); // Realspace
	{
		const int i = 0;
		ktemp4910[0] = 0.33333333333333337*R*R*R*ktemp4910[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4910[i] = std::complex<double>(ktemp4910[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4910[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4912(Nx*Ny*Nz); // RS
	rtemp4912 = ifft(Nx,Ny,Nz,dV,ktemp4910);

	ktemp4910.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4912[i] = rtemp4907[i] + 38.21510824101799*rtemp4912[i];
	}

	rtemp4907.free(); // Realspace
	Vector rtemp4914(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp4914[i] = 2.0*rtemp548[i]*rtemp67[i]*rtemp73[i]*log(t1)/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp4915(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4915 = fft(Nx,Ny,Nz,dV,rtemp4914);

	rtemp4914.free(); // Realspace
	{
		const int i = 0;
		ktemp4915[0] = 0.33333333333333337*R*R*R*ktemp4915[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4915[i] = std::complex<double>(ktemp4915[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4915[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4917(Nx*Ny*Nz); // RS
	rtemp4917 = ifft(Nx,Ny,Nz,dV,ktemp4915);

	ktemp4915.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4917[i] = rtemp4912[i] + 2.842446067513735*rtemp4917[i];
	}

	rtemp4912.free(); // Realspace
	Vector rtemp4919(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp4919[i] = 2.0*rtemp548[i]*rtemp67[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp4920(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4920 = fft(Nx,Ny,Nz,dV,rtemp4919);

	rtemp4919.free(); // Realspace
	{
		const int i = 0;
		ktemp4920[0] = 0.33333333333333337*R*R*R*ktemp4920[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4920[i] = std::complex<double>(ktemp4920[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4920[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4922(Nx*Ny*Nz); // RS
	rtemp4922 = ifft(Nx,Ny,Nz,dV,ktemp4920);

	ktemp4920.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4922[i] = rtemp4917[i] - 2.842446067513735*rtemp4922[i];
	}

	rtemp4917.free(); // Realspace
	Vector rtemp4924(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4924[i] = 2.0*rtemp548[i]*rtemp67[i]*rtemp73[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4925(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4925 = fft(Nx,Ny,Nz,dV,rtemp4924);

	rtemp4924.free(); // Realspace
	{
		const int i = 0;
		ktemp4925[0] = 0.33333333333333337*R*R*R*ktemp4925[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4925[i] = std::complex<double>(ktemp4925[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4925[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4927(Nx*Ny*Nz); // RS
	rtemp4927 = ifft(Nx,Ny,Nz,dV,ktemp4925);

	ktemp4925.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4927[i] = rtemp4922[i] - 1.4212230337568674*rtemp4927[i];
	}

	rtemp4922.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp548[i] = 2.0*rtemp548[i]*rtemp67[i]*rtemp73[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4930(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4930 = fft(Nx,Ny,Nz,dV,rtemp548);

	rtemp548.free(); // Realspace
	{
		const int i = 0;
		ktemp4930[0] = 0.33333333333333337*R*R*R*ktemp4930[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4930[i] = std::complex<double>(ktemp4930[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4930[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4932(Nx*Ny*Nz); // RS
	rtemp4932 = ifft(Nx,Ny,Nz,dV,ktemp4930);

	ktemp4930.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4932[i] = rtemp4927[i] + 1.4212230337568674*rtemp4932[i];
	}

	rtemp4927.free(); // Realspace
	Vector rtemp4934(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp4934[i] = 2.0*rtemp555[i]*rtemp67[i]*rtemp73[i]*log(t1)/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp4935(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4935 = fft(Nx,Ny,Nz,dV,rtemp4934);

	rtemp4934.free(); // Realspace
	{
		const int i = 0;
		ktemp4935[0] = 0.33333333333333337*R*R*R*ktemp4935[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4935[i] = std::complex<double>(ktemp4935[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4935[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4937(Nx*Ny*Nz); // RS
	rtemp4937 = ifft(Nx,Ny,Nz,dV,ktemp4935);

	ktemp4935.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4937[i] = rtemp4932[i] + 132.3316558098061*rtemp4937[i];
	}

	rtemp4932.free(); // Realspace
	Vector rtemp4939(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp4939[i] = 2.0*rtemp555[i]*rtemp67[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp4940(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4940 = fft(Nx,Ny,Nz,dV,rtemp4939);

	rtemp4939.free(); // Realspace
	{
		const int i = 0;
		ktemp4940[0] = 0.33333333333333337*R*R*R*ktemp4940[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4940[i] = std::complex<double>(ktemp4940[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4940[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4942(Nx*Ny*Nz); // RS
	rtemp4942 = ifft(Nx,Ny,Nz,dV,ktemp4940);

	ktemp4940.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4942[i] = rtemp4937[i] - 132.3316558098061*rtemp4942[i];
	}

	rtemp4937.free(); // Realspace
	Vector rtemp4944(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4944[i] = 2.0*rtemp555[i]*rtemp67[i]*rtemp73[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4945(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4945 = fft(Nx,Ny,Nz,dV,rtemp4944);

	rtemp4944.free(); // Realspace
	{
		const int i = 0;
		ktemp4945[0] = 0.33333333333333337*R*R*R*ktemp4945[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4945[i] = std::complex<double>(ktemp4945[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4945[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4947(Nx*Ny*Nz); // RS
	rtemp4947 = ifft(Nx,Ny,Nz,dV,ktemp4945);

	ktemp4945.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4947[i] = rtemp4942[i] - 66.16582790490305*rtemp4947[i];
	}

	rtemp4942.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp555[i] = 2.0*rtemp555[i]*rtemp67[i]*rtemp73[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4950(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4950 = fft(Nx,Ny,Nz,dV,rtemp555);

	rtemp555.free(); // Realspace
	{
		const int i = 0;
		ktemp4950[0] = 0.33333333333333337*R*R*R*ktemp4950[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4950[i] = std::complex<double>(ktemp4950[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4950[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4952(Nx*Ny*Nz); // RS
	rtemp4952 = ifft(Nx,Ny,Nz,dV,ktemp4950);

	ktemp4950.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4952[i] = rtemp4947[i] + 66.16582790490305*rtemp4952[i];
	}

	rtemp4947.free(); // Realspace
	Vector rtemp4954(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp4954[i] = 2.0*rtemp562[i]*rtemp67[i]*rtemp73[i]*log(t1)/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp4955(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4955 = fft(Nx,Ny,Nz,dV,rtemp4954);

	rtemp4954.free(); // Realspace
	{
		const int i = 0;
		ktemp4955[0] = 0.33333333333333337*R*R*R*ktemp4955[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4955[i] = std::complex<double>(ktemp4955[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4955[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4957(Nx*Ny*Nz); // RS
	rtemp4957 = ifft(Nx,Ny,Nz,dV,ktemp4955);

	ktemp4955.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4957[i] = rtemp4952[i] - 37.47817777906999*rtemp4957[i];
	}

	rtemp4952.free(); // Realspace
	Vector rtemp4959(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp4959[i] = 2.0*rtemp562[i]*rtemp67[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp4960(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4960 = fft(Nx,Ny,Nz,dV,rtemp4959);

	rtemp4959.free(); // Realspace
	{
		const int i = 0;
		ktemp4960[0] = 0.33333333333333337*R*R*R*ktemp4960[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4960[i] = std::complex<double>(ktemp4960[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4960[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4962(Nx*Ny*Nz); // RS
	rtemp4962 = ifft(Nx,Ny,Nz,dV,ktemp4960);

	ktemp4960.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4962[i] = rtemp4957[i] + 37.47817777906999*rtemp4962[i];
	}

	rtemp4957.free(); // Realspace
	Vector rtemp4964(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4964[i] = 2.0*rtemp562[i]*rtemp67[i]*rtemp73[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4965(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4965 = fft(Nx,Ny,Nz,dV,rtemp4964);

	rtemp4964.free(); // Realspace
	{
		const int i = 0;
		ktemp4965[0] = 0.33333333333333337*R*R*R*ktemp4965[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4965[i] = std::complex<double>(ktemp4965[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4965[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4967(Nx*Ny*Nz); // RS
	rtemp4967 = ifft(Nx,Ny,Nz,dV,ktemp4965);

	ktemp4965.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4967[i] = rtemp4962[i] + 18.739088889534994*rtemp4967[i];
	}

	rtemp4962.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp562[i] = 2.0*rtemp562[i]*rtemp67[i]*rtemp73[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4970(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4970 = fft(Nx,Ny,Nz,dV,rtemp562);

	rtemp562.free(); // Realspace
	{
		const int i = 0;
		ktemp4970[0] = 0.33333333333333337*R*R*R*ktemp4970[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4970[i] = std::complex<double>(ktemp4970[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4970[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4972(Nx*Ny*Nz); // RS
	rtemp4972 = ifft(Nx,Ny,Nz,dV,ktemp4970);

	ktemp4970.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4972[i] = rtemp4967[i] - 18.739088889534994*rtemp4972[i];
	}

	rtemp4967.free(); // Realspace
	Vector rtemp4974(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp4974[i] = 2.0*rtemp569[i]*rtemp67[i]*rtemp73[i]*log(t1)/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp4975(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4975 = fft(Nx,Ny,Nz,dV,rtemp4974);

	rtemp4974.free(); // Realspace
	{
		const int i = 0;
		ktemp4975[0] = 0.33333333333333337*R*R*R*ktemp4975[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4975[i] = std::complex<double>(ktemp4975[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4975[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4977(Nx*Ny*Nz); // RS
	rtemp4977 = ifft(Nx,Ny,Nz,dV,ktemp4975);

	ktemp4975.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4977[i] = rtemp4972[i] + 10.89604325880265*rtemp4977[i];
	}

	rtemp4972.free(); // Realspace
	Vector rtemp4979(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp4979[i] = 2.0*rtemp569[i]*rtemp67[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp4980(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4980 = fft(Nx,Ny,Nz,dV,rtemp4979);

	rtemp4979.free(); // Realspace
	{
		const int i = 0;
		ktemp4980[0] = 0.33333333333333337*R*R*R*ktemp4980[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4980[i] = std::complex<double>(ktemp4980[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4980[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4982(Nx*Ny*Nz); // RS
	rtemp4982 = ifft(Nx,Ny,Nz,dV,ktemp4980);

	ktemp4980.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4982[i] = rtemp4977[i] - 10.89604325880265*rtemp4982[i];
	}

	rtemp4977.free(); // Realspace
	Vector rtemp4984(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4984[i] = 2.0*rtemp569[i]*rtemp67[i]*rtemp73[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4985(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4985 = fft(Nx,Ny,Nz,dV,rtemp4984);

	rtemp4984.free(); // Realspace
	{
		const int i = 0;
		ktemp4985[0] = 0.33333333333333337*R*R*R*ktemp4985[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4985[i] = std::complex<double>(ktemp4985[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4985[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4987(Nx*Ny*Nz); // RS
	rtemp4987 = ifft(Nx,Ny,Nz,dV,ktemp4985);

	ktemp4985.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4987[i] = rtemp4982[i] - 5.448021629401325*rtemp4987[i];
	}

	rtemp4982.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp569[i] = 2.0*rtemp569[i]*rtemp67[i]*rtemp73[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp4990(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4990 = fft(Nx,Ny,Nz,dV,rtemp569);

	rtemp569.free(); // Realspace
	{
		const int i = 0;
		ktemp4990[0] = 0.33333333333333337*R*R*R*ktemp4990[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4990[i] = std::complex<double>(ktemp4990[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4990[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4992(Nx*Ny*Nz); // RS
	rtemp4992 = ifft(Nx,Ny,Nz,dV,ktemp4990);

	ktemp4990.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4992[i] = rtemp4987[i] + 5.448021629401325*rtemp4992[i];
	}

	rtemp4987.free(); // Realspace
	Vector rtemp4994(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp4994[i] = 2.0*rtemp576[i]*rtemp67[i]*rtemp73[i]*log(t1)/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp4995(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp4995 = fft(Nx,Ny,Nz,dV,rtemp4994);

	rtemp4994.free(); // Realspace
	{
		const int i = 0;
		ktemp4995[0] = 0.33333333333333337*R*R*R*ktemp4995[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4995[i] = std::complex<double>(ktemp4995[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp4995[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4997(Nx*Ny*Nz); // RS
	rtemp4997 = ifft(Nx,Ny,Nz,dV,ktemp4995);

	ktemp4995.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4997[i] = rtemp4992[i] - 118.06678758209827*rtemp4997[i];
	}

	rtemp4992.free(); // Realspace
	Vector rtemp4999(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp4999[i] = 2.0*rtemp576[i]*rtemp67[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5000(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5000 = fft(Nx,Ny,Nz,dV,rtemp4999);

	rtemp4999.free(); // Realspace
	{
		const int i = 0;
		ktemp5000[0] = 0.33333333333333337*R*R*R*ktemp5000[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5000[i] = std::complex<double>(ktemp5000[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5000[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5002(Nx*Ny*Nz); // RS
	rtemp5002 = ifft(Nx,Ny,Nz,dV,ktemp5000);

	ktemp5000.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5002[i] = rtemp4997[i] + 118.06678758209827*rtemp5002[i];
	}

	rtemp4997.free(); // Realspace
	Vector rtemp5004(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5004[i] = 2.0*rtemp576[i]*rtemp67[i]*rtemp73[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5005(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5005 = fft(Nx,Ny,Nz,dV,rtemp5004);

	rtemp5004.free(); // Realspace
	{
		const int i = 0;
		ktemp5005[0] = 0.33333333333333337*R*R*R*ktemp5005[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5005[i] = std::complex<double>(ktemp5005[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5005[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5007(Nx*Ny*Nz); // RS
	rtemp5007 = ifft(Nx,Ny,Nz,dV,ktemp5005);

	ktemp5005.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5007[i] = rtemp5002[i] + 59.033393791049136*rtemp5007[i];
	}

	rtemp5002.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp576[i] = 2.0*rtemp576[i]*rtemp67[i]*rtemp73[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5010(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5010 = fft(Nx,Ny,Nz,dV,rtemp576);

	rtemp576.free(); // Realspace
	{
		const int i = 0;
		ktemp5010[0] = 0.33333333333333337*R*R*R*ktemp5010[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5010[i] = std::complex<double>(ktemp5010[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5010[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5012(Nx*Ny*Nz); // RS
	rtemp5012 = ifft(Nx,Ny,Nz,dV,ktemp5010);

	ktemp5010.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5012[i] = rtemp5007[i] - 59.033393791049136*rtemp5012[i];
	}

	rtemp5007.free(); // Realspace
	Vector rtemp5014(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5014[i] = 2.0*rtemp583[i]*rtemp67[i]*rtemp73[i]*log(t1)/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5015(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5015 = fft(Nx,Ny,Nz,dV,rtemp5014);

	rtemp5014.free(); // Realspace
	{
		const int i = 0;
		ktemp5015[0] = 0.33333333333333337*R*R*R*ktemp5015[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5015[i] = std::complex<double>(ktemp5015[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5015[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5017(Nx*Ny*Nz); // RS
	rtemp5017 = ifft(Nx,Ny,Nz,dV,ktemp5015);

	ktemp5015.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5017[i] = rtemp5012[i] - 92.32685930405724*rtemp5017[i];
	}

	rtemp5012.free(); // Realspace
	Vector rtemp5019(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5019[i] = 2.0*rtemp583[i]*rtemp67[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5020(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5020 = fft(Nx,Ny,Nz,dV,rtemp5019);

	rtemp5019.free(); // Realspace
	{
		const int i = 0;
		ktemp5020[0] = 0.33333333333333337*R*R*R*ktemp5020[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5020[i] = std::complex<double>(ktemp5020[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5020[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5022(Nx*Ny*Nz); // RS
	rtemp5022 = ifft(Nx,Ny,Nz,dV,ktemp5020);

	ktemp5020.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5022[i] = rtemp5017[i] + 92.32685930405724*rtemp5022[i];
	}

	rtemp5017.free(); // Realspace
	Vector rtemp5024(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5024[i] = 2.0*rtemp583[i]*rtemp67[i]*rtemp73[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5025(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5025 = fft(Nx,Ny,Nz,dV,rtemp5024);

	rtemp5024.free(); // Realspace
	{
		const int i = 0;
		ktemp5025[0] = 0.33333333333333337*R*R*R*ktemp5025[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5025[i] = std::complex<double>(ktemp5025[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5025[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5027(Nx*Ny*Nz); // RS
	rtemp5027 = ifft(Nx,Ny,Nz,dV,ktemp5025);

	ktemp5025.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5027[i] = rtemp5022[i] + 46.16342965202862*rtemp5027[i];
	}

	rtemp5022.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp583[i] = 2.0*rtemp583[i]*rtemp67[i]*rtemp73[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5030(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5030 = fft(Nx,Ny,Nz,dV,rtemp583);

	rtemp583.free(); // Realspace
	{
		const int i = 0;
		ktemp5030[0] = 0.33333333333333337*R*R*R*ktemp5030[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5030[i] = std::complex<double>(ktemp5030[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5030[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5032(Nx*Ny*Nz); // RS
	rtemp5032 = ifft(Nx,Ny,Nz,dV,ktemp5030);

	ktemp5030.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5032[i] = rtemp5027[i] - 46.16342965202862*rtemp5032[i];
	}

	rtemp5027.free(); // Realspace
	Vector rtemp5034(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5034[i] = 2.0*rtemp590[i]*rtemp67[i]*rtemp73[i]*log(t1)/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5035(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5035 = fft(Nx,Ny,Nz,dV,rtemp5034);

	rtemp5034.free(); // Realspace
	{
		const int i = 0;
		ktemp5035[0] = 0.33333333333333337*R*R*R*ktemp5035[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5035[i] = std::complex<double>(ktemp5035[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5035[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5037(Nx*Ny*Nz); // RS
	rtemp5037 = ifft(Nx,Ny,Nz,dV,ktemp5035);

	ktemp5035.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5037[i] = rtemp5032[i] + 52.63789013914324*rtemp5037[i];
	}

	rtemp5032.free(); // Realspace
	Vector rtemp5039(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5039[i] = 2.0*rtemp590[i]*rtemp67[i]*rtemp73[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5040(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5040 = fft(Nx,Ny,Nz,dV,rtemp5039);

	rtemp5039.free(); // Realspace
	{
		const int i = 0;
		ktemp5040[0] = 0.33333333333333337*R*R*R*ktemp5040[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5040[i] = std::complex<double>(ktemp5040[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5040[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5042(Nx*Ny*Nz); // RS
	rtemp5042 = ifft(Nx,Ny,Nz,dV,ktemp5040);

	ktemp5040.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5042[i] = rtemp5037[i] - 52.63789013914324*rtemp5042[i];
	}

	rtemp5037.free(); // Realspace
	Vector rtemp5044(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5044[i] = 2.0*rtemp590[i]*rtemp67[i]*rtemp73[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5045(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5045 = fft(Nx,Ny,Nz,dV,rtemp5044);

	rtemp5044.free(); // Realspace
	{
		const int i = 0;
		ktemp5045[0] = 0.33333333333333337*R*R*R*ktemp5045[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5045[i] = std::complex<double>(ktemp5045[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5045[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5047(Nx*Ny*Nz); // RS
	rtemp5047 = ifft(Nx,Ny,Nz,dV,ktemp5045);

	ktemp5045.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5047[i] = rtemp5042[i] - 26.31894506957162*rtemp5047[i];
	}

	rtemp5042.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp590[i] = 2.0*rtemp590[i]*rtemp67[i]*rtemp73[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5050(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5050 = fft(Nx,Ny,Nz,dV,rtemp590);

	rtemp590.free(); // Realspace
	{
		const int i = 0;
		ktemp5050[0] = 0.33333333333333337*R*R*R*ktemp5050[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5050[i] = std::complex<double>(ktemp5050[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5050[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5052(Nx*Ny*Nz); // RS
	rtemp5052 = ifft(Nx,Ny,Nz,dV,ktemp5050);

	ktemp5050.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5052[i] = rtemp5047[i] + 26.31894506957162*rtemp5052[i];
	}

	rtemp5047.free(); // Realspace
	Vector rtemp5054(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5054[i] = 2.0*rtemp597[i]*rtemp67[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp5055(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5055 = fft(Nx,Ny,Nz,dV,rtemp5054);

	rtemp5054.free(); // Realspace
	{
		const int i = 0;
		ktemp5055[0] = 0.33333333333333337*R*R*R*ktemp5055[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5055[i] = std::complex<double>(ktemp5055[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5055[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5057(Nx*Ny*Nz); // RS
	rtemp5057 = ifft(Nx,Ny,Nz,dV,ktemp5055);

	ktemp5055.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5057[i] = rtemp5052[i] - 17.265227965638985*rtemp5057[i];
	}

	rtemp5052.free(); // Realspace
	Vector rtemp5059(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5059[i] = 2.0*rtemp604[i]*rtemp67[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp5060(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5060 = fft(Nx,Ny,Nz,dV,rtemp5059);

	rtemp5059.free(); // Realspace
	{
		const int i = 0;
		ktemp5060[0] = 0.33333333333333337*R*R*R*ktemp5060[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5060[i] = std::complex<double>(ktemp5060[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5060[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5062(Nx*Ny*Nz); // RS
	rtemp5062 = ifft(Nx,Ny,Nz,dV,ktemp5060);

	ktemp5060.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5062[i] = rtemp5057[i] + 51.16402921524723*rtemp5062[i];
	}

	rtemp5057.free(); // Realspace
	Vector rtemp5064(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5064[i] = 2.0*rtemp611[i]*rtemp67[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp5065(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5065 = fft(Nx,Ny,Nz,dV,rtemp5064);

	rtemp5064.free(); // Realspace
	{
		const int i = 0;
		ktemp5065[0] = 0.33333333333333337*R*R*R*ktemp5065[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5065[i] = std::complex<double>(ktemp5065[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5065[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5067(Nx*Ny*Nz); // RS
	rtemp5067 = ifft(Nx,Ny,Nz,dV,ktemp5065);

	ktemp5065.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5067[i] = rtemp5062[i] - 34.10935281016482*rtemp5067[i];
	}

	rtemp5062.free(); // Realspace
	Vector rtemp5069(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5069[i] = 2.0*rtemp618[i]*rtemp67[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp5070(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5070 = fft(Nx,Ny,Nz,dV,rtemp5069);

	rtemp5069.free(); // Realspace
	{
		const int i = 0;
		ktemp5070[0] = 0.33333333333333337*R*R*R*ktemp5070[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5070[i] = std::complex<double>(ktemp5070[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5070[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5072(Nx*Ny*Nz); // RS
	rtemp5072 = ifft(Nx,Ny,Nz,dV,ktemp5070);

	ktemp5070.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5072[i] = rtemp5067[i] + 74.95635555813998*rtemp5072[i];
	}

	rtemp5067.free(); // Realspace
	Vector rtemp5074(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5074[i] = 2.0*rtemp625[i]*rtemp67[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp5075(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5075 = fft(Nx,Ny,Nz,dV,rtemp5074);

	rtemp5074.free(); // Realspace
	{
		const int i = 0;
		ktemp5075[0] = 0.33333333333333337*R*R*R*ktemp5075[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5075[i] = std::complex<double>(ktemp5075[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5075[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5077(Nx*Ny*Nz); // RS
	rtemp5077 = ifft(Nx,Ny,Nz,dV,ktemp5075);

	ktemp5075.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5077[i] = rtemp5072[i] - 308.2474846548228*rtemp5077[i];
	}

	rtemp5072.free(); // Realspace
	Vector rtemp5079(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5079[i] = 2.0*rtemp632[i]*rtemp67[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp5080(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5080 = fft(Nx,Ny,Nz,dV,rtemp5079);

	rtemp5079.free(); // Realspace
	{
		const int i = 0;
		ktemp5080[0] = 0.33333333333333337*R*R*R*ktemp5080[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5080[i] = std::complex<double>(ktemp5080[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5080[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5082(Nx*Ny*Nz); // RS
	rtemp5082 = ifft(Nx,Ny,Nz,dV,ktemp5080);

	ktemp5080.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5082[i] = rtemp5077[i] - 0.10527578027828648*rtemp5082[i];
	}

	rtemp5077.free(); // Realspace
	Vector rtemp5084(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5084[i] = 2.0*rtemp639[i]*rtemp67[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp5085(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5085 = fft(Nx,Ny,Nz,dV,rtemp5084);

	rtemp5084.free(); // Realspace
	{
		const int i = 0;
		ktemp5085[0] = 0.33333333333333337*R*R*R*ktemp5085[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5085[i] = std::complex<double>(ktemp5085[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5085[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5087(Nx*Ny*Nz); // RS
	rtemp5087 = ifft(Nx,Ny,Nz,dV,ktemp5085);

	ktemp5085.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5087[i] = rtemp5082[i] + 220.23693234217532*rtemp5087[i];
	}

	rtemp5082.free(); // Realspace
	Vector rtemp5089(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5089[i] = 2.0*rtemp646[i]*rtemp67[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp5090(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5090 = fft(Nx,Ny,Nz,dV,rtemp5089);

	rtemp5089.free(); // Realspace
	{
		const int i = 0;
		ktemp5090[0] = 0.33333333333333337*R*R*R*ktemp5090[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5090[i] = std::complex<double>(ktemp5090[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5090[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5092(Nx*Ny*Nz); // RS
	rtemp5092 = ifft(Nx,Ny,Nz,dV,ktemp5090);

	ktemp5090.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5092[i] = rtemp5087[i] + 463.5292605652953*rtemp5092[i];
	}

	rtemp5087.free(); // Realspace
	Vector rtemp5094(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5094[i] = 2.0*rtemp653[i]*rtemp67[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp5095(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5095 = fft(Nx,Ny,Nz,dV,rtemp5094);

	rtemp5094.free(); // Realspace
	{
		const int i = 0;
		ktemp5095[0] = 0.33333333333333337*R*R*R*ktemp5095[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5095[i] = std::complex<double>(ktemp5095[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5095[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5097(Nx*Ny*Nz); // RS
	rtemp5097 = ifft(Nx,Ny,Nz,dV,ktemp5095);

	ktemp5095.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5097[i] = rtemp5092[i] - 391.6259026352257*rtemp5097[i];
	}

	rtemp5092.free(); // Realspace
	Vector rtemp5099(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5099[i] = 2.0*rtemp660[i]*rtemp67[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp5100(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5100 = fft(Nx,Ny,Nz,dV,rtemp5099);

	rtemp5099.free(); // Realspace
	{
		const int i = 0;
		ktemp5100[0] = 0.33333333333333337*R*R*R*ktemp5100[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5100[i] = std::complex<double>(ktemp5100[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5100[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5102(Nx*Ny*Nz); // RS
	rtemp5102 = ifft(Nx,Ny,Nz,dV,ktemp5100);

	ktemp5100.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5102[i] = rtemp5097[i] + 76.43021648203597*rtemp5102[i];
	}

	rtemp5097.free(); // Realspace
	Vector rtemp5104(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5104[i] = 2.0*rtemp667[i]*rtemp67[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp5105(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5105 = fft(Nx,Ny,Nz,dV,rtemp5104);

	rtemp5104.free(); // Realspace
	{
		const int i = 0;
		ktemp5105[0] = 0.33333333333333337*R*R*R*ktemp5105[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5105[i] = std::complex<double>(ktemp5105[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5105[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5107(Nx*Ny*Nz); // RS
	rtemp5107 = ifft(Nx,Ny,Nz,dV,ktemp5105);

	ktemp5105.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5107[i] = rtemp5102[i] + 2.842446067513735*rtemp5107[i];
	}

	rtemp5102.free(); // Realspace
	Vector rtemp5109(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5109[i] = 2.0*rtemp674[i]*rtemp67[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp5110(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5110 = fft(Nx,Ny,Nz,dV,rtemp5109);

	rtemp5109.free(); // Realspace
	{
		const int i = 0;
		ktemp5110[0] = 0.33333333333333337*R*R*R*ktemp5110[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5110[i] = std::complex<double>(ktemp5110[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5110[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5112(Nx*Ny*Nz); // RS
	rtemp5112 = ifft(Nx,Ny,Nz,dV,ktemp5110);

	ktemp5110.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5112[i] = rtemp5107[i] + 132.3316558098061*rtemp5112[i];
	}

	rtemp5107.free(); // Realspace
	Vector rtemp5114(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5114[i] = 2.0*rtemp67[i]*rtemp681[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp5115(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5115 = fft(Nx,Ny,Nz,dV,rtemp5114);

	rtemp5114.free(); // Realspace
	{
		const int i = 0;
		ktemp5115[0] = 0.33333333333333337*R*R*R*ktemp5115[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5115[i] = std::complex<double>(ktemp5115[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5115[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5117(Nx*Ny*Nz); // RS
	rtemp5117 = ifft(Nx,Ny,Nz,dV,ktemp5115);

	ktemp5115.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5117[i] = rtemp5112[i] - 37.47817777906999*rtemp5117[i];
	}

	rtemp5112.free(); // Realspace
	Vector rtemp5119(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5119[i] = 2.0*rtemp67[i]*rtemp688[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp5120(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5120 = fft(Nx,Ny,Nz,dV,rtemp5119);

	rtemp5119.free(); // Realspace
	{
		const int i = 0;
		ktemp5120[0] = 0.33333333333333337*R*R*R*ktemp5120[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5120[i] = std::complex<double>(ktemp5120[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5120[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5122(Nx*Ny*Nz); // RS
	rtemp5122 = ifft(Nx,Ny,Nz,dV,ktemp5120);

	ktemp5120.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5122[i] = rtemp5117[i] + 10.89604325880265*rtemp5122[i];
	}

	rtemp5117.free(); // Realspace
	Vector rtemp5124(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5124[i] = 2.0*rtemp67[i]*rtemp695[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp5125(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5125 = fft(Nx,Ny,Nz,dV,rtemp5124);

	rtemp5124.free(); // Realspace
	{
		const int i = 0;
		ktemp5125[0] = 0.33333333333333337*R*R*R*ktemp5125[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5125[i] = std::complex<double>(ktemp5125[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5125[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5127(Nx*Ny*Nz); // RS
	rtemp5127 = ifft(Nx,Ny,Nz,dV,ktemp5125);

	ktemp5125.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5127[i] = rtemp5122[i] - 118.06678758209827*rtemp5127[i];
	}

	rtemp5122.free(); // Realspace
	Vector rtemp5129(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5129[i] = 2.0*rtemp67[i]*rtemp702[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp5130(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5130 = fft(Nx,Ny,Nz,dV,rtemp5129);

	rtemp5129.free(); // Realspace
	{
		const int i = 0;
		ktemp5130[0] = 0.33333333333333337*R*R*R*ktemp5130[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5130[i] = std::complex<double>(ktemp5130[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5130[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5132(Nx*Ny*Nz); // RS
	rtemp5132 = ifft(Nx,Ny,Nz,dV,ktemp5130);

	ktemp5130.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5132[i] = rtemp5127[i] - 92.32685930405724*rtemp5132[i];
	}

	rtemp5127.free(); // Realspace
	Vector rtemp5134(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5134[i] = 2.0*rtemp67[i]*rtemp709[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp5135(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5135 = fft(Nx,Ny,Nz,dV,rtemp5134);

	rtemp5134.free(); // Realspace
	{
		const int i = 0;
		ktemp5135[0] = 0.33333333333333337*R*R*R*ktemp5135[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5135[i] = std::complex<double>(ktemp5135[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5135[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5137(Nx*Ny*Nz); // RS
	rtemp5137 = ifft(Nx,Ny,Nz,dV,ktemp5135);

	ktemp5135.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5137[i] = rtemp5132[i] + 52.63789013914324*rtemp5137[i];
	}

	rtemp5132.free(); // Realspace
	Vector rtemp5139(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5139[i] = 2.0*rtemp597[i]*rtemp67[i]*rtemp77[i]*log(t1)/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5140(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5140 = fft(Nx,Ny,Nz,dV,rtemp5139);

	rtemp5139.free(); // Realspace
	{
		const int i = 0;
		ktemp5140[0] = 0.33333333333333337*R*R*R*ktemp5140[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5140[i] = std::complex<double>(ktemp5140[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5140[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5142(Nx*Ny*Nz); // RS
	rtemp5142 = ifft(Nx,Ny,Nz,dV,ktemp5140);

	ktemp5140.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5142[i] = rtemp5137[i] - 17.265227965638985*rtemp5142[i];
	}

	rtemp5137.free(); // Realspace
	Vector rtemp5144(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5144[i] = 2.0*rtemp597[i]*rtemp67[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5145(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5145 = fft(Nx,Ny,Nz,dV,rtemp5144);

	rtemp5144.free(); // Realspace
	{
		const int i = 0;
		ktemp5145[0] = 0.33333333333333337*R*R*R*ktemp5145[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5145[i] = std::complex<double>(ktemp5145[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5145[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5147(Nx*Ny*Nz); // RS
	rtemp5147 = ifft(Nx,Ny,Nz,dV,ktemp5145);

	ktemp5145.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5147[i] = rtemp5142[i] + 17.265227965638985*rtemp5147[i];
	}

	rtemp5142.free(); // Realspace
	Vector rtemp5149(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5149[i] = 2.0*rtemp597[i]*rtemp67[i]*rtemp77[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5150(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5150 = fft(Nx,Ny,Nz,dV,rtemp5149);

	rtemp5149.free(); // Realspace
	{
		const int i = 0;
		ktemp5150[0] = 0.33333333333333337*R*R*R*ktemp5150[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5150[i] = std::complex<double>(ktemp5150[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5150[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5152(Nx*Ny*Nz); // RS
	rtemp5152 = ifft(Nx,Ny,Nz,dV,ktemp5150);

	ktemp5150.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5152[i] = rtemp5147[i] + 8.632613982819493*rtemp5152[i];
	}

	rtemp5147.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp597[i] = 2.0*rtemp597[i]*rtemp67[i]*rtemp77[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5155(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5155 = fft(Nx,Ny,Nz,dV,rtemp597);

	rtemp597.free(); // Realspace
	{
		const int i = 0;
		ktemp5155[0] = 0.33333333333333337*R*R*R*ktemp5155[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5155[i] = std::complex<double>(ktemp5155[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5155[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5157(Nx*Ny*Nz); // RS
	rtemp5157 = ifft(Nx,Ny,Nz,dV,ktemp5155);

	ktemp5155.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5157[i] = rtemp5152[i] - 8.632613982819493*rtemp5157[i];
	}

	rtemp5152.free(); // Realspace
	Vector rtemp5159(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5159[i] = 2.0*rtemp604[i]*rtemp67[i]*rtemp77[i]*log(t1)/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5160(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5160 = fft(Nx,Ny,Nz,dV,rtemp5159);

	rtemp5159.free(); // Realspace
	{
		const int i = 0;
		ktemp5160[0] = 0.33333333333333337*R*R*R*ktemp5160[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5160[i] = std::complex<double>(ktemp5160[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5160[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5162(Nx*Ny*Nz); // RS
	rtemp5162 = ifft(Nx,Ny,Nz,dV,ktemp5160);

	ktemp5160.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5162[i] = rtemp5157[i] + 51.16402921524723*rtemp5162[i];
	}

	rtemp5157.free(); // Realspace
	Vector rtemp5164(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5164[i] = 2.0*rtemp604[i]*rtemp67[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5165(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5165 = fft(Nx,Ny,Nz,dV,rtemp5164);

	rtemp5164.free(); // Realspace
	{
		const int i = 0;
		ktemp5165[0] = 0.33333333333333337*R*R*R*ktemp5165[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5165[i] = std::complex<double>(ktemp5165[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5165[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5167(Nx*Ny*Nz); // RS
	rtemp5167 = ifft(Nx,Ny,Nz,dV,ktemp5165);

	ktemp5165.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5167[i] = rtemp5162[i] - 51.16402921524723*rtemp5167[i];
	}

	rtemp5162.free(); // Realspace
	Vector rtemp5169(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5169[i] = 2.0*rtemp604[i]*rtemp67[i]*rtemp77[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5170(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5170 = fft(Nx,Ny,Nz,dV,rtemp5169);

	rtemp5169.free(); // Realspace
	{
		const int i = 0;
		ktemp5170[0] = 0.33333333333333337*R*R*R*ktemp5170[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5170[i] = std::complex<double>(ktemp5170[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5170[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5172(Nx*Ny*Nz); // RS
	rtemp5172 = ifft(Nx,Ny,Nz,dV,ktemp5170);

	ktemp5170.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5172[i] = rtemp5167[i] - 25.582014607623616*rtemp5172[i];
	}

	rtemp5167.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp604[i] = 2.0*rtemp604[i]*rtemp67[i]*rtemp77[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5175(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5175 = fft(Nx,Ny,Nz,dV,rtemp604);

	rtemp604.free(); // Realspace
	{
		const int i = 0;
		ktemp5175[0] = 0.33333333333333337*R*R*R*ktemp5175[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5175[i] = std::complex<double>(ktemp5175[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5175[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5177(Nx*Ny*Nz); // RS
	rtemp5177 = ifft(Nx,Ny,Nz,dV,ktemp5175);

	ktemp5175.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5177[i] = rtemp5172[i] + 25.582014607623616*rtemp5177[i];
	}

	rtemp5172.free(); // Realspace
	Vector rtemp5179(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5179[i] = 2.0*rtemp611[i]*rtemp67[i]*rtemp77[i]*log(t1)/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5180(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5180 = fft(Nx,Ny,Nz,dV,rtemp5179);

	rtemp5179.free(); // Realspace
	{
		const int i = 0;
		ktemp5180[0] = 0.33333333333333337*R*R*R*ktemp5180[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5180[i] = std::complex<double>(ktemp5180[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5180[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5182(Nx*Ny*Nz); // RS
	rtemp5182 = ifft(Nx,Ny,Nz,dV,ktemp5180);

	ktemp5180.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5182[i] = rtemp5177[i] - 34.10935281016482*rtemp5182[i];
	}

	rtemp5177.free(); // Realspace
	Vector rtemp5184(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5184[i] = 2.0*rtemp611[i]*rtemp67[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5185(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5185 = fft(Nx,Ny,Nz,dV,rtemp5184);

	rtemp5184.free(); // Realspace
	{
		const int i = 0;
		ktemp5185[0] = 0.33333333333333337*R*R*R*ktemp5185[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5185[i] = std::complex<double>(ktemp5185[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5185[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5187(Nx*Ny*Nz); // RS
	rtemp5187 = ifft(Nx,Ny,Nz,dV,ktemp5185);

	ktemp5185.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5187[i] = rtemp5182[i] + 34.10935281016482*rtemp5187[i];
	}

	rtemp5182.free(); // Realspace
	Vector rtemp5189(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5189[i] = 2.0*rtemp611[i]*rtemp67[i]*rtemp77[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5190(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5190 = fft(Nx,Ny,Nz,dV,rtemp5189);

	rtemp5189.free(); // Realspace
	{
		const int i = 0;
		ktemp5190[0] = 0.33333333333333337*R*R*R*ktemp5190[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5190[i] = std::complex<double>(ktemp5190[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5190[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5192(Nx*Ny*Nz); // RS
	rtemp5192 = ifft(Nx,Ny,Nz,dV,ktemp5190);

	ktemp5190.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5192[i] = rtemp5187[i] + 17.05467640508241*rtemp5192[i];
	}

	rtemp5187.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp611[i] = 2.0*rtemp611[i]*rtemp67[i]*rtemp77[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5195(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5195 = fft(Nx,Ny,Nz,dV,rtemp611);

	rtemp611.free(); // Realspace
	{
		const int i = 0;
		ktemp5195[0] = 0.33333333333333337*R*R*R*ktemp5195[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5195[i] = std::complex<double>(ktemp5195[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5195[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5197(Nx*Ny*Nz); // RS
	rtemp5197 = ifft(Nx,Ny,Nz,dV,ktemp5195);

	ktemp5195.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5197[i] = rtemp5192[i] - 17.05467640508241*rtemp5197[i];
	}

	rtemp5192.free(); // Realspace
	Vector rtemp5199(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5199[i] = 2.0*rtemp618[i]*rtemp67[i]*rtemp77[i]*log(t1)/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5200(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5200 = fft(Nx,Ny,Nz,dV,rtemp5199);

	rtemp5199.free(); // Realspace
	{
		const int i = 0;
		ktemp5200[0] = 0.33333333333333337*R*R*R*ktemp5200[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5200[i] = std::complex<double>(ktemp5200[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5200[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5202(Nx*Ny*Nz); // RS
	rtemp5202 = ifft(Nx,Ny,Nz,dV,ktemp5200);

	ktemp5200.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5202[i] = rtemp5197[i] + 74.95635555813998*rtemp5202[i];
	}

	rtemp5197.free(); // Realspace
	Vector rtemp5204(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5204[i] = 2.0*rtemp618[i]*rtemp67[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5205(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5205 = fft(Nx,Ny,Nz,dV,rtemp5204);

	rtemp5204.free(); // Realspace
	{
		const int i = 0;
		ktemp5205[0] = 0.33333333333333337*R*R*R*ktemp5205[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5205[i] = std::complex<double>(ktemp5205[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5205[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5207(Nx*Ny*Nz); // RS
	rtemp5207 = ifft(Nx,Ny,Nz,dV,ktemp5205);

	ktemp5205.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5207[i] = rtemp5202[i] - 74.95635555813998*rtemp5207[i];
	}

	rtemp5202.free(); // Realspace
	Vector rtemp5209(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5209[i] = 2.0*rtemp618[i]*rtemp67[i]*rtemp77[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5210(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5210 = fft(Nx,Ny,Nz,dV,rtemp5209);

	rtemp5209.free(); // Realspace
	{
		const int i = 0;
		ktemp5210[0] = 0.33333333333333337*R*R*R*ktemp5210[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5210[i] = std::complex<double>(ktemp5210[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5210[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5212(Nx*Ny*Nz); // RS
	rtemp5212 = ifft(Nx,Ny,Nz,dV,ktemp5210);

	ktemp5210.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5212[i] = rtemp5207[i] - 37.47817777906999*rtemp5212[i];
	}

	rtemp5207.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp618[i] = 2.0*rtemp618[i]*rtemp67[i]*rtemp77[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5215(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5215 = fft(Nx,Ny,Nz,dV,rtemp618);

	rtemp618.free(); // Realspace
	{
		const int i = 0;
		ktemp5215[0] = 0.33333333333333337*R*R*R*ktemp5215[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5215[i] = std::complex<double>(ktemp5215[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5215[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5217(Nx*Ny*Nz); // RS
	rtemp5217 = ifft(Nx,Ny,Nz,dV,ktemp5215);

	ktemp5215.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5217[i] = rtemp5212[i] + 37.47817777906999*rtemp5217[i];
	}

	rtemp5212.free(); // Realspace
	Vector rtemp5219(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5219[i] = 2.0*rtemp625[i]*rtemp67[i]*rtemp77[i]*log(t1)/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5220(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5220 = fft(Nx,Ny,Nz,dV,rtemp5219);

	rtemp5219.free(); // Realspace
	{
		const int i = 0;
		ktemp5220[0] = 0.33333333333333337*R*R*R*ktemp5220[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5220[i] = std::complex<double>(ktemp5220[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5220[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5222(Nx*Ny*Nz); // RS
	rtemp5222 = ifft(Nx,Ny,Nz,dV,ktemp5220);

	ktemp5220.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5222[i] = rtemp5217[i] - 308.2474846548228*rtemp5222[i];
	}

	rtemp5217.free(); // Realspace
	Vector rtemp5224(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5224[i] = 2.0*rtemp625[i]*rtemp67[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5225(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5225 = fft(Nx,Ny,Nz,dV,rtemp5224);

	rtemp5224.free(); // Realspace
	{
		const int i = 0;
		ktemp5225[0] = 0.33333333333333337*R*R*R*ktemp5225[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5225[i] = std::complex<double>(ktemp5225[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5225[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5227(Nx*Ny*Nz); // RS
	rtemp5227 = ifft(Nx,Ny,Nz,dV,ktemp5225);

	ktemp5225.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5227[i] = rtemp5222[i] + 308.2474846548228*rtemp5227[i];
	}

	rtemp5222.free(); // Realspace
	Vector rtemp5229(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5229[i] = 2.0*rtemp625[i]*rtemp67[i]*rtemp77[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5230(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5230 = fft(Nx,Ny,Nz,dV,rtemp5229);

	rtemp5229.free(); // Realspace
	{
		const int i = 0;
		ktemp5230[0] = 0.33333333333333337*R*R*R*ktemp5230[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5230[i] = std::complex<double>(ktemp5230[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5230[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5232(Nx*Ny*Nz); // RS
	rtemp5232 = ifft(Nx,Ny,Nz,dV,ktemp5230);

	ktemp5230.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5232[i] = rtemp5227[i] + 154.1237423274114*rtemp5232[i];
	}

	rtemp5227.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp625[i] = 2.0*rtemp625[i]*rtemp67[i]*rtemp77[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5235(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5235 = fft(Nx,Ny,Nz,dV,rtemp625);

	rtemp625.free(); // Realspace
	{
		const int i = 0;
		ktemp5235[0] = 0.33333333333333337*R*R*R*ktemp5235[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5235[i] = std::complex<double>(ktemp5235[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5235[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5237(Nx*Ny*Nz); // RS
	rtemp5237 = ifft(Nx,Ny,Nz,dV,ktemp5235);

	ktemp5235.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5237[i] = rtemp5232[i] - 154.1237423274114*rtemp5237[i];
	}

	rtemp5232.free(); // Realspace
	Vector rtemp5239(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5239[i] = 2.0*rtemp632[i]*rtemp67[i]*rtemp77[i]*log(t1)/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5240(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5240 = fft(Nx,Ny,Nz,dV,rtemp5239);

	rtemp5239.free(); // Realspace
	{
		const int i = 0;
		ktemp5240[0] = 0.33333333333333337*R*R*R*ktemp5240[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5240[i] = std::complex<double>(ktemp5240[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5240[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5242(Nx*Ny*Nz); // RS
	rtemp5242 = ifft(Nx,Ny,Nz,dV,ktemp5240);

	ktemp5240.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5242[i] = rtemp5237[i] - 0.10527578027828648*rtemp5242[i];
	}

	rtemp5237.free(); // Realspace
	Vector rtemp5244(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5244[i] = 2.0*rtemp632[i]*rtemp67[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5245(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5245 = fft(Nx,Ny,Nz,dV,rtemp5244);

	rtemp5244.free(); // Realspace
	{
		const int i = 0;
		ktemp5245[0] = 0.33333333333333337*R*R*R*ktemp5245[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5245[i] = std::complex<double>(ktemp5245[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5245[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5247(Nx*Ny*Nz); // RS
	rtemp5247 = ifft(Nx,Ny,Nz,dV,ktemp5245);

	ktemp5245.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5247[i] = rtemp5242[i] + 0.10527578027828648*rtemp5247[i];
	}

	rtemp5242.free(); // Realspace
	Vector rtemp5249(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5249[i] = 2.0*rtemp632[i]*rtemp67[i]*rtemp77[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5250(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5250 = fft(Nx,Ny,Nz,dV,rtemp5249);

	rtemp5249.free(); // Realspace
	{
		const int i = 0;
		ktemp5250[0] = 0.33333333333333337*R*R*R*ktemp5250[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5250[i] = std::complex<double>(ktemp5250[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5250[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5252(Nx*Ny*Nz); // RS
	rtemp5252 = ifft(Nx,Ny,Nz,dV,ktemp5250);

	ktemp5250.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5252[i] = rtemp5247[i] + 5.263789013914324e-2*rtemp5252[i];
	}

	rtemp5247.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp632[i] = 2.0*rtemp632[i]*rtemp67[i]*rtemp77[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5255(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5255 = fft(Nx,Ny,Nz,dV,rtemp632);

	rtemp632.free(); // Realspace
	{
		const int i = 0;
		ktemp5255[0] = 0.33333333333333337*R*R*R*ktemp5255[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5255[i] = std::complex<double>(ktemp5255[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5255[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5257(Nx*Ny*Nz); // RS
	rtemp5257 = ifft(Nx,Ny,Nz,dV,ktemp5255);

	ktemp5255.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5257[i] = rtemp5252[i] - 5.263789013914324e-2*rtemp5257[i];
	}

	rtemp5252.free(); // Realspace
	Vector rtemp5259(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5259[i] = 2.0*rtemp639[i]*rtemp67[i]*rtemp77[i]*log(t1)/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5260(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5260 = fft(Nx,Ny,Nz,dV,rtemp5259);

	rtemp5259.free(); // Realspace
	{
		const int i = 0;
		ktemp5260[0] = 0.33333333333333337*R*R*R*ktemp5260[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5260[i] = std::complex<double>(ktemp5260[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5260[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5262(Nx*Ny*Nz); // RS
	rtemp5262 = ifft(Nx,Ny,Nz,dV,ktemp5260);

	ktemp5260.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5262[i] = rtemp5257[i] + 220.23693234217532*rtemp5262[i];
	}

	rtemp5257.free(); // Realspace
	Vector rtemp5264(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5264[i] = 2.0*rtemp639[i]*rtemp67[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5265(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5265 = fft(Nx,Ny,Nz,dV,rtemp5264);

	rtemp5264.free(); // Realspace
	{
		const int i = 0;
		ktemp5265[0] = 0.33333333333333337*R*R*R*ktemp5265[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5265[i] = std::complex<double>(ktemp5265[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5265[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5267(Nx*Ny*Nz); // RS
	rtemp5267 = ifft(Nx,Ny,Nz,dV,ktemp5265);

	ktemp5265.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5267[i] = rtemp5262[i] - 220.23693234217532*rtemp5267[i];
	}

	rtemp5262.free(); // Realspace
	Vector rtemp5269(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5269[i] = 2.0*rtemp639[i]*rtemp67[i]*rtemp77[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5270(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5270 = fft(Nx,Ny,Nz,dV,rtemp5269);

	rtemp5269.free(); // Realspace
	{
		const int i = 0;
		ktemp5270[0] = 0.33333333333333337*R*R*R*ktemp5270[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5270[i] = std::complex<double>(ktemp5270[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5270[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5272(Nx*Ny*Nz); // RS
	rtemp5272 = ifft(Nx,Ny,Nz,dV,ktemp5270);

	ktemp5270.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5272[i] = rtemp5267[i] - 110.11846617108766*rtemp5272[i];
	}

	rtemp5267.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp639[i] = 2.0*rtemp639[i]*rtemp67[i]*rtemp77[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5275(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5275 = fft(Nx,Ny,Nz,dV,rtemp639);

	rtemp639.free(); // Realspace
	{
		const int i = 0;
		ktemp5275[0] = 0.33333333333333337*R*R*R*ktemp5275[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5275[i] = std::complex<double>(ktemp5275[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5275[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5277(Nx*Ny*Nz); // RS
	rtemp5277 = ifft(Nx,Ny,Nz,dV,ktemp5275);

	ktemp5275.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5277[i] = rtemp5272[i] + 110.11846617108766*rtemp5277[i];
	}

	rtemp5272.free(); // Realspace
	Vector rtemp5279(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5279[i] = 2.0*rtemp646[i]*rtemp67[i]*rtemp77[i]*log(t1)/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5280(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5280 = fft(Nx,Ny,Nz,dV,rtemp5279);

	rtemp5279.free(); // Realspace
	{
		const int i = 0;
		ktemp5280[0] = 0.33333333333333337*R*R*R*ktemp5280[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5280[i] = std::complex<double>(ktemp5280[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5280[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5282(Nx*Ny*Nz); // RS
	rtemp5282 = ifft(Nx,Ny,Nz,dV,ktemp5280);

	ktemp5280.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5282[i] = rtemp5277[i] + 463.5292605652953*rtemp5282[i];
	}

	rtemp5277.free(); // Realspace
	Vector rtemp5284(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5284[i] = 2.0*rtemp646[i]*rtemp67[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5285(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5285 = fft(Nx,Ny,Nz,dV,rtemp5284);

	rtemp5284.free(); // Realspace
	{
		const int i = 0;
		ktemp5285[0] = 0.33333333333333337*R*R*R*ktemp5285[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5285[i] = std::complex<double>(ktemp5285[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5285[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5287(Nx*Ny*Nz); // RS
	rtemp5287 = ifft(Nx,Ny,Nz,dV,ktemp5285);

	ktemp5285.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5287[i] = rtemp5282[i] - 463.5292605652953*rtemp5287[i];
	}

	rtemp5282.free(); // Realspace
	Vector rtemp5289(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5289[i] = 2.0*rtemp646[i]*rtemp67[i]*rtemp77[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5290(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5290 = fft(Nx,Ny,Nz,dV,rtemp5289);

	rtemp5289.free(); // Realspace
	{
		const int i = 0;
		ktemp5290[0] = 0.33333333333333337*R*R*R*ktemp5290[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5290[i] = std::complex<double>(ktemp5290[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5290[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5292(Nx*Ny*Nz); // RS
	rtemp5292 = ifft(Nx,Ny,Nz,dV,ktemp5290);

	ktemp5290.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5292[i] = rtemp5287[i] - 231.76463028264766*rtemp5292[i];
	}

	rtemp5287.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp646[i] = 2.0*rtemp646[i]*rtemp67[i]*rtemp77[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5295(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5295 = fft(Nx,Ny,Nz,dV,rtemp646);

	rtemp646.free(); // Realspace
	{
		const int i = 0;
		ktemp5295[0] = 0.33333333333333337*R*R*R*ktemp5295[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5295[i] = std::complex<double>(ktemp5295[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5295[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5297(Nx*Ny*Nz); // RS
	rtemp5297 = ifft(Nx,Ny,Nz,dV,ktemp5295);

	ktemp5295.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5297[i] = rtemp5292[i] + 231.76463028264766*rtemp5297[i];
	}

	rtemp5292.free(); // Realspace
	Vector rtemp5299(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5299[i] = 2.0*rtemp653[i]*rtemp67[i]*rtemp77[i]*log(t1)/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5300(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5300 = fft(Nx,Ny,Nz,dV,rtemp5299);

	rtemp5299.free(); // Realspace
	{
		const int i = 0;
		ktemp5300[0] = 0.33333333333333337*R*R*R*ktemp5300[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5300[i] = std::complex<double>(ktemp5300[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5300[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5302(Nx*Ny*Nz); // RS
	rtemp5302 = ifft(Nx,Ny,Nz,dV,ktemp5300);

	ktemp5300.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5302[i] = rtemp5297[i] - 391.6259026352257*rtemp5302[i];
	}

	rtemp5297.free(); // Realspace
	Vector rtemp5304(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5304[i] = 2.0*rtemp653[i]*rtemp67[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5305(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5305 = fft(Nx,Ny,Nz,dV,rtemp5304);

	rtemp5304.free(); // Realspace
	{
		const int i = 0;
		ktemp5305[0] = 0.33333333333333337*R*R*R*ktemp5305[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5305[i] = std::complex<double>(ktemp5305[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5305[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5307(Nx*Ny*Nz); // RS
	rtemp5307 = ifft(Nx,Ny,Nz,dV,ktemp5305);

	ktemp5305.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5307[i] = rtemp5302[i] + 391.6259026352257*rtemp5307[i];
	}

	rtemp5302.free(); // Realspace
	Vector rtemp5309(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5309[i] = 2.0*rtemp653[i]*rtemp67[i]*rtemp77[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5310(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5310 = fft(Nx,Ny,Nz,dV,rtemp5309);

	rtemp5309.free(); // Realspace
	{
		const int i = 0;
		ktemp5310[0] = 0.33333333333333337*R*R*R*ktemp5310[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5310[i] = std::complex<double>(ktemp5310[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5310[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5312(Nx*Ny*Nz); // RS
	rtemp5312 = ifft(Nx,Ny,Nz,dV,ktemp5310);

	ktemp5310.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5312[i] = rtemp5307[i] + 195.81295131761286*rtemp5312[i];
	}

	rtemp5307.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp653[i] = 2.0*rtemp653[i]*rtemp67[i]*rtemp77[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5315(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5315 = fft(Nx,Ny,Nz,dV,rtemp653);

	rtemp653.free(); // Realspace
	{
		const int i = 0;
		ktemp5315[0] = 0.33333333333333337*R*R*R*ktemp5315[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5315[i] = std::complex<double>(ktemp5315[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5315[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5317(Nx*Ny*Nz); // RS
	rtemp5317 = ifft(Nx,Ny,Nz,dV,ktemp5315);

	ktemp5315.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5317[i] = rtemp5312[i] - 195.81295131761286*rtemp5317[i];
	}

	rtemp5312.free(); // Realspace
	Vector rtemp5319(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5319[i] = 2.0*rtemp660[i]*rtemp67[i]*rtemp77[i]*log(t1)/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5320(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5320 = fft(Nx,Ny,Nz,dV,rtemp5319);

	rtemp5319.free(); // Realspace
	{
		const int i = 0;
		ktemp5320[0] = 0.33333333333333337*R*R*R*ktemp5320[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5320[i] = std::complex<double>(ktemp5320[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5320[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5322(Nx*Ny*Nz); // RS
	rtemp5322 = ifft(Nx,Ny,Nz,dV,ktemp5320);

	ktemp5320.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5322[i] = rtemp5317[i] + 76.43021648203597*rtemp5322[i];
	}

	rtemp5317.free(); // Realspace
	Vector rtemp5324(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5324[i] = 2.0*rtemp660[i]*rtemp67[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5325(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5325 = fft(Nx,Ny,Nz,dV,rtemp5324);

	rtemp5324.free(); // Realspace
	{
		const int i = 0;
		ktemp5325[0] = 0.33333333333333337*R*R*R*ktemp5325[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5325[i] = std::complex<double>(ktemp5325[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5325[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5327(Nx*Ny*Nz); // RS
	rtemp5327 = ifft(Nx,Ny,Nz,dV,ktemp5325);

	ktemp5325.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5327[i] = rtemp5322[i] - 76.43021648203597*rtemp5327[i];
	}

	rtemp5322.free(); // Realspace
	Vector rtemp5329(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5329[i] = 2.0*rtemp660[i]*rtemp67[i]*rtemp77[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5330(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5330 = fft(Nx,Ny,Nz,dV,rtemp5329);

	rtemp5329.free(); // Realspace
	{
		const int i = 0;
		ktemp5330[0] = 0.33333333333333337*R*R*R*ktemp5330[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5330[i] = std::complex<double>(ktemp5330[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5330[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5332(Nx*Ny*Nz); // RS
	rtemp5332 = ifft(Nx,Ny,Nz,dV,ktemp5330);

	ktemp5330.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5332[i] = rtemp5327[i] - 38.21510824101799*rtemp5332[i];
	}

	rtemp5327.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp660[i] = 2.0*rtemp660[i]*rtemp67[i]*rtemp77[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5335(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5335 = fft(Nx,Ny,Nz,dV,rtemp660);

	rtemp660.free(); // Realspace
	{
		const int i = 0;
		ktemp5335[0] = 0.33333333333333337*R*R*R*ktemp5335[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5335[i] = std::complex<double>(ktemp5335[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5335[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5337(Nx*Ny*Nz); // RS
	rtemp5337 = ifft(Nx,Ny,Nz,dV,ktemp5335);

	ktemp5335.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5337[i] = rtemp5332[i] + 38.21510824101799*rtemp5337[i];
	}

	rtemp5332.free(); // Realspace
	Vector rtemp5339(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5339[i] = 2.0*rtemp667[i]*rtemp67[i]*rtemp77[i]*log(t1)/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5340(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5340 = fft(Nx,Ny,Nz,dV,rtemp5339);

	rtemp5339.free(); // Realspace
	{
		const int i = 0;
		ktemp5340[0] = 0.33333333333333337*R*R*R*ktemp5340[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5340[i] = std::complex<double>(ktemp5340[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5340[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5342(Nx*Ny*Nz); // RS
	rtemp5342 = ifft(Nx,Ny,Nz,dV,ktemp5340);

	ktemp5340.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5342[i] = rtemp5337[i] + 2.842446067513735*rtemp5342[i];
	}

	rtemp5337.free(); // Realspace
	Vector rtemp5344(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5344[i] = 2.0*rtemp667[i]*rtemp67[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5345(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5345 = fft(Nx,Ny,Nz,dV,rtemp5344);

	rtemp5344.free(); // Realspace
	{
		const int i = 0;
		ktemp5345[0] = 0.33333333333333337*R*R*R*ktemp5345[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5345[i] = std::complex<double>(ktemp5345[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5345[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5347(Nx*Ny*Nz); // RS
	rtemp5347 = ifft(Nx,Ny,Nz,dV,ktemp5345);

	ktemp5345.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5347[i] = rtemp5342[i] - 2.842446067513735*rtemp5347[i];
	}

	rtemp5342.free(); // Realspace
	Vector rtemp5349(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5349[i] = 2.0*rtemp667[i]*rtemp67[i]*rtemp77[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5350(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5350 = fft(Nx,Ny,Nz,dV,rtemp5349);

	rtemp5349.free(); // Realspace
	{
		const int i = 0;
		ktemp5350[0] = 0.33333333333333337*R*R*R*ktemp5350[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5350[i] = std::complex<double>(ktemp5350[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5350[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5352(Nx*Ny*Nz); // RS
	rtemp5352 = ifft(Nx,Ny,Nz,dV,ktemp5350);

	ktemp5350.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5352[i] = rtemp5347[i] - 1.4212230337568674*rtemp5352[i];
	}

	rtemp5347.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp667[i] = 2.0*rtemp667[i]*rtemp67[i]*rtemp77[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5355(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5355 = fft(Nx,Ny,Nz,dV,rtemp667);

	rtemp667.free(); // Realspace
	{
		const int i = 0;
		ktemp5355[0] = 0.33333333333333337*R*R*R*ktemp5355[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5355[i] = std::complex<double>(ktemp5355[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5355[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5357(Nx*Ny*Nz); // RS
	rtemp5357 = ifft(Nx,Ny,Nz,dV,ktemp5355);

	ktemp5355.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5357[i] = rtemp5352[i] + 1.4212230337568674*rtemp5357[i];
	}

	rtemp5352.free(); // Realspace
	Vector rtemp5359(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5359[i] = 2.0*rtemp674[i]*rtemp67[i]*rtemp77[i]*log(t1)/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5360(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5360 = fft(Nx,Ny,Nz,dV,rtemp5359);

	rtemp5359.free(); // Realspace
	{
		const int i = 0;
		ktemp5360[0] = 0.33333333333333337*R*R*R*ktemp5360[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5360[i] = std::complex<double>(ktemp5360[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5360[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5362(Nx*Ny*Nz); // RS
	rtemp5362 = ifft(Nx,Ny,Nz,dV,ktemp5360);

	ktemp5360.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5362[i] = rtemp5357[i] + 132.3316558098061*rtemp5362[i];
	}

	rtemp5357.free(); // Realspace
	Vector rtemp5364(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5364[i] = 2.0*rtemp674[i]*rtemp67[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5365(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5365 = fft(Nx,Ny,Nz,dV,rtemp5364);

	rtemp5364.free(); // Realspace
	{
		const int i = 0;
		ktemp5365[0] = 0.33333333333333337*R*R*R*ktemp5365[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5365[i] = std::complex<double>(ktemp5365[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5365[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5367(Nx*Ny*Nz); // RS
	rtemp5367 = ifft(Nx,Ny,Nz,dV,ktemp5365);

	ktemp5365.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5367[i] = rtemp5362[i] - 132.3316558098061*rtemp5367[i];
	}

	rtemp5362.free(); // Realspace
	Vector rtemp5369(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5369[i] = 2.0*rtemp674[i]*rtemp67[i]*rtemp77[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5370(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5370 = fft(Nx,Ny,Nz,dV,rtemp5369);

	rtemp5369.free(); // Realspace
	{
		const int i = 0;
		ktemp5370[0] = 0.33333333333333337*R*R*R*ktemp5370[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5370[i] = std::complex<double>(ktemp5370[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5370[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5372(Nx*Ny*Nz); // RS
	rtemp5372 = ifft(Nx,Ny,Nz,dV,ktemp5370);

	ktemp5370.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5372[i] = rtemp5367[i] - 66.16582790490305*rtemp5372[i];
	}

	rtemp5367.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp674[i] = 2.0*rtemp674[i]*rtemp67[i]*rtemp77[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5375(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5375 = fft(Nx,Ny,Nz,dV,rtemp674);

	rtemp674.free(); // Realspace
	{
		const int i = 0;
		ktemp5375[0] = 0.33333333333333337*R*R*R*ktemp5375[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5375[i] = std::complex<double>(ktemp5375[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5375[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5377(Nx*Ny*Nz); // RS
	rtemp5377 = ifft(Nx,Ny,Nz,dV,ktemp5375);

	ktemp5375.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5377[i] = rtemp5372[i] + 66.16582790490305*rtemp5377[i];
	}

	rtemp5372.free(); // Realspace
	Vector rtemp5379(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5379[i] = 2.0*rtemp67[i]*rtemp681[i]*rtemp77[i]*log(t1)/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5380(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5380 = fft(Nx,Ny,Nz,dV,rtemp5379);

	rtemp5379.free(); // Realspace
	{
		const int i = 0;
		ktemp5380[0] = 0.33333333333333337*R*R*R*ktemp5380[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5380[i] = std::complex<double>(ktemp5380[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5380[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5382(Nx*Ny*Nz); // RS
	rtemp5382 = ifft(Nx,Ny,Nz,dV,ktemp5380);

	ktemp5380.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5382[i] = rtemp5377[i] - 37.47817777906999*rtemp5382[i];
	}

	rtemp5377.free(); // Realspace
	Vector rtemp5384(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5384[i] = 2.0*rtemp67[i]*rtemp681[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5385(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5385 = fft(Nx,Ny,Nz,dV,rtemp5384);

	rtemp5384.free(); // Realspace
	{
		const int i = 0;
		ktemp5385[0] = 0.33333333333333337*R*R*R*ktemp5385[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5385[i] = std::complex<double>(ktemp5385[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5385[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5387(Nx*Ny*Nz); // RS
	rtemp5387 = ifft(Nx,Ny,Nz,dV,ktemp5385);

	ktemp5385.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5387[i] = rtemp5382[i] + 37.47817777906999*rtemp5387[i];
	}

	rtemp5382.free(); // Realspace
	Vector rtemp5389(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5389[i] = 2.0*rtemp67[i]*rtemp681[i]*rtemp77[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5390(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5390 = fft(Nx,Ny,Nz,dV,rtemp5389);

	rtemp5389.free(); // Realspace
	{
		const int i = 0;
		ktemp5390[0] = 0.33333333333333337*R*R*R*ktemp5390[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5390[i] = std::complex<double>(ktemp5390[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5390[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5392(Nx*Ny*Nz); // RS
	rtemp5392 = ifft(Nx,Ny,Nz,dV,ktemp5390);

	ktemp5390.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5392[i] = rtemp5387[i] + 18.739088889534994*rtemp5392[i];
	}

	rtemp5387.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp681[i] = 2.0*rtemp67[i]*rtemp681[i]*rtemp77[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5395(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5395 = fft(Nx,Ny,Nz,dV,rtemp681);

	rtemp681.free(); // Realspace
	{
		const int i = 0;
		ktemp5395[0] = 0.33333333333333337*R*R*R*ktemp5395[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5395[i] = std::complex<double>(ktemp5395[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5395[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5397(Nx*Ny*Nz); // RS
	rtemp5397 = ifft(Nx,Ny,Nz,dV,ktemp5395);

	ktemp5395.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5397[i] = rtemp5392[i] - 18.739088889534994*rtemp5397[i];
	}

	rtemp5392.free(); // Realspace
	Vector rtemp5399(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5399[i] = 2.0*rtemp67[i]*rtemp688[i]*rtemp77[i]*log(t1)/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5400(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5400 = fft(Nx,Ny,Nz,dV,rtemp5399);

	rtemp5399.free(); // Realspace
	{
		const int i = 0;
		ktemp5400[0] = 0.33333333333333337*R*R*R*ktemp5400[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5400[i] = std::complex<double>(ktemp5400[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5400[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5402(Nx*Ny*Nz); // RS
	rtemp5402 = ifft(Nx,Ny,Nz,dV,ktemp5400);

	ktemp5400.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5402[i] = rtemp5397[i] + 10.89604325880265*rtemp5402[i];
	}

	rtemp5397.free(); // Realspace
	Vector rtemp5404(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5404[i] = 2.0*rtemp67[i]*rtemp688[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5405(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5405 = fft(Nx,Ny,Nz,dV,rtemp5404);

	rtemp5404.free(); // Realspace
	{
		const int i = 0;
		ktemp5405[0] = 0.33333333333333337*R*R*R*ktemp5405[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5405[i] = std::complex<double>(ktemp5405[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5405[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5407(Nx*Ny*Nz); // RS
	rtemp5407 = ifft(Nx,Ny,Nz,dV,ktemp5405);

	ktemp5405.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5407[i] = rtemp5402[i] - 10.89604325880265*rtemp5407[i];
	}

	rtemp5402.free(); // Realspace
	Vector rtemp5409(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5409[i] = 2.0*rtemp67[i]*rtemp688[i]*rtemp77[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5410(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5410 = fft(Nx,Ny,Nz,dV,rtemp5409);

	rtemp5409.free(); // Realspace
	{
		const int i = 0;
		ktemp5410[0] = 0.33333333333333337*R*R*R*ktemp5410[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5410[i] = std::complex<double>(ktemp5410[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5410[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5412(Nx*Ny*Nz); // RS
	rtemp5412 = ifft(Nx,Ny,Nz,dV,ktemp5410);

	ktemp5410.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5412[i] = rtemp5407[i] - 5.448021629401325*rtemp5412[i];
	}

	rtemp5407.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp688[i] = 2.0*rtemp67[i]*rtemp688[i]*rtemp77[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5415(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5415 = fft(Nx,Ny,Nz,dV,rtemp688);

	rtemp688.free(); // Realspace
	{
		const int i = 0;
		ktemp5415[0] = 0.33333333333333337*R*R*R*ktemp5415[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5415[i] = std::complex<double>(ktemp5415[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5415[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5417(Nx*Ny*Nz); // RS
	rtemp5417 = ifft(Nx,Ny,Nz,dV,ktemp5415);

	ktemp5415.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5417[i] = rtemp5412[i] + 5.448021629401325*rtemp5417[i];
	}

	rtemp5412.free(); // Realspace
	Vector rtemp5419(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5419[i] = 2.0*rtemp67[i]*rtemp695[i]*rtemp77[i]*log(t1)/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5420(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5420 = fft(Nx,Ny,Nz,dV,rtemp5419);

	rtemp5419.free(); // Realspace
	{
		const int i = 0;
		ktemp5420[0] = 0.33333333333333337*R*R*R*ktemp5420[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5420[i] = std::complex<double>(ktemp5420[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5420[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5422(Nx*Ny*Nz); // RS
	rtemp5422 = ifft(Nx,Ny,Nz,dV,ktemp5420);

	ktemp5420.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5422[i] = rtemp5417[i] - 118.06678758209827*rtemp5422[i];
	}

	rtemp5417.free(); // Realspace
	Vector rtemp5424(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5424[i] = 2.0*rtemp67[i]*rtemp695[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5425(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5425 = fft(Nx,Ny,Nz,dV,rtemp5424);

	rtemp5424.free(); // Realspace
	{
		const int i = 0;
		ktemp5425[0] = 0.33333333333333337*R*R*R*ktemp5425[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5425[i] = std::complex<double>(ktemp5425[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5425[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5427(Nx*Ny*Nz); // RS
	rtemp5427 = ifft(Nx,Ny,Nz,dV,ktemp5425);

	ktemp5425.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5427[i] = rtemp5422[i] + 118.06678758209827*rtemp5427[i];
	}

	rtemp5422.free(); // Realspace
	Vector rtemp5429(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5429[i] = 2.0*rtemp67[i]*rtemp695[i]*rtemp77[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5430(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5430 = fft(Nx,Ny,Nz,dV,rtemp5429);

	rtemp5429.free(); // Realspace
	{
		const int i = 0;
		ktemp5430[0] = 0.33333333333333337*R*R*R*ktemp5430[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5430[i] = std::complex<double>(ktemp5430[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5430[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5432(Nx*Ny*Nz); // RS
	rtemp5432 = ifft(Nx,Ny,Nz,dV,ktemp5430);

	ktemp5430.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5432[i] = rtemp5427[i] + 59.033393791049136*rtemp5432[i];
	}

	rtemp5427.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp695[i] = 2.0*rtemp67[i]*rtemp695[i]*rtemp77[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5435(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5435 = fft(Nx,Ny,Nz,dV,rtemp695);

	rtemp695.free(); // Realspace
	{
		const int i = 0;
		ktemp5435[0] = 0.33333333333333337*R*R*R*ktemp5435[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5435[i] = std::complex<double>(ktemp5435[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5435[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5437(Nx*Ny*Nz); // RS
	rtemp5437 = ifft(Nx,Ny,Nz,dV,ktemp5435);

	ktemp5435.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5437[i] = rtemp5432[i] - 59.033393791049136*rtemp5437[i];
	}

	rtemp5432.free(); // Realspace
	Vector rtemp5439(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5439[i] = 2.0*rtemp67[i]*rtemp702[i]*rtemp77[i]*log(t1)/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5440(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5440 = fft(Nx,Ny,Nz,dV,rtemp5439);

	rtemp5439.free(); // Realspace
	{
		const int i = 0;
		ktemp5440[0] = 0.33333333333333337*R*R*R*ktemp5440[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5440[i] = std::complex<double>(ktemp5440[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5440[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5442(Nx*Ny*Nz); // RS
	rtemp5442 = ifft(Nx,Ny,Nz,dV,ktemp5440);

	ktemp5440.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5442[i] = rtemp5437[i] - 92.32685930405724*rtemp5442[i];
	}

	rtemp5437.free(); // Realspace
	Vector rtemp5444(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5444[i] = 2.0*rtemp67[i]*rtemp702[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5445(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5445 = fft(Nx,Ny,Nz,dV,rtemp5444);

	rtemp5444.free(); // Realspace
	{
		const int i = 0;
		ktemp5445[0] = 0.33333333333333337*R*R*R*ktemp5445[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5445[i] = std::complex<double>(ktemp5445[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5445[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5447(Nx*Ny*Nz); // RS
	rtemp5447 = ifft(Nx,Ny,Nz,dV,ktemp5445);

	ktemp5445.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5447[i] = rtemp5442[i] + 92.32685930405724*rtemp5447[i];
	}

	rtemp5442.free(); // Realspace
	Vector rtemp5449(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5449[i] = 2.0*rtemp67[i]*rtemp702[i]*rtemp77[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5450(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5450 = fft(Nx,Ny,Nz,dV,rtemp5449);

	rtemp5449.free(); // Realspace
	{
		const int i = 0;
		ktemp5450[0] = 0.33333333333333337*R*R*R*ktemp5450[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5450[i] = std::complex<double>(ktemp5450[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5450[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5452(Nx*Ny*Nz); // RS
	rtemp5452 = ifft(Nx,Ny,Nz,dV,ktemp5450);

	ktemp5450.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5452[i] = rtemp5447[i] + 46.16342965202862*rtemp5452[i];
	}

	rtemp5447.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp702[i] = 2.0*rtemp67[i]*rtemp702[i]*rtemp77[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5455(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5455 = fft(Nx,Ny,Nz,dV,rtemp702);

	rtemp702.free(); // Realspace
	{
		const int i = 0;
		ktemp5455[0] = 0.33333333333333337*R*R*R*ktemp5455[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5455[i] = std::complex<double>(ktemp5455[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5455[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5457(Nx*Ny*Nz); // RS
	rtemp5457 = ifft(Nx,Ny,Nz,dV,ktemp5455);

	ktemp5455.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5457[i] = rtemp5452[i] - 46.16342965202862*rtemp5457[i];
	}

	rtemp5452.free(); // Realspace
	Vector rtemp5459(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5459[i] = 2.0*rtemp67[i]*rtemp709[i]*rtemp77[i]*log(t1)/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5460(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5460 = fft(Nx,Ny,Nz,dV,rtemp5459);

	rtemp5459.free(); // Realspace
	{
		const int i = 0;
		ktemp5460[0] = 0.33333333333333337*R*R*R*ktemp5460[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5460[i] = std::complex<double>(ktemp5460[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5460[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5462(Nx*Ny*Nz); // RS
	rtemp5462 = ifft(Nx,Ny,Nz,dV,ktemp5460);

	ktemp5460.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5462[i] = rtemp5457[i] + 52.63789013914324*rtemp5462[i];
	}

	rtemp5457.free(); // Realspace
	Vector rtemp5464(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5464[i] = 2.0*rtemp67[i]*rtemp709[i]*rtemp77[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5465(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5465 = fft(Nx,Ny,Nz,dV,rtemp5464);

	rtemp5464.free(); // Realspace
	{
		const int i = 0;
		ktemp5465[0] = 0.33333333333333337*R*R*R*ktemp5465[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5465[i] = std::complex<double>(ktemp5465[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5465[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5467(Nx*Ny*Nz); // RS
	rtemp5467 = ifft(Nx,Ny,Nz,dV,ktemp5465);

	ktemp5465.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5467[i] = rtemp5462[i] - 52.63789013914324*rtemp5467[i];
	}

	rtemp5462.free(); // Realspace
	Vector rtemp5469(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5469[i] = 2.0*rtemp67[i]*rtemp709[i]*rtemp77[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5470(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5470 = fft(Nx,Ny,Nz,dV,rtemp5469);

	rtemp5469.free(); // Realspace
	{
		const int i = 0;
		ktemp5470[0] = 0.33333333333333337*R*R*R*ktemp5470[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5470[i] = std::complex<double>(ktemp5470[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5470[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5472(Nx*Ny*Nz); // RS
	rtemp5472 = ifft(Nx,Ny,Nz,dV,ktemp5470);

	ktemp5470.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5472[i] = rtemp5467[i] - 26.31894506957162*rtemp5472[i];
	}

	rtemp5467.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp709[i] = 2.0*rtemp67[i]*rtemp709[i]*rtemp77[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5475(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5475 = fft(Nx,Ny,Nz,dV,rtemp709);

	rtemp709.free(); // Realspace
	{
		const int i = 0;
		ktemp5475[0] = 0.33333333333333337*R*R*R*ktemp5475[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5475[i] = std::complex<double>(ktemp5475[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5475[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5477(Nx*Ny*Nz); // RS
	rtemp5477 = ifft(Nx,Ny,Nz,dV,ktemp5475);

	ktemp5475.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5477[i] = rtemp5472[i] + 26.31894506957162*rtemp5477[i];
	}

	rtemp5472.free(); // Realspace
	Vector rtemp5479(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5479[i] = 2.0*rtemp67[i]*rtemp716[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp5480(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5480 = fft(Nx,Ny,Nz,dV,rtemp5479);

	rtemp5479.free(); // Realspace
	{
		const int i = 0;
		ktemp5480[0] = 0.33333333333333337*R*R*R*ktemp5480[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5480[i] = std::complex<double>(ktemp5480[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5480[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5482(Nx*Ny*Nz); // RS
	rtemp5482 = ifft(Nx,Ny,Nz,dV,ktemp5480);

	ktemp5480.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5482[i] = rtemp5477[i] - 17.265227965638985*rtemp5482[i];
	}

	rtemp5477.free(); // Realspace
	Vector rtemp5484(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5484[i] = 2.0*rtemp67[i]*rtemp723[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp5485(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5485 = fft(Nx,Ny,Nz,dV,rtemp5484);

	rtemp5484.free(); // Realspace
	{
		const int i = 0;
		ktemp5485[0] = 0.33333333333333337*R*R*R*ktemp5485[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5485[i] = std::complex<double>(ktemp5485[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5485[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5487(Nx*Ny*Nz); // RS
	rtemp5487 = ifft(Nx,Ny,Nz,dV,ktemp5485);

	ktemp5485.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5487[i] = rtemp5482[i] + 51.16402921524723*rtemp5487[i];
	}

	rtemp5482.free(); // Realspace
	Vector rtemp5489(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5489[i] = 2.0*rtemp67[i]*rtemp730[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp5490(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5490 = fft(Nx,Ny,Nz,dV,rtemp5489);

	rtemp5489.free(); // Realspace
	{
		const int i = 0;
		ktemp5490[0] = 0.33333333333333337*R*R*R*ktemp5490[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5490[i] = std::complex<double>(ktemp5490[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5490[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5492(Nx*Ny*Nz); // RS
	rtemp5492 = ifft(Nx,Ny,Nz,dV,ktemp5490);

	ktemp5490.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5492[i] = rtemp5487[i] - 34.10935281016482*rtemp5492[i];
	}

	rtemp5487.free(); // Realspace
	Vector rtemp5494(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5494[i] = 2.0*rtemp67[i]*rtemp737[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp5495(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5495 = fft(Nx,Ny,Nz,dV,rtemp5494);

	rtemp5494.free(); // Realspace
	{
		const int i = 0;
		ktemp5495[0] = 0.33333333333333337*R*R*R*ktemp5495[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5495[i] = std::complex<double>(ktemp5495[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5495[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5497(Nx*Ny*Nz); // RS
	rtemp5497 = ifft(Nx,Ny,Nz,dV,ktemp5495);

	ktemp5495.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5497[i] = rtemp5492[i] + 74.95635555813998*rtemp5497[i];
	}

	rtemp5492.free(); // Realspace
	Vector rtemp5499(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5499[i] = 2.0*rtemp67[i]*rtemp744[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp5500(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5500 = fft(Nx,Ny,Nz,dV,rtemp5499);

	rtemp5499.free(); // Realspace
	{
		const int i = 0;
		ktemp5500[0] = 0.33333333333333337*R*R*R*ktemp5500[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5500[i] = std::complex<double>(ktemp5500[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5500[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5502(Nx*Ny*Nz); // RS
	rtemp5502 = ifft(Nx,Ny,Nz,dV,ktemp5500);

	ktemp5500.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5502[i] = rtemp5497[i] - 308.2474846548228*rtemp5502[i];
	}

	rtemp5497.free(); // Realspace
	Vector rtemp5504(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5504[i] = 2.0*rtemp67[i]*rtemp751[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp5505(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5505 = fft(Nx,Ny,Nz,dV,rtemp5504);

	rtemp5504.free(); // Realspace
	{
		const int i = 0;
		ktemp5505[0] = 0.33333333333333337*R*R*R*ktemp5505[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5505[i] = std::complex<double>(ktemp5505[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5505[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5507(Nx*Ny*Nz); // RS
	rtemp5507 = ifft(Nx,Ny,Nz,dV,ktemp5505);

	ktemp5505.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5507[i] = rtemp5502[i] - 0.10527578027828648*rtemp5507[i];
	}

	rtemp5502.free(); // Realspace
	Vector rtemp5509(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5509[i] = 2.0*rtemp67[i]*rtemp758[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp5510(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5510 = fft(Nx,Ny,Nz,dV,rtemp5509);

	rtemp5509.free(); // Realspace
	{
		const int i = 0;
		ktemp5510[0] = 0.33333333333333337*R*R*R*ktemp5510[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5510[i] = std::complex<double>(ktemp5510[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5510[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5512(Nx*Ny*Nz); // RS
	rtemp5512 = ifft(Nx,Ny,Nz,dV,ktemp5510);

	ktemp5510.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5512[i] = rtemp5507[i] + 220.23693234217532*rtemp5512[i];
	}

	rtemp5507.free(); // Realspace
	Vector rtemp5514(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5514[i] = 2.0*rtemp67[i]*rtemp765[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp5515(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5515 = fft(Nx,Ny,Nz,dV,rtemp5514);

	rtemp5514.free(); // Realspace
	{
		const int i = 0;
		ktemp5515[0] = 0.33333333333333337*R*R*R*ktemp5515[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5515[i] = std::complex<double>(ktemp5515[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5515[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5517(Nx*Ny*Nz); // RS
	rtemp5517 = ifft(Nx,Ny,Nz,dV,ktemp5515);

	ktemp5515.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5517[i] = rtemp5512[i] + 463.5292605652953*rtemp5517[i];
	}

	rtemp5512.free(); // Realspace
	Vector rtemp5519(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5519[i] = 2.0*rtemp67[i]*rtemp772[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp5520(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5520 = fft(Nx,Ny,Nz,dV,rtemp5519);

	rtemp5519.free(); // Realspace
	{
		const int i = 0;
		ktemp5520[0] = 0.33333333333333337*R*R*R*ktemp5520[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5520[i] = std::complex<double>(ktemp5520[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5520[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5522(Nx*Ny*Nz); // RS
	rtemp5522 = ifft(Nx,Ny,Nz,dV,ktemp5520);

	ktemp5520.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5522[i] = rtemp5517[i] - 391.6259026352257*rtemp5522[i];
	}

	rtemp5517.free(); // Realspace
	Vector rtemp5524(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5524[i] = 2.0*rtemp67[i]*rtemp779[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp5525(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5525 = fft(Nx,Ny,Nz,dV,rtemp5524);

	rtemp5524.free(); // Realspace
	{
		const int i = 0;
		ktemp5525[0] = 0.33333333333333337*R*R*R*ktemp5525[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5525[i] = std::complex<double>(ktemp5525[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5525[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5527(Nx*Ny*Nz); // RS
	rtemp5527 = ifft(Nx,Ny,Nz,dV,ktemp5525);

	ktemp5525.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5527[i] = rtemp5522[i] + 76.43021648203597*rtemp5527[i];
	}

	rtemp5522.free(); // Realspace
	Vector rtemp5529(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5529[i] = 2.0*rtemp67[i]*rtemp786[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp5530(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5530 = fft(Nx,Ny,Nz,dV,rtemp5529);

	rtemp5529.free(); // Realspace
	{
		const int i = 0;
		ktemp5530[0] = 0.33333333333333337*R*R*R*ktemp5530[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5530[i] = std::complex<double>(ktemp5530[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5530[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5532(Nx*Ny*Nz); // RS
	rtemp5532 = ifft(Nx,Ny,Nz,dV,ktemp5530);

	ktemp5530.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5532[i] = rtemp5527[i] + 2.842446067513735*rtemp5532[i];
	}

	rtemp5527.free(); // Realspace
	Vector rtemp5534(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5534[i] = 2.0*rtemp67[i]*rtemp793[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp5535(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5535 = fft(Nx,Ny,Nz,dV,rtemp5534);

	rtemp5534.free(); // Realspace
	{
		const int i = 0;
		ktemp5535[0] = 0.33333333333333337*R*R*R*ktemp5535[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5535[i] = std::complex<double>(ktemp5535[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5535[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5537(Nx*Ny*Nz); // RS
	rtemp5537 = ifft(Nx,Ny,Nz,dV,ktemp5535);

	ktemp5535.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5537[i] = rtemp5532[i] + 132.3316558098061*rtemp5537[i];
	}

	rtemp5532.free(); // Realspace
	Vector rtemp5539(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5539[i] = 2.0*rtemp67[i]*rtemp800[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp5540(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5540 = fft(Nx,Ny,Nz,dV,rtemp5539);

	rtemp5539.free(); // Realspace
	{
		const int i = 0;
		ktemp5540[0] = 0.33333333333333337*R*R*R*ktemp5540[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5540[i] = std::complex<double>(ktemp5540[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5540[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5542(Nx*Ny*Nz); // RS
	rtemp5542 = ifft(Nx,Ny,Nz,dV,ktemp5540);

	ktemp5540.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5542[i] = rtemp5537[i] - 37.47817777906999*rtemp5542[i];
	}

	rtemp5537.free(); // Realspace
	Vector rtemp5544(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5544[i] = 2.0*rtemp67[i]*rtemp807[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp5545(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5545 = fft(Nx,Ny,Nz,dV,rtemp5544);

	rtemp5544.free(); // Realspace
	{
		const int i = 0;
		ktemp5545[0] = 0.33333333333333337*R*R*R*ktemp5545[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5545[i] = std::complex<double>(ktemp5545[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5545[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5547(Nx*Ny*Nz); // RS
	rtemp5547 = ifft(Nx,Ny,Nz,dV,ktemp5545);

	ktemp5545.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5547[i] = rtemp5542[i] + 10.89604325880265*rtemp5547[i];
	}

	rtemp5542.free(); // Realspace
	Vector rtemp5549(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5549[i] = 2.0*rtemp67[i]*rtemp814[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp5550(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5550 = fft(Nx,Ny,Nz,dV,rtemp5549);

	rtemp5549.free(); // Realspace
	{
		const int i = 0;
		ktemp5550[0] = 0.33333333333333337*R*R*R*ktemp5550[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5550[i] = std::complex<double>(ktemp5550[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5550[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5552(Nx*Ny*Nz); // RS
	rtemp5552 = ifft(Nx,Ny,Nz,dV,ktemp5550);

	ktemp5550.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5552[i] = rtemp5547[i] - 118.06678758209827*rtemp5552[i];
	}

	rtemp5547.free(); // Realspace
	Vector rtemp5554(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5554[i] = 2.0*rtemp67[i]*rtemp81[i]*rtemp821[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp5555(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5555 = fft(Nx,Ny,Nz,dV,rtemp5554);

	rtemp5554.free(); // Realspace
	{
		const int i = 0;
		ktemp5555[0] = 0.33333333333333337*R*R*R*ktemp5555[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5555[i] = std::complex<double>(ktemp5555[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5555[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5557(Nx*Ny*Nz); // RS
	rtemp5557 = ifft(Nx,Ny,Nz,dV,ktemp5555);

	ktemp5555.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5557[i] = rtemp5552[i] - 92.32685930405724*rtemp5557[i];
	}

	rtemp5552.free(); // Realspace
	Vector rtemp5559(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5559[i] = 2.0*rtemp67[i]*rtemp81[i]*rtemp828[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp5560(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5560 = fft(Nx,Ny,Nz,dV,rtemp5559);

	rtemp5559.free(); // Realspace
	{
		const int i = 0;
		ktemp5560[0] = 0.33333333333333337*R*R*R*ktemp5560[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5560[i] = std::complex<double>(ktemp5560[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5560[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5562(Nx*Ny*Nz); // RS
	rtemp5562 = ifft(Nx,Ny,Nz,dV,ktemp5560);

	ktemp5560.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5562[i] = rtemp5557[i] + 52.63789013914324*rtemp5562[i];
	}

	rtemp5557.free(); // Realspace
	Vector rtemp5564(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5564[i] = 2.0*rtemp67[i]*rtemp716[i]*rtemp81[i]*log(t1)/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5565(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5565 = fft(Nx,Ny,Nz,dV,rtemp5564);

	rtemp5564.free(); // Realspace
	{
		const int i = 0;
		ktemp5565[0] = 0.33333333333333337*R*R*R*ktemp5565[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5565[i] = std::complex<double>(ktemp5565[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5565[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5567(Nx*Ny*Nz); // RS
	rtemp5567 = ifft(Nx,Ny,Nz,dV,ktemp5565);

	ktemp5565.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5567[i] = rtemp5562[i] - 17.265227965638985*rtemp5567[i];
	}

	rtemp5562.free(); // Realspace
	Vector rtemp5569(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5569[i] = 2.0*rtemp67[i]*rtemp716[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5570(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5570 = fft(Nx,Ny,Nz,dV,rtemp5569);

	rtemp5569.free(); // Realspace
	{
		const int i = 0;
		ktemp5570[0] = 0.33333333333333337*R*R*R*ktemp5570[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5570[i] = std::complex<double>(ktemp5570[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5570[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5572(Nx*Ny*Nz); // RS
	rtemp5572 = ifft(Nx,Ny,Nz,dV,ktemp5570);

	ktemp5570.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5572[i] = rtemp5567[i] + 17.265227965638985*rtemp5572[i];
	}

	rtemp5567.free(); // Realspace
	Vector rtemp5574(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5574[i] = 2.0*rtemp67[i]*rtemp716[i]*rtemp81[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5575(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5575 = fft(Nx,Ny,Nz,dV,rtemp5574);

	rtemp5574.free(); // Realspace
	{
		const int i = 0;
		ktemp5575[0] = 0.33333333333333337*R*R*R*ktemp5575[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5575[i] = std::complex<double>(ktemp5575[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5575[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5577(Nx*Ny*Nz); // RS
	rtemp5577 = ifft(Nx,Ny,Nz,dV,ktemp5575);

	ktemp5575.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5577[i] = rtemp5572[i] + 8.632613982819493*rtemp5577[i];
	}

	rtemp5572.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp716[i] = 2.0*rtemp67[i]*rtemp716[i]*rtemp81[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5580(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5580 = fft(Nx,Ny,Nz,dV,rtemp716);

	rtemp716.free(); // Realspace
	{
		const int i = 0;
		ktemp5580[0] = 0.33333333333333337*R*R*R*ktemp5580[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5580[i] = std::complex<double>(ktemp5580[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5580[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5582(Nx*Ny*Nz); // RS
	rtemp5582 = ifft(Nx,Ny,Nz,dV,ktemp5580);

	ktemp5580.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5582[i] = rtemp5577[i] - 8.632613982819493*rtemp5582[i];
	}

	rtemp5577.free(); // Realspace
	Vector rtemp5584(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5584[i] = 2.0*rtemp67[i]*rtemp723[i]*rtemp81[i]*log(t1)/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5585(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5585 = fft(Nx,Ny,Nz,dV,rtemp5584);

	rtemp5584.free(); // Realspace
	{
		const int i = 0;
		ktemp5585[0] = 0.33333333333333337*R*R*R*ktemp5585[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5585[i] = std::complex<double>(ktemp5585[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5585[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5587(Nx*Ny*Nz); // RS
	rtemp5587 = ifft(Nx,Ny,Nz,dV,ktemp5585);

	ktemp5585.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5587[i] = rtemp5582[i] + 51.16402921524723*rtemp5587[i];
	}

	rtemp5582.free(); // Realspace
	Vector rtemp5589(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5589[i] = 2.0*rtemp67[i]*rtemp723[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5590(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5590 = fft(Nx,Ny,Nz,dV,rtemp5589);

	rtemp5589.free(); // Realspace
	{
		const int i = 0;
		ktemp5590[0] = 0.33333333333333337*R*R*R*ktemp5590[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5590[i] = std::complex<double>(ktemp5590[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5590[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5592(Nx*Ny*Nz); // RS
	rtemp5592 = ifft(Nx,Ny,Nz,dV,ktemp5590);

	ktemp5590.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5592[i] = rtemp5587[i] - 51.16402921524723*rtemp5592[i];
	}

	rtemp5587.free(); // Realspace
	Vector rtemp5594(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5594[i] = 2.0*rtemp67[i]*rtemp723[i]*rtemp81[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5595(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5595 = fft(Nx,Ny,Nz,dV,rtemp5594);

	rtemp5594.free(); // Realspace
	{
		const int i = 0;
		ktemp5595[0] = 0.33333333333333337*R*R*R*ktemp5595[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5595[i] = std::complex<double>(ktemp5595[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5595[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5597(Nx*Ny*Nz); // RS
	rtemp5597 = ifft(Nx,Ny,Nz,dV,ktemp5595);

	ktemp5595.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5597[i] = rtemp5592[i] - 25.582014607623616*rtemp5597[i];
	}

	rtemp5592.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp723[i] = 2.0*rtemp67[i]*rtemp723[i]*rtemp81[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5600(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5600 = fft(Nx,Ny,Nz,dV,rtemp723);

	rtemp723.free(); // Realspace
	{
		const int i = 0;
		ktemp5600[0] = 0.33333333333333337*R*R*R*ktemp5600[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5600[i] = std::complex<double>(ktemp5600[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5600[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5602(Nx*Ny*Nz); // RS
	rtemp5602 = ifft(Nx,Ny,Nz,dV,ktemp5600);

	ktemp5600.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5602[i] = rtemp5597[i] + 25.582014607623616*rtemp5602[i];
	}

	rtemp5597.free(); // Realspace
	Vector rtemp5604(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5604[i] = 2.0*rtemp67[i]*rtemp730[i]*rtemp81[i]*log(t1)/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5605(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5605 = fft(Nx,Ny,Nz,dV,rtemp5604);

	rtemp5604.free(); // Realspace
	{
		const int i = 0;
		ktemp5605[0] = 0.33333333333333337*R*R*R*ktemp5605[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5605[i] = std::complex<double>(ktemp5605[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5605[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5607(Nx*Ny*Nz); // RS
	rtemp5607 = ifft(Nx,Ny,Nz,dV,ktemp5605);

	ktemp5605.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5607[i] = rtemp5602[i] - 34.10935281016482*rtemp5607[i];
	}

	rtemp5602.free(); // Realspace
	Vector rtemp5609(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5609[i] = 2.0*rtemp67[i]*rtemp730[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5610(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5610 = fft(Nx,Ny,Nz,dV,rtemp5609);

	rtemp5609.free(); // Realspace
	{
		const int i = 0;
		ktemp5610[0] = 0.33333333333333337*R*R*R*ktemp5610[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5610[i] = std::complex<double>(ktemp5610[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5610[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5612(Nx*Ny*Nz); // RS
	rtemp5612 = ifft(Nx,Ny,Nz,dV,ktemp5610);

	ktemp5610.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5612[i] = rtemp5607[i] + 34.10935281016482*rtemp5612[i];
	}

	rtemp5607.free(); // Realspace
	Vector rtemp5614(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5614[i] = 2.0*rtemp67[i]*rtemp730[i]*rtemp81[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5615(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5615 = fft(Nx,Ny,Nz,dV,rtemp5614);

	rtemp5614.free(); // Realspace
	{
		const int i = 0;
		ktemp5615[0] = 0.33333333333333337*R*R*R*ktemp5615[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5615[i] = std::complex<double>(ktemp5615[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5615[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5617(Nx*Ny*Nz); // RS
	rtemp5617 = ifft(Nx,Ny,Nz,dV,ktemp5615);

	ktemp5615.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5617[i] = rtemp5612[i] + 17.05467640508241*rtemp5617[i];
	}

	rtemp5612.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp730[i] = 2.0*rtemp67[i]*rtemp730[i]*rtemp81[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5620(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5620 = fft(Nx,Ny,Nz,dV,rtemp730);

	rtemp730.free(); // Realspace
	{
		const int i = 0;
		ktemp5620[0] = 0.33333333333333337*R*R*R*ktemp5620[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5620[i] = std::complex<double>(ktemp5620[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5620[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5622(Nx*Ny*Nz); // RS
	rtemp5622 = ifft(Nx,Ny,Nz,dV,ktemp5620);

	ktemp5620.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5622[i] = rtemp5617[i] - 17.05467640508241*rtemp5622[i];
	}

	rtemp5617.free(); // Realspace
	Vector rtemp5624(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5624[i] = 2.0*rtemp67[i]*rtemp737[i]*rtemp81[i]*log(t1)/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5625(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5625 = fft(Nx,Ny,Nz,dV,rtemp5624);

	rtemp5624.free(); // Realspace
	{
		const int i = 0;
		ktemp5625[0] = 0.33333333333333337*R*R*R*ktemp5625[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5625[i] = std::complex<double>(ktemp5625[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5625[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5627(Nx*Ny*Nz); // RS
	rtemp5627 = ifft(Nx,Ny,Nz,dV,ktemp5625);

	ktemp5625.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5627[i] = rtemp5622[i] + 74.95635555813998*rtemp5627[i];
	}

	rtemp5622.free(); // Realspace
	Vector rtemp5629(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5629[i] = 2.0*rtemp67[i]*rtemp737[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5630(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5630 = fft(Nx,Ny,Nz,dV,rtemp5629);

	rtemp5629.free(); // Realspace
	{
		const int i = 0;
		ktemp5630[0] = 0.33333333333333337*R*R*R*ktemp5630[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5630[i] = std::complex<double>(ktemp5630[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5630[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5632(Nx*Ny*Nz); // RS
	rtemp5632 = ifft(Nx,Ny,Nz,dV,ktemp5630);

	ktemp5630.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5632[i] = rtemp5627[i] - 74.95635555813998*rtemp5632[i];
	}

	rtemp5627.free(); // Realspace
	Vector rtemp5634(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5634[i] = 2.0*rtemp67[i]*rtemp737[i]*rtemp81[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5635(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5635 = fft(Nx,Ny,Nz,dV,rtemp5634);

	rtemp5634.free(); // Realspace
	{
		const int i = 0;
		ktemp5635[0] = 0.33333333333333337*R*R*R*ktemp5635[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5635[i] = std::complex<double>(ktemp5635[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5635[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5637(Nx*Ny*Nz); // RS
	rtemp5637 = ifft(Nx,Ny,Nz,dV,ktemp5635);

	ktemp5635.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5637[i] = rtemp5632[i] - 37.47817777906999*rtemp5637[i];
	}

	rtemp5632.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp737[i] = 2.0*rtemp67[i]*rtemp737[i]*rtemp81[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5640(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5640 = fft(Nx,Ny,Nz,dV,rtemp737);

	rtemp737.free(); // Realspace
	{
		const int i = 0;
		ktemp5640[0] = 0.33333333333333337*R*R*R*ktemp5640[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5640[i] = std::complex<double>(ktemp5640[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5640[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5642(Nx*Ny*Nz); // RS
	rtemp5642 = ifft(Nx,Ny,Nz,dV,ktemp5640);

	ktemp5640.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5642[i] = rtemp5637[i] + 37.47817777906999*rtemp5642[i];
	}

	rtemp5637.free(); // Realspace
	Vector rtemp5644(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5644[i] = 2.0*rtemp67[i]*rtemp744[i]*rtemp81[i]*log(t1)/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5645(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5645 = fft(Nx,Ny,Nz,dV,rtemp5644);

	rtemp5644.free(); // Realspace
	{
		const int i = 0;
		ktemp5645[0] = 0.33333333333333337*R*R*R*ktemp5645[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5645[i] = std::complex<double>(ktemp5645[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5645[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5647(Nx*Ny*Nz); // RS
	rtemp5647 = ifft(Nx,Ny,Nz,dV,ktemp5645);

	ktemp5645.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5647[i] = rtemp5642[i] - 308.2474846548228*rtemp5647[i];
	}

	rtemp5642.free(); // Realspace
	Vector rtemp5649(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5649[i] = 2.0*rtemp67[i]*rtemp744[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5650(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5650 = fft(Nx,Ny,Nz,dV,rtemp5649);

	rtemp5649.free(); // Realspace
	{
		const int i = 0;
		ktemp5650[0] = 0.33333333333333337*R*R*R*ktemp5650[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5650[i] = std::complex<double>(ktemp5650[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5650[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5652(Nx*Ny*Nz); // RS
	rtemp5652 = ifft(Nx,Ny,Nz,dV,ktemp5650);

	ktemp5650.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5652[i] = rtemp5647[i] + 308.2474846548228*rtemp5652[i];
	}

	rtemp5647.free(); // Realspace
	Vector rtemp5654(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5654[i] = 2.0*rtemp67[i]*rtemp744[i]*rtemp81[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5655(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5655 = fft(Nx,Ny,Nz,dV,rtemp5654);

	rtemp5654.free(); // Realspace
	{
		const int i = 0;
		ktemp5655[0] = 0.33333333333333337*R*R*R*ktemp5655[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5655[i] = std::complex<double>(ktemp5655[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5655[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5657(Nx*Ny*Nz); // RS
	rtemp5657 = ifft(Nx,Ny,Nz,dV,ktemp5655);

	ktemp5655.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5657[i] = rtemp5652[i] + 154.1237423274114*rtemp5657[i];
	}

	rtemp5652.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp744[i] = 2.0*rtemp67[i]*rtemp744[i]*rtemp81[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5660(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5660 = fft(Nx,Ny,Nz,dV,rtemp744);

	rtemp744.free(); // Realspace
	{
		const int i = 0;
		ktemp5660[0] = 0.33333333333333337*R*R*R*ktemp5660[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5660[i] = std::complex<double>(ktemp5660[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5660[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5662(Nx*Ny*Nz); // RS
	rtemp5662 = ifft(Nx,Ny,Nz,dV,ktemp5660);

	ktemp5660.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5662[i] = rtemp5657[i] - 154.1237423274114*rtemp5662[i];
	}

	rtemp5657.free(); // Realspace
	Vector rtemp5664(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5664[i] = 2.0*rtemp67[i]*rtemp751[i]*rtemp81[i]*log(t1)/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5665(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5665 = fft(Nx,Ny,Nz,dV,rtemp5664);

	rtemp5664.free(); // Realspace
	{
		const int i = 0;
		ktemp5665[0] = 0.33333333333333337*R*R*R*ktemp5665[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5665[i] = std::complex<double>(ktemp5665[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5665[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5667(Nx*Ny*Nz); // RS
	rtemp5667 = ifft(Nx,Ny,Nz,dV,ktemp5665);

	ktemp5665.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5667[i] = rtemp5662[i] - 0.10527578027828648*rtemp5667[i];
	}

	rtemp5662.free(); // Realspace
	Vector rtemp5669(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5669[i] = 2.0*rtemp67[i]*rtemp751[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5670(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5670 = fft(Nx,Ny,Nz,dV,rtemp5669);

	rtemp5669.free(); // Realspace
	{
		const int i = 0;
		ktemp5670[0] = 0.33333333333333337*R*R*R*ktemp5670[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5670[i] = std::complex<double>(ktemp5670[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5670[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5672(Nx*Ny*Nz); // RS
	rtemp5672 = ifft(Nx,Ny,Nz,dV,ktemp5670);

	ktemp5670.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5672[i] = rtemp5667[i] + 0.10527578027828648*rtemp5672[i];
	}

	rtemp5667.free(); // Realspace
	Vector rtemp5674(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5674[i] = 2.0*rtemp67[i]*rtemp751[i]*rtemp81[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5675(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5675 = fft(Nx,Ny,Nz,dV,rtemp5674);

	rtemp5674.free(); // Realspace
	{
		const int i = 0;
		ktemp5675[0] = 0.33333333333333337*R*R*R*ktemp5675[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5675[i] = std::complex<double>(ktemp5675[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5675[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5677(Nx*Ny*Nz); // RS
	rtemp5677 = ifft(Nx,Ny,Nz,dV,ktemp5675);

	ktemp5675.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5677[i] = rtemp5672[i] + 5.263789013914324e-2*rtemp5677[i];
	}

	rtemp5672.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp751[i] = 2.0*rtemp67[i]*rtemp751[i]*rtemp81[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5680(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5680 = fft(Nx,Ny,Nz,dV,rtemp751);

	rtemp751.free(); // Realspace
	{
		const int i = 0;
		ktemp5680[0] = 0.33333333333333337*R*R*R*ktemp5680[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5680[i] = std::complex<double>(ktemp5680[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5680[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5682(Nx*Ny*Nz); // RS
	rtemp5682 = ifft(Nx,Ny,Nz,dV,ktemp5680);

	ktemp5680.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5682[i] = rtemp5677[i] - 5.263789013914324e-2*rtemp5682[i];
	}

	rtemp5677.free(); // Realspace
	Vector rtemp5684(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5684[i] = 2.0*rtemp67[i]*rtemp758[i]*rtemp81[i]*log(t1)/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5685(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5685 = fft(Nx,Ny,Nz,dV,rtemp5684);

	rtemp5684.free(); // Realspace
	{
		const int i = 0;
		ktemp5685[0] = 0.33333333333333337*R*R*R*ktemp5685[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5685[i] = std::complex<double>(ktemp5685[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5685[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5687(Nx*Ny*Nz); // RS
	rtemp5687 = ifft(Nx,Ny,Nz,dV,ktemp5685);

	ktemp5685.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5687[i] = rtemp5682[i] + 220.23693234217532*rtemp5687[i];
	}

	rtemp5682.free(); // Realspace
	Vector rtemp5689(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5689[i] = 2.0*rtemp67[i]*rtemp758[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5690(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5690 = fft(Nx,Ny,Nz,dV,rtemp5689);

	rtemp5689.free(); // Realspace
	{
		const int i = 0;
		ktemp5690[0] = 0.33333333333333337*R*R*R*ktemp5690[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5690[i] = std::complex<double>(ktemp5690[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5690[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5692(Nx*Ny*Nz); // RS
	rtemp5692 = ifft(Nx,Ny,Nz,dV,ktemp5690);

	ktemp5690.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5692[i] = rtemp5687[i] - 220.23693234217532*rtemp5692[i];
	}

	rtemp5687.free(); // Realspace
	Vector rtemp5694(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5694[i] = 2.0*rtemp67[i]*rtemp758[i]*rtemp81[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5695(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5695 = fft(Nx,Ny,Nz,dV,rtemp5694);

	rtemp5694.free(); // Realspace
	{
		const int i = 0;
		ktemp5695[0] = 0.33333333333333337*R*R*R*ktemp5695[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5695[i] = std::complex<double>(ktemp5695[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5695[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5697(Nx*Ny*Nz); // RS
	rtemp5697 = ifft(Nx,Ny,Nz,dV,ktemp5695);

	ktemp5695.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5697[i] = rtemp5692[i] - 110.11846617108766*rtemp5697[i];
	}

	rtemp5692.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp758[i] = 2.0*rtemp67[i]*rtemp758[i]*rtemp81[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5700(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5700 = fft(Nx,Ny,Nz,dV,rtemp758);

	rtemp758.free(); // Realspace
	{
		const int i = 0;
		ktemp5700[0] = 0.33333333333333337*R*R*R*ktemp5700[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5700[i] = std::complex<double>(ktemp5700[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5700[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5702(Nx*Ny*Nz); // RS
	rtemp5702 = ifft(Nx,Ny,Nz,dV,ktemp5700);

	ktemp5700.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5702[i] = rtemp5697[i] + 110.11846617108766*rtemp5702[i];
	}

	rtemp5697.free(); // Realspace
	Vector rtemp5704(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5704[i] = 2.0*rtemp67[i]*rtemp765[i]*rtemp81[i]*log(t1)/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5705(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5705 = fft(Nx,Ny,Nz,dV,rtemp5704);

	rtemp5704.free(); // Realspace
	{
		const int i = 0;
		ktemp5705[0] = 0.33333333333333337*R*R*R*ktemp5705[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5705[i] = std::complex<double>(ktemp5705[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5705[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5707(Nx*Ny*Nz); // RS
	rtemp5707 = ifft(Nx,Ny,Nz,dV,ktemp5705);

	ktemp5705.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5707[i] = rtemp5702[i] + 463.5292605652953*rtemp5707[i];
	}

	rtemp5702.free(); // Realspace
	Vector rtemp5709(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5709[i] = 2.0*rtemp67[i]*rtemp765[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5710(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5710 = fft(Nx,Ny,Nz,dV,rtemp5709);

	rtemp5709.free(); // Realspace
	{
		const int i = 0;
		ktemp5710[0] = 0.33333333333333337*R*R*R*ktemp5710[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5710[i] = std::complex<double>(ktemp5710[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5710[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5712(Nx*Ny*Nz); // RS
	rtemp5712 = ifft(Nx,Ny,Nz,dV,ktemp5710);

	ktemp5710.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5712[i] = rtemp5707[i] - 463.5292605652953*rtemp5712[i];
	}

	rtemp5707.free(); // Realspace
	Vector rtemp5714(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5714[i] = 2.0*rtemp67[i]*rtemp765[i]*rtemp81[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5715(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5715 = fft(Nx,Ny,Nz,dV,rtemp5714);

	rtemp5714.free(); // Realspace
	{
		const int i = 0;
		ktemp5715[0] = 0.33333333333333337*R*R*R*ktemp5715[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5715[i] = std::complex<double>(ktemp5715[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5715[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5717(Nx*Ny*Nz); // RS
	rtemp5717 = ifft(Nx,Ny,Nz,dV,ktemp5715);

	ktemp5715.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5717[i] = rtemp5712[i] - 231.76463028264766*rtemp5717[i];
	}

	rtemp5712.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp765[i] = 2.0*rtemp67[i]*rtemp765[i]*rtemp81[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5720(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5720 = fft(Nx,Ny,Nz,dV,rtemp765);

	rtemp765.free(); // Realspace
	{
		const int i = 0;
		ktemp5720[0] = 0.33333333333333337*R*R*R*ktemp5720[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5720[i] = std::complex<double>(ktemp5720[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5720[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5722(Nx*Ny*Nz); // RS
	rtemp5722 = ifft(Nx,Ny,Nz,dV,ktemp5720);

	ktemp5720.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5722[i] = rtemp5717[i] + 231.76463028264766*rtemp5722[i];
	}

	rtemp5717.free(); // Realspace
	Vector rtemp5724(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5724[i] = 2.0*rtemp67[i]*rtemp772[i]*rtemp81[i]*log(t1)/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5725(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5725 = fft(Nx,Ny,Nz,dV,rtemp5724);

	rtemp5724.free(); // Realspace
	{
		const int i = 0;
		ktemp5725[0] = 0.33333333333333337*R*R*R*ktemp5725[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5725[i] = std::complex<double>(ktemp5725[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5725[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5727(Nx*Ny*Nz); // RS
	rtemp5727 = ifft(Nx,Ny,Nz,dV,ktemp5725);

	ktemp5725.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5727[i] = rtemp5722[i] - 391.6259026352257*rtemp5727[i];
	}

	rtemp5722.free(); // Realspace
	Vector rtemp5729(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5729[i] = 2.0*rtemp67[i]*rtemp772[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5730(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5730 = fft(Nx,Ny,Nz,dV,rtemp5729);

	rtemp5729.free(); // Realspace
	{
		const int i = 0;
		ktemp5730[0] = 0.33333333333333337*R*R*R*ktemp5730[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5730[i] = std::complex<double>(ktemp5730[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5730[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5732(Nx*Ny*Nz); // RS
	rtemp5732 = ifft(Nx,Ny,Nz,dV,ktemp5730);

	ktemp5730.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5732[i] = rtemp5727[i] + 391.6259026352257*rtemp5732[i];
	}

	rtemp5727.free(); // Realspace
	Vector rtemp5734(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5734[i] = 2.0*rtemp67[i]*rtemp772[i]*rtemp81[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5735(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5735 = fft(Nx,Ny,Nz,dV,rtemp5734);

	rtemp5734.free(); // Realspace
	{
		const int i = 0;
		ktemp5735[0] = 0.33333333333333337*R*R*R*ktemp5735[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5735[i] = std::complex<double>(ktemp5735[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5735[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5737(Nx*Ny*Nz); // RS
	rtemp5737 = ifft(Nx,Ny,Nz,dV,ktemp5735);

	ktemp5735.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5737[i] = rtemp5732[i] + 195.81295131761286*rtemp5737[i];
	}

	rtemp5732.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp772[i] = 2.0*rtemp67[i]*rtemp772[i]*rtemp81[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5740(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5740 = fft(Nx,Ny,Nz,dV,rtemp772);

	rtemp772.free(); // Realspace
	{
		const int i = 0;
		ktemp5740[0] = 0.33333333333333337*R*R*R*ktemp5740[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5740[i] = std::complex<double>(ktemp5740[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5740[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5742(Nx*Ny*Nz); // RS
	rtemp5742 = ifft(Nx,Ny,Nz,dV,ktemp5740);

	ktemp5740.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5742[i] = rtemp5737[i] - 195.81295131761286*rtemp5742[i];
	}

	rtemp5737.free(); // Realspace
	Vector rtemp5744(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5744[i] = 2.0*rtemp67[i]*rtemp779[i]*rtemp81[i]*log(t1)/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5745(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5745 = fft(Nx,Ny,Nz,dV,rtemp5744);

	rtemp5744.free(); // Realspace
	{
		const int i = 0;
		ktemp5745[0] = 0.33333333333333337*R*R*R*ktemp5745[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5745[i] = std::complex<double>(ktemp5745[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5745[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5747(Nx*Ny*Nz); // RS
	rtemp5747 = ifft(Nx,Ny,Nz,dV,ktemp5745);

	ktemp5745.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5747[i] = rtemp5742[i] + 76.43021648203597*rtemp5747[i];
	}

	rtemp5742.free(); // Realspace
	Vector rtemp5749(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5749[i] = 2.0*rtemp67[i]*rtemp779[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5750(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5750 = fft(Nx,Ny,Nz,dV,rtemp5749);

	rtemp5749.free(); // Realspace
	{
		const int i = 0;
		ktemp5750[0] = 0.33333333333333337*R*R*R*ktemp5750[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5750[i] = std::complex<double>(ktemp5750[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5750[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5752(Nx*Ny*Nz); // RS
	rtemp5752 = ifft(Nx,Ny,Nz,dV,ktemp5750);

	ktemp5750.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5752[i] = rtemp5747[i] - 76.43021648203597*rtemp5752[i];
	}

	rtemp5747.free(); // Realspace
	Vector rtemp5754(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5754[i] = 2.0*rtemp67[i]*rtemp779[i]*rtemp81[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5755(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5755 = fft(Nx,Ny,Nz,dV,rtemp5754);

	rtemp5754.free(); // Realspace
	{
		const int i = 0;
		ktemp5755[0] = 0.33333333333333337*R*R*R*ktemp5755[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5755[i] = std::complex<double>(ktemp5755[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5755[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5757(Nx*Ny*Nz); // RS
	rtemp5757 = ifft(Nx,Ny,Nz,dV,ktemp5755);

	ktemp5755.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5757[i] = rtemp5752[i] - 38.21510824101799*rtemp5757[i];
	}

	rtemp5752.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp779[i] = 2.0*rtemp67[i]*rtemp779[i]*rtemp81[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5760(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5760 = fft(Nx,Ny,Nz,dV,rtemp779);

	rtemp779.free(); // Realspace
	{
		const int i = 0;
		ktemp5760[0] = 0.33333333333333337*R*R*R*ktemp5760[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5760[i] = std::complex<double>(ktemp5760[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5760[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5762(Nx*Ny*Nz); // RS
	rtemp5762 = ifft(Nx,Ny,Nz,dV,ktemp5760);

	ktemp5760.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5762[i] = rtemp5757[i] + 38.21510824101799*rtemp5762[i];
	}

	rtemp5757.free(); // Realspace
	Vector rtemp5764(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5764[i] = 2.0*rtemp67[i]*rtemp786[i]*rtemp81[i]*log(t1)/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5765(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5765 = fft(Nx,Ny,Nz,dV,rtemp5764);

	rtemp5764.free(); // Realspace
	{
		const int i = 0;
		ktemp5765[0] = 0.33333333333333337*R*R*R*ktemp5765[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5765[i] = std::complex<double>(ktemp5765[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5765[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5767(Nx*Ny*Nz); // RS
	rtemp5767 = ifft(Nx,Ny,Nz,dV,ktemp5765);

	ktemp5765.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5767[i] = rtemp5762[i] + 2.842446067513735*rtemp5767[i];
	}

	rtemp5762.free(); // Realspace
	Vector rtemp5769(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5769[i] = 2.0*rtemp67[i]*rtemp786[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5770(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5770 = fft(Nx,Ny,Nz,dV,rtemp5769);

	rtemp5769.free(); // Realspace
	{
		const int i = 0;
		ktemp5770[0] = 0.33333333333333337*R*R*R*ktemp5770[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5770[i] = std::complex<double>(ktemp5770[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5770[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5772(Nx*Ny*Nz); // RS
	rtemp5772 = ifft(Nx,Ny,Nz,dV,ktemp5770);

	ktemp5770.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5772[i] = rtemp5767[i] - 2.842446067513735*rtemp5772[i];
	}

	rtemp5767.free(); // Realspace
	Vector rtemp5774(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5774[i] = 2.0*rtemp67[i]*rtemp786[i]*rtemp81[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5775(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5775 = fft(Nx,Ny,Nz,dV,rtemp5774);

	rtemp5774.free(); // Realspace
	{
		const int i = 0;
		ktemp5775[0] = 0.33333333333333337*R*R*R*ktemp5775[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5775[i] = std::complex<double>(ktemp5775[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5775[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5777(Nx*Ny*Nz); // RS
	rtemp5777 = ifft(Nx,Ny,Nz,dV,ktemp5775);

	ktemp5775.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5777[i] = rtemp5772[i] - 1.4212230337568674*rtemp5777[i];
	}

	rtemp5772.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp786[i] = 2.0*rtemp67[i]*rtemp786[i]*rtemp81[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5780(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5780 = fft(Nx,Ny,Nz,dV,rtemp786);

	rtemp786.free(); // Realspace
	{
		const int i = 0;
		ktemp5780[0] = 0.33333333333333337*R*R*R*ktemp5780[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5780[i] = std::complex<double>(ktemp5780[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5780[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5782(Nx*Ny*Nz); // RS
	rtemp5782 = ifft(Nx,Ny,Nz,dV,ktemp5780);

	ktemp5780.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5782[i] = rtemp5777[i] + 1.4212230337568674*rtemp5782[i];
	}

	rtemp5777.free(); // Realspace
	Vector rtemp5784(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5784[i] = 2.0*rtemp67[i]*rtemp793[i]*rtemp81[i]*log(t1)/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5785(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5785 = fft(Nx,Ny,Nz,dV,rtemp5784);

	rtemp5784.free(); // Realspace
	{
		const int i = 0;
		ktemp5785[0] = 0.33333333333333337*R*R*R*ktemp5785[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5785[i] = std::complex<double>(ktemp5785[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5785[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5787(Nx*Ny*Nz); // RS
	rtemp5787 = ifft(Nx,Ny,Nz,dV,ktemp5785);

	ktemp5785.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5787[i] = rtemp5782[i] + 132.3316558098061*rtemp5787[i];
	}

	rtemp5782.free(); // Realspace
	Vector rtemp5789(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5789[i] = 2.0*rtemp67[i]*rtemp793[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5790(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5790 = fft(Nx,Ny,Nz,dV,rtemp5789);

	rtemp5789.free(); // Realspace
	{
		const int i = 0;
		ktemp5790[0] = 0.33333333333333337*R*R*R*ktemp5790[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5790[i] = std::complex<double>(ktemp5790[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5790[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5792(Nx*Ny*Nz); // RS
	rtemp5792 = ifft(Nx,Ny,Nz,dV,ktemp5790);

	ktemp5790.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5792[i] = rtemp5787[i] - 132.3316558098061*rtemp5792[i];
	}

	rtemp5787.free(); // Realspace
	Vector rtemp5794(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5794[i] = 2.0*rtemp67[i]*rtemp793[i]*rtemp81[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5795(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5795 = fft(Nx,Ny,Nz,dV,rtemp5794);

	rtemp5794.free(); // Realspace
	{
		const int i = 0;
		ktemp5795[0] = 0.33333333333333337*R*R*R*ktemp5795[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5795[i] = std::complex<double>(ktemp5795[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5795[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5797(Nx*Ny*Nz); // RS
	rtemp5797 = ifft(Nx,Ny,Nz,dV,ktemp5795);

	ktemp5795.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5797[i] = rtemp5792[i] - 66.16582790490305*rtemp5797[i];
	}

	rtemp5792.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp793[i] = 2.0*rtemp67[i]*rtemp793[i]*rtemp81[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5800(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5800 = fft(Nx,Ny,Nz,dV,rtemp793);

	rtemp793.free(); // Realspace
	{
		const int i = 0;
		ktemp5800[0] = 0.33333333333333337*R*R*R*ktemp5800[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5800[i] = std::complex<double>(ktemp5800[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5800[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5802(Nx*Ny*Nz); // RS
	rtemp5802 = ifft(Nx,Ny,Nz,dV,ktemp5800);

	ktemp5800.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5802[i] = rtemp5797[i] + 66.16582790490305*rtemp5802[i];
	}

	rtemp5797.free(); // Realspace
	Vector rtemp5804(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5804[i] = 2.0*rtemp67[i]*rtemp800[i]*rtemp81[i]*log(t1)/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5805(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5805 = fft(Nx,Ny,Nz,dV,rtemp5804);

	rtemp5804.free(); // Realspace
	{
		const int i = 0;
		ktemp5805[0] = 0.33333333333333337*R*R*R*ktemp5805[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5805[i] = std::complex<double>(ktemp5805[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5805[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5807(Nx*Ny*Nz); // RS
	rtemp5807 = ifft(Nx,Ny,Nz,dV,ktemp5805);

	ktemp5805.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5807[i] = rtemp5802[i] - 37.47817777906999*rtemp5807[i];
	}

	rtemp5802.free(); // Realspace
	Vector rtemp5809(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5809[i] = 2.0*rtemp67[i]*rtemp800[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5810(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5810 = fft(Nx,Ny,Nz,dV,rtemp5809);

	rtemp5809.free(); // Realspace
	{
		const int i = 0;
		ktemp5810[0] = 0.33333333333333337*R*R*R*ktemp5810[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5810[i] = std::complex<double>(ktemp5810[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5810[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5812(Nx*Ny*Nz); // RS
	rtemp5812 = ifft(Nx,Ny,Nz,dV,ktemp5810);

	ktemp5810.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5812[i] = rtemp5807[i] + 37.47817777906999*rtemp5812[i];
	}

	rtemp5807.free(); // Realspace
	Vector rtemp5814(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5814[i] = 2.0*rtemp67[i]*rtemp800[i]*rtemp81[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5815(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5815 = fft(Nx,Ny,Nz,dV,rtemp5814);

	rtemp5814.free(); // Realspace
	{
		const int i = 0;
		ktemp5815[0] = 0.33333333333333337*R*R*R*ktemp5815[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5815[i] = std::complex<double>(ktemp5815[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5815[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5817(Nx*Ny*Nz); // RS
	rtemp5817 = ifft(Nx,Ny,Nz,dV,ktemp5815);

	ktemp5815.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5817[i] = rtemp5812[i] + 18.739088889534994*rtemp5817[i];
	}

	rtemp5812.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp800[i] = 2.0*rtemp67[i]*rtemp800[i]*rtemp81[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5820(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5820 = fft(Nx,Ny,Nz,dV,rtemp800);

	rtemp800.free(); // Realspace
	{
		const int i = 0;
		ktemp5820[0] = 0.33333333333333337*R*R*R*ktemp5820[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5820[i] = std::complex<double>(ktemp5820[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5820[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5822(Nx*Ny*Nz); // RS
	rtemp5822 = ifft(Nx,Ny,Nz,dV,ktemp5820);

	ktemp5820.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5822[i] = rtemp5817[i] - 18.739088889534994*rtemp5822[i];
	}

	rtemp5817.free(); // Realspace
	Vector rtemp5824(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5824[i] = 2.0*rtemp67[i]*rtemp807[i]*rtemp81[i]*log(t1)/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5825(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5825 = fft(Nx,Ny,Nz,dV,rtemp5824);

	rtemp5824.free(); // Realspace
	{
		const int i = 0;
		ktemp5825[0] = 0.33333333333333337*R*R*R*ktemp5825[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5825[i] = std::complex<double>(ktemp5825[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5825[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5827(Nx*Ny*Nz); // RS
	rtemp5827 = ifft(Nx,Ny,Nz,dV,ktemp5825);

	ktemp5825.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5827[i] = rtemp5822[i] + 10.89604325880265*rtemp5827[i];
	}

	rtemp5822.free(); // Realspace
	Vector rtemp5829(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5829[i] = 2.0*rtemp67[i]*rtemp807[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5830(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5830 = fft(Nx,Ny,Nz,dV,rtemp5829);

	rtemp5829.free(); // Realspace
	{
		const int i = 0;
		ktemp5830[0] = 0.33333333333333337*R*R*R*ktemp5830[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5830[i] = std::complex<double>(ktemp5830[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5830[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5832(Nx*Ny*Nz); // RS
	rtemp5832 = ifft(Nx,Ny,Nz,dV,ktemp5830);

	ktemp5830.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5832[i] = rtemp5827[i] - 10.89604325880265*rtemp5832[i];
	}

	rtemp5827.free(); // Realspace
	Vector rtemp5834(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5834[i] = 2.0*rtemp67[i]*rtemp807[i]*rtemp81[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5835(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5835 = fft(Nx,Ny,Nz,dV,rtemp5834);

	rtemp5834.free(); // Realspace
	{
		const int i = 0;
		ktemp5835[0] = 0.33333333333333337*R*R*R*ktemp5835[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5835[i] = std::complex<double>(ktemp5835[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5835[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5837(Nx*Ny*Nz); // RS
	rtemp5837 = ifft(Nx,Ny,Nz,dV,ktemp5835);

	ktemp5835.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5837[i] = rtemp5832[i] - 5.448021629401325*rtemp5837[i];
	}

	rtemp5832.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp807[i] = 2.0*rtemp67[i]*rtemp807[i]*rtemp81[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5840(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5840 = fft(Nx,Ny,Nz,dV,rtemp807);

	rtemp807.free(); // Realspace
	{
		const int i = 0;
		ktemp5840[0] = 0.33333333333333337*R*R*R*ktemp5840[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5840[i] = std::complex<double>(ktemp5840[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5840[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5842(Nx*Ny*Nz); // RS
	rtemp5842 = ifft(Nx,Ny,Nz,dV,ktemp5840);

	ktemp5840.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5842[i] = rtemp5837[i] + 5.448021629401325*rtemp5842[i];
	}

	rtemp5837.free(); // Realspace
	Vector rtemp5844(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5844[i] = 2.0*rtemp67[i]*rtemp814[i]*rtemp81[i]*log(t1)/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5845(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5845 = fft(Nx,Ny,Nz,dV,rtemp5844);

	rtemp5844.free(); // Realspace
	{
		const int i = 0;
		ktemp5845[0] = 0.33333333333333337*R*R*R*ktemp5845[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5845[i] = std::complex<double>(ktemp5845[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5845[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5847(Nx*Ny*Nz); // RS
	rtemp5847 = ifft(Nx,Ny,Nz,dV,ktemp5845);

	ktemp5845.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5847[i] = rtemp5842[i] - 118.06678758209827*rtemp5847[i];
	}

	rtemp5842.free(); // Realspace
	Vector rtemp5849(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5849[i] = 2.0*rtemp67[i]*rtemp814[i]*rtemp81[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5850(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5850 = fft(Nx,Ny,Nz,dV,rtemp5849);

	rtemp5849.free(); // Realspace
	{
		const int i = 0;
		ktemp5850[0] = 0.33333333333333337*R*R*R*ktemp5850[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5850[i] = std::complex<double>(ktemp5850[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5850[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5852(Nx*Ny*Nz); // RS
	rtemp5852 = ifft(Nx,Ny,Nz,dV,ktemp5850);

	ktemp5850.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5852[i] = rtemp5847[i] + 118.06678758209827*rtemp5852[i];
	}

	rtemp5847.free(); // Realspace
	Vector rtemp5854(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5854[i] = 2.0*rtemp67[i]*rtemp814[i]*rtemp81[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5855(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5855 = fft(Nx,Ny,Nz,dV,rtemp5854);

	rtemp5854.free(); // Realspace
	{
		const int i = 0;
		ktemp5855[0] = 0.33333333333333337*R*R*R*ktemp5855[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5855[i] = std::complex<double>(ktemp5855[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5855[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5857(Nx*Ny*Nz); // RS
	rtemp5857 = ifft(Nx,Ny,Nz,dV,ktemp5855);

	ktemp5855.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5857[i] = rtemp5852[i] + 59.033393791049136*rtemp5857[i];
	}

	rtemp5852.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp814[i] = 2.0*rtemp67[i]*rtemp814[i]*rtemp81[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5860(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5860 = fft(Nx,Ny,Nz,dV,rtemp814);

	rtemp814.free(); // Realspace
	{
		const int i = 0;
		ktemp5860[0] = 0.33333333333333337*R*R*R*ktemp5860[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5860[i] = std::complex<double>(ktemp5860[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5860[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5862(Nx*Ny*Nz); // RS
	rtemp5862 = ifft(Nx,Ny,Nz,dV,ktemp5860);

	ktemp5860.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5862[i] = rtemp5857[i] - 59.033393791049136*rtemp5862[i];
	}

	rtemp5857.free(); // Realspace
	Vector rtemp5864(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5864[i] = 2.0*rtemp67[i]*rtemp81[i]*rtemp821[i]*log(t1)/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5865(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5865 = fft(Nx,Ny,Nz,dV,rtemp5864);

	rtemp5864.free(); // Realspace
	{
		const int i = 0;
		ktemp5865[0] = 0.33333333333333337*R*R*R*ktemp5865[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5865[i] = std::complex<double>(ktemp5865[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5865[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5867(Nx*Ny*Nz); // RS
	rtemp5867 = ifft(Nx,Ny,Nz,dV,ktemp5865);

	ktemp5865.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5867[i] = rtemp5862[i] - 92.32685930405724*rtemp5867[i];
	}

	rtemp5862.free(); // Realspace
	Vector rtemp5869(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5869[i] = 2.0*rtemp67[i]*rtemp81[i]*rtemp821[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5870(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5870 = fft(Nx,Ny,Nz,dV,rtemp5869);

	rtemp5869.free(); // Realspace
	{
		const int i = 0;
		ktemp5870[0] = 0.33333333333333337*R*R*R*ktemp5870[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5870[i] = std::complex<double>(ktemp5870[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5870[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5872(Nx*Ny*Nz); // RS
	rtemp5872 = ifft(Nx,Ny,Nz,dV,ktemp5870);

	ktemp5870.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5872[i] = rtemp5867[i] + 92.32685930405724*rtemp5872[i];
	}

	rtemp5867.free(); // Realspace
	Vector rtemp5874(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5874[i] = 2.0*rtemp67[i]*rtemp81[i]*rtemp821[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5875(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5875 = fft(Nx,Ny,Nz,dV,rtemp5874);

	rtemp5874.free(); // Realspace
	{
		const int i = 0;
		ktemp5875[0] = 0.33333333333333337*R*R*R*ktemp5875[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5875[i] = std::complex<double>(ktemp5875[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5875[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5877(Nx*Ny*Nz); // RS
	rtemp5877 = ifft(Nx,Ny,Nz,dV,ktemp5875);

	ktemp5875.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5877[i] = rtemp5872[i] + 46.16342965202862*rtemp5877[i];
	}

	rtemp5872.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp821[i] = 2.0*rtemp67[i]*rtemp81[i]*rtemp821[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5880(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5880 = fft(Nx,Ny,Nz,dV,rtemp821);

	rtemp821.free(); // Realspace
	{
		const int i = 0;
		ktemp5880[0] = 0.33333333333333337*R*R*R*ktemp5880[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5880[i] = std::complex<double>(ktemp5880[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5880[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5882(Nx*Ny*Nz); // RS
	rtemp5882 = ifft(Nx,Ny,Nz,dV,ktemp5880);

	ktemp5880.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5882[i] = rtemp5877[i] - 46.16342965202862*rtemp5882[i];
	}

	rtemp5877.free(); // Realspace
	Vector rtemp5884(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5884[i] = 2.0*rtemp67[i]*rtemp81[i]*rtemp828[i]*log(t1)/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5885(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5885 = fft(Nx,Ny,Nz,dV,rtemp5884);

	rtemp5884.free(); // Realspace
	{
		const int i = 0;
		ktemp5885[0] = 0.33333333333333337*R*R*R*ktemp5885[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5885[i] = std::complex<double>(ktemp5885[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5885[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5887(Nx*Ny*Nz); // RS
	rtemp5887 = ifft(Nx,Ny,Nz,dV,ktemp5885);

	ktemp5885.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5887[i] = rtemp5882[i] + 52.63789013914324*rtemp5887[i];
	}

	rtemp5882.free(); // Realspace
	Vector rtemp5889(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp5889[i] = 2.0*rtemp67[i]*rtemp81[i]*rtemp828[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp5890(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5890 = fft(Nx,Ny,Nz,dV,rtemp5889);

	rtemp5889.free(); // Realspace
	{
		const int i = 0;
		ktemp5890[0] = 0.33333333333333337*R*R*R*ktemp5890[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5890[i] = std::complex<double>(ktemp5890[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5890[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5892(Nx*Ny*Nz); // RS
	rtemp5892 = ifft(Nx,Ny,Nz,dV,ktemp5890);

	ktemp5890.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5892[i] = rtemp5887[i] - 52.63789013914324*rtemp5892[i];
	}

	rtemp5887.free(); // Realspace
	Vector rtemp5894(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5894[i] = 2.0*rtemp67[i]*rtemp81[i]*rtemp828[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5895(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5895 = fft(Nx,Ny,Nz,dV,rtemp5894);

	rtemp5894.free(); // Realspace
	{
		const int i = 0;
		ktemp5895[0] = 0.33333333333333337*R*R*R*ktemp5895[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5895[i] = std::complex<double>(ktemp5895[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5895[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5897(Nx*Ny*Nz); // RS
	rtemp5897 = ifft(Nx,Ny,Nz,dV,ktemp5895);

	ktemp5895.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5897[i] = rtemp5892[i] - 26.31894506957162*rtemp5897[i];
	}

	rtemp5892.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp828[i] = 2.0*rtemp67[i]*rtemp81[i]*rtemp828[i]/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5900(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5900 = fft(Nx,Ny,Nz,dV,rtemp828);

	rtemp828.free(); // Realspace
	{
		const int i = 0;
		ktemp5900[0] = 0.33333333333333337*R*R*R*ktemp5900[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5900[i] = std::complex<double>(ktemp5900[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5900[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5902(Nx*Ny*Nz); // RS
	rtemp5902 = ifft(Nx,Ny,Nz,dV,ktemp5900);

	ktemp5900.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5902[i] = rtemp5897[i] + 26.31894506957162*rtemp5902[i];
	}

	rtemp5897.free(); // Realspace
	Vector rtemp5904(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5904[i] = 7.957747154594767e-2*rtemp123[i]*rtemp67[i]/(R*R)/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5905(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5905 = fft(Nx,Ny,Nz,dV,rtemp5904);

	rtemp5904.free(); // Realspace
	{
		const int i = 0;
		ktemp5905[0] = 0.33333333333333337*R*R*R*ktemp5905[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5905[i] = std::complex<double>(ktemp5905[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5905[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5907(Nx*Ny*Nz); // RS
	rtemp5907 = ifft(Nx,Ny,Nz,dV,ktemp5905);

	ktemp5905.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5907[i] = rtemp5902[i] + 325.4418800364269*rtemp5907[i];
	}

	rtemp5902.free(); // Realspace
	Vector rtemp5909(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5909[i] = 7.957747154594767e-2*rtemp132[i]*rtemp67[i]/(R*R)/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5910(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5910 = fft(Nx,Ny,Nz,dV,rtemp5909);

	rtemp5909.free(); // Realspace
	{
		const int i = 0;
		ktemp5910[0] = 0.33333333333333337*R*R*R*ktemp5910[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5910[i] = std::complex<double>(ktemp5910[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5910[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5912(Nx*Ny*Nz); // RS
	rtemp5912 = ifft(Nx,Ny,Nz,dV,ktemp5910);

	ktemp5910.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5912[i] = rtemp5907[i] - 964.4192298640455*rtemp5912[i];
	}

	rtemp5907.free(); // Realspace
	Vector rtemp5914(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5914[i] = 7.957747154594767e-2*rtemp141[i]*rtemp67[i]/(R*R)/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5915(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5915 = fft(Nx,Ny,Nz,dV,rtemp5914);

	rtemp5914.free(); // Realspace
	{
		const int i = 0;
		ktemp5915[0] = 0.33333333333333337*R*R*R*ktemp5915[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5915[i] = std::complex<double>(ktemp5915[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5915[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5917(Nx*Ny*Nz); // RS
	rtemp5917 = ifft(Nx,Ny,Nz,dV,ktemp5915);

	ktemp5915.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5917[i] = rtemp5912[i] + 642.946153242697*rtemp5917[i];
	}

	rtemp5912.free(); // Realspace
	Vector rtemp5919(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5919[i] = 7.957747154594767e-2*rtemp150[i]*rtemp67[i]/(R*R)/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5920(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5920 = fft(Nx,Ny,Nz,dV,rtemp5919);

	rtemp5919.free(); // Realspace
	{
		const int i = 0;
		ktemp5920[0] = 0.33333333333333337*R*R*R*ktemp5920[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5920[i] = std::complex<double>(ktemp5920[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5920[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5922(Nx*Ny*Nz); // RS
	rtemp5922 = ifft(Nx,Ny,Nz,dV,ktemp5920);

	ktemp5920.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5922[i] = rtemp5917[i] - 1412.894015767902*rtemp5922[i];
	}

	rtemp5917.free(); // Realspace
	Vector rtemp5924(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5924[i] = 7.957747154594767e-2*rtemp159[i]*rtemp67[i]/(R*R)/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5925(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5925 = fft(Nx,Ny,Nz,dV,rtemp5924);

	rtemp5924.free(); // Realspace
	{
		const int i = 0;
		ktemp5925[0] = 0.33333333333333337*R*R*R*ktemp5925[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5925[i] = std::complex<double>(ktemp5925[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5925[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5927(Nx*Ny*Nz); // RS
	rtemp5927 = ifft(Nx,Ny,Nz,dV,ktemp5925);

	ktemp5925.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5927[i] = rtemp5922[i] + 5810.328199674744*rtemp5927[i];
	}

	rtemp5922.free(); // Realspace
	Vector rtemp5929(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5929[i] = 7.957747154594767e-2*rtemp168[i]*rtemp67[i]/(R*R)/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5930(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5930 = fft(Nx,Ny,Nz,dV,rtemp5929);

	rtemp5929.free(); // Realspace
	{
		const int i = 0;
		ktemp5930[0] = 0.33333333333333337*R*R*R*ktemp5930[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5930[i] = std::complex<double>(ktemp5930[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5930[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5932(Nx*Ny*Nz); // RS
	rtemp5932 = ifft(Nx,Ny,Nz,dV,ktemp5930);

	ktemp5930.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5932[i] = rtemp5927[i] - 4151.368372171983*rtemp5932[i];
	}

	rtemp5927.free(); // Realspace
	Vector rtemp5934(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5934[i] = 7.957747154594767e-2*rtemp16[i]*rtemp67[i]/(R*R)/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5935(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5935 = fft(Nx,Ny,Nz,dV,rtemp5934);

	rtemp5934.free(); // Realspace
	{
		const int i = 0;
		ktemp5935[0] = 0.33333333333333337*R*R*R*ktemp5935[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5935[i] = std::complex<double>(ktemp5935[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5935[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5937(Nx*Ny*Nz); // RS
	rtemp5937 = ifft(Nx,Ny,Nz,dV,ktemp5935);

	ktemp5935.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5937[i] = rtemp5932[i] + 1.9844017075391884*rtemp5937[i];
	}

	rtemp5932.free(); // Realspace
	Vector rtemp5939(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5939[i] = 7.957747154594767e-2*rtemp177[i]*rtemp67[i]/(R*R)/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5940(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5940 = fft(Nx,Ny,Nz,dV,rtemp5939);

	rtemp5939.free(); // Realspace
	{
		const int i = 0;
		ktemp5940[0] = 0.33333333333333337*R*R*R*ktemp5940[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5940[i] = std::complex<double>(ktemp5940[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5940[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5942(Nx*Ny*Nz); // RS
	rtemp5942 = ifft(Nx,Ny,Nz,dV,ktemp5940);

	ktemp5940.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5942[i] = rtemp5937[i] - 8737.320718295045*rtemp5942[i];
	}

	rtemp5937.free(); // Realspace
	Vector rtemp5944(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5944[i] = 7.957747154594767e-2*rtemp186[i]*rtemp67[i]/(R*R)/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5945(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5945 = fft(Nx,Ny,Nz,dV,rtemp5944);

	rtemp5944.free(); // Realspace
	{
		const int i = 0;
		ktemp5945[0] = 0.33333333333333337*R*R*R*ktemp5945[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5945[i] = std::complex<double>(ktemp5945[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5945[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5947(Nx*Ny*Nz); // RS
	rtemp5947 = ifft(Nx,Ny,Nz,dV,ktemp5945);

	ktemp5945.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5947[i] = rtemp5942[i] + 7381.9743520457805*rtemp5947[i];
	}

	rtemp5942.free(); // Realspace
	Vector rtemp5949(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5949[i] = 7.957747154594767e-2*rtemp195[i]*rtemp67[i]/(R*R)/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5950(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5950 = fft(Nx,Ny,Nz,dV,rtemp5949);

	rtemp5949.free(); // Realspace
	{
		const int i = 0;
		ktemp5950[0] = 0.33333333333333337*R*R*R*ktemp5950[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5950[i] = std::complex<double>(ktemp5950[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5950[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5952(Nx*Ny*Nz); // RS
	rtemp5952 = ifft(Nx,Ny,Nz,dV,ktemp5950);

	ktemp5950.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5952[i] = rtemp5947[i] - 1440.6756396734506*rtemp5952[i];
	}

	rtemp5947.free(); // Realspace
	Vector rtemp5954(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5954[i] = 7.957747154594767e-2*rtemp204[i]*rtemp67[i]/(R*R)/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5955(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5955 = fft(Nx,Ny,Nz,dV,rtemp5954);

	rtemp5954.free(); // Realspace
	{
		const int i = 0;
		ktemp5955[0] = 0.33333333333333337*R*R*R*ktemp5955[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5955[i] = std::complex<double>(ktemp5955[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5955[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5957(Nx*Ny*Nz); // RS
	rtemp5957 = ifft(Nx,Ny,Nz,dV,ktemp5955);

	ktemp5955.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5957[i] = rtemp5952[i] - 53.578846103558085*rtemp5957[i];
	}

	rtemp5952.free(); // Realspace
	Vector rtemp5959(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5959[i] = 7.957747154594767e-2*rtemp213[i]*rtemp67[i]/(R*R)/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5960(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5960 = fft(Nx,Ny,Nz,dV,rtemp5959);

	rtemp5959.free(); // Realspace
	{
		const int i = 0;
		ktemp5960[0] = 0.33333333333333337*R*R*R*ktemp5960[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5960[i] = std::complex<double>(ktemp5960[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5960[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5962(Nx*Ny*Nz); // RS
	rtemp5962 = ifft(Nx,Ny,Nz,dV,ktemp5960);

	ktemp5960.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5962[i] = rtemp5957[i] - 2494.3929463767595*rtemp5962[i];
	}

	rtemp5957.free(); // Realspace
	Vector rtemp5964(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5964[i] = 7.957747154594767e-2*rtemp222[i]*rtemp67[i]/(R*R)/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5965(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5965 = fft(Nx,Ny,Nz,dV,rtemp5964);

	rtemp5964.free(); // Realspace
	{
		const int i = 0;
		ktemp5965[0] = 0.33333333333333337*R*R*R*ktemp5965[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5965[i] = std::complex<double>(ktemp5965[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5965[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5967(Nx*Ny*Nz); // RS
	rtemp5967 = ifft(Nx,Ny,Nz,dV,ktemp5965);

	ktemp5965.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5967[i] = rtemp5962[i] + 706.447007883951*rtemp5967[i];
	}

	rtemp5962.free(); // Realspace
	Vector rtemp5969(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5969[i] = 7.957747154594767e-2*rtemp27[i]*rtemp67[i]/(R*R)/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5970(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5970 = fft(Nx,Ny,Nz,dV,rtemp5969);

	rtemp5969.free(); // Realspace
	{
		const int i = 0;
		ktemp5970[0] = 0.33333333333333337*R*R*R*ktemp5970[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5970[i] = std::complex<double>(ktemp5970[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5970[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5972(Nx*Ny*Nz); // RS
	rtemp5972 = ifft(Nx,Ny,Nz,dV,ktemp5970);

	ktemp5970.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5972[i] = rtemp5967[i] - 205.38557673030598*rtemp5972[i];
	}

	rtemp5967.free(); // Realspace
	Vector rtemp5974(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5974[i] = 7.957747154594767e-2*rtemp38[i]*rtemp67[i]/(R*R)/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5975(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5975 = fft(Nx,Ny,Nz,dV,rtemp5974);

	rtemp5974.free(); // Realspace
	{
		const int i = 0;
		ktemp5975[0] = 0.33333333333333337*R*R*R*ktemp5975[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5975[i] = std::complex<double>(ktemp5975[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5975[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5977(Nx*Ny*Nz); // RS
	rtemp5977 = ifft(Nx,Ny,Nz,dV,ktemp5975);

	ktemp5975.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5977[i] = rtemp5972[i] + 2225.5065150051996*rtemp5977[i];
	}

	rtemp5972.free(); // Realspace
	Vector rtemp5979(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5979[i] = 7.957747154594767e-2*rtemp49[i]*rtemp67[i]/(R*R)/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5980(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5980 = fft(Nx,Ny,Nz,dV,rtemp5979);

	rtemp5979.free(); // Realspace
	{
		const int i = 0;
		ktemp5980[0] = 0.33333333333333337*R*R*R*ktemp5980[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5980[i] = std::complex<double>(ktemp5980[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5980[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5982(Nx*Ny*Nz); // RS
	rtemp5982 = ifft(Nx,Ny,Nz,dV,ktemp5980);

	ktemp5980.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5982[i] = rtemp5977[i] + 1740.320297511868*rtemp5982[i];
	}

	rtemp5977.free(); // Realspace
	Vector rtemp5984(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5984[i] = 7.957747154594767e-2*rtemp60[i]*rtemp67[i]/(R*R)/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5985(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5985 = fft(Nx,Ny,Nz,dV,rtemp5984);

	rtemp5984.free(); // Realspace
	{
		const int i = 0;
		ktemp5985[0] = 0.33333333333333337*R*R*R*ktemp5985[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5985[i] = std::complex<double>(ktemp5985[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5985[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5987(Nx*Ny*Nz); // RS
	rtemp5987 = ifft(Nx,Ny,Nz,dV,ktemp5985);

	ktemp5985.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5987[i] = rtemp5982[i] - 992.2008537695941*rtemp5987[i];
	}

	rtemp5982.free(); // Realspace
	Vector rtemp5989(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5989[i] = 7.957747154594767e-2*rtemp319[i]*rtemp67[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5990(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5990 = fft(Nx,Ny,Nz,dV,rtemp5989);

	rtemp5989.free(); // Realspace
	{
		const int i = 0;
		ktemp5990[0] = 0.33333333333333337*R*R*R*ktemp5990[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5990[i] = std::complex<double>(ktemp5990[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5990[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5992(Nx*Ny*Nz); // RS
	rtemp5992 = ifft(Nx,Ny,Nz,dV,ktemp5990);

	ktemp5990.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5992[i] = rtemp5987[i] - 325.4418800364269*rtemp5992[i];
	}

	rtemp5987.free(); // Realspace
	Vector rtemp5994(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5994[i] = 7.957747154594767e-2*rtemp326[i]*rtemp67[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp5995(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5995 = fft(Nx,Ny,Nz,dV,rtemp5994);

	rtemp5994.free(); // Realspace
	{
		const int i = 0;
		ktemp5995[0] = 0.33333333333333337*R*R*R*ktemp5995[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5995[i] = std::complex<double>(ktemp5995[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp5995[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp5997(Nx*Ny*Nz); // RS
	rtemp5997 = ifft(Nx,Ny,Nz,dV,ktemp5995);

	ktemp5995.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5997[i] = rtemp5992[i] + 964.4192298640455*rtemp5997[i];
	}

	rtemp5992.free(); // Realspace
	Vector rtemp5999(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5999[i] = 7.957747154594767e-2*rtemp333[i]*rtemp67[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6000(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6000 = fft(Nx,Ny,Nz,dV,rtemp5999);

	rtemp5999.free(); // Realspace
	{
		const int i = 0;
		ktemp6000[0] = 0.33333333333333337*R*R*R*ktemp6000[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6000[i] = std::complex<double>(ktemp6000[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6000[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6002(Nx*Ny*Nz); // RS
	rtemp6002 = ifft(Nx,Ny,Nz,dV,ktemp6000);

	ktemp6000.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6002[i] = rtemp5997[i] - 642.946153242697*rtemp6002[i];
	}

	rtemp5997.free(); // Realspace
	Vector rtemp6004(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6004[i] = 7.957747154594767e-2*rtemp340[i]*rtemp67[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6005(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6005 = fft(Nx,Ny,Nz,dV,rtemp6004);

	rtemp6004.free(); // Realspace
	{
		const int i = 0;
		ktemp6005[0] = 0.33333333333333337*R*R*R*ktemp6005[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6005[i] = std::complex<double>(ktemp6005[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6005[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6007(Nx*Ny*Nz); // RS
	rtemp6007 = ifft(Nx,Ny,Nz,dV,ktemp6005);

	ktemp6005.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6007[i] = rtemp6002[i] + 1412.894015767902*rtemp6007[i];
	}

	rtemp6002.free(); // Realspace
	Vector rtemp6009(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6009[i] = 7.957747154594767e-2*rtemp347[i]*rtemp67[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6010(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6010 = fft(Nx,Ny,Nz,dV,rtemp6009);

	rtemp6009.free(); // Realspace
	{
		const int i = 0;
		ktemp6010[0] = 0.33333333333333337*R*R*R*ktemp6010[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6010[i] = std::complex<double>(ktemp6010[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6010[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6012(Nx*Ny*Nz); // RS
	rtemp6012 = ifft(Nx,Ny,Nz,dV,ktemp6010);

	ktemp6010.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6012[i] = rtemp6007[i] - 1.9844017075391884*rtemp6012[i];
	}

	rtemp6007.free(); // Realspace
	Vector rtemp6014(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6014[i] = 7.957747154594767e-2*rtemp354[i]*rtemp67[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6015(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6015 = fft(Nx,Ny,Nz,dV,rtemp6014);

	rtemp6014.free(); // Realspace
	{
		const int i = 0;
		ktemp6015[0] = 0.33333333333333337*R*R*R*ktemp6015[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6015[i] = std::complex<double>(ktemp6015[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6015[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6017(Nx*Ny*Nz); // RS
	rtemp6017 = ifft(Nx,Ny,Nz,dV,ktemp6015);

	ktemp6015.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6017[i] = rtemp6012[i] - 5810.328199674744*rtemp6017[i];
	}

	rtemp6012.free(); // Realspace
	Vector rtemp6019(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6019[i] = 7.957747154594767e-2*rtemp361[i]*rtemp67[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6020(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6020 = fft(Nx,Ny,Nz,dV,rtemp6019);

	rtemp6019.free(); // Realspace
	{
		const int i = 0;
		ktemp6020[0] = 0.33333333333333337*R*R*R*ktemp6020[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6020[i] = std::complex<double>(ktemp6020[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6020[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6022(Nx*Ny*Nz); // RS
	rtemp6022 = ifft(Nx,Ny,Nz,dV,ktemp6020);

	ktemp6020.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6022[i] = rtemp6017[i] + 4151.368372171983*rtemp6022[i];
	}

	rtemp6017.free(); // Realspace
	Vector rtemp6024(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6024[i] = 7.957747154594767e-2*rtemp368[i]*rtemp67[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6025(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6025 = fft(Nx,Ny,Nz,dV,rtemp6024);

	rtemp6024.free(); // Realspace
	{
		const int i = 0;
		ktemp6025[0] = 0.33333333333333337*R*R*R*ktemp6025[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6025[i] = std::complex<double>(ktemp6025[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6025[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6027(Nx*Ny*Nz); // RS
	rtemp6027 = ifft(Nx,Ny,Nz,dV,ktemp6025);

	ktemp6025.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6027[i] = rtemp6022[i] + 8737.320718295045*rtemp6027[i];
	}

	rtemp6022.free(); // Realspace
	Vector rtemp6029(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6029[i] = 7.957747154594767e-2*rtemp375[i]*rtemp67[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6030(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6030 = fft(Nx,Ny,Nz,dV,rtemp6029);

	rtemp6029.free(); // Realspace
	{
		const int i = 0;
		ktemp6030[0] = 0.33333333333333337*R*R*R*ktemp6030[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6030[i] = std::complex<double>(ktemp6030[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6030[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6032(Nx*Ny*Nz); // RS
	rtemp6032 = ifft(Nx,Ny,Nz,dV,ktemp6030);

	ktemp6030.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6032[i] = rtemp6027[i] - 7381.9743520457805*rtemp6032[i];
	}

	rtemp6027.free(); // Realspace
	Vector rtemp6034(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6034[i] = 7.957747154594767e-2*rtemp382[i]*rtemp67[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6035(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6035 = fft(Nx,Ny,Nz,dV,rtemp6034);

	rtemp6034.free(); // Realspace
	{
		const int i = 0;
		ktemp6035[0] = 0.33333333333333337*R*R*R*ktemp6035[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6035[i] = std::complex<double>(ktemp6035[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6035[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6037(Nx*Ny*Nz); // RS
	rtemp6037 = ifft(Nx,Ny,Nz,dV,ktemp6035);

	ktemp6035.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6037[i] = rtemp6032[i] + 1440.6756396734506*rtemp6037[i];
	}

	rtemp6032.free(); // Realspace
	Vector rtemp6039(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6039[i] = 7.957747154594767e-2*rtemp389[i]*rtemp67[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6040(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6040 = fft(Nx,Ny,Nz,dV,rtemp6039);

	rtemp6039.free(); // Realspace
	{
		const int i = 0;
		ktemp6040[0] = 0.33333333333333337*R*R*R*ktemp6040[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6040[i] = std::complex<double>(ktemp6040[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6040[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6042(Nx*Ny*Nz); // RS
	rtemp6042 = ifft(Nx,Ny,Nz,dV,ktemp6040);

	ktemp6040.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6042[i] = rtemp6037[i] + 53.578846103558085*rtemp6042[i];
	}

	rtemp6037.free(); // Realspace
	Vector rtemp6044(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6044[i] = 7.957747154594767e-2*rtemp396[i]*rtemp67[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6045(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6045 = fft(Nx,Ny,Nz,dV,rtemp6044);

	rtemp6044.free(); // Realspace
	{
		const int i = 0;
		ktemp6045[0] = 0.33333333333333337*R*R*R*ktemp6045[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6045[i] = std::complex<double>(ktemp6045[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6045[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6047(Nx*Ny*Nz); // RS
	rtemp6047 = ifft(Nx,Ny,Nz,dV,ktemp6045);

	ktemp6045.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6047[i] = rtemp6042[i] + 2494.3929463767595*rtemp6047[i];
	}

	rtemp6042.free(); // Realspace
	Vector rtemp6049(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6049[i] = 7.957747154594767e-2*rtemp403[i]*rtemp67[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6050(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6050 = fft(Nx,Ny,Nz,dV,rtemp6049);

	rtemp6049.free(); // Realspace
	{
		const int i = 0;
		ktemp6050[0] = 0.33333333333333337*R*R*R*ktemp6050[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6050[i] = std::complex<double>(ktemp6050[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6050[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6052(Nx*Ny*Nz); // RS
	rtemp6052 = ifft(Nx,Ny,Nz,dV,ktemp6050);

	ktemp6050.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6052[i] = rtemp6047[i] - 706.447007883951*rtemp6052[i];
	}

	rtemp6047.free(); // Realspace
	Vector rtemp6054(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6054[i] = 7.957747154594767e-2*rtemp410[i]*rtemp67[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6055(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6055 = fft(Nx,Ny,Nz,dV,rtemp6054);

	rtemp6054.free(); // Realspace
	{
		const int i = 0;
		ktemp6055[0] = 0.33333333333333337*R*R*R*ktemp6055[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6055[i] = std::complex<double>(ktemp6055[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6055[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6057(Nx*Ny*Nz); // RS
	rtemp6057 = ifft(Nx,Ny,Nz,dV,ktemp6055);

	ktemp6055.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6057[i] = rtemp6052[i] + 205.38557673030598*rtemp6057[i];
	}

	rtemp6052.free(); // Realspace
	Vector rtemp6059(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6059[i] = 7.957747154594767e-2*rtemp417[i]*rtemp67[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6060(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6060 = fft(Nx,Ny,Nz,dV,rtemp6059);

	rtemp6059.free(); // Realspace
	{
		const int i = 0;
		ktemp6060[0] = 0.33333333333333337*R*R*R*ktemp6060[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6060[i] = std::complex<double>(ktemp6060[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6060[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6062(Nx*Ny*Nz); // RS
	rtemp6062 = ifft(Nx,Ny,Nz,dV,ktemp6060);

	ktemp6060.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6062[i] = rtemp6057[i] - 2225.5065150051996*rtemp6062[i];
	}

	rtemp6057.free(); // Realspace
	Vector rtemp6064(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6064[i] = 7.957747154594767e-2*rtemp424[i]*rtemp67[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6065(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6065 = fft(Nx,Ny,Nz,dV,rtemp6064);

	rtemp6064.free(); // Realspace
	{
		const int i = 0;
		ktemp6065[0] = 0.33333333333333337*R*R*R*ktemp6065[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6065[i] = std::complex<double>(ktemp6065[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6065[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6067(Nx*Ny*Nz); // RS
	rtemp6067 = ifft(Nx,Ny,Nz,dV,ktemp6065);

	ktemp6065.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6067[i] = rtemp6062[i] - 1740.320297511868*rtemp6067[i];
	}

	rtemp6062.free(); // Realspace
	Vector rtemp6069(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6069[i] = 7.957747154594767e-2*rtemp431[i]*rtemp67[i]/R/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6070(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6070 = fft(Nx,Ny,Nz,dV,rtemp6069);

	rtemp6069.free(); // Realspace
	{
		const int i = 0;
		ktemp6070[0] = 0.33333333333333337*R*R*R*ktemp6070[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6070[i] = std::complex<double>(ktemp6070[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6070[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6072(Nx*Ny*Nz); // RS
	rtemp6072 = ifft(Nx,Ny,Nz,dV,ktemp6070);

	ktemp6070.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6072[i] = rtemp6067[i] + 992.2008537695941*rtemp6072[i];
	}

	rtemp6067.free(); // Realspace
	Vector rtemp6074(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		rtemp6074[i] = t1*rtemp123[i]*(n3[i] + t2*t2*log(t2))*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i])/(t2*t2*(n3[i]*n3[i])*(n3[i]*n3[i]));
	}

	ComplexVector ktemp6075(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6075 = fft(Nx,Ny,Nz,dV,rtemp6074);

	rtemp6074.free(); // Realspace
	{
		const int i = 0;
		ktemp6075[0] = 0.33333333333333337*R*R*R*ktemp6075[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6075[i] = std::complex<double>(ktemp6075[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6075[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6077(Nx*Ny*Nz); // RS
	rtemp6077 = ifft(Nx,Ny,Nz,dV,ktemp6075);

	ktemp6075.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6077[i] = rtemp6072[i] + 5.755075988546329*rtemp6077[i];
	}

	rtemp6072.free(); // Realspace
	Vector rtemp6079(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		rtemp6079[i] = t1*rtemp132[i]*(n3[i] + t2*t2*log(t2))*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i])/(t2*t2*(n3[i]*n3[i])*(n3[i]*n3[i]));
	}

	ComplexVector ktemp6080(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6080 = fft(Nx,Ny,Nz,dV,rtemp6079);

	rtemp6079.free(); // Realspace
	{
		const int i = 0;
		ktemp6080[0] = 0.33333333333333337*R*R*R*ktemp6080[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6080[i] = std::complex<double>(ktemp6080[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6080[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6082(Nx*Ny*Nz); // RS
	rtemp6082 = ifft(Nx,Ny,Nz,dV,ktemp6080);

	ktemp6080.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6082[i] = rtemp6077[i] - 17.054676405082414*rtemp6082[i];
	}

	rtemp6077.free(); // Realspace
	Vector rtemp6084(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		rtemp6084[i] = t1*rtemp141[i]*(n3[i] + t2*t2*log(t2))*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i])/(t2*t2*(n3[i]*n3[i])*(n3[i]*n3[i]));
	}

	ComplexVector ktemp6085(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6085 = fft(Nx,Ny,Nz,dV,rtemp6084);

	rtemp6084.free(); // Realspace
	{
		const int i = 0;
		ktemp6085[0] = 0.33333333333333337*R*R*R*ktemp6085[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6085[i] = std::complex<double>(ktemp6085[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6085[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6087(Nx*Ny*Nz); // RS
	rtemp6087 = ifft(Nx,Ny,Nz,dV,ktemp6085);

	ktemp6085.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6087[i] = rtemp6082[i] + 11.369784270054941*rtemp6087[i];
	}

	rtemp6082.free(); // Realspace
	Vector rtemp6089(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		rtemp6089[i] = t1*rtemp150[i]*(n3[i] + t2*t2*log(t2))*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i])/(t2*t2*(n3[i]*n3[i])*(n3[i]*n3[i]));
	}

	ComplexVector ktemp6090(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6090 = fft(Nx,Ny,Nz,dV,rtemp6089);

	rtemp6089.free(); // Realspace
	{
		const int i = 0;
		ktemp6090[0] = 0.33333333333333337*R*R*R*ktemp6090[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6090[i] = std::complex<double>(ktemp6090[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6090[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6092(Nx*Ny*Nz); // RS
	rtemp6092 = ifft(Nx,Ny,Nz,dV,ktemp6090);

	ktemp6090.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6092[i] = rtemp6087[i] - 24.98545185271333*rtemp6092[i];
	}

	rtemp6087.free(); // Realspace
	Vector rtemp6094(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		rtemp6094[i] = t1*rtemp159[i]*(n3[i] + t2*t2*log(t2))*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i])/(t2*t2*(n3[i]*n3[i])*(n3[i]*n3[i]));
	}

	ComplexVector ktemp6095(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6095 = fft(Nx,Ny,Nz,dV,rtemp6094);

	rtemp6094.free(); // Realspace
	{
		const int i = 0;
		ktemp6095[0] = 0.33333333333333337*R*R*R*ktemp6095[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6095[i] = std::complex<double>(ktemp6095[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6095[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6097(Nx*Ny*Nz); // RS
	rtemp6097 = ifft(Nx,Ny,Nz,dV,ktemp6095);

	ktemp6095.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6097[i] = rtemp6092[i] + 102.74916155160763*rtemp6097[i];
	}

	rtemp6092.free(); // Realspace
	Vector rtemp6099(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		rtemp6099[i] = t1*rtemp168[i]*(n3[i] + t2*t2*log(t2))*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i])/(t2*t2*(n3[i]*n3[i])*(n3[i]*n3[i]));
	}

	ComplexVector ktemp6100(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6100 = fft(Nx,Ny,Nz,dV,rtemp6099);

	rtemp6099.free(); // Realspace
	{
		const int i = 0;
		ktemp6100[0] = 0.33333333333333337*R*R*R*ktemp6100[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6100[i] = std::complex<double>(ktemp6100[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6100[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6102(Nx*Ny*Nz); // RS
	rtemp6102 = ifft(Nx,Ny,Nz,dV,ktemp6100);

	ktemp6100.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6102[i] = rtemp6097[i] - 73.41231078072512*rtemp6102[i];
	}

	rtemp6097.free(); // Realspace
	Vector rtemp6104(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		rtemp6104[i] = t1*rtemp16[i]*(n3[i] + t2*t2*log(t2))*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i])/(t2*t2*(n3[i]*n3[i])*(n3[i]*n3[i]));
	}

	ComplexVector ktemp6105(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6105 = fft(Nx,Ny,Nz,dV,rtemp6104);

	rtemp6104.free(); // Realspace
	{
		const int i = 0;
		ktemp6105[0] = 0.33333333333333337*R*R*R*ktemp6105[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6105[i] = std::complex<double>(ktemp6105[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6105[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6107(Nx*Ny*Nz); // RS
	rtemp6107 = ifft(Nx,Ny,Nz,dV,ktemp6105);

	ktemp6105.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6107[i] = rtemp6102[i] + 3.5091926759428835e-2*rtemp6107[i];
	}

	rtemp6102.free(); // Realspace
	Vector rtemp6109(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		rtemp6109[i] = t1*rtemp177[i]*(n3[i] + t2*t2*log(t2))*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i])/(t2*t2*(n3[i]*n3[i])*(n3[i]*n3[i]));
	}

	ComplexVector ktemp6110(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6110 = fft(Nx,Ny,Nz,dV,rtemp6109);

	rtemp6109.free(); // Realspace
	{
		const int i = 0;
		ktemp6110[0] = 0.33333333333333337*R*R*R*ktemp6110[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6110[i] = std::complex<double>(ktemp6110[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6110[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6112(Nx*Ny*Nz); // RS
	rtemp6112 = ifft(Nx,Ny,Nz,dV,ktemp6110);

	ktemp6110.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6112[i] = rtemp6107[i] - 154.50975352176513*rtemp6112[i];
	}

	rtemp6107.free(); // Realspace
	Vector rtemp6114(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		rtemp6114[i] = t1*rtemp186[i]*(n3[i] + t2*t2*log(t2))*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i])/(t2*t2*(n3[i]*n3[i])*(n3[i]*n3[i]));
	}

	ComplexVector ktemp6115(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6115 = fft(Nx,Ny,Nz,dV,rtemp6114);

	rtemp6114.free(); // Realspace
	{
		const int i = 0;
		ktemp6115[0] = 0.33333333333333337*R*R*R*ktemp6115[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6115[i] = std::complex<double>(ktemp6115[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6115[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6117(Nx*Ny*Nz); // RS
	rtemp6117 = ifft(Nx,Ny,Nz,dV,ktemp6115);

	ktemp6115.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6117[i] = rtemp6112[i] + 130.54196754507527*rtemp6117[i];
	}

	rtemp6112.free(); // Realspace
	Vector rtemp6119(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		rtemp6119[i] = t1*rtemp195[i]*(n3[i] + t2*t2*log(t2))*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i])/(t2*t2*(n3[i]*n3[i])*(n3[i]*n3[i]));
	}

	ComplexVector ktemp6120(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6120 = fft(Nx,Ny,Nz,dV,rtemp6119);

	rtemp6119.free(); // Realspace
	{
		const int i = 0;
		ktemp6120[0] = 0.33333333333333337*R*R*R*ktemp6120[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6120[i] = std::complex<double>(ktemp6120[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6120[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6122(Nx*Ny*Nz); // RS
	rtemp6122 = ifft(Nx,Ny,Nz,dV,ktemp6120);

	ktemp6120.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6122[i] = rtemp6117[i] - 25.47673882734533*rtemp6122[i];
	}

	rtemp6117.free(); // Realspace
	Vector rtemp6124(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		rtemp6124[i] = t1*rtemp204[i]*(n3[i] + t2*t2*log(t2))*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i])/(t2*t2*(n3[i]*n3[i])*(n3[i]*n3[i]));
	}

	ComplexVector ktemp6125(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6125 = fft(Nx,Ny,Nz,dV,rtemp6124);

	rtemp6124.free(); // Realspace
	{
		const int i = 0;
		ktemp6125[0] = 0.33333333333333337*R*R*R*ktemp6125[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6125[i] = std::complex<double>(ktemp6125[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6125[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6127(Nx*Ny*Nz); // RS
	rtemp6127 = ifft(Nx,Ny,Nz,dV,ktemp6125);

	ktemp6125.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6127[i] = rtemp6122[i] - 0.9474820225045786*rtemp6127[i];
	}

	rtemp6122.free(); // Realspace
	Vector rtemp6129(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		rtemp6129[i] = t1*rtemp213[i]*(n3[i] + t2*t2*log(t2))*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i])/(t2*t2*(n3[i]*n3[i])*(n3[i]*n3[i]));
	}

	ComplexVector ktemp6130(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6130 = fft(Nx,Ny,Nz,dV,rtemp6129);

	rtemp6129.free(); // Realspace
	{
		const int i = 0;
		ktemp6130[0] = 0.33333333333333337*R*R*R*ktemp6130[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6130[i] = std::complex<double>(ktemp6130[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6130[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6132(Nx*Ny*Nz); // RS
	rtemp6132 = ifft(Nx,Ny,Nz,dV,ktemp6130);

	ktemp6130.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6132[i] = rtemp6127[i] - 44.110551936602036*rtemp6132[i];
	}

	rtemp6127.free(); // Realspace
	Vector rtemp6134(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		rtemp6134[i] = t1*rtemp222[i]*(n3[i] + t2*t2*log(t2))*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i])/(t2*t2*(n3[i]*n3[i])*(n3[i]*n3[i]));
	}

	ComplexVector ktemp6135(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6135 = fft(Nx,Ny,Nz,dV,rtemp6134);

	rtemp6134.free(); // Realspace
	{
		const int i = 0;
		ktemp6135[0] = 0.33333333333333337*R*R*R*ktemp6135[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6135[i] = std::complex<double>(ktemp6135[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6135[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6137(Nx*Ny*Nz); // RS
	rtemp6137 = ifft(Nx,Ny,Nz,dV,ktemp6135);

	ktemp6135.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6137[i] = rtemp6132[i] + 12.492725926356664*rtemp6137[i];
	}

	rtemp6132.free(); // Realspace
	Vector rtemp6139(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		rtemp6139[i] = t1*rtemp27[i]*(n3[i] + t2*t2*log(t2))*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i])/(t2*t2*(n3[i]*n3[i])*(n3[i]*n3[i]));
	}

	ComplexVector ktemp6140(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6140 = fft(Nx,Ny,Nz,dV,rtemp6139);

	rtemp6139.free(); // Realspace
	{
		const int i = 0;
		ktemp6140[0] = 0.33333333333333337*R*R*R*ktemp6140[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6140[i] = std::complex<double>(ktemp6140[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6140[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6142(Nx*Ny*Nz); // RS
	rtemp6142 = ifft(Nx,Ny,Nz,dV,ktemp6140);

	ktemp6140.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6142[i] = rtemp6137[i] - 3.6320144196008837*rtemp6142[i];
	}

	rtemp6137.free(); // Realspace
	Vector rtemp6144(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		rtemp6144[i] = t1*rtemp38[i]*(n3[i] + t2*t2*log(t2))*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i])/(t2*t2*(n3[i]*n3[i])*(n3[i]*n3[i]));
	}

	ComplexVector ktemp6145(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6145 = fft(Nx,Ny,Nz,dV,rtemp6144);

	rtemp6144.free(); // Realspace
	{
		const int i = 0;
		ktemp6145[0] = 0.33333333333333337*R*R*R*ktemp6145[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6145[i] = std::complex<double>(ktemp6145[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6145[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6147(Nx*Ny*Nz); // RS
	rtemp6147 = ifft(Nx,Ny,Nz,dV,ktemp6145);

	ktemp6145.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6147[i] = rtemp6142[i] + 39.35559586069943*rtemp6147[i];
	}

	rtemp6142.free(); // Realspace
	Vector rtemp6149(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		rtemp6149[i] = t1*rtemp49[i]*(n3[i] + t2*t2*log(t2))*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i])/(t2*t2*(n3[i]*n3[i])*(n3[i]*n3[i]));
	}

	ComplexVector ktemp6150(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6150 = fft(Nx,Ny,Nz,dV,rtemp6149);

	rtemp6149.free(); // Realspace
	{
		const int i = 0;
		ktemp6150[0] = 0.33333333333333337*R*R*R*ktemp6150[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6150[i] = std::complex<double>(ktemp6150[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6150[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6152(Nx*Ny*Nz); // RS
	rtemp6152 = ifft(Nx,Ny,Nz,dV,ktemp6150);

	ktemp6150.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6152[i] = rtemp6147[i] + 30.775619768019087*rtemp6152[i];
	}

	rtemp6147.free(); // Realspace
	Vector rtemp6154(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		rtemp6154[i] = t1*rtemp60[i]*(n3[i] + t2*t2*log(t2))*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i])/(t2*t2*(n3[i]*n3[i])*(n3[i]*n3[i]));
	}

	ComplexVector ktemp6155(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6155 = fft(Nx,Ny,Nz,dV,rtemp6154);

	rtemp6154.free(); // Realspace
	{
		const int i = 0;
		ktemp6155[0] = 0.33333333333333337*R*R*R*ktemp6155[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6155[i] = std::complex<double>(ktemp6155[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6155[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6157(Nx*Ny*Nz); // RS
	rtemp6157 = ifft(Nx,Ny,Nz,dV,ktemp6155);

	ktemp6155.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6157[i] = rtemp6152[i] - 17.545963379714415*rtemp6157[i];
	}

	rtemp6152.free(); // Realspace
	Vector rtemp6159(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		const double t3 = log(t2);
		const double t4 = 1.0/t2;
		const double t5 = 1.0/n3[i];
		rtemp6159[i] = t1*t4*t5*t5*t5*rtemp123[i]*(t4*(8.841941282883075e-3 + (1.768388256576615e-2*t4 - 1.768388256576615e-2*t5)*(n3[i] + t3/(t4*t4))) - 8.841941282883075e-3 - 1.768388256576615e-2*t3)*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6160(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6160 = fft(Nx,Ny,Nz,dV,rtemp6159);

	rtemp6159.free(); // Realspace
	{
		const int i = 0;
		ktemp6160[0] = 0.33333333333333337*R*R*R*ktemp6160[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6160[i] = std::complex<double>(ktemp6160[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6160[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6162(Nx*Ny*Nz); // RS
	rtemp6162 = ifft(Nx,Ny,Nz,dV,ktemp6160);

	ktemp6160.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6162[i] = rtemp6157[i] - 650.8837600728538*rtemp6162[i];
	}

	rtemp6157.free(); // Realspace
	Vector rtemp6164(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		const double t3 = log(t2);
		const double t4 = 1.0/t2;
		const double t5 = 1.0/n3[i];
		rtemp6164[i] = t1*t4*t5*t5*t5*rtemp132[i]*(t4*(8.841941282883075e-3 + (1.768388256576615e-2*t4 - 1.768388256576615e-2*t5)*(n3[i] + t3/(t4*t4))) - 8.841941282883075e-3 - 1.768388256576615e-2*t3)*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6165(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6165 = fft(Nx,Ny,Nz,dV,rtemp6164);

	rtemp6164.free(); // Realspace
	{
		const int i = 0;
		ktemp6165[0] = 0.33333333333333337*R*R*R*ktemp6165[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6165[i] = std::complex<double>(ktemp6165[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6165[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6167(Nx*Ny*Nz); // RS
	rtemp6167 = ifft(Nx,Ny,Nz,dV,ktemp6165);

	ktemp6165.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6167[i] = rtemp6162[i] + 1928.838459728091*rtemp6167[i];
	}

	rtemp6162.free(); // Realspace
	Vector rtemp6169(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		const double t3 = log(t2);
		const double t4 = 1.0/t2;
		const double t5 = 1.0/n3[i];
		rtemp6169[i] = t1*t4*t5*t5*t5*rtemp141[i]*(t4*(8.841941282883075e-3 + (1.768388256576615e-2*t4 - 1.768388256576615e-2*t5)*(n3[i] + t3/(t4*t4))) - 8.841941282883075e-3 - 1.768388256576615e-2*t3)*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6170(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6170 = fft(Nx,Ny,Nz,dV,rtemp6169);

	rtemp6169.free(); // Realspace
	{
		const int i = 0;
		ktemp6170[0] = 0.33333333333333337*R*R*R*ktemp6170[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6170[i] = std::complex<double>(ktemp6170[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6170[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6172(Nx*Ny*Nz); // RS
	rtemp6172 = ifft(Nx,Ny,Nz,dV,ktemp6170);

	ktemp6170.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6172[i] = rtemp6167[i] - 1285.892306485394*rtemp6172[i];
	}

	rtemp6167.free(); // Realspace
	Vector rtemp6174(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		const double t3 = log(t2);
		const double t4 = 1.0/t2;
		const double t5 = 1.0/n3[i];
		rtemp6174[i] = t1*t4*t5*t5*t5*rtemp150[i]*(t4*(8.841941282883075e-3 + (1.768388256576615e-2*t4 - 1.768388256576615e-2*t5)*(n3[i] + t3/(t4*t4))) - 8.841941282883075e-3 - 1.768388256576615e-2*t3)*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6175(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6175 = fft(Nx,Ny,Nz,dV,rtemp6174);

	rtemp6174.free(); // Realspace
	{
		const int i = 0;
		ktemp6175[0] = 0.33333333333333337*R*R*R*ktemp6175[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6175[i] = std::complex<double>(ktemp6175[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6175[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6177(Nx*Ny*Nz); // RS
	rtemp6177 = ifft(Nx,Ny,Nz,dV,ktemp6175);

	ktemp6175.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6177[i] = rtemp6172[i] + 2825.788031535804*rtemp6177[i];
	}

	rtemp6172.free(); // Realspace
	Vector rtemp6179(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		const double t3 = log(t2);
		const double t4 = 1.0/t2;
		const double t5 = 1.0/n3[i];
		rtemp6179[i] = t1*t4*t5*t5*t5*rtemp159[i]*(t4*(8.841941282883075e-3 + (1.768388256576615e-2*t4 - 1.768388256576615e-2*t5)*(n3[i] + t3/(t4*t4))) - 8.841941282883075e-3 - 1.768388256576615e-2*t3)*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6180(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6180 = fft(Nx,Ny,Nz,dV,rtemp6179);

	rtemp6179.free(); // Realspace
	{
		const int i = 0;
		ktemp6180[0] = 0.33333333333333337*R*R*R*ktemp6180[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6180[i] = std::complex<double>(ktemp6180[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6180[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6182(Nx*Ny*Nz); // RS
	rtemp6182 = ifft(Nx,Ny,Nz,dV,ktemp6180);

	ktemp6180.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6182[i] = rtemp6177[i] - 11620.656399349487*rtemp6182[i];
	}

	rtemp6177.free(); // Realspace
	Vector rtemp6184(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		const double t3 = log(t2);
		const double t4 = 1.0/t2;
		const double t5 = 1.0/n3[i];
		rtemp6184[i] = t1*t4*t5*t5*t5*rtemp168[i]*(t4*(8.841941282883075e-3 + (1.768388256576615e-2*t4 - 1.768388256576615e-2*t5)*(n3[i] + t3/(t4*t4))) - 8.841941282883075e-3 - 1.768388256576615e-2*t3)*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6185(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6185 = fft(Nx,Ny,Nz,dV,rtemp6184);

	rtemp6184.free(); // Realspace
	{
		const int i = 0;
		ktemp6185[0] = 0.33333333333333337*R*R*R*ktemp6185[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6185[i] = std::complex<double>(ktemp6185[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6185[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6187(Nx*Ny*Nz); // RS
	rtemp6187 = ifft(Nx,Ny,Nz,dV,ktemp6185);

	ktemp6185.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6187[i] = rtemp6182[i] + 8302.736744343965*rtemp6187[i];
	}

	rtemp6182.free(); // Realspace
	Vector rtemp6189(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		const double t3 = log(t2);
		const double t4 = 1.0/t2;
		const double t5 = 1.0/n3[i];
		rtemp6189[i] = t1*t4*t5*t5*t5*rtemp16[i]*(t4*(8.841941282883075e-3 + (1.768388256576615e-2*t4 - 1.768388256576615e-2*t5)*(n3[i] + t3/(t4*t4))) - 8.841941282883075e-3 - 1.768388256576615e-2*t3)*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6190(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6190 = fft(Nx,Ny,Nz,dV,rtemp6189);

	rtemp6189.free(); // Realspace
	{
		const int i = 0;
		ktemp6190[0] = 0.33333333333333337*R*R*R*ktemp6190[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6190[i] = std::complex<double>(ktemp6190[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6190[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6192(Nx*Ny*Nz); // RS
	rtemp6192 = ifft(Nx,Ny,Nz,dV,ktemp6190);

	ktemp6190.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6192[i] = rtemp6187[i] - 3.968803415078377*rtemp6192[i];
	}

	rtemp6187.free(); // Realspace
	Vector rtemp6194(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		const double t3 = log(t2);
		const double t4 = 1.0/t2;
		const double t5 = 1.0/n3[i];
		rtemp6194[i] = t1*t4*t5*t5*t5*rtemp177[i]*(t4*(8.841941282883075e-3 + (1.768388256576615e-2*t4 - 1.768388256576615e-2*t5)*(n3[i] + t3/(t4*t4))) - 8.841941282883075e-3 - 1.768388256576615e-2*t3)*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6195(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6195 = fft(Nx,Ny,Nz,dV,rtemp6194);

	rtemp6194.free(); // Realspace
	{
		const int i = 0;
		ktemp6195[0] = 0.33333333333333337*R*R*R*ktemp6195[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6195[i] = std::complex<double>(ktemp6195[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6195[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6197(Nx*Ny*Nz); // RS
	rtemp6197 = ifft(Nx,Ny,Nz,dV,ktemp6195);

	ktemp6195.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6197[i] = rtemp6192[i] + 17474.64143659009*rtemp6197[i];
	}

	rtemp6192.free(); // Realspace
	Vector rtemp6199(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		const double t3 = log(t2);
		const double t4 = 1.0/t2;
		const double t5 = 1.0/n3[i];
		rtemp6199[i] = t1*t4*t5*t5*t5*rtemp186[i]*(t4*(8.841941282883075e-3 + (1.768388256576615e-2*t4 - 1.768388256576615e-2*t5)*(n3[i] + t3/(t4*t4))) - 8.841941282883075e-3 - 1.768388256576615e-2*t3)*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6200(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6200 = fft(Nx,Ny,Nz,dV,rtemp6199);

	rtemp6199.free(); // Realspace
	{
		const int i = 0;
		ktemp6200[0] = 0.33333333333333337*R*R*R*ktemp6200[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6200[i] = std::complex<double>(ktemp6200[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6200[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6202(Nx*Ny*Nz); // RS
	rtemp6202 = ifft(Nx,Ny,Nz,dV,ktemp6200);

	ktemp6200.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6202[i] = rtemp6197[i] - 14763.948704091561*rtemp6202[i];
	}

	rtemp6197.free(); // Realspace
	Vector rtemp6204(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		const double t3 = log(t2);
		const double t4 = 1.0/t2;
		const double t5 = 1.0/n3[i];
		rtemp6204[i] = t1*t4*t5*t5*t5*rtemp195[i]*(t4*(8.841941282883075e-3 + (1.768388256576615e-2*t4 - 1.768388256576615e-2*t5)*(n3[i] + t3/(t4*t4))) - 8.841941282883075e-3 - 1.768388256576615e-2*t3)*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6205(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6205 = fft(Nx,Ny,Nz,dV,rtemp6204);

	rtemp6204.free(); // Realspace
	{
		const int i = 0;
		ktemp6205[0] = 0.33333333333333337*R*R*R*ktemp6205[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6205[i] = std::complex<double>(ktemp6205[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6205[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6207(Nx*Ny*Nz); // RS
	rtemp6207 = ifft(Nx,Ny,Nz,dV,ktemp6205);

	ktemp6205.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6207[i] = rtemp6202[i] + 2881.3512793469013*rtemp6207[i];
	}

	rtemp6202.free(); // Realspace
	Vector rtemp6209(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		const double t3 = log(t2);
		const double t4 = 1.0/t2;
		const double t5 = 1.0/n3[i];
		rtemp6209[i] = t1*t4*t5*t5*t5*rtemp204[i]*(t4*(8.841941282883075e-3 + (1.768388256576615e-2*t4 - 1.768388256576615e-2*t5)*(n3[i] + t3/(t4*t4))) - 8.841941282883075e-3 - 1.768388256576615e-2*t3)*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6210(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6210 = fft(Nx,Ny,Nz,dV,rtemp6209);

	rtemp6209.free(); // Realspace
	{
		const int i = 0;
		ktemp6210[0] = 0.33333333333333337*R*R*R*ktemp6210[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6210[i] = std::complex<double>(ktemp6210[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6210[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6212(Nx*Ny*Nz); // RS
	rtemp6212 = ifft(Nx,Ny,Nz,dV,ktemp6210);

	ktemp6210.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6212[i] = rtemp6207[i] + 107.15769220711617*rtemp6212[i];
	}

	rtemp6207.free(); // Realspace
	Vector rtemp6214(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		const double t3 = log(t2);
		const double t4 = 1.0/t2;
		const double t5 = 1.0/n3[i];
		rtemp6214[i] = t1*t4*t5*t5*t5*rtemp213[i]*(t4*(8.841941282883075e-3 + (1.768388256576615e-2*t4 - 1.768388256576615e-2*t5)*(n3[i] + t3/(t4*t4))) - 8.841941282883075e-3 - 1.768388256576615e-2*t3)*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6215(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6215 = fft(Nx,Ny,Nz,dV,rtemp6214);

	rtemp6214.free(); // Realspace
	{
		const int i = 0;
		ktemp6215[0] = 0.33333333333333337*R*R*R*ktemp6215[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6215[i] = std::complex<double>(ktemp6215[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6215[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6217(Nx*Ny*Nz); // RS
	rtemp6217 = ifft(Nx,Ny,Nz,dV,ktemp6215);

	ktemp6215.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6217[i] = rtemp6212[i] + 4988.785892753519*rtemp6217[i];
	}

	rtemp6212.free(); // Realspace
	Vector rtemp6219(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		const double t3 = log(t2);
		const double t4 = 1.0/t2;
		const double t5 = 1.0/n3[i];
		rtemp6219[i] = t1*t4*t5*t5*t5*rtemp222[i]*(t4*(8.841941282883075e-3 + (1.768388256576615e-2*t4 - 1.768388256576615e-2*t5)*(n3[i] + t3/(t4*t4))) - 8.841941282883075e-3 - 1.768388256576615e-2*t3)*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6220(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6220 = fft(Nx,Ny,Nz,dV,rtemp6219);

	rtemp6219.free(); // Realspace
	{
		const int i = 0;
		ktemp6220[0] = 0.33333333333333337*R*R*R*ktemp6220[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6220[i] = std::complex<double>(ktemp6220[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6220[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6222(Nx*Ny*Nz); // RS
	rtemp6222 = ifft(Nx,Ny,Nz,dV,ktemp6220);

	ktemp6220.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6222[i] = rtemp6217[i] - 1412.894015767902*rtemp6222[i];
	}

	rtemp6217.free(); // Realspace
	Vector rtemp6224(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		const double t3 = log(t2);
		const double t4 = 1.0/t2;
		const double t5 = 1.0/n3[i];
		rtemp6224[i] = t1*t4*t5*t5*t5*rtemp27[i]*(t4*(8.841941282883075e-3 + (1.768388256576615e-2*t4 - 1.768388256576615e-2*t5)*(n3[i] + t3/(t4*t4))) - 8.841941282883075e-3 - 1.768388256576615e-2*t3)*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6225(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6225 = fft(Nx,Ny,Nz,dV,rtemp6224);

	rtemp6224.free(); // Realspace
	{
		const int i = 0;
		ktemp6225[0] = 0.33333333333333337*R*R*R*ktemp6225[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6225[i] = std::complex<double>(ktemp6225[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6225[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6227(Nx*Ny*Nz); // RS
	rtemp6227 = ifft(Nx,Ny,Nz,dV,ktemp6225);

	ktemp6225.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6227[i] = rtemp6222[i] + 410.77115346061197*rtemp6227[i];
	}

	rtemp6222.free(); // Realspace
	Vector rtemp6229(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		const double t3 = log(t2);
		const double t4 = 1.0/t2;
		const double t5 = 1.0/n3[i];
		rtemp6229[i] = t1*t4*t5*t5*t5*rtemp38[i]*(t4*(8.841941282883075e-3 + (1.768388256576615e-2*t4 - 1.768388256576615e-2*t5)*(n3[i] + t3/(t4*t4))) - 8.841941282883075e-3 - 1.768388256576615e-2*t3)*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6230(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6230 = fft(Nx,Ny,Nz,dV,rtemp6229);

	rtemp6229.free(); // Realspace
	{
		const int i = 0;
		ktemp6230[0] = 0.33333333333333337*R*R*R*ktemp6230[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6230[i] = std::complex<double>(ktemp6230[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6230[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6232(Nx*Ny*Nz); // RS
	rtemp6232 = ifft(Nx,Ny,Nz,dV,ktemp6230);

	ktemp6230.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6232[i] = rtemp6227[i] - 4451.013030010399*rtemp6232[i];
	}

	rtemp6227.free(); // Realspace
	Vector rtemp6234(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		const double t3 = log(t2);
		const double t4 = 1.0/t2;
		const double t5 = 1.0/n3[i];
		rtemp6234[i] = t1*t4*t5*t5*t5*rtemp49[i]*(t4*(8.841941282883075e-3 + (1.768388256576615e-2*t4 - 1.768388256576615e-2*t5)*(n3[i] + t3/(t4*t4))) - 8.841941282883075e-3 - 1.768388256576615e-2*t3)*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6235(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6235 = fft(Nx,Ny,Nz,dV,rtemp6234);

	rtemp6234.free(); // Realspace
	{
		const int i = 0;
		ktemp6235[0] = 0.33333333333333337*R*R*R*ktemp6235[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6235[i] = std::complex<double>(ktemp6235[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6235[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6237(Nx*Ny*Nz); // RS
	rtemp6237 = ifft(Nx,Ny,Nz,dV,ktemp6235);

	ktemp6235.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6237[i] = rtemp6232[i] - 3480.640595023736*rtemp6237[i];
	}

	rtemp6232.free(); // Realspace
	Vector rtemp6239(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		const double t3 = log(t2);
		const double t4 = 1.0/t2;
		const double t5 = 1.0/n3[i];
		rtemp6239[i] = t1*t4*t5*t5*t5*rtemp60[i]*(t4*(8.841941282883075e-3 + (1.768388256576615e-2*t4 - 1.768388256576615e-2*t5)*(n3[i] + t3/(t4*t4))) - 8.841941282883075e-3 - 1.768388256576615e-2*t3)*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6240(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6240 = fft(Nx,Ny,Nz,dV,rtemp6239);

	rtemp6239.free(); // Realspace
	{
		const int i = 0;
		ktemp6240[0] = 0.33333333333333337*R*R*R*ktemp6240[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6240[i] = std::complex<double>(ktemp6240[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6240[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6242(Nx*Ny*Nz); // RS
	rtemp6242 = ifft(Nx,Ny,Nz,dV,ktemp6240);

	ktemp6240.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6242[i] = rtemp6237[i] + 1984.4017075391882*rtemp6242[i];
	}

	rtemp6237.free(); // Realspace
	Vector rtemp6244(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		const double t3 = 1.0/t2;
		const double t4 = 1.0/n3[i];
		rtemp6244[i] = t1*t3*t4*t4*rtemp123[i]*log(t2)*(1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6245(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6245 = fft(Nx,Ny,Nz,dV,rtemp6244);

	rtemp6244.free(); // Realspace
	{
		const int i = 0;
		ktemp6245[0] = 0.33333333333333337*R*R*R*ktemp6245[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6245[i] = std::complex<double>(ktemp6245[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6245[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6247(Nx*Ny*Nz); // RS
	rtemp6247 = ifft(Nx,Ny,Nz,dV,ktemp6245);

	ktemp6245.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6247[i] = rtemp6242[i] - 650.8837600728538*rtemp6247[i];
	}

	rtemp6242.free(); // Realspace
	Vector rtemp6249(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		rtemp6249[i] = t1*rtemp123[i]*(n3[i] + t2*t2*log(t2))*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i])/((t2*t2)*(t2*t2)*n3[i]*n3[i]);
	}

	ComplexVector ktemp6250(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6250 = fft(Nx,Ny,Nz,dV,rtemp6249);

	rtemp6249.free(); // Realspace
	{
		const int i = 0;
		ktemp6250[0] = 0.33333333333333337*R*R*R*ktemp6250[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6250[i] = std::complex<double>(ktemp6250[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6250[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6252(Nx*Ny*Nz); // RS
	rtemp6252 = ifft(Nx,Ny,Nz,dV,ktemp6250);

	ktemp6250.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6252[i] = rtemp6247[i] + 5.755075988546329*rtemp6252[i];
	}

	rtemp6247.free(); // Realspace
	Vector rtemp6254(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		const double t3 = 1.0/t2;
		const double t4 = 1.0/n3[i];
		rtemp6254[i] = t1*t3*t3*t3*t4*t4*rtemp123[i]*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + log(t2)/(t3*t3)))*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6255(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6255 = fft(Nx,Ny,Nz,dV,rtemp6254);

	rtemp6254.free(); // Realspace
	{
		const int i = 0;
		ktemp6255[0] = 0.33333333333333337*R*R*R*ktemp6255[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6255[i] = std::complex<double>(ktemp6255[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6255[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6257(Nx*Ny*Nz); // RS
	rtemp6257 = ifft(Nx,Ny,Nz,dV,ktemp6255);

	ktemp6255.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6257[i] = rtemp6252[i] + 325.4418800364269*rtemp6257[i];
	}

	rtemp6252.free(); // Realspace
	Vector rtemp6259(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		rtemp6259[i] = t1*rtemp123[i]*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i])/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6260(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6260 = fft(Nx,Ny,Nz,dV,rtemp6259);

	{
		const int i = 0;
		ktemp6260[0] = 0.33333333333333337*R*R*R*ktemp6260[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6260[i] = std::complex<double>(ktemp6260[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6260[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6262(Nx*Ny*Nz); // RS
	rtemp6262 = ifft(Nx,Ny,Nz,dV,ktemp6260);

	ktemp6260.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6262[i] = rtemp6257[i] + 5.755075988546329*rtemp6262[i];
	}

	rtemp6257.free(); // Realspace
	Vector rtemp6264(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0/(1.0 - 1.0*n3[i]);
		const double t3 = 1.0/n3[i];
		rtemp6264[i] = t1*t2*t3*t3*rtemp123[i]*(1.768388256576615e-2*t2 - 1.768388256576615e-2*t3)*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6265(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6265 = fft(Nx,Ny,Nz,dV,rtemp6264);

	rtemp6264.free(); // Realspace
	{
		const int i = 0;
		ktemp6265[0] = 0.33333333333333337*R*R*R*ktemp6265[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6265[i] = std::complex<double>(ktemp6265[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6265[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6267(Nx*Ny*Nz); // RS
	rtemp6267 = ifft(Nx,Ny,Nz,dV,ktemp6265);

	ktemp6265.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6267[i] = rtemp6262[i] - 325.4418800364269*rtemp6267[i];
	}

	rtemp6262.free(); // Realspace
	Vector rtemp6269(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		const double t3 = 1.0/t2;
		const double t4 = 1.0/n3[i];
		rtemp6269[i] = t1*t3*t4*t4*rtemp132[i]*log(t2)*(1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6270(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6270 = fft(Nx,Ny,Nz,dV,rtemp6269);

	rtemp6269.free(); // Realspace
	{
		const int i = 0;
		ktemp6270[0] = 0.33333333333333337*R*R*R*ktemp6270[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6270[i] = std::complex<double>(ktemp6270[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6270[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6272(Nx*Ny*Nz); // RS
	rtemp6272 = ifft(Nx,Ny,Nz,dV,ktemp6270);

	ktemp6270.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6272[i] = rtemp6267[i] + 1928.838459728091*rtemp6272[i];
	}

	rtemp6267.free(); // Realspace
	Vector rtemp6274(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		rtemp6274[i] = t1*rtemp132[i]*(n3[i] + t2*t2*log(t2))*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i])/((t2*t2)*(t2*t2)*n3[i]*n3[i]);
	}

	ComplexVector ktemp6275(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6275 = fft(Nx,Ny,Nz,dV,rtemp6274);

	rtemp6274.free(); // Realspace
	{
		const int i = 0;
		ktemp6275[0] = 0.33333333333333337*R*R*R*ktemp6275[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6275[i] = std::complex<double>(ktemp6275[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6275[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6277(Nx*Ny*Nz); // RS
	rtemp6277 = ifft(Nx,Ny,Nz,dV,ktemp6275);

	ktemp6275.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6277[i] = rtemp6272[i] - 17.054676405082414*rtemp6277[i];
	}

	rtemp6272.free(); // Realspace
	Vector rtemp6279(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		const double t3 = 1.0/t2;
		const double t4 = 1.0/n3[i];
		rtemp6279[i] = t1*t3*t3*t3*t4*t4*rtemp132[i]*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + log(t2)/(t3*t3)))*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6280(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6280 = fft(Nx,Ny,Nz,dV,rtemp6279);

	rtemp6279.free(); // Realspace
	{
		const int i = 0;
		ktemp6280[0] = 0.33333333333333337*R*R*R*ktemp6280[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6280[i] = std::complex<double>(ktemp6280[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6280[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6282(Nx*Ny*Nz); // RS
	rtemp6282 = ifft(Nx,Ny,Nz,dV,ktemp6280);

	ktemp6280.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6282[i] = rtemp6277[i] - 964.4192298640455*rtemp6282[i];
	}

	rtemp6277.free(); // Realspace
	Vector rtemp6284(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		rtemp6284[i] = t1*rtemp132[i]*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i])/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6285(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6285 = fft(Nx,Ny,Nz,dV,rtemp6284);

	{
		const int i = 0;
		ktemp6285[0] = 0.33333333333333337*R*R*R*ktemp6285[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6285[i] = std::complex<double>(ktemp6285[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6285[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6287(Nx*Ny*Nz); // RS
	rtemp6287 = ifft(Nx,Ny,Nz,dV,ktemp6285);

	ktemp6285.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6287[i] = rtemp6282[i] - 17.054676405082414*rtemp6287[i];
	}

	rtemp6282.free(); // Realspace
	Vector rtemp6289(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0/(1.0 - 1.0*n3[i]);
		const double t3 = 1.0/n3[i];
		rtemp6289[i] = t1*t2*t3*t3*rtemp132[i]*(1.768388256576615e-2*t2 - 1.768388256576615e-2*t3)*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6290(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6290 = fft(Nx,Ny,Nz,dV,rtemp6289);

	rtemp6289.free(); // Realspace
	{
		const int i = 0;
		ktemp6290[0] = 0.33333333333333337*R*R*R*ktemp6290[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6290[i] = std::complex<double>(ktemp6290[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6290[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6292(Nx*Ny*Nz); // RS
	rtemp6292 = ifft(Nx,Ny,Nz,dV,ktemp6290);

	ktemp6290.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6292[i] = rtemp6287[i] + 964.4192298640455*rtemp6292[i];
	}

	rtemp6287.free(); // Realspace
	Vector rtemp6294(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		const double t3 = 1.0/t2;
		const double t4 = 1.0/n3[i];
		rtemp6294[i] = t1*t3*t4*t4*rtemp141[i]*log(t2)*(1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6295(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6295 = fft(Nx,Ny,Nz,dV,rtemp6294);

	rtemp6294.free(); // Realspace
	{
		const int i = 0;
		ktemp6295[0] = 0.33333333333333337*R*R*R*ktemp6295[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6295[i] = std::complex<double>(ktemp6295[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6295[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6297(Nx*Ny*Nz); // RS
	rtemp6297 = ifft(Nx,Ny,Nz,dV,ktemp6295);

	ktemp6295.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6297[i] = rtemp6292[i] - 1285.892306485394*rtemp6297[i];
	}

	rtemp6292.free(); // Realspace
	Vector rtemp6299(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		rtemp6299[i] = t1*rtemp141[i]*(n3[i] + t2*t2*log(t2))*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i])/((t2*t2)*(t2*t2)*n3[i]*n3[i]);
	}

	ComplexVector ktemp6300(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6300 = fft(Nx,Ny,Nz,dV,rtemp6299);

	rtemp6299.free(); // Realspace
	{
		const int i = 0;
		ktemp6300[0] = 0.33333333333333337*R*R*R*ktemp6300[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6300[i] = std::complex<double>(ktemp6300[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6300[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6302(Nx*Ny*Nz); // RS
	rtemp6302 = ifft(Nx,Ny,Nz,dV,ktemp6300);

	ktemp6300.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6302[i] = rtemp6297[i] + 11.369784270054941*rtemp6302[i];
	}

	rtemp6297.free(); // Realspace
	Vector rtemp6304(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		const double t3 = 1.0/t2;
		const double t4 = 1.0/n3[i];
		rtemp6304[i] = t1*t3*t3*t3*t4*t4*rtemp141[i]*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + log(t2)/(t3*t3)))*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6305(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6305 = fft(Nx,Ny,Nz,dV,rtemp6304);

	rtemp6304.free(); // Realspace
	{
		const int i = 0;
		ktemp6305[0] = 0.33333333333333337*R*R*R*ktemp6305[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6305[i] = std::complex<double>(ktemp6305[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6305[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6307(Nx*Ny*Nz); // RS
	rtemp6307 = ifft(Nx,Ny,Nz,dV,ktemp6305);

	ktemp6305.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6307[i] = rtemp6302[i] + 642.946153242697*rtemp6307[i];
	}

	rtemp6302.free(); // Realspace
	Vector rtemp6309(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		rtemp6309[i] = t1*rtemp141[i]*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i])/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6310(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6310 = fft(Nx,Ny,Nz,dV,rtemp6309);

	{
		const int i = 0;
		ktemp6310[0] = 0.33333333333333337*R*R*R*ktemp6310[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6310[i] = std::complex<double>(ktemp6310[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6310[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6312(Nx*Ny*Nz); // RS
	rtemp6312 = ifft(Nx,Ny,Nz,dV,ktemp6310);

	ktemp6310.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6312[i] = rtemp6307[i] + 11.369784270054941*rtemp6312[i];
	}

	rtemp6307.free(); // Realspace
	Vector rtemp6314(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0/(1.0 - 1.0*n3[i]);
		const double t3 = 1.0/n3[i];
		rtemp6314[i] = t1*t2*t3*t3*rtemp141[i]*(1.768388256576615e-2*t2 - 1.768388256576615e-2*t3)*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6315(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6315 = fft(Nx,Ny,Nz,dV,rtemp6314);

	rtemp6314.free(); // Realspace
	{
		const int i = 0;
		ktemp6315[0] = 0.33333333333333337*R*R*R*ktemp6315[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6315[i] = std::complex<double>(ktemp6315[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6315[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6317(Nx*Ny*Nz); // RS
	rtemp6317 = ifft(Nx,Ny,Nz,dV,ktemp6315);

	ktemp6315.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6317[i] = rtemp6312[i] - 642.946153242697*rtemp6317[i];
	}

	rtemp6312.free(); // Realspace
	Vector rtemp6319(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		const double t3 = 1.0/t2;
		const double t4 = 1.0/n3[i];
		rtemp6319[i] = t1*t3*t4*t4*rtemp150[i]*log(t2)*(1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6320(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6320 = fft(Nx,Ny,Nz,dV,rtemp6319);

	rtemp6319.free(); // Realspace
	{
		const int i = 0;
		ktemp6320[0] = 0.33333333333333337*R*R*R*ktemp6320[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6320[i] = std::complex<double>(ktemp6320[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6320[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6322(Nx*Ny*Nz); // RS
	rtemp6322 = ifft(Nx,Ny,Nz,dV,ktemp6320);

	ktemp6320.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6322[i] = rtemp6317[i] + 2825.788031535804*rtemp6322[i];
	}

	rtemp6317.free(); // Realspace
	Vector rtemp6324(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		rtemp6324[i] = t1*rtemp150[i]*(n3[i] + t2*t2*log(t2))*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i])/((t2*t2)*(t2*t2)*n3[i]*n3[i]);
	}

	ComplexVector ktemp6325(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6325 = fft(Nx,Ny,Nz,dV,rtemp6324);

	rtemp6324.free(); // Realspace
	{
		const int i = 0;
		ktemp6325[0] = 0.33333333333333337*R*R*R*ktemp6325[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6325[i] = std::complex<double>(ktemp6325[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6325[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6327(Nx*Ny*Nz); // RS
	rtemp6327 = ifft(Nx,Ny,Nz,dV,ktemp6325);

	ktemp6325.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6327[i] = rtemp6322[i] - 24.98545185271333*rtemp6327[i];
	}

	rtemp6322.free(); // Realspace
	Vector rtemp6329(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		const double t3 = 1.0/t2;
		const double t4 = 1.0/n3[i];
		rtemp6329[i] = t1*t3*t3*t3*t4*t4*rtemp150[i]*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + log(t2)/(t3*t3)))*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6330(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6330 = fft(Nx,Ny,Nz,dV,rtemp6329);

	rtemp6329.free(); // Realspace
	{
		const int i = 0;
		ktemp6330[0] = 0.33333333333333337*R*R*R*ktemp6330[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6330[i] = std::complex<double>(ktemp6330[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6330[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6332(Nx*Ny*Nz); // RS
	rtemp6332 = ifft(Nx,Ny,Nz,dV,ktemp6330);

	ktemp6330.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6332[i] = rtemp6327[i] - 1412.894015767902*rtemp6332[i];
	}

	rtemp6327.free(); // Realspace
	Vector rtemp6334(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		rtemp6334[i] = t1*rtemp150[i]*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i])/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6335(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6335 = fft(Nx,Ny,Nz,dV,rtemp6334);

	{
		const int i = 0;
		ktemp6335[0] = 0.33333333333333337*R*R*R*ktemp6335[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6335[i] = std::complex<double>(ktemp6335[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6335[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6337(Nx*Ny*Nz); // RS
	rtemp6337 = ifft(Nx,Ny,Nz,dV,ktemp6335);

	ktemp6335.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6337[i] = rtemp6332[i] - 24.98545185271333*rtemp6337[i];
	}

	rtemp6332.free(); // Realspace
	Vector rtemp6339(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0/(1.0 - 1.0*n3[i]);
		const double t3 = 1.0/n3[i];
		rtemp6339[i] = t1*t2*t3*t3*rtemp150[i]*(1.768388256576615e-2*t2 - 1.768388256576615e-2*t3)*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6340(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6340 = fft(Nx,Ny,Nz,dV,rtemp6339);

	rtemp6339.free(); // Realspace
	{
		const int i = 0;
		ktemp6340[0] = 0.33333333333333337*R*R*R*ktemp6340[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6340[i] = std::complex<double>(ktemp6340[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6340[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6342(Nx*Ny*Nz); // RS
	rtemp6342 = ifft(Nx,Ny,Nz,dV,ktemp6340);

	ktemp6340.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6342[i] = rtemp6337[i] + 1412.894015767902*rtemp6342[i];
	}

	rtemp6337.free(); // Realspace
	Vector rtemp6344(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		const double t3 = 1.0/t2;
		const double t4 = 1.0/n3[i];
		rtemp6344[i] = t1*t3*t4*t4*rtemp159[i]*log(t2)*(1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6345(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6345 = fft(Nx,Ny,Nz,dV,rtemp6344);

	rtemp6344.free(); // Realspace
	{
		const int i = 0;
		ktemp6345[0] = 0.33333333333333337*R*R*R*ktemp6345[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6345[i] = std::complex<double>(ktemp6345[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6345[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6347(Nx*Ny*Nz); // RS
	rtemp6347 = ifft(Nx,Ny,Nz,dV,ktemp6345);

	ktemp6345.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6347[i] = rtemp6342[i] - 11620.656399349487*rtemp6347[i];
	}

	rtemp6342.free(); // Realspace
	Vector rtemp6349(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		rtemp6349[i] = t1*rtemp159[i]*(n3[i] + t2*t2*log(t2))*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i])/((t2*t2)*(t2*t2)*n3[i]*n3[i]);
	}

	ComplexVector ktemp6350(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6350 = fft(Nx,Ny,Nz,dV,rtemp6349);

	rtemp6349.free(); // Realspace
	{
		const int i = 0;
		ktemp6350[0] = 0.33333333333333337*R*R*R*ktemp6350[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6350[i] = std::complex<double>(ktemp6350[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6350[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6352(Nx*Ny*Nz); // RS
	rtemp6352 = ifft(Nx,Ny,Nz,dV,ktemp6350);

	ktemp6350.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6352[i] = rtemp6347[i] + 102.74916155160763*rtemp6352[i];
	}

	rtemp6347.free(); // Realspace
	Vector rtemp6354(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		const double t3 = 1.0/t2;
		const double t4 = 1.0/n3[i];
		rtemp6354[i] = t1*t3*t3*t3*t4*t4*rtemp159[i]*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + log(t2)/(t3*t3)))*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6355(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6355 = fft(Nx,Ny,Nz,dV,rtemp6354);

	rtemp6354.free(); // Realspace
	{
		const int i = 0;
		ktemp6355[0] = 0.33333333333333337*R*R*R*ktemp6355[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6355[i] = std::complex<double>(ktemp6355[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6355[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6357(Nx*Ny*Nz); // RS
	rtemp6357 = ifft(Nx,Ny,Nz,dV,ktemp6355);

	ktemp6355.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6357[i] = rtemp6352[i] + 5810.328199674744*rtemp6357[i];
	}

	rtemp6352.free(); // Realspace
	Vector rtemp6359(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		rtemp6359[i] = t1*rtemp159[i]*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i])/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6360(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6360 = fft(Nx,Ny,Nz,dV,rtemp6359);

	{
		const int i = 0;
		ktemp6360[0] = 0.33333333333333337*R*R*R*ktemp6360[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6360[i] = std::complex<double>(ktemp6360[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6360[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6362(Nx*Ny*Nz); // RS
	rtemp6362 = ifft(Nx,Ny,Nz,dV,ktemp6360);

	ktemp6360.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6362[i] = rtemp6357[i] + 102.74916155160763*rtemp6362[i];
	}

	rtemp6357.free(); // Realspace
	Vector rtemp6364(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0/(1.0 - 1.0*n3[i]);
		const double t3 = 1.0/n3[i];
		rtemp6364[i] = t1*t2*t3*t3*rtemp159[i]*(1.768388256576615e-2*t2 - 1.768388256576615e-2*t3)*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6365(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6365 = fft(Nx,Ny,Nz,dV,rtemp6364);

	rtemp6364.free(); // Realspace
	{
		const int i = 0;
		ktemp6365[0] = 0.33333333333333337*R*R*R*ktemp6365[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6365[i] = std::complex<double>(ktemp6365[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6365[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6367(Nx*Ny*Nz); // RS
	rtemp6367 = ifft(Nx,Ny,Nz,dV,ktemp6365);

	ktemp6365.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6367[i] = rtemp6362[i] - 5810.328199674744*rtemp6367[i];
	}

	rtemp6362.free(); // Realspace
	Vector rtemp6369(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		const double t3 = 1.0/t2;
		const double t4 = 1.0/n3[i];
		rtemp6369[i] = t1*t3*t4*t4*rtemp168[i]*log(t2)*(1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6370(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6370 = fft(Nx,Ny,Nz,dV,rtemp6369);

	rtemp6369.free(); // Realspace
	{
		const int i = 0;
		ktemp6370[0] = 0.33333333333333337*R*R*R*ktemp6370[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6370[i] = std::complex<double>(ktemp6370[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6370[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6372(Nx*Ny*Nz); // RS
	rtemp6372 = ifft(Nx,Ny,Nz,dV,ktemp6370);

	ktemp6370.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6372[i] = rtemp6367[i] + 8302.736744343965*rtemp6372[i];
	}

	rtemp6367.free(); // Realspace
	Vector rtemp6374(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		rtemp6374[i] = t1*rtemp168[i]*(n3[i] + t2*t2*log(t2))*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i])/((t2*t2)*(t2*t2)*n3[i]*n3[i]);
	}

	ComplexVector ktemp6375(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6375 = fft(Nx,Ny,Nz,dV,rtemp6374);

	rtemp6374.free(); // Realspace
	{
		const int i = 0;
		ktemp6375[0] = 0.33333333333333337*R*R*R*ktemp6375[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6375[i] = std::complex<double>(ktemp6375[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6375[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6377(Nx*Ny*Nz); // RS
	rtemp6377 = ifft(Nx,Ny,Nz,dV,ktemp6375);

	ktemp6375.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6377[i] = rtemp6372[i] - 73.41231078072512*rtemp6377[i];
	}

	rtemp6372.free(); // Realspace
	Vector rtemp6379(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		const double t3 = 1.0/t2;
		const double t4 = 1.0/n3[i];
		rtemp6379[i] = t1*t3*t3*t3*t4*t4*rtemp168[i]*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + log(t2)/(t3*t3)))*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6380(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6380 = fft(Nx,Ny,Nz,dV,rtemp6379);

	rtemp6379.free(); // Realspace
	{
		const int i = 0;
		ktemp6380[0] = 0.33333333333333337*R*R*R*ktemp6380[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6380[i] = std::complex<double>(ktemp6380[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6380[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6382(Nx*Ny*Nz); // RS
	rtemp6382 = ifft(Nx,Ny,Nz,dV,ktemp6380);

	ktemp6380.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6382[i] = rtemp6377[i] - 4151.368372171983*rtemp6382[i];
	}

	rtemp6377.free(); // Realspace
	Vector rtemp6384(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		rtemp6384[i] = t1*rtemp168[i]*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i])/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6385(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6385 = fft(Nx,Ny,Nz,dV,rtemp6384);

	{
		const int i = 0;
		ktemp6385[0] = 0.33333333333333337*R*R*R*ktemp6385[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6385[i] = std::complex<double>(ktemp6385[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6385[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6387(Nx*Ny*Nz); // RS
	rtemp6387 = ifft(Nx,Ny,Nz,dV,ktemp6385);

	ktemp6385.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6387[i] = rtemp6382[i] - 73.41231078072512*rtemp6387[i];
	}

	rtemp6382.free(); // Realspace
	Vector rtemp6389(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0/(1.0 - 1.0*n3[i]);
		const double t3 = 1.0/n3[i];
		rtemp6389[i] = t1*t2*t3*t3*rtemp168[i]*(1.768388256576615e-2*t2 - 1.768388256576615e-2*t3)*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6390(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6390 = fft(Nx,Ny,Nz,dV,rtemp6389);

	rtemp6389.free(); // Realspace
	{
		const int i = 0;
		ktemp6390[0] = 0.33333333333333337*R*R*R*ktemp6390[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6390[i] = std::complex<double>(ktemp6390[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6390[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6392(Nx*Ny*Nz); // RS
	rtemp6392 = ifft(Nx,Ny,Nz,dV,ktemp6390);

	ktemp6390.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6392[i] = rtemp6387[i] + 4151.368372171983*rtemp6392[i];
	}

	rtemp6387.free(); // Realspace
	Vector rtemp6394(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		const double t3 = 1.0/t2;
		const double t4 = 1.0/n3[i];
		rtemp6394[i] = t1*t3*t4*t4*rtemp16[i]*log(t2)*(1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6395(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6395 = fft(Nx,Ny,Nz,dV,rtemp6394);

	rtemp6394.free(); // Realspace
	{
		const int i = 0;
		ktemp6395[0] = 0.33333333333333337*R*R*R*ktemp6395[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6395[i] = std::complex<double>(ktemp6395[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6395[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6397(Nx*Ny*Nz); // RS
	rtemp6397 = ifft(Nx,Ny,Nz,dV,ktemp6395);

	ktemp6395.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6397[i] = rtemp6392[i] - 3.968803415078377*rtemp6397[i];
	}

	rtemp6392.free(); // Realspace
	Vector rtemp6399(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		rtemp6399[i] = t1*rtemp16[i]*(n3[i] + t2*t2*log(t2))*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i])/((t2*t2)*(t2*t2)*n3[i]*n3[i]);
	}

	ComplexVector ktemp6400(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6400 = fft(Nx,Ny,Nz,dV,rtemp6399);

	rtemp6399.free(); // Realspace
	{
		const int i = 0;
		ktemp6400[0] = 0.33333333333333337*R*R*R*ktemp6400[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6400[i] = std::complex<double>(ktemp6400[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6400[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6402(Nx*Ny*Nz); // RS
	rtemp6402 = ifft(Nx,Ny,Nz,dV,ktemp6400);

	ktemp6400.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6402[i] = rtemp6397[i] + 3.5091926759428835e-2*rtemp6402[i];
	}

	rtemp6397.free(); // Realspace
	Vector rtemp6404(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		const double t3 = 1.0/t2;
		const double t4 = 1.0/n3[i];
		rtemp6404[i] = t1*t3*t3*t3*t4*t4*rtemp16[i]*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + log(t2)/(t3*t3)))*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6405(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6405 = fft(Nx,Ny,Nz,dV,rtemp6404);

	rtemp6404.free(); // Realspace
	{
		const int i = 0;
		ktemp6405[0] = 0.33333333333333337*R*R*R*ktemp6405[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6405[i] = std::complex<double>(ktemp6405[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6405[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6407(Nx*Ny*Nz); // RS
	rtemp6407 = ifft(Nx,Ny,Nz,dV,ktemp6405);

	ktemp6405.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6407[i] = rtemp6402[i] + 1.9844017075391884*rtemp6407[i];
	}

	rtemp6402.free(); // Realspace
	Vector rtemp6409(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		rtemp6409[i] = t1*rtemp16[i]*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i])/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6410(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6410 = fft(Nx,Ny,Nz,dV,rtemp6409);

	{
		const int i = 0;
		ktemp6410[0] = 0.33333333333333337*R*R*R*ktemp6410[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6410[i] = std::complex<double>(ktemp6410[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6410[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6412(Nx*Ny*Nz); // RS
	rtemp6412 = ifft(Nx,Ny,Nz,dV,ktemp6410);

	ktemp6410.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6412[i] = rtemp6407[i] + 3.5091926759428835e-2*rtemp6412[i];
	}

	rtemp6407.free(); // Realspace
	Vector rtemp6414(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0/(1.0 - 1.0*n3[i]);
		const double t3 = 1.0/n3[i];
		rtemp6414[i] = t1*t2*t3*t3*rtemp16[i]*(1.768388256576615e-2*t2 - 1.768388256576615e-2*t3)*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6415(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6415 = fft(Nx,Ny,Nz,dV,rtemp6414);

	rtemp6414.free(); // Realspace
	{
		const int i = 0;
		ktemp6415[0] = 0.33333333333333337*R*R*R*ktemp6415[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6415[i] = std::complex<double>(ktemp6415[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6415[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6417(Nx*Ny*Nz); // RS
	rtemp6417 = ifft(Nx,Ny,Nz,dV,ktemp6415);

	ktemp6415.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6417[i] = rtemp6412[i] - 1.9844017075391884*rtemp6417[i];
	}

	rtemp6412.free(); // Realspace
	Vector rtemp6419(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		const double t3 = 1.0/t2;
		const double t4 = 1.0/n3[i];
		rtemp6419[i] = t1*t3*t4*t4*rtemp177[i]*log(t2)*(1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6420(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6420 = fft(Nx,Ny,Nz,dV,rtemp6419);

	rtemp6419.free(); // Realspace
	{
		const int i = 0;
		ktemp6420[0] = 0.33333333333333337*R*R*R*ktemp6420[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6420[i] = std::complex<double>(ktemp6420[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6420[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6422(Nx*Ny*Nz); // RS
	rtemp6422 = ifft(Nx,Ny,Nz,dV,ktemp6420);

	ktemp6420.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6422[i] = rtemp6417[i] + 17474.64143659009*rtemp6422[i];
	}

	rtemp6417.free(); // Realspace
	Vector rtemp6424(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		rtemp6424[i] = t1*rtemp177[i]*(n3[i] + t2*t2*log(t2))*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i])/((t2*t2)*(t2*t2)*n3[i]*n3[i]);
	}

	ComplexVector ktemp6425(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6425 = fft(Nx,Ny,Nz,dV,rtemp6424);

	rtemp6424.free(); // Realspace
	{
		const int i = 0;
		ktemp6425[0] = 0.33333333333333337*R*R*R*ktemp6425[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6425[i] = std::complex<double>(ktemp6425[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6425[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6427(Nx*Ny*Nz); // RS
	rtemp6427 = ifft(Nx,Ny,Nz,dV,ktemp6425);

	ktemp6425.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6427[i] = rtemp6422[i] - 154.50975352176513*rtemp6427[i];
	}

	rtemp6422.free(); // Realspace
	Vector rtemp6429(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		const double t3 = 1.0/t2;
		const double t4 = 1.0/n3[i];
		rtemp6429[i] = t1*t3*t3*t3*t4*t4*rtemp177[i]*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + log(t2)/(t3*t3)))*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6430(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6430 = fft(Nx,Ny,Nz,dV,rtemp6429);

	rtemp6429.free(); // Realspace
	{
		const int i = 0;
		ktemp6430[0] = 0.33333333333333337*R*R*R*ktemp6430[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6430[i] = std::complex<double>(ktemp6430[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6430[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6432(Nx*Ny*Nz); // RS
	rtemp6432 = ifft(Nx,Ny,Nz,dV,ktemp6430);

	ktemp6430.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6432[i] = rtemp6427[i] - 8737.320718295045*rtemp6432[i];
	}

	rtemp6427.free(); // Realspace
	Vector rtemp6434(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		rtemp6434[i] = t1*rtemp177[i]*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i])/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6435(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6435 = fft(Nx,Ny,Nz,dV,rtemp6434);

	{
		const int i = 0;
		ktemp6435[0] = 0.33333333333333337*R*R*R*ktemp6435[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6435[i] = std::complex<double>(ktemp6435[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6435[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6437(Nx*Ny*Nz); // RS
	rtemp6437 = ifft(Nx,Ny,Nz,dV,ktemp6435);

	ktemp6435.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6437[i] = rtemp6432[i] - 154.50975352176513*rtemp6437[i];
	}

	rtemp6432.free(); // Realspace
	Vector rtemp6439(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0/(1.0 - 1.0*n3[i]);
		const double t3 = 1.0/n3[i];
		rtemp6439[i] = t1*t2*t3*t3*rtemp177[i]*(1.768388256576615e-2*t2 - 1.768388256576615e-2*t3)*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6440(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6440 = fft(Nx,Ny,Nz,dV,rtemp6439);

	rtemp6439.free(); // Realspace
	{
		const int i = 0;
		ktemp6440[0] = 0.33333333333333337*R*R*R*ktemp6440[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6440[i] = std::complex<double>(ktemp6440[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6440[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6442(Nx*Ny*Nz); // RS
	rtemp6442 = ifft(Nx,Ny,Nz,dV,ktemp6440);

	ktemp6440.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6442[i] = rtemp6437[i] + 8737.320718295045*rtemp6442[i];
	}

	rtemp6437.free(); // Realspace
	Vector rtemp6444(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		const double t3 = 1.0/t2;
		const double t4 = 1.0/n3[i];
		rtemp6444[i] = t1*t3*t4*t4*rtemp186[i]*log(t2)*(1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6445(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6445 = fft(Nx,Ny,Nz,dV,rtemp6444);

	rtemp6444.free(); // Realspace
	{
		const int i = 0;
		ktemp6445[0] = 0.33333333333333337*R*R*R*ktemp6445[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6445[i] = std::complex<double>(ktemp6445[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6445[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6447(Nx*Ny*Nz); // RS
	rtemp6447 = ifft(Nx,Ny,Nz,dV,ktemp6445);

	ktemp6445.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6447[i] = rtemp6442[i] - 14763.948704091561*rtemp6447[i];
	}

	rtemp6442.free(); // Realspace
	Vector rtemp6449(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		rtemp6449[i] = t1*rtemp186[i]*(n3[i] + t2*t2*log(t2))*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i])/((t2*t2)*(t2*t2)*n3[i]*n3[i]);
	}

	ComplexVector ktemp6450(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6450 = fft(Nx,Ny,Nz,dV,rtemp6449);

	rtemp6449.free(); // Realspace
	{
		const int i = 0;
		ktemp6450[0] = 0.33333333333333337*R*R*R*ktemp6450[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6450[i] = std::complex<double>(ktemp6450[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6450[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6452(Nx*Ny*Nz); // RS
	rtemp6452 = ifft(Nx,Ny,Nz,dV,ktemp6450);

	ktemp6450.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6452[i] = rtemp6447[i] + 130.54196754507527*rtemp6452[i];
	}

	rtemp6447.free(); // Realspace
	Vector rtemp6454(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		const double t3 = 1.0/t2;
		const double t4 = 1.0/n3[i];
		rtemp6454[i] = t1*t3*t3*t3*t4*t4*rtemp186[i]*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + log(t2)/(t3*t3)))*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6455(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6455 = fft(Nx,Ny,Nz,dV,rtemp6454);

	rtemp6454.free(); // Realspace
	{
		const int i = 0;
		ktemp6455[0] = 0.33333333333333337*R*R*R*ktemp6455[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6455[i] = std::complex<double>(ktemp6455[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6455[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6457(Nx*Ny*Nz); // RS
	rtemp6457 = ifft(Nx,Ny,Nz,dV,ktemp6455);

	ktemp6455.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6457[i] = rtemp6452[i] + 7381.9743520457805*rtemp6457[i];
	}

	rtemp6452.free(); // Realspace
	Vector rtemp6459(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		rtemp6459[i] = t1*rtemp186[i]*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i])/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6460(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6460 = fft(Nx,Ny,Nz,dV,rtemp6459);

	{
		const int i = 0;
		ktemp6460[0] = 0.33333333333333337*R*R*R*ktemp6460[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6460[i] = std::complex<double>(ktemp6460[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6460[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6462(Nx*Ny*Nz); // RS
	rtemp6462 = ifft(Nx,Ny,Nz,dV,ktemp6460);

	ktemp6460.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6462[i] = rtemp6457[i] + 130.54196754507527*rtemp6462[i];
	}

	rtemp6457.free(); // Realspace
	Vector rtemp6464(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0/(1.0 - 1.0*n3[i]);
		const double t3 = 1.0/n3[i];
		rtemp6464[i] = t1*t2*t3*t3*rtemp186[i]*(1.768388256576615e-2*t2 - 1.768388256576615e-2*t3)*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6465(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6465 = fft(Nx,Ny,Nz,dV,rtemp6464);

	rtemp6464.free(); // Realspace
	{
		const int i = 0;
		ktemp6465[0] = 0.33333333333333337*R*R*R*ktemp6465[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6465[i] = std::complex<double>(ktemp6465[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6465[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6467(Nx*Ny*Nz); // RS
	rtemp6467 = ifft(Nx,Ny,Nz,dV,ktemp6465);

	ktemp6465.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6467[i] = rtemp6462[i] - 7381.9743520457805*rtemp6467[i];
	}

	rtemp6462.free(); // Realspace
	Vector rtemp6469(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		const double t3 = 1.0/t2;
		const double t4 = 1.0/n3[i];
		rtemp6469[i] = t1*t3*t4*t4*rtemp195[i]*log(t2)*(1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6470(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6470 = fft(Nx,Ny,Nz,dV,rtemp6469);

	rtemp6469.free(); // Realspace
	{
		const int i = 0;
		ktemp6470[0] = 0.33333333333333337*R*R*R*ktemp6470[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6470[i] = std::complex<double>(ktemp6470[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6470[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6472(Nx*Ny*Nz); // RS
	rtemp6472 = ifft(Nx,Ny,Nz,dV,ktemp6470);

	ktemp6470.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6472[i] = rtemp6467[i] + 2881.3512793469013*rtemp6472[i];
	}

	rtemp6467.free(); // Realspace
	Vector rtemp6474(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		rtemp6474[i] = t1*rtemp195[i]*(n3[i] + t2*t2*log(t2))*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i])/((t2*t2)*(t2*t2)*n3[i]*n3[i]);
	}

	ComplexVector ktemp6475(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6475 = fft(Nx,Ny,Nz,dV,rtemp6474);

	rtemp6474.free(); // Realspace
	{
		const int i = 0;
		ktemp6475[0] = 0.33333333333333337*R*R*R*ktemp6475[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6475[i] = std::complex<double>(ktemp6475[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6475[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6477(Nx*Ny*Nz); // RS
	rtemp6477 = ifft(Nx,Ny,Nz,dV,ktemp6475);

	ktemp6475.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6477[i] = rtemp6472[i] - 25.47673882734533*rtemp6477[i];
	}

	rtemp6472.free(); // Realspace
	Vector rtemp6479(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		const double t3 = 1.0/t2;
		const double t4 = 1.0/n3[i];
		rtemp6479[i] = t1*t3*t3*t3*t4*t4*rtemp195[i]*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + log(t2)/(t3*t3)))*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6480(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6480 = fft(Nx,Ny,Nz,dV,rtemp6479);

	rtemp6479.free(); // Realspace
	{
		const int i = 0;
		ktemp6480[0] = 0.33333333333333337*R*R*R*ktemp6480[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6480[i] = std::complex<double>(ktemp6480[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6480[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6482(Nx*Ny*Nz); // RS
	rtemp6482 = ifft(Nx,Ny,Nz,dV,ktemp6480);

	ktemp6480.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6482[i] = rtemp6477[i] - 1440.6756396734506*rtemp6482[i];
	}

	rtemp6477.free(); // Realspace
	Vector rtemp6484(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		rtemp6484[i] = t1*rtemp195[i]*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i])/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6485(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6485 = fft(Nx,Ny,Nz,dV,rtemp6484);

	{
		const int i = 0;
		ktemp6485[0] = 0.33333333333333337*R*R*R*ktemp6485[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6485[i] = std::complex<double>(ktemp6485[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6485[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6487(Nx*Ny*Nz); // RS
	rtemp6487 = ifft(Nx,Ny,Nz,dV,ktemp6485);

	ktemp6485.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6487[i] = rtemp6482[i] - 25.47673882734533*rtemp6487[i];
	}

	rtemp6482.free(); // Realspace
	Vector rtemp6489(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0/(1.0 - 1.0*n3[i]);
		const double t3 = 1.0/n3[i];
		rtemp6489[i] = t1*t2*t3*t3*rtemp195[i]*(1.768388256576615e-2*t2 - 1.768388256576615e-2*t3)*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6490(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6490 = fft(Nx,Ny,Nz,dV,rtemp6489);

	rtemp6489.free(); // Realspace
	{
		const int i = 0;
		ktemp6490[0] = 0.33333333333333337*R*R*R*ktemp6490[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6490[i] = std::complex<double>(ktemp6490[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6490[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6492(Nx*Ny*Nz); // RS
	rtemp6492 = ifft(Nx,Ny,Nz,dV,ktemp6490);

	ktemp6490.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6492[i] = rtemp6487[i] + 1440.6756396734506*rtemp6492[i];
	}

	rtemp6487.free(); // Realspace
	Vector rtemp6494(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		const double t3 = 1.0/t2;
		const double t4 = 1.0/n3[i];
		rtemp6494[i] = t1*t3*t4*t4*rtemp204[i]*log(t2)*(1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6495(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6495 = fft(Nx,Ny,Nz,dV,rtemp6494);

	rtemp6494.free(); // Realspace
	{
		const int i = 0;
		ktemp6495[0] = 0.33333333333333337*R*R*R*ktemp6495[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6495[i] = std::complex<double>(ktemp6495[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6495[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6497(Nx*Ny*Nz); // RS
	rtemp6497 = ifft(Nx,Ny,Nz,dV,ktemp6495);

	ktemp6495.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6497[i] = rtemp6492[i] + 107.15769220711617*rtemp6497[i];
	}

	rtemp6492.free(); // Realspace
	Vector rtemp6499(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		rtemp6499[i] = t1*rtemp204[i]*(n3[i] + t2*t2*log(t2))*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i])/((t2*t2)*(t2*t2)*n3[i]*n3[i]);
	}

	ComplexVector ktemp6500(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6500 = fft(Nx,Ny,Nz,dV,rtemp6499);

	rtemp6499.free(); // Realspace
	{
		const int i = 0;
		ktemp6500[0] = 0.33333333333333337*R*R*R*ktemp6500[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6500[i] = std::complex<double>(ktemp6500[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6500[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6502(Nx*Ny*Nz); // RS
	rtemp6502 = ifft(Nx,Ny,Nz,dV,ktemp6500);

	ktemp6500.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6502[i] = rtemp6497[i] - 0.9474820225045786*rtemp6502[i];
	}

	rtemp6497.free(); // Realspace
	Vector rtemp6504(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		const double t3 = 1.0/t2;
		const double t4 = 1.0/n3[i];
		rtemp6504[i] = t1*t3*t3*t3*t4*t4*rtemp204[i]*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + log(t2)/(t3*t3)))*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6505(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6505 = fft(Nx,Ny,Nz,dV,rtemp6504);

	rtemp6504.free(); // Realspace
	{
		const int i = 0;
		ktemp6505[0] = 0.33333333333333337*R*R*R*ktemp6505[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6505[i] = std::complex<double>(ktemp6505[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6505[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6507(Nx*Ny*Nz); // RS
	rtemp6507 = ifft(Nx,Ny,Nz,dV,ktemp6505);

	ktemp6505.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6507[i] = rtemp6502[i] - 53.578846103558085*rtemp6507[i];
	}

	rtemp6502.free(); // Realspace
	Vector rtemp6509(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		rtemp6509[i] = t1*rtemp204[i]*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i])/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6510(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6510 = fft(Nx,Ny,Nz,dV,rtemp6509);

	{
		const int i = 0;
		ktemp6510[0] = 0.33333333333333337*R*R*R*ktemp6510[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6510[i] = std::complex<double>(ktemp6510[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6510[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6512(Nx*Ny*Nz); // RS
	rtemp6512 = ifft(Nx,Ny,Nz,dV,ktemp6510);

	ktemp6510.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6512[i] = rtemp6507[i] - 0.9474820225045786*rtemp6512[i];
	}

	rtemp6507.free(); // Realspace
	Vector rtemp6514(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0/(1.0 - 1.0*n3[i]);
		const double t3 = 1.0/n3[i];
		rtemp6514[i] = t1*t2*t3*t3*rtemp204[i]*(1.768388256576615e-2*t2 - 1.768388256576615e-2*t3)*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6515(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6515 = fft(Nx,Ny,Nz,dV,rtemp6514);

	rtemp6514.free(); // Realspace
	{
		const int i = 0;
		ktemp6515[0] = 0.33333333333333337*R*R*R*ktemp6515[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6515[i] = std::complex<double>(ktemp6515[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6515[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6517(Nx*Ny*Nz); // RS
	rtemp6517 = ifft(Nx,Ny,Nz,dV,ktemp6515);

	ktemp6515.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6517[i] = rtemp6512[i] + 53.578846103558085*rtemp6517[i];
	}

	rtemp6512.free(); // Realspace
	Vector rtemp6519(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		const double t3 = 1.0/t2;
		const double t4 = 1.0/n3[i];
		rtemp6519[i] = t1*t3*t4*t4*rtemp213[i]*log(t2)*(1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6520(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6520 = fft(Nx,Ny,Nz,dV,rtemp6519);

	rtemp6519.free(); // Realspace
	{
		const int i = 0;
		ktemp6520[0] = 0.33333333333333337*R*R*R*ktemp6520[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6520[i] = std::complex<double>(ktemp6520[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6520[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6522(Nx*Ny*Nz); // RS
	rtemp6522 = ifft(Nx,Ny,Nz,dV,ktemp6520);

	ktemp6520.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6522[i] = rtemp6517[i] + 4988.785892753519*rtemp6522[i];
	}

	rtemp6517.free(); // Realspace
	Vector rtemp6524(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		rtemp6524[i] = t1*rtemp213[i]*(n3[i] + t2*t2*log(t2))*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i])/((t2*t2)*(t2*t2)*n3[i]*n3[i]);
	}

	ComplexVector ktemp6525(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6525 = fft(Nx,Ny,Nz,dV,rtemp6524);

	rtemp6524.free(); // Realspace
	{
		const int i = 0;
		ktemp6525[0] = 0.33333333333333337*R*R*R*ktemp6525[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6525[i] = std::complex<double>(ktemp6525[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6525[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6527(Nx*Ny*Nz); // RS
	rtemp6527 = ifft(Nx,Ny,Nz,dV,ktemp6525);

	ktemp6525.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6527[i] = rtemp6522[i] - 44.110551936602036*rtemp6527[i];
	}

	rtemp6522.free(); // Realspace
	Vector rtemp6529(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		const double t3 = 1.0/t2;
		const double t4 = 1.0/n3[i];
		rtemp6529[i] = t1*t3*t3*t3*t4*t4*rtemp213[i]*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + log(t2)/(t3*t3)))*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6530(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6530 = fft(Nx,Ny,Nz,dV,rtemp6529);

	rtemp6529.free(); // Realspace
	{
		const int i = 0;
		ktemp6530[0] = 0.33333333333333337*R*R*R*ktemp6530[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6530[i] = std::complex<double>(ktemp6530[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6530[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6532(Nx*Ny*Nz); // RS
	rtemp6532 = ifft(Nx,Ny,Nz,dV,ktemp6530);

	ktemp6530.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6532[i] = rtemp6527[i] - 2494.3929463767595*rtemp6532[i];
	}

	rtemp6527.free(); // Realspace
	Vector rtemp6534(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		rtemp6534[i] = t1*rtemp213[i]*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i])/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6535(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6535 = fft(Nx,Ny,Nz,dV,rtemp6534);

	{
		const int i = 0;
		ktemp6535[0] = 0.33333333333333337*R*R*R*ktemp6535[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6535[i] = std::complex<double>(ktemp6535[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6535[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6537(Nx*Ny*Nz); // RS
	rtemp6537 = ifft(Nx,Ny,Nz,dV,ktemp6535);

	ktemp6535.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6537[i] = rtemp6532[i] - 44.110551936602036*rtemp6537[i];
	}

	rtemp6532.free(); // Realspace
	Vector rtemp6539(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0/(1.0 - 1.0*n3[i]);
		const double t3 = 1.0/n3[i];
		rtemp6539[i] = t1*t2*t3*t3*rtemp213[i]*(1.768388256576615e-2*t2 - 1.768388256576615e-2*t3)*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6540(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6540 = fft(Nx,Ny,Nz,dV,rtemp6539);

	rtemp6539.free(); // Realspace
	{
		const int i = 0;
		ktemp6540[0] = 0.33333333333333337*R*R*R*ktemp6540[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6540[i] = std::complex<double>(ktemp6540[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6540[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6542(Nx*Ny*Nz); // RS
	rtemp6542 = ifft(Nx,Ny,Nz,dV,ktemp6540);

	ktemp6540.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6542[i] = rtemp6537[i] + 2494.3929463767595*rtemp6542[i];
	}

	rtemp6537.free(); // Realspace
	Vector rtemp6544(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		const double t3 = 1.0/t2;
		const double t4 = 1.0/n3[i];
		rtemp6544[i] = t1*t3*t4*t4*rtemp222[i]*log(t2)*(1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6545(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6545 = fft(Nx,Ny,Nz,dV,rtemp6544);

	rtemp6544.free(); // Realspace
	{
		const int i = 0;
		ktemp6545[0] = 0.33333333333333337*R*R*R*ktemp6545[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6545[i] = std::complex<double>(ktemp6545[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6545[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6547(Nx*Ny*Nz); // RS
	rtemp6547 = ifft(Nx,Ny,Nz,dV,ktemp6545);

	ktemp6545.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6547[i] = rtemp6542[i] - 1412.894015767902*rtemp6547[i];
	}

	rtemp6542.free(); // Realspace
	Vector rtemp6549(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		rtemp6549[i] = t1*rtemp222[i]*(n3[i] + t2*t2*log(t2))*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i])/((t2*t2)*(t2*t2)*n3[i]*n3[i]);
	}

	ComplexVector ktemp6550(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6550 = fft(Nx,Ny,Nz,dV,rtemp6549);

	rtemp6549.free(); // Realspace
	{
		const int i = 0;
		ktemp6550[0] = 0.33333333333333337*R*R*R*ktemp6550[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6550[i] = std::complex<double>(ktemp6550[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6550[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6552(Nx*Ny*Nz); // RS
	rtemp6552 = ifft(Nx,Ny,Nz,dV,ktemp6550);

	ktemp6550.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6552[i] = rtemp6547[i] + 12.492725926356664*rtemp6552[i];
	}

	rtemp6547.free(); // Realspace
	Vector rtemp6554(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		const double t3 = 1.0/t2;
		const double t4 = 1.0/n3[i];
		rtemp6554[i] = t1*t3*t3*t3*t4*t4*rtemp222[i]*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + log(t2)/(t3*t3)))*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6555(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6555 = fft(Nx,Ny,Nz,dV,rtemp6554);

	rtemp6554.free(); // Realspace
	{
		const int i = 0;
		ktemp6555[0] = 0.33333333333333337*R*R*R*ktemp6555[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6555[i] = std::complex<double>(ktemp6555[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6555[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6557(Nx*Ny*Nz); // RS
	rtemp6557 = ifft(Nx,Ny,Nz,dV,ktemp6555);

	ktemp6555.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6557[i] = rtemp6552[i] + 706.447007883951*rtemp6557[i];
	}

	rtemp6552.free(); // Realspace
	Vector rtemp6559(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		rtemp6559[i] = t1*rtemp222[i]*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i])/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6560(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6560 = fft(Nx,Ny,Nz,dV,rtemp6559);

	{
		const int i = 0;
		ktemp6560[0] = 0.33333333333333337*R*R*R*ktemp6560[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6560[i] = std::complex<double>(ktemp6560[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6560[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6562(Nx*Ny*Nz); // RS
	rtemp6562 = ifft(Nx,Ny,Nz,dV,ktemp6560);

	ktemp6560.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6562[i] = rtemp6557[i] + 12.492725926356664*rtemp6562[i];
	}

	rtemp6557.free(); // Realspace
	Vector rtemp6564(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0/(1.0 - 1.0*n3[i]);
		const double t3 = 1.0/n3[i];
		rtemp6564[i] = t1*t2*t3*t3*rtemp222[i]*(1.768388256576615e-2*t2 - 1.768388256576615e-2*t3)*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6565(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6565 = fft(Nx,Ny,Nz,dV,rtemp6564);

	rtemp6564.free(); // Realspace
	{
		const int i = 0;
		ktemp6565[0] = 0.33333333333333337*R*R*R*ktemp6565[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6565[i] = std::complex<double>(ktemp6565[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6565[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6567(Nx*Ny*Nz); // RS
	rtemp6567 = ifft(Nx,Ny,Nz,dV,ktemp6565);

	ktemp6565.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6567[i] = rtemp6562[i] - 706.447007883951*rtemp6567[i];
	}

	rtemp6562.free(); // Realspace
	Vector rtemp6569(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		const double t3 = 1.0/t2;
		const double t4 = 1.0/n3[i];
		rtemp6569[i] = t1*t3*t4*t4*rtemp27[i]*log(t2)*(1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6570(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6570 = fft(Nx,Ny,Nz,dV,rtemp6569);

	rtemp6569.free(); // Realspace
	{
		const int i = 0;
		ktemp6570[0] = 0.33333333333333337*R*R*R*ktemp6570[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6570[i] = std::complex<double>(ktemp6570[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6570[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6572(Nx*Ny*Nz); // RS
	rtemp6572 = ifft(Nx,Ny,Nz,dV,ktemp6570);

	ktemp6570.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6572[i] = rtemp6567[i] + 410.77115346061197*rtemp6572[i];
	}

	rtemp6567.free(); // Realspace
	Vector rtemp6574(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		rtemp6574[i] = t1*rtemp27[i]*(n3[i] + t2*t2*log(t2))*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i])/((t2*t2)*(t2*t2)*n3[i]*n3[i]);
	}

	ComplexVector ktemp6575(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6575 = fft(Nx,Ny,Nz,dV,rtemp6574);

	rtemp6574.free(); // Realspace
	{
		const int i = 0;
		ktemp6575[0] = 0.33333333333333337*R*R*R*ktemp6575[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6575[i] = std::complex<double>(ktemp6575[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6575[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6577(Nx*Ny*Nz); // RS
	rtemp6577 = ifft(Nx,Ny,Nz,dV,ktemp6575);

	ktemp6575.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6577[i] = rtemp6572[i] - 3.6320144196008837*rtemp6577[i];
	}

	rtemp6572.free(); // Realspace
	Vector rtemp6579(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		const double t3 = 1.0/t2;
		const double t4 = 1.0/n3[i];
		rtemp6579[i] = t1*t3*t3*t3*t4*t4*rtemp27[i]*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + log(t2)/(t3*t3)))*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6580(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6580 = fft(Nx,Ny,Nz,dV,rtemp6579);

	rtemp6579.free(); // Realspace
	{
		const int i = 0;
		ktemp6580[0] = 0.33333333333333337*R*R*R*ktemp6580[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6580[i] = std::complex<double>(ktemp6580[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6580[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6582(Nx*Ny*Nz); // RS
	rtemp6582 = ifft(Nx,Ny,Nz,dV,ktemp6580);

	ktemp6580.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6582[i] = rtemp6577[i] - 205.38557673030598*rtemp6582[i];
	}

	rtemp6577.free(); // Realspace
	Vector rtemp6584(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		rtemp6584[i] = t1*rtemp27[i]*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i])/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6585(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6585 = fft(Nx,Ny,Nz,dV,rtemp6584);

	{
		const int i = 0;
		ktemp6585[0] = 0.33333333333333337*R*R*R*ktemp6585[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6585[i] = std::complex<double>(ktemp6585[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6585[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6587(Nx*Ny*Nz); // RS
	rtemp6587 = ifft(Nx,Ny,Nz,dV,ktemp6585);

	ktemp6585.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6587[i] = rtemp6582[i] - 3.6320144196008837*rtemp6587[i];
	}

	rtemp6582.free(); // Realspace
	Vector rtemp6589(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0/(1.0 - 1.0*n3[i]);
		const double t3 = 1.0/n3[i];
		rtemp6589[i] = t1*t2*t3*t3*rtemp27[i]*(1.768388256576615e-2*t2 - 1.768388256576615e-2*t3)*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6590(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6590 = fft(Nx,Ny,Nz,dV,rtemp6589);

	rtemp6589.free(); // Realspace
	{
		const int i = 0;
		ktemp6590[0] = 0.33333333333333337*R*R*R*ktemp6590[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6590[i] = std::complex<double>(ktemp6590[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6590[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6592(Nx*Ny*Nz); // RS
	rtemp6592 = ifft(Nx,Ny,Nz,dV,ktemp6590);

	ktemp6590.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6592[i] = rtemp6587[i] + 205.38557673030598*rtemp6592[i];
	}

	rtemp6587.free(); // Realspace
	Vector rtemp6594(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		const double t3 = 1.0/t2;
		const double t4 = 1.0/n3[i];
		rtemp6594[i] = t1*t3*t4*t4*rtemp38[i]*log(t2)*(1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6595(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6595 = fft(Nx,Ny,Nz,dV,rtemp6594);

	rtemp6594.free(); // Realspace
	{
		const int i = 0;
		ktemp6595[0] = 0.33333333333333337*R*R*R*ktemp6595[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6595[i] = std::complex<double>(ktemp6595[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6595[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6597(Nx*Ny*Nz); // RS
	rtemp6597 = ifft(Nx,Ny,Nz,dV,ktemp6595);

	ktemp6595.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6597[i] = rtemp6592[i] - 4451.013030010399*rtemp6597[i];
	}

	rtemp6592.free(); // Realspace
	Vector rtemp6599(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		rtemp6599[i] = t1*rtemp38[i]*(n3[i] + t2*t2*log(t2))*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i])/((t2*t2)*(t2*t2)*n3[i]*n3[i]);
	}

	ComplexVector ktemp6600(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6600 = fft(Nx,Ny,Nz,dV,rtemp6599);

	rtemp6599.free(); // Realspace
	{
		const int i = 0;
		ktemp6600[0] = 0.33333333333333337*R*R*R*ktemp6600[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6600[i] = std::complex<double>(ktemp6600[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6600[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6602(Nx*Ny*Nz); // RS
	rtemp6602 = ifft(Nx,Ny,Nz,dV,ktemp6600);

	ktemp6600.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6602[i] = rtemp6597[i] + 39.35559586069943*rtemp6602[i];
	}

	rtemp6597.free(); // Realspace
	Vector rtemp6604(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		const double t3 = 1.0/t2;
		const double t4 = 1.0/n3[i];
		rtemp6604[i] = t1*t3*t3*t3*t4*t4*rtemp38[i]*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + log(t2)/(t3*t3)))*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6605(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6605 = fft(Nx,Ny,Nz,dV,rtemp6604);

	rtemp6604.free(); // Realspace
	{
		const int i = 0;
		ktemp6605[0] = 0.33333333333333337*R*R*R*ktemp6605[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6605[i] = std::complex<double>(ktemp6605[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6605[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6607(Nx*Ny*Nz); // RS
	rtemp6607 = ifft(Nx,Ny,Nz,dV,ktemp6605);

	ktemp6605.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6607[i] = rtemp6602[i] + 2225.5065150051996*rtemp6607[i];
	}

	rtemp6602.free(); // Realspace
	Vector rtemp6609(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		rtemp6609[i] = t1*rtemp38[i]*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i])/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6610(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6610 = fft(Nx,Ny,Nz,dV,rtemp6609);

	{
		const int i = 0;
		ktemp6610[0] = 0.33333333333333337*R*R*R*ktemp6610[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6610[i] = std::complex<double>(ktemp6610[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6610[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6612(Nx*Ny*Nz); // RS
	rtemp6612 = ifft(Nx,Ny,Nz,dV,ktemp6610);

	ktemp6610.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6612[i] = rtemp6607[i] + 39.35559586069943*rtemp6612[i];
	}

	rtemp6607.free(); // Realspace
	Vector rtemp6614(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0/(1.0 - 1.0*n3[i]);
		const double t3 = 1.0/n3[i];
		rtemp6614[i] = t1*t2*t3*t3*rtemp38[i]*(1.768388256576615e-2*t2 - 1.768388256576615e-2*t3)*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6615(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6615 = fft(Nx,Ny,Nz,dV,rtemp6614);

	rtemp6614.free(); // Realspace
	{
		const int i = 0;
		ktemp6615[0] = 0.33333333333333337*R*R*R*ktemp6615[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6615[i] = std::complex<double>(ktemp6615[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6615[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6617(Nx*Ny*Nz); // RS
	rtemp6617 = ifft(Nx,Ny,Nz,dV,ktemp6615);

	ktemp6615.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6617[i] = rtemp6612[i] - 2225.5065150051996*rtemp6617[i];
	}

	rtemp6612.free(); // Realspace
	Vector rtemp6619(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		const double t3 = 1.0/t2;
		const double t4 = 1.0/n3[i];
		rtemp6619[i] = t1*t3*t4*t4*rtemp49[i]*log(t2)*(1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6620(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6620 = fft(Nx,Ny,Nz,dV,rtemp6619);

	rtemp6619.free(); // Realspace
	{
		const int i = 0;
		ktemp6620[0] = 0.33333333333333337*R*R*R*ktemp6620[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6620[i] = std::complex<double>(ktemp6620[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6620[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6622(Nx*Ny*Nz); // RS
	rtemp6622 = ifft(Nx,Ny,Nz,dV,ktemp6620);

	ktemp6620.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6622[i] = rtemp6617[i] - 3480.640595023736*rtemp6622[i];
	}

	rtemp6617.free(); // Realspace
	Vector rtemp6624(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		rtemp6624[i] = t1*rtemp49[i]*(n3[i] + t2*t2*log(t2))*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i])/((t2*t2)*(t2*t2)*n3[i]*n3[i]);
	}

	ComplexVector ktemp6625(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6625 = fft(Nx,Ny,Nz,dV,rtemp6624);

	rtemp6624.free(); // Realspace
	{
		const int i = 0;
		ktemp6625[0] = 0.33333333333333337*R*R*R*ktemp6625[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6625[i] = std::complex<double>(ktemp6625[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6625[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6627(Nx*Ny*Nz); // RS
	rtemp6627 = ifft(Nx,Ny,Nz,dV,ktemp6625);

	ktemp6625.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6627[i] = rtemp6622[i] + 30.775619768019087*rtemp6627[i];
	}

	rtemp6622.free(); // Realspace
	Vector rtemp6629(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		const double t3 = 1.0/t2;
		const double t4 = 1.0/n3[i];
		rtemp6629[i] = t1*t3*t3*t3*t4*t4*rtemp49[i]*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + log(t2)/(t3*t3)))*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6630(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6630 = fft(Nx,Ny,Nz,dV,rtemp6629);

	rtemp6629.free(); // Realspace
	{
		const int i = 0;
		ktemp6630[0] = 0.33333333333333337*R*R*R*ktemp6630[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6630[i] = std::complex<double>(ktemp6630[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6630[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6632(Nx*Ny*Nz); // RS
	rtemp6632 = ifft(Nx,Ny,Nz,dV,ktemp6630);

	ktemp6630.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6632[i] = rtemp6627[i] + 1740.320297511868*rtemp6632[i];
	}

	rtemp6627.free(); // Realspace
	Vector rtemp6634(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		rtemp6634[i] = t1*rtemp49[i]*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i])/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6635(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6635 = fft(Nx,Ny,Nz,dV,rtemp6634);

	{
		const int i = 0;
		ktemp6635[0] = 0.33333333333333337*R*R*R*ktemp6635[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6635[i] = std::complex<double>(ktemp6635[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6635[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6637(Nx*Ny*Nz); // RS
	rtemp6637 = ifft(Nx,Ny,Nz,dV,ktemp6635);

	ktemp6635.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6637[i] = rtemp6632[i] + 30.775619768019087*rtemp6637[i];
	}

	rtemp6632.free(); // Realspace
	Vector rtemp6639(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0/(1.0 - 1.0*n3[i]);
		const double t3 = 1.0/n3[i];
		rtemp6639[i] = t1*t2*t3*t3*rtemp49[i]*(1.768388256576615e-2*t2 - 1.768388256576615e-2*t3)*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6640(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6640 = fft(Nx,Ny,Nz,dV,rtemp6639);

	rtemp6639.free(); // Realspace
	{
		const int i = 0;
		ktemp6640[0] = 0.33333333333333337*R*R*R*ktemp6640[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6640[i] = std::complex<double>(ktemp6640[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6640[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6642(Nx*Ny*Nz); // RS
	rtemp6642 = ifft(Nx,Ny,Nz,dV,ktemp6640);

	ktemp6640.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6642[i] = rtemp6637[i] - 1740.320297511868*rtemp6642[i];
	}

	rtemp6637.free(); // Realspace
	Vector rtemp6644(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		const double t3 = 1.0/t2;
		const double t4 = 1.0/n3[i];
		rtemp6644[i] = t1*t3*t4*t4*rtemp60[i]*log(t2)*(1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6645(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6645 = fft(Nx,Ny,Nz,dV,rtemp6644);

	rtemp6644.free(); // Realspace
	{
		const int i = 0;
		ktemp6645[0] = 0.33333333333333337*R*R*R*ktemp6645[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6645[i] = std::complex<double>(ktemp6645[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6645[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6647(Nx*Ny*Nz); // RS
	rtemp6647 = ifft(Nx,Ny,Nz,dV,ktemp6645);

	ktemp6645.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6647[i] = rtemp6642[i] + 1984.4017075391882*rtemp6647[i];
	}

	rtemp6642.free(); // Realspace
	Vector rtemp6649(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		rtemp6649[i] = t1*rtemp60[i]*(n3[i] + t2*t2*log(t2))*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i])/((t2*t2)*(t2*t2)*n3[i]*n3[i]);
	}

	ComplexVector ktemp6650(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6650 = fft(Nx,Ny,Nz,dV,rtemp6649);

	rtemp6649.free(); // Realspace
	{
		const int i = 0;
		ktemp6650[0] = 0.33333333333333337*R*R*R*ktemp6650[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6650[i] = std::complex<double>(ktemp6650[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6650[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6652(Nx*Ny*Nz); // RS
	rtemp6652 = ifft(Nx,Ny,Nz,dV,ktemp6650);

	ktemp6650.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6652[i] = rtemp6647[i] - 17.545963379714415*rtemp6652[i];
	}

	rtemp6647.free(); // Realspace
	Vector rtemp6654(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0 - 1.0*n3[i];
		const double t3 = 1.0/t2;
		const double t4 = 1.0/n3[i];
		rtemp6654[i] = t1*t3*t3*t3*t4*t4*rtemp60[i]*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + log(t2)/(t3*t3)))*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6655(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6655 = fft(Nx,Ny,Nz,dV,rtemp6654);

	rtemp6654.free(); // Realspace
	{
		const int i = 0;
		ktemp6655[0] = 0.33333333333333337*R*R*R*ktemp6655[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6655[i] = std::complex<double>(ktemp6655[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6655[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6657(Nx*Ny*Nz); // RS
	rtemp6657 = ifft(Nx,Ny,Nz,dV,ktemp6655);

	ktemp6655.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6657[i] = rtemp6652[i] - 992.2008537695941*rtemp6657[i];
	}

	rtemp6652.free(); // Realspace
	Vector rtemp6659(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		rtemp6659[i] = t1*rtemp60[i]*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i])/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6660(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6660 = fft(Nx,Ny,Nz,dV,rtemp6659);

	{
		const int i = 0;
		ktemp6660[0] = 0.33333333333333337*R*R*R*ktemp6660[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6660[i] = std::complex<double>(ktemp6660[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6660[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6662(Nx*Ny*Nz); // RS
	rtemp6662 = ifft(Nx,Ny,Nz,dV,ktemp6660);

	ktemp6660.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6662[i] = rtemp6657[i] - 17.545963379714415*rtemp6662[i];
	}

	rtemp6657.free(); // Realspace
	Vector rtemp6664(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp67[i];
		const double t2 = 1.0/(1.0 - 1.0*n3[i]);
		const double t3 = 1.0/n3[i];
		rtemp6664[i] = t1*t2*t3*t3*rtemp60[i]*(1.768388256576615e-2*t2 - 1.768388256576615e-2*t3)*(t1*t1 - 3.0*rtemp73[i]*rtemp73[i] - 3.0*rtemp77[i]*rtemp77[i] - 3.0*rtemp81[i]*rtemp81[i]);
	}

	ComplexVector ktemp6665(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6665 = fft(Nx,Ny,Nz,dV,rtemp6664);

	rtemp6664.free(); // Realspace
	{
		const int i = 0;
		ktemp6665[0] = 0.33333333333333337*R*R*R*ktemp6665[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6665[i] = std::complex<double>(ktemp6665[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6665[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6667(Nx*Ny*Nz); // RS
	rtemp6667 = ifft(Nx,Ny,Nz,dV,ktemp6665);

	ktemp6665.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6667[i] = rtemp6662[i] + 992.2008537695941*rtemp6667[i];
	}

	rtemp6662.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1237[i] = rtemp1237[i]*rtemp67[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6670(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6670 = fft(Nx,Ny,Nz,dV,rtemp1237);

	rtemp1237.free(); // Realspace
	{
		const int i = 0;
		ktemp6670[0] = 0.33333333333333337*R*R*R*ktemp6670[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6670[i] = std::complex<double>(ktemp6670[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6670[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6672(Nx*Ny*Nz); // RS
	rtemp6672 = ifft(Nx,Ny,Nz,dV,ktemp6670);

	ktemp6670.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6672[i] = rtemp6667[i] - 25.897841948458478*rtemp6672[i];
	}

	rtemp6667.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1246[i] = rtemp1246[i]*rtemp67[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6675(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6675 = fft(Nx,Ny,Nz,dV,rtemp1246);

	rtemp1246.free(); // Realspace
	{
		const int i = 0;
		ktemp6675[0] = 0.33333333333333337*R*R*R*ktemp6675[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6675[i] = std::complex<double>(ktemp6675[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6675[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6677(Nx*Ny*Nz); // RS
	rtemp6677 = ifft(Nx,Ny,Nz,dV,ktemp6675);

	ktemp6675.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6677[i] = rtemp6672[i] + 76.74604382287085*rtemp6677[i];
	}

	rtemp6672.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1255[i] = rtemp1255[i]*rtemp67[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6680(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6680 = fft(Nx,Ny,Nz,dV,rtemp1255);

	rtemp1255.free(); // Realspace
	{
		const int i = 0;
		ktemp6680[0] = 0.33333333333333337*R*R*R*ktemp6680[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6680[i] = std::complex<double>(ktemp6680[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6680[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6682(Nx*Ny*Nz); // RS
	rtemp6682 = ifft(Nx,Ny,Nz,dV,ktemp6680);

	ktemp6680.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6682[i] = rtemp6677[i] - 51.16402921524723*rtemp6682[i];
	}

	rtemp6677.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1264[i] = rtemp1264[i]*rtemp67[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6685(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6685 = fft(Nx,Ny,Nz,dV,rtemp1264);

	rtemp1264.free(); // Realspace
	{
		const int i = 0;
		ktemp6685[0] = 0.33333333333333337*R*R*R*ktemp6685[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6685[i] = std::complex<double>(ktemp6685[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6685[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6687(Nx*Ny*Nz); // RS
	rtemp6687 = ifft(Nx,Ny,Nz,dV,ktemp6685);

	ktemp6685.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6687[i] = rtemp6682[i] - 0.15791367041742974*rtemp6687[i];
	}

	rtemp6682.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1273[i] = rtemp1273[i]*rtemp67[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6690(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6690 = fft(Nx,Ny,Nz,dV,rtemp1273);

	rtemp1273.free(); // Realspace
	{
		const int i = 0;
		ktemp6690[0] = 0.33333333333333337*R*R*R*ktemp6690[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6690[i] = std::complex<double>(ktemp6690[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6690[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6692(Nx*Ny*Nz); // RS
	rtemp6692 = ifft(Nx,Ny,Nz,dV,ktemp6690);

	ktemp6690.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6692[i] = rtemp6687[i] + 112.43453333720996*rtemp6692[i];
	}

	rtemp6687.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1282[i] = rtemp1282[i]*rtemp67[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6695(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6695 = fft(Nx,Ny,Nz,dV,rtemp1282);

	rtemp1282.free(); // Realspace
	{
		const int i = 0;
		ktemp6695[0] = 0.33333333333333337*R*R*R*ktemp6695[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6695[i] = std::complex<double>(ktemp6695[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6695[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6697(Nx*Ny*Nz); // RS
	rtemp6697 = ifft(Nx,Ny,Nz,dV,ktemp6695);

	ktemp6695.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6697[i] = rtemp6692[i] - 462.37122698223425*rtemp6697[i];
	}

	rtemp6692.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1291[i] = rtemp1291[i]*rtemp67[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6700(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6700 = fft(Nx,Ny,Nz,dV,rtemp1291);

	rtemp1291.free(); // Realspace
	{
		const int i = 0;
		ktemp6700[0] = 0.33333333333333337*R*R*R*ktemp6700[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6700[i] = std::complex<double>(ktemp6700[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6700[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6702(Nx*Ny*Nz); // RS
	rtemp6702 = ifft(Nx,Ny,Nz,dV,ktemp6700);

	ktemp6700.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6702[i] = rtemp6697[i] + 330.355398513263*rtemp6702[i];
	}

	rtemp6697.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1300[i] = rtemp1300[i]*rtemp67[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6705(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6705 = fft(Nx,Ny,Nz,dV,rtemp1300);

	rtemp1300.free(); // Realspace
	{
		const int i = 0;
		ktemp6705[0] = 0.33333333333333337*R*R*R*ktemp6705[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6705[i] = std::complex<double>(ktemp6705[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6705[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6707(Nx*Ny*Nz); // RS
	rtemp6707 = ifft(Nx,Ny,Nz,dV,ktemp6705);

	ktemp6705.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6707[i] = rtemp6702[i] + 695.2938908479431*rtemp6707[i];
	}

	rtemp6702.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1309[i] = rtemp1309[i]*rtemp67[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6710(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6710 = fft(Nx,Ny,Nz,dV,rtemp1309);

	rtemp1309.free(); // Realspace
	{
		const int i = 0;
		ktemp6710[0] = 0.33333333333333337*R*R*R*ktemp6710[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6710[i] = std::complex<double>(ktemp6710[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6710[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6712(Nx*Ny*Nz); // RS
	rtemp6712 = ifft(Nx,Ny,Nz,dV,ktemp6710);

	ktemp6710.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6712[i] = rtemp6707[i] - 587.4388539528386*rtemp6712[i];
	}

	rtemp6707.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1318[i] = rtemp1318[i]*rtemp67[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6715(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6715 = fft(Nx,Ny,Nz,dV,rtemp1318);

	rtemp1318.free(); // Realspace
	{
		const int i = 0;
		ktemp6715[0] = 0.33333333333333337*R*R*R*ktemp6715[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6715[i] = std::complex<double>(ktemp6715[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6715[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6717(Nx*Ny*Nz); // RS
	rtemp6717 = ifft(Nx,Ny,Nz,dV,ktemp6715);

	ktemp6715.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6717[i] = rtemp6712[i] + 114.64532472305397*rtemp6717[i];
	}

	rtemp6712.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1327[i] = rtemp1327[i]*rtemp67[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6720(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6720 = fft(Nx,Ny,Nz,dV,rtemp1327);

	rtemp1327.free(); // Realspace
	{
		const int i = 0;
		ktemp6720[0] = 0.33333333333333337*R*R*R*ktemp6720[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6720[i] = std::complex<double>(ktemp6720[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6720[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6722(Nx*Ny*Nz); // RS
	rtemp6722 = ifft(Nx,Ny,Nz,dV,ktemp6720);

	ktemp6720.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6722[i] = rtemp6717[i] + 4.263669101270603*rtemp6722[i];
	}

	rtemp6717.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1336[i] = rtemp1336[i]*rtemp67[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6725(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6725 = fft(Nx,Ny,Nz,dV,rtemp1336);

	rtemp1336.free(); // Realspace
	{
		const int i = 0;
		ktemp6725[0] = 0.33333333333333337*R*R*R*ktemp6725[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6725[i] = std::complex<double>(ktemp6725[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6725[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6727(Nx*Ny*Nz); // RS
	rtemp6727 = ifft(Nx,Ny,Nz,dV,ktemp6725);

	ktemp6725.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6727[i] = rtemp6722[i] + 198.49748371470918*rtemp6727[i];
	}

	rtemp6722.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1345[i] = rtemp1345[i]*rtemp67[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6730(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6730 = fft(Nx,Ny,Nz,dV,rtemp1345);

	rtemp1345.free(); // Realspace
	{
		const int i = 0;
		ktemp6730[0] = 0.33333333333333337*R*R*R*ktemp6730[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6730[i] = std::complex<double>(ktemp6730[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6730[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6732(Nx*Ny*Nz); // RS
	rtemp6732 = ifft(Nx,Ny,Nz,dV,ktemp6730);

	ktemp6730.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6732[i] = rtemp6727[i] - 56.21726666860498*rtemp6732[i];
	}

	rtemp6727.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1354[i] = rtemp1354[i]*rtemp67[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6735(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6735 = fft(Nx,Ny,Nz,dV,rtemp1354);

	rtemp1354.free(); // Realspace
	{
		const int i = 0;
		ktemp6735[0] = 0.33333333333333337*R*R*R*ktemp6735[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6735[i] = std::complex<double>(ktemp6735[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6735[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6737(Nx*Ny*Nz); // RS
	rtemp6737 = ifft(Nx,Ny,Nz,dV,ktemp6735);

	ktemp6735.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6737[i] = rtemp6732[i] + 16.344064888203977*rtemp6737[i];
	}

	rtemp6732.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1363[i] = rtemp1363[i]*rtemp67[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6740(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6740 = fft(Nx,Ny,Nz,dV,rtemp1363);

	rtemp1363.free(); // Realspace
	{
		const int i = 0;
		ktemp6740[0] = 0.33333333333333337*R*R*R*ktemp6740[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6740[i] = std::complex<double>(ktemp6740[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6740[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6742(Nx*Ny*Nz); // RS
	rtemp6742 = ifft(Nx,Ny,Nz,dV,ktemp6740);

	ktemp6740.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6742[i] = rtemp6737[i] - 177.10018137314742*rtemp6742[i];
	}

	rtemp6737.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1372[i] = rtemp1372[i]*rtemp67[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6745(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6745 = fft(Nx,Ny,Nz,dV,rtemp1372);

	rtemp1372.free(); // Realspace
	{
		const int i = 0;
		ktemp6745[0] = 0.33333333333333337*R*R*R*ktemp6745[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6745[i] = std::complex<double>(ktemp6745[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6745[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6747(Nx*Ny*Nz); // RS
	rtemp6747 = ifft(Nx,Ny,Nz,dV,ktemp6745);

	ktemp6745.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6747[i] = rtemp6742[i] - 138.49028895608586*rtemp6747[i];
	}

	rtemp6742.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1381[i] = rtemp1381[i]*rtemp67[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6750(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6750 = fft(Nx,Ny,Nz,dV,rtemp1381);

	rtemp1381.free(); // Realspace
	{
		const int i = 0;
		ktemp6750[0] = 0.33333333333333337*R*R*R*ktemp6750[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6750[i] = std::complex<double>(ktemp6750[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6750[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6752(Nx*Ny*Nz); // RS
	rtemp6752 = ifft(Nx,Ny,Nz,dV,ktemp6750);

	ktemp6750.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6752[i] = rtemp6747[i] + 78.95683520871486*rtemp6752[i];
	}

	rtemp6747.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1390[i] = rtemp1390[i]*rtemp67[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6755(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6755 = fft(Nx,Ny,Nz,dV,rtemp1390);

	rtemp1390.free(); // Realspace
	{
		const int i = 0;
		ktemp6755[0] = 0.33333333333333337*R*R*R*ktemp6755[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6755[i] = std::complex<double>(ktemp6755[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6755[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6757(Nx*Ny*Nz); // RS
	rtemp6757 = ifft(Nx,Ny,Nz,dV,ktemp6755);

	ktemp6755.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6757[i] = rtemp6752[i] - 25.897841948458478*rtemp6757[i];
	}

	rtemp6752.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1399[i] = rtemp1399[i]*rtemp67[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6760(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6760 = fft(Nx,Ny,Nz,dV,rtemp1399);

	rtemp1399.free(); // Realspace
	{
		const int i = 0;
		ktemp6760[0] = 0.33333333333333337*R*R*R*ktemp6760[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6760[i] = std::complex<double>(ktemp6760[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6760[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6762(Nx*Ny*Nz); // RS
	rtemp6762 = ifft(Nx,Ny,Nz,dV,ktemp6760);

	ktemp6760.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6762[i] = rtemp6757[i] + 76.74604382287085*rtemp6762[i];
	}

	rtemp6757.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1408[i] = rtemp1408[i]*rtemp67[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6765(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6765 = fft(Nx,Ny,Nz,dV,rtemp1408);

	rtemp1408.free(); // Realspace
	{
		const int i = 0;
		ktemp6765[0] = 0.33333333333333337*R*R*R*ktemp6765[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6765[i] = std::complex<double>(ktemp6765[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6765[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6767(Nx*Ny*Nz); // RS
	rtemp6767 = ifft(Nx,Ny,Nz,dV,ktemp6765);

	ktemp6765.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6767[i] = rtemp6762[i] - 51.16402921524723*rtemp6767[i];
	}

	rtemp6762.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1417[i] = rtemp1417[i]*rtemp67[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6770(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6770 = fft(Nx,Ny,Nz,dV,rtemp1417);

	rtemp1417.free(); // Realspace
	{
		const int i = 0;
		ktemp6770[0] = 0.33333333333333337*R*R*R*ktemp6770[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6770[i] = std::complex<double>(ktemp6770[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6770[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6772(Nx*Ny*Nz); // RS
	rtemp6772 = ifft(Nx,Ny,Nz,dV,ktemp6770);

	ktemp6770.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6772[i] = rtemp6767[i] - 0.15791367041742974*rtemp6772[i];
	}

	rtemp6767.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1426[i] = rtemp1426[i]*rtemp67[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6775(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6775 = fft(Nx,Ny,Nz,dV,rtemp1426);

	rtemp1426.free(); // Realspace
	{
		const int i = 0;
		ktemp6775[0] = 0.33333333333333337*R*R*R*ktemp6775[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6775[i] = std::complex<double>(ktemp6775[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6775[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6777(Nx*Ny*Nz); // RS
	rtemp6777 = ifft(Nx,Ny,Nz,dV,ktemp6775);

	ktemp6775.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6777[i] = rtemp6772[i] + 112.43453333720996*rtemp6777[i];
	}

	rtemp6772.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1435[i] = rtemp1435[i]*rtemp67[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6780(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6780 = fft(Nx,Ny,Nz,dV,rtemp1435);

	rtemp1435.free(); // Realspace
	{
		const int i = 0;
		ktemp6780[0] = 0.33333333333333337*R*R*R*ktemp6780[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6780[i] = std::complex<double>(ktemp6780[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6780[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6782(Nx*Ny*Nz); // RS
	rtemp6782 = ifft(Nx,Ny,Nz,dV,ktemp6780);

	ktemp6780.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6782[i] = rtemp6777[i] - 462.37122698223425*rtemp6782[i];
	}

	rtemp6777.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1444[i] = rtemp1444[i]*rtemp67[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6785(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6785 = fft(Nx,Ny,Nz,dV,rtemp1444);

	rtemp1444.free(); // Realspace
	{
		const int i = 0;
		ktemp6785[0] = 0.33333333333333337*R*R*R*ktemp6785[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6785[i] = std::complex<double>(ktemp6785[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6785[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6787(Nx*Ny*Nz); // RS
	rtemp6787 = ifft(Nx,Ny,Nz,dV,ktemp6785);

	ktemp6785.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6787[i] = rtemp6782[i] + 330.355398513263*rtemp6787[i];
	}

	rtemp6782.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1453[i] = rtemp1453[i]*rtemp67[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6790(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6790 = fft(Nx,Ny,Nz,dV,rtemp1453);

	rtemp1453.free(); // Realspace
	{
		const int i = 0;
		ktemp6790[0] = 0.33333333333333337*R*R*R*ktemp6790[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6790[i] = std::complex<double>(ktemp6790[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6790[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6792(Nx*Ny*Nz); // RS
	rtemp6792 = ifft(Nx,Ny,Nz,dV,ktemp6790);

	ktemp6790.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6792[i] = rtemp6787[i] + 695.2938908479431*rtemp6792[i];
	}

	rtemp6787.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1462[i] = rtemp1462[i]*rtemp67[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6795(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6795 = fft(Nx,Ny,Nz,dV,rtemp1462);

	rtemp1462.free(); // Realspace
	{
		const int i = 0;
		ktemp6795[0] = 0.33333333333333337*R*R*R*ktemp6795[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6795[i] = std::complex<double>(ktemp6795[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6795[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6797(Nx*Ny*Nz); // RS
	rtemp6797 = ifft(Nx,Ny,Nz,dV,ktemp6795);

	ktemp6795.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6797[i] = rtemp6792[i] - 587.4388539528386*rtemp6797[i];
	}

	rtemp6792.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1471[i] = rtemp1471[i]*rtemp67[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6800(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6800 = fft(Nx,Ny,Nz,dV,rtemp1471);

	rtemp1471.free(); // Realspace
	{
		const int i = 0;
		ktemp6800[0] = 0.33333333333333337*R*R*R*ktemp6800[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6800[i] = std::complex<double>(ktemp6800[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6800[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6802(Nx*Ny*Nz); // RS
	rtemp6802 = ifft(Nx,Ny,Nz,dV,ktemp6800);

	ktemp6800.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6802[i] = rtemp6797[i] + 114.64532472305397*rtemp6802[i];
	}

	rtemp6797.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1480[i] = rtemp1480[i]*rtemp67[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6805(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6805 = fft(Nx,Ny,Nz,dV,rtemp1480);

	rtemp1480.free(); // Realspace
	{
		const int i = 0;
		ktemp6805[0] = 0.33333333333333337*R*R*R*ktemp6805[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6805[i] = std::complex<double>(ktemp6805[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6805[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6807(Nx*Ny*Nz); // RS
	rtemp6807 = ifft(Nx,Ny,Nz,dV,ktemp6805);

	ktemp6805.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6807[i] = rtemp6802[i] + 4.263669101270603*rtemp6807[i];
	}

	rtemp6802.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1489[i] = rtemp1489[i]*rtemp67[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6810(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6810 = fft(Nx,Ny,Nz,dV,rtemp1489);

	rtemp1489.free(); // Realspace
	{
		const int i = 0;
		ktemp6810[0] = 0.33333333333333337*R*R*R*ktemp6810[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6810[i] = std::complex<double>(ktemp6810[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6810[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6812(Nx*Ny*Nz); // RS
	rtemp6812 = ifft(Nx,Ny,Nz,dV,ktemp6810);

	ktemp6810.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6812[i] = rtemp6807[i] + 198.49748371470918*rtemp6812[i];
	}

	rtemp6807.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1498[i] = rtemp1498[i]*rtemp67[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6815(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6815 = fft(Nx,Ny,Nz,dV,rtemp1498);

	rtemp1498.free(); // Realspace
	{
		const int i = 0;
		ktemp6815[0] = 0.33333333333333337*R*R*R*ktemp6815[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6815[i] = std::complex<double>(ktemp6815[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6815[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6817(Nx*Ny*Nz); // RS
	rtemp6817 = ifft(Nx,Ny,Nz,dV,ktemp6815);

	ktemp6815.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6817[i] = rtemp6812[i] - 56.21726666860498*rtemp6817[i];
	}

	rtemp6812.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1507[i] = rtemp1507[i]*rtemp67[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6820(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6820 = fft(Nx,Ny,Nz,dV,rtemp1507);

	rtemp1507.free(); // Realspace
	{
		const int i = 0;
		ktemp6820[0] = 0.33333333333333337*R*R*R*ktemp6820[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6820[i] = std::complex<double>(ktemp6820[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6820[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6822(Nx*Ny*Nz); // RS
	rtemp6822 = ifft(Nx,Ny,Nz,dV,ktemp6820);

	ktemp6820.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6822[i] = rtemp6817[i] + 16.344064888203977*rtemp6822[i];
	}

	rtemp6817.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1516[i] = rtemp1516[i]*rtemp67[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6825(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6825 = fft(Nx,Ny,Nz,dV,rtemp1516);

	rtemp1516.free(); // Realspace
	{
		const int i = 0;
		ktemp6825[0] = 0.33333333333333337*R*R*R*ktemp6825[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6825[i] = std::complex<double>(ktemp6825[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6825[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6827(Nx*Ny*Nz); // RS
	rtemp6827 = ifft(Nx,Ny,Nz,dV,ktemp6825);

	ktemp6825.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6827[i] = rtemp6822[i] - 177.10018137314742*rtemp6827[i];
	}

	rtemp6822.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1525[i] = rtemp1525[i]*rtemp67[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6830(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6830 = fft(Nx,Ny,Nz,dV,rtemp1525);

	rtemp1525.free(); // Realspace
	{
		const int i = 0;
		ktemp6830[0] = 0.33333333333333337*R*R*R*ktemp6830[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6830[i] = std::complex<double>(ktemp6830[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6830[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6832(Nx*Ny*Nz); // RS
	rtemp6832 = ifft(Nx,Ny,Nz,dV,ktemp6830);

	ktemp6830.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6832[i] = rtemp6827[i] - 138.49028895608586*rtemp6832[i];
	}

	rtemp6827.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp1534[i] = rtemp1534[i]*rtemp67[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6835(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6835 = fft(Nx,Ny,Nz,dV,rtemp1534);

	rtemp1534.free(); // Realspace
	{
		const int i = 0;
		ktemp6835[0] = 0.33333333333333337*R*R*R*ktemp6835[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6835[i] = std::complex<double>(ktemp6835[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6835[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6837(Nx*Ny*Nz); // RS
	rtemp6837 = ifft(Nx,Ny,Nz,dV,ktemp6835);

	ktemp6835.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6837[i] = rtemp6832[i] + 78.95683520871486*rtemp6837[i];
	}

	rtemp6832.free(); // Realspace
	Vector rtemp6839(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp6839[i] = rtemp319[i]*(n3[i] + t1*t1*log(t1))*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp6840(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6840 = fft(Nx,Ny,Nz,dV,rtemp6839);

	rtemp6839.free(); // Realspace
	{
		const int i = 0;
		ktemp6840[0] = 0.33333333333333337*R*R*R*ktemp6840[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6840[i] = std::complex<double>(ktemp6840[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6840[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6842(Nx*Ny*Nz); // RS
	rtemp6842 = ifft(Nx,Ny,Nz,dV,ktemp6840);

	ktemp6840.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6842[i] = rtemp6837[i] + 650.8837600728538*rtemp6842[i];
	}

	rtemp6837.free(); // Realspace
	Vector rtemp6844(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp6844[i] = rtemp326[i]*(n3[i] + t1*t1*log(t1))*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp6845(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6845 = fft(Nx,Ny,Nz,dV,rtemp6844);

	rtemp6844.free(); // Realspace
	{
		const int i = 0;
		ktemp6845[0] = 0.33333333333333337*R*R*R*ktemp6845[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6845[i] = std::complex<double>(ktemp6845[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6845[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6847(Nx*Ny*Nz); // RS
	rtemp6847 = ifft(Nx,Ny,Nz,dV,ktemp6845);

	ktemp6845.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6847[i] = rtemp6842[i] - 1928.838459728091*rtemp6847[i];
	}

	rtemp6842.free(); // Realspace
	Vector rtemp6849(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp6849[i] = rtemp333[i]*(n3[i] + t1*t1*log(t1))*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp6850(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6850 = fft(Nx,Ny,Nz,dV,rtemp6849);

	rtemp6849.free(); // Realspace
	{
		const int i = 0;
		ktemp6850[0] = 0.33333333333333337*R*R*R*ktemp6850[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6850[i] = std::complex<double>(ktemp6850[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6850[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6852(Nx*Ny*Nz); // RS
	rtemp6852 = ifft(Nx,Ny,Nz,dV,ktemp6850);

	ktemp6850.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6852[i] = rtemp6847[i] + 1285.892306485394*rtemp6852[i];
	}

	rtemp6847.free(); // Realspace
	Vector rtemp6854(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp6854[i] = rtemp340[i]*(n3[i] + t1*t1*log(t1))*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp6855(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6855 = fft(Nx,Ny,Nz,dV,rtemp6854);

	rtemp6854.free(); // Realspace
	{
		const int i = 0;
		ktemp6855[0] = 0.33333333333333337*R*R*R*ktemp6855[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6855[i] = std::complex<double>(ktemp6855[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6855[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6857(Nx*Ny*Nz); // RS
	rtemp6857 = ifft(Nx,Ny,Nz,dV,ktemp6855);

	ktemp6855.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6857[i] = rtemp6852[i] - 2825.788031535804*rtemp6857[i];
	}

	rtemp6852.free(); // Realspace
	Vector rtemp6859(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp6859[i] = rtemp347[i]*(n3[i] + t1*t1*log(t1))*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp6860(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6860 = fft(Nx,Ny,Nz,dV,rtemp6859);

	rtemp6859.free(); // Realspace
	{
		const int i = 0;
		ktemp6860[0] = 0.33333333333333337*R*R*R*ktemp6860[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6860[i] = std::complex<double>(ktemp6860[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6860[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6862(Nx*Ny*Nz); // RS
	rtemp6862 = ifft(Nx,Ny,Nz,dV,ktemp6860);

	ktemp6860.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6862[i] = rtemp6857[i] + 3.968803415078377*rtemp6862[i];
	}

	rtemp6857.free(); // Realspace
	Vector rtemp6864(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp6864[i] = rtemp354[i]*(n3[i] + t1*t1*log(t1))*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp6865(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6865 = fft(Nx,Ny,Nz,dV,rtemp6864);

	rtemp6864.free(); // Realspace
	{
		const int i = 0;
		ktemp6865[0] = 0.33333333333333337*R*R*R*ktemp6865[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6865[i] = std::complex<double>(ktemp6865[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6865[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6867(Nx*Ny*Nz); // RS
	rtemp6867 = ifft(Nx,Ny,Nz,dV,ktemp6865);

	ktemp6865.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6867[i] = rtemp6862[i] + 11620.656399349487*rtemp6867[i];
	}

	rtemp6862.free(); // Realspace
	Vector rtemp6869(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp6869[i] = rtemp361[i]*(n3[i] + t1*t1*log(t1))*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp6870(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6870 = fft(Nx,Ny,Nz,dV,rtemp6869);

	rtemp6869.free(); // Realspace
	{
		const int i = 0;
		ktemp6870[0] = 0.33333333333333337*R*R*R*ktemp6870[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6870[i] = std::complex<double>(ktemp6870[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6870[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6872(Nx*Ny*Nz); // RS
	rtemp6872 = ifft(Nx,Ny,Nz,dV,ktemp6870);

	ktemp6870.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6872[i] = rtemp6867[i] - 8302.736744343965*rtemp6872[i];
	}

	rtemp6867.free(); // Realspace
	Vector rtemp6874(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp6874[i] = rtemp368[i]*(n3[i] + t1*t1*log(t1))*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp6875(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6875 = fft(Nx,Ny,Nz,dV,rtemp6874);

	rtemp6874.free(); // Realspace
	{
		const int i = 0;
		ktemp6875[0] = 0.33333333333333337*R*R*R*ktemp6875[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6875[i] = std::complex<double>(ktemp6875[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6875[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6877(Nx*Ny*Nz); // RS
	rtemp6877 = ifft(Nx,Ny,Nz,dV,ktemp6875);

	ktemp6875.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6877[i] = rtemp6872[i] - 17474.64143659009*rtemp6877[i];
	}

	rtemp6872.free(); // Realspace
	Vector rtemp6879(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp6879[i] = rtemp375[i]*(n3[i] + t1*t1*log(t1))*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp6880(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6880 = fft(Nx,Ny,Nz,dV,rtemp6879);

	rtemp6879.free(); // Realspace
	{
		const int i = 0;
		ktemp6880[0] = 0.33333333333333337*R*R*R*ktemp6880[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6880[i] = std::complex<double>(ktemp6880[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6880[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6882(Nx*Ny*Nz); // RS
	rtemp6882 = ifft(Nx,Ny,Nz,dV,ktemp6880);

	ktemp6880.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6882[i] = rtemp6877[i] + 14763.948704091561*rtemp6882[i];
	}

	rtemp6877.free(); // Realspace
	Vector rtemp6884(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp6884[i] = rtemp382[i]*(n3[i] + t1*t1*log(t1))*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp6885(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6885 = fft(Nx,Ny,Nz,dV,rtemp6884);

	rtemp6884.free(); // Realspace
	{
		const int i = 0;
		ktemp6885[0] = 0.33333333333333337*R*R*R*ktemp6885[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6885[i] = std::complex<double>(ktemp6885[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6885[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6887(Nx*Ny*Nz); // RS
	rtemp6887 = ifft(Nx,Ny,Nz,dV,ktemp6885);

	ktemp6885.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6887[i] = rtemp6882[i] - 2881.3512793469013*rtemp6887[i];
	}

	rtemp6882.free(); // Realspace
	Vector rtemp6889(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp6889[i] = rtemp389[i]*(n3[i] + t1*t1*log(t1))*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp6890(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6890 = fft(Nx,Ny,Nz,dV,rtemp6889);

	rtemp6889.free(); // Realspace
	{
		const int i = 0;
		ktemp6890[0] = 0.33333333333333337*R*R*R*ktemp6890[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6890[i] = std::complex<double>(ktemp6890[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6890[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6892(Nx*Ny*Nz); // RS
	rtemp6892 = ifft(Nx,Ny,Nz,dV,ktemp6890);

	ktemp6890.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6892[i] = rtemp6887[i] - 107.15769220711617*rtemp6892[i];
	}

	rtemp6887.free(); // Realspace
	Vector rtemp6894(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp6894[i] = rtemp396[i]*(n3[i] + t1*t1*log(t1))*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp6895(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6895 = fft(Nx,Ny,Nz,dV,rtemp6894);

	rtemp6894.free(); // Realspace
	{
		const int i = 0;
		ktemp6895[0] = 0.33333333333333337*R*R*R*ktemp6895[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6895[i] = std::complex<double>(ktemp6895[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6895[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6897(Nx*Ny*Nz); // RS
	rtemp6897 = ifft(Nx,Ny,Nz,dV,ktemp6895);

	ktemp6895.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6897[i] = rtemp6892[i] - 4988.785892753519*rtemp6897[i];
	}

	rtemp6892.free(); // Realspace
	Vector rtemp6899(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp6899[i] = rtemp403[i]*(n3[i] + t1*t1*log(t1))*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp6900(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6900 = fft(Nx,Ny,Nz,dV,rtemp6899);

	rtemp6899.free(); // Realspace
	{
		const int i = 0;
		ktemp6900[0] = 0.33333333333333337*R*R*R*ktemp6900[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6900[i] = std::complex<double>(ktemp6900[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6900[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6902(Nx*Ny*Nz); // RS
	rtemp6902 = ifft(Nx,Ny,Nz,dV,ktemp6900);

	ktemp6900.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6902[i] = rtemp6897[i] + 1412.894015767902*rtemp6902[i];
	}

	rtemp6897.free(); // Realspace
	Vector rtemp6904(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp6904[i] = rtemp410[i]*(n3[i] + t1*t1*log(t1))*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp6905(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6905 = fft(Nx,Ny,Nz,dV,rtemp6904);

	rtemp6904.free(); // Realspace
	{
		const int i = 0;
		ktemp6905[0] = 0.33333333333333337*R*R*R*ktemp6905[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6905[i] = std::complex<double>(ktemp6905[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6905[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6907(Nx*Ny*Nz); // RS
	rtemp6907 = ifft(Nx,Ny,Nz,dV,ktemp6905);

	ktemp6905.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6907[i] = rtemp6902[i] - 410.77115346061197*rtemp6907[i];
	}

	rtemp6902.free(); // Realspace
	Vector rtemp6909(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp6909[i] = rtemp417[i]*(n3[i] + t1*t1*log(t1))*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp6910(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6910 = fft(Nx,Ny,Nz,dV,rtemp6909);

	rtemp6909.free(); // Realspace
	{
		const int i = 0;
		ktemp6910[0] = 0.33333333333333337*R*R*R*ktemp6910[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6910[i] = std::complex<double>(ktemp6910[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6910[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6912(Nx*Ny*Nz); // RS
	rtemp6912 = ifft(Nx,Ny,Nz,dV,ktemp6910);

	ktemp6910.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6912[i] = rtemp6907[i] + 4451.013030010399*rtemp6912[i];
	}

	rtemp6907.free(); // Realspace
	Vector rtemp6914(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp6914[i] = rtemp424[i]*(n3[i] + t1*t1*log(t1))*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp6915(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6915 = fft(Nx,Ny,Nz,dV,rtemp6914);

	rtemp6914.free(); // Realspace
	{
		const int i = 0;
		ktemp6915[0] = 0.33333333333333337*R*R*R*ktemp6915[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6915[i] = std::complex<double>(ktemp6915[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6915[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6917(Nx*Ny*Nz); // RS
	rtemp6917 = ifft(Nx,Ny,Nz,dV,ktemp6915);

	ktemp6915.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6917[i] = rtemp6912[i] + 3480.640595023736*rtemp6917[i];
	}

	rtemp6912.free(); // Realspace
	Vector rtemp6919(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp6919[i] = rtemp431[i]*(n3[i] + t1*t1*log(t1))*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(t1*t1*n3[i]*n3[i]*n3[i]);
	}

	ComplexVector ktemp6920(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6920 = fft(Nx,Ny,Nz,dV,rtemp6919);

	rtemp6919.free(); // Realspace
	{
		const int i = 0;
		ktemp6920[0] = 0.33333333333333337*R*R*R*ktemp6920[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6920[i] = std::complex<double>(ktemp6920[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6920[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6922(Nx*Ny*Nz); // RS
	rtemp6922 = ifft(Nx,Ny,Nz,dV,ktemp6920);

	ktemp6920.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6922[i] = rtemp6917[i] - 1984.4017075391882*rtemp6922[i];
	}

	rtemp6917.free(); // Realspace
	Vector rtemp6924(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp6924[i] = rtemp319[i]*log(t1)*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp6925(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6925 = fft(Nx,Ny,Nz,dV,rtemp6924);

	rtemp6924.free(); // Realspace
	{
		const int i = 0;
		ktemp6925[0] = 0.33333333333333337*R*R*R*ktemp6925[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6925[i] = std::complex<double>(ktemp6925[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6925[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6927(Nx*Ny*Nz); // RS
	rtemp6927 = ifft(Nx,Ny,Nz,dV,ktemp6925);

	ktemp6925.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6927[i] = rtemp6922[i] + 650.8837600728538*rtemp6927[i];
	}

	rtemp6922.free(); // Realspace
	Vector rtemp6929(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp6929[i] = rtemp319[i]*(n3[i] + t1*t1*log(t1))*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp6930(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6930 = fft(Nx,Ny,Nz,dV,rtemp6929);

	rtemp6929.free(); // Realspace
	{
		const int i = 0;
		ktemp6930[0] = 0.33333333333333337*R*R*R*ktemp6930[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6930[i] = std::complex<double>(ktemp6930[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6930[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6932(Nx*Ny*Nz); // RS
	rtemp6932 = ifft(Nx,Ny,Nz,dV,ktemp6930);

	ktemp6930.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6932[i] = rtemp6927[i] - 650.8837600728538*rtemp6932[i];
	}

	rtemp6927.free(); // Realspace
	Vector rtemp6934(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6934[i] = rtemp319[i]*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6935(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6935 = fft(Nx,Ny,Nz,dV,rtemp6934);

	rtemp6934.free(); // Realspace
	{
		const int i = 0;
		ktemp6935[0] = 0.33333333333333337*R*R*R*ktemp6935[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6935[i] = std::complex<double>(ktemp6935[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6935[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6937(Nx*Ny*Nz); // RS
	rtemp6937 = ifft(Nx,Ny,Nz,dV,ktemp6935);

	ktemp6935.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6937[i] = rtemp6932[i] - 325.4418800364269*rtemp6937[i];
	}

	rtemp6932.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp319[i] = rtemp319[i]*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6940(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6940 = fft(Nx,Ny,Nz,dV,rtemp319);

	rtemp319.free(); // Realspace
	{
		const int i = 0;
		ktemp6940[0] = 0.33333333333333337*R*R*R*ktemp6940[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6940[i] = std::complex<double>(ktemp6940[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6940[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6942(Nx*Ny*Nz); // RS
	rtemp6942 = ifft(Nx,Ny,Nz,dV,ktemp6940);

	ktemp6940.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6942[i] = rtemp6937[i] + 325.4418800364269*rtemp6942[i];
	}

	rtemp6937.free(); // Realspace
	Vector rtemp6944(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp6944[i] = rtemp326[i]*log(t1)*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp6945(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6945 = fft(Nx,Ny,Nz,dV,rtemp6944);

	rtemp6944.free(); // Realspace
	{
		const int i = 0;
		ktemp6945[0] = 0.33333333333333337*R*R*R*ktemp6945[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6945[i] = std::complex<double>(ktemp6945[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6945[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6947(Nx*Ny*Nz); // RS
	rtemp6947 = ifft(Nx,Ny,Nz,dV,ktemp6945);

	ktemp6945.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6947[i] = rtemp6942[i] - 1928.838459728091*rtemp6947[i];
	}

	rtemp6942.free(); // Realspace
	Vector rtemp6949(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp6949[i] = rtemp326[i]*(n3[i] + t1*t1*log(t1))*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp6950(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6950 = fft(Nx,Ny,Nz,dV,rtemp6949);

	rtemp6949.free(); // Realspace
	{
		const int i = 0;
		ktemp6950[0] = 0.33333333333333337*R*R*R*ktemp6950[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6950[i] = std::complex<double>(ktemp6950[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6950[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6952(Nx*Ny*Nz); // RS
	rtemp6952 = ifft(Nx,Ny,Nz,dV,ktemp6950);

	ktemp6950.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6952[i] = rtemp6947[i] + 1928.838459728091*rtemp6952[i];
	}

	rtemp6947.free(); // Realspace
	Vector rtemp6954(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6954[i] = rtemp326[i]*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6955(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6955 = fft(Nx,Ny,Nz,dV,rtemp6954);

	rtemp6954.free(); // Realspace
	{
		const int i = 0;
		ktemp6955[0] = 0.33333333333333337*R*R*R*ktemp6955[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6955[i] = std::complex<double>(ktemp6955[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6955[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6957(Nx*Ny*Nz); // RS
	rtemp6957 = ifft(Nx,Ny,Nz,dV,ktemp6955);

	ktemp6955.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6957[i] = rtemp6952[i] + 964.4192298640455*rtemp6957[i];
	}

	rtemp6952.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp326[i] = rtemp326[i]*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6960(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6960 = fft(Nx,Ny,Nz,dV,rtemp326);

	rtemp326.free(); // Realspace
	{
		const int i = 0;
		ktemp6960[0] = 0.33333333333333337*R*R*R*ktemp6960[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6960[i] = std::complex<double>(ktemp6960[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6960[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6962(Nx*Ny*Nz); // RS
	rtemp6962 = ifft(Nx,Ny,Nz,dV,ktemp6960);

	ktemp6960.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6962[i] = rtemp6957[i] - 964.4192298640455*rtemp6962[i];
	}

	rtemp6957.free(); // Realspace
	Vector rtemp6964(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp6964[i] = rtemp333[i]*log(t1)*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp6965(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6965 = fft(Nx,Ny,Nz,dV,rtemp6964);

	rtemp6964.free(); // Realspace
	{
		const int i = 0;
		ktemp6965[0] = 0.33333333333333337*R*R*R*ktemp6965[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6965[i] = std::complex<double>(ktemp6965[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6965[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6967(Nx*Ny*Nz); // RS
	rtemp6967 = ifft(Nx,Ny,Nz,dV,ktemp6965);

	ktemp6965.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6967[i] = rtemp6962[i] + 1285.892306485394*rtemp6967[i];
	}

	rtemp6962.free(); // Realspace
	Vector rtemp6969(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp6969[i] = rtemp333[i]*(n3[i] + t1*t1*log(t1))*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp6970(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6970 = fft(Nx,Ny,Nz,dV,rtemp6969);

	rtemp6969.free(); // Realspace
	{
		const int i = 0;
		ktemp6970[0] = 0.33333333333333337*R*R*R*ktemp6970[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6970[i] = std::complex<double>(ktemp6970[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6970[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6972(Nx*Ny*Nz); // RS
	rtemp6972 = ifft(Nx,Ny,Nz,dV,ktemp6970);

	ktemp6970.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6972[i] = rtemp6967[i] - 1285.892306485394*rtemp6972[i];
	}

	rtemp6967.free(); // Realspace
	Vector rtemp6974(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6974[i] = rtemp333[i]*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6975(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6975 = fft(Nx,Ny,Nz,dV,rtemp6974);

	rtemp6974.free(); // Realspace
	{
		const int i = 0;
		ktemp6975[0] = 0.33333333333333337*R*R*R*ktemp6975[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6975[i] = std::complex<double>(ktemp6975[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6975[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6977(Nx*Ny*Nz); // RS
	rtemp6977 = ifft(Nx,Ny,Nz,dV,ktemp6975);

	ktemp6975.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6977[i] = rtemp6972[i] - 642.946153242697*rtemp6977[i];
	}

	rtemp6972.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp333[i] = rtemp333[i]*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6980(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6980 = fft(Nx,Ny,Nz,dV,rtemp333);

	rtemp333.free(); // Realspace
	{
		const int i = 0;
		ktemp6980[0] = 0.33333333333333337*R*R*R*ktemp6980[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6980[i] = std::complex<double>(ktemp6980[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6980[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6982(Nx*Ny*Nz); // RS
	rtemp6982 = ifft(Nx,Ny,Nz,dV,ktemp6980);

	ktemp6980.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6982[i] = rtemp6977[i] + 642.946153242697*rtemp6982[i];
	}

	rtemp6977.free(); // Realspace
	Vector rtemp6984(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp6984[i] = rtemp340[i]*log(t1)*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp6985(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6985 = fft(Nx,Ny,Nz,dV,rtemp6984);

	rtemp6984.free(); // Realspace
	{
		const int i = 0;
		ktemp6985[0] = 0.33333333333333337*R*R*R*ktemp6985[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6985[i] = std::complex<double>(ktemp6985[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6985[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6987(Nx*Ny*Nz); // RS
	rtemp6987 = ifft(Nx,Ny,Nz,dV,ktemp6985);

	ktemp6985.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6987[i] = rtemp6982[i] - 2825.788031535804*rtemp6987[i];
	}

	rtemp6982.free(); // Realspace
	Vector rtemp6989(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp6989[i] = rtemp340[i]*(n3[i] + t1*t1*log(t1))*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp6990(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6990 = fft(Nx,Ny,Nz,dV,rtemp6989);

	rtemp6989.free(); // Realspace
	{
		const int i = 0;
		ktemp6990[0] = 0.33333333333333337*R*R*R*ktemp6990[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6990[i] = std::complex<double>(ktemp6990[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6990[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6992(Nx*Ny*Nz); // RS
	rtemp6992 = ifft(Nx,Ny,Nz,dV,ktemp6990);

	ktemp6990.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6992[i] = rtemp6987[i] + 2825.788031535804*rtemp6992[i];
	}

	rtemp6987.free(); // Realspace
	Vector rtemp6994(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6994[i] = rtemp340[i]*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp6995(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6995 = fft(Nx,Ny,Nz,dV,rtemp6994);

	rtemp6994.free(); // Realspace
	{
		const int i = 0;
		ktemp6995[0] = 0.33333333333333337*R*R*R*ktemp6995[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6995[i] = std::complex<double>(ktemp6995[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp6995[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp6997(Nx*Ny*Nz); // RS
	rtemp6997 = ifft(Nx,Ny,Nz,dV,ktemp6995);

	ktemp6995.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6997[i] = rtemp6992[i] + 1412.894015767902*rtemp6997[i];
	}

	rtemp6992.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp340[i] = rtemp340[i]*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp7000(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7000 = fft(Nx,Ny,Nz,dV,rtemp340);

	rtemp340.free(); // Realspace
	{
		const int i = 0;
		ktemp7000[0] = 0.33333333333333337*R*R*R*ktemp7000[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7000[i] = std::complex<double>(ktemp7000[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7000[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7002(Nx*Ny*Nz); // RS
	rtemp7002 = ifft(Nx,Ny,Nz,dV,ktemp7000);

	ktemp7000.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7002[i] = rtemp6997[i] - 1412.894015767902*rtemp7002[i];
	}

	rtemp6997.free(); // Realspace
	Vector rtemp7004(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp7004[i] = rtemp347[i]*log(t1)*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp7005(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7005 = fft(Nx,Ny,Nz,dV,rtemp7004);

	rtemp7004.free(); // Realspace
	{
		const int i = 0;
		ktemp7005[0] = 0.33333333333333337*R*R*R*ktemp7005[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7005[i] = std::complex<double>(ktemp7005[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7005[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7007(Nx*Ny*Nz); // RS
	rtemp7007 = ifft(Nx,Ny,Nz,dV,ktemp7005);

	ktemp7005.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7007[i] = rtemp7002[i] + 3.968803415078377*rtemp7007[i];
	}

	rtemp7002.free(); // Realspace
	Vector rtemp7009(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp7009[i] = rtemp347[i]*(n3[i] + t1*t1*log(t1))*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp7010(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7010 = fft(Nx,Ny,Nz,dV,rtemp7009);

	rtemp7009.free(); // Realspace
	{
		const int i = 0;
		ktemp7010[0] = 0.33333333333333337*R*R*R*ktemp7010[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7010[i] = std::complex<double>(ktemp7010[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7010[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7012(Nx*Ny*Nz); // RS
	rtemp7012 = ifft(Nx,Ny,Nz,dV,ktemp7010);

	ktemp7010.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7012[i] = rtemp7007[i] - 3.968803415078377*rtemp7012[i];
	}

	rtemp7007.free(); // Realspace
	Vector rtemp7014(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7014[i] = rtemp347[i]*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp7015(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7015 = fft(Nx,Ny,Nz,dV,rtemp7014);

	rtemp7014.free(); // Realspace
	{
		const int i = 0;
		ktemp7015[0] = 0.33333333333333337*R*R*R*ktemp7015[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7015[i] = std::complex<double>(ktemp7015[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7015[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7017(Nx*Ny*Nz); // RS
	rtemp7017 = ifft(Nx,Ny,Nz,dV,ktemp7015);

	ktemp7015.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7017[i] = rtemp7012[i] - 1.9844017075391884*rtemp7017[i];
	}

	rtemp7012.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp347[i] = rtemp347[i]*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp7020(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7020 = fft(Nx,Ny,Nz,dV,rtemp347);

	rtemp347.free(); // Realspace
	{
		const int i = 0;
		ktemp7020[0] = 0.33333333333333337*R*R*R*ktemp7020[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7020[i] = std::complex<double>(ktemp7020[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7020[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7022(Nx*Ny*Nz); // RS
	rtemp7022 = ifft(Nx,Ny,Nz,dV,ktemp7020);

	ktemp7020.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7022[i] = rtemp7017[i] + 1.9844017075391884*rtemp7022[i];
	}

	rtemp7017.free(); // Realspace
	Vector rtemp7024(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp7024[i] = rtemp354[i]*log(t1)*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp7025(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7025 = fft(Nx,Ny,Nz,dV,rtemp7024);

	rtemp7024.free(); // Realspace
	{
		const int i = 0;
		ktemp7025[0] = 0.33333333333333337*R*R*R*ktemp7025[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7025[i] = std::complex<double>(ktemp7025[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7025[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7027(Nx*Ny*Nz); // RS
	rtemp7027 = ifft(Nx,Ny,Nz,dV,ktemp7025);

	ktemp7025.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7027[i] = rtemp7022[i] + 11620.656399349487*rtemp7027[i];
	}

	rtemp7022.free(); // Realspace
	Vector rtemp7029(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp7029[i] = rtemp354[i]*(n3[i] + t1*t1*log(t1))*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp7030(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7030 = fft(Nx,Ny,Nz,dV,rtemp7029);

	rtemp7029.free(); // Realspace
	{
		const int i = 0;
		ktemp7030[0] = 0.33333333333333337*R*R*R*ktemp7030[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7030[i] = std::complex<double>(ktemp7030[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7030[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7032(Nx*Ny*Nz); // RS
	rtemp7032 = ifft(Nx,Ny,Nz,dV,ktemp7030);

	ktemp7030.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7032[i] = rtemp7027[i] - 11620.656399349487*rtemp7032[i];
	}

	rtemp7027.free(); // Realspace
	Vector rtemp7034(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7034[i] = rtemp354[i]*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp7035(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7035 = fft(Nx,Ny,Nz,dV,rtemp7034);

	rtemp7034.free(); // Realspace
	{
		const int i = 0;
		ktemp7035[0] = 0.33333333333333337*R*R*R*ktemp7035[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7035[i] = std::complex<double>(ktemp7035[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7035[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7037(Nx*Ny*Nz); // RS
	rtemp7037 = ifft(Nx,Ny,Nz,dV,ktemp7035);

	ktemp7035.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7037[i] = rtemp7032[i] - 5810.328199674744*rtemp7037[i];
	}

	rtemp7032.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp354[i] = rtemp354[i]*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp7040(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7040 = fft(Nx,Ny,Nz,dV,rtemp354);

	rtemp354.free(); // Realspace
	{
		const int i = 0;
		ktemp7040[0] = 0.33333333333333337*R*R*R*ktemp7040[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7040[i] = std::complex<double>(ktemp7040[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7040[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7042(Nx*Ny*Nz); // RS
	rtemp7042 = ifft(Nx,Ny,Nz,dV,ktemp7040);

	ktemp7040.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7042[i] = rtemp7037[i] + 5810.328199674744*rtemp7042[i];
	}

	rtemp7037.free(); // Realspace
	Vector rtemp7044(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp7044[i] = rtemp361[i]*log(t1)*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp7045(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7045 = fft(Nx,Ny,Nz,dV,rtemp7044);

	rtemp7044.free(); // Realspace
	{
		const int i = 0;
		ktemp7045[0] = 0.33333333333333337*R*R*R*ktemp7045[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7045[i] = std::complex<double>(ktemp7045[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7045[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7047(Nx*Ny*Nz); // RS
	rtemp7047 = ifft(Nx,Ny,Nz,dV,ktemp7045);

	ktemp7045.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7047[i] = rtemp7042[i] - 8302.736744343965*rtemp7047[i];
	}

	rtemp7042.free(); // Realspace
	Vector rtemp7049(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp7049[i] = rtemp361[i]*(n3[i] + t1*t1*log(t1))*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp7050(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7050 = fft(Nx,Ny,Nz,dV,rtemp7049);

	rtemp7049.free(); // Realspace
	{
		const int i = 0;
		ktemp7050[0] = 0.33333333333333337*R*R*R*ktemp7050[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7050[i] = std::complex<double>(ktemp7050[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7050[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7052(Nx*Ny*Nz); // RS
	rtemp7052 = ifft(Nx,Ny,Nz,dV,ktemp7050);

	ktemp7050.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7052[i] = rtemp7047[i] + 8302.736744343965*rtemp7052[i];
	}

	rtemp7047.free(); // Realspace
	Vector rtemp7054(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7054[i] = rtemp361[i]*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp7055(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7055 = fft(Nx,Ny,Nz,dV,rtemp7054);

	rtemp7054.free(); // Realspace
	{
		const int i = 0;
		ktemp7055[0] = 0.33333333333333337*R*R*R*ktemp7055[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7055[i] = std::complex<double>(ktemp7055[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7055[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7057(Nx*Ny*Nz); // RS
	rtemp7057 = ifft(Nx,Ny,Nz,dV,ktemp7055);

	ktemp7055.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7057[i] = rtemp7052[i] + 4151.368372171983*rtemp7057[i];
	}

	rtemp7052.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp361[i] = rtemp361[i]*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp7060(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7060 = fft(Nx,Ny,Nz,dV,rtemp361);

	rtemp361.free(); // Realspace
	{
		const int i = 0;
		ktemp7060[0] = 0.33333333333333337*R*R*R*ktemp7060[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7060[i] = std::complex<double>(ktemp7060[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7060[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7062(Nx*Ny*Nz); // RS
	rtemp7062 = ifft(Nx,Ny,Nz,dV,ktemp7060);

	ktemp7060.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7062[i] = rtemp7057[i] - 4151.368372171983*rtemp7062[i];
	}

	rtemp7057.free(); // Realspace
	Vector rtemp7064(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp7064[i] = rtemp368[i]*log(t1)*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp7065(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7065 = fft(Nx,Ny,Nz,dV,rtemp7064);

	rtemp7064.free(); // Realspace
	{
		const int i = 0;
		ktemp7065[0] = 0.33333333333333337*R*R*R*ktemp7065[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7065[i] = std::complex<double>(ktemp7065[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7065[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7067(Nx*Ny*Nz); // RS
	rtemp7067 = ifft(Nx,Ny,Nz,dV,ktemp7065);

	ktemp7065.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7067[i] = rtemp7062[i] - 17474.64143659009*rtemp7067[i];
	}

	rtemp7062.free(); // Realspace
	Vector rtemp7069(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp7069[i] = rtemp368[i]*(n3[i] + t1*t1*log(t1))*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp7070(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7070 = fft(Nx,Ny,Nz,dV,rtemp7069);

	rtemp7069.free(); // Realspace
	{
		const int i = 0;
		ktemp7070[0] = 0.33333333333333337*R*R*R*ktemp7070[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7070[i] = std::complex<double>(ktemp7070[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7070[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7072(Nx*Ny*Nz); // RS
	rtemp7072 = ifft(Nx,Ny,Nz,dV,ktemp7070);

	ktemp7070.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7072[i] = rtemp7067[i] + 17474.64143659009*rtemp7072[i];
	}

	rtemp7067.free(); // Realspace
	Vector rtemp7074(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7074[i] = rtemp368[i]*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp7075(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7075 = fft(Nx,Ny,Nz,dV,rtemp7074);

	rtemp7074.free(); // Realspace
	{
		const int i = 0;
		ktemp7075[0] = 0.33333333333333337*R*R*R*ktemp7075[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7075[i] = std::complex<double>(ktemp7075[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7075[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7077(Nx*Ny*Nz); // RS
	rtemp7077 = ifft(Nx,Ny,Nz,dV,ktemp7075);

	ktemp7075.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7077[i] = rtemp7072[i] + 8737.320718295045*rtemp7077[i];
	}

	rtemp7072.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp368[i] = rtemp368[i]*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp7080(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7080 = fft(Nx,Ny,Nz,dV,rtemp368);

	rtemp368.free(); // Realspace
	{
		const int i = 0;
		ktemp7080[0] = 0.33333333333333337*R*R*R*ktemp7080[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7080[i] = std::complex<double>(ktemp7080[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7080[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7082(Nx*Ny*Nz); // RS
	rtemp7082 = ifft(Nx,Ny,Nz,dV,ktemp7080);

	ktemp7080.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7082[i] = rtemp7077[i] - 8737.320718295045*rtemp7082[i];
	}

	rtemp7077.free(); // Realspace
	Vector rtemp7084(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp7084[i] = rtemp375[i]*log(t1)*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp7085(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7085 = fft(Nx,Ny,Nz,dV,rtemp7084);

	rtemp7084.free(); // Realspace
	{
		const int i = 0;
		ktemp7085[0] = 0.33333333333333337*R*R*R*ktemp7085[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7085[i] = std::complex<double>(ktemp7085[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7085[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7087(Nx*Ny*Nz); // RS
	rtemp7087 = ifft(Nx,Ny,Nz,dV,ktemp7085);

	ktemp7085.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7087[i] = rtemp7082[i] + 14763.948704091561*rtemp7087[i];
	}

	rtemp7082.free(); // Realspace
	Vector rtemp7089(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp7089[i] = rtemp375[i]*(n3[i] + t1*t1*log(t1))*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp7090(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7090 = fft(Nx,Ny,Nz,dV,rtemp7089);

	rtemp7089.free(); // Realspace
	{
		const int i = 0;
		ktemp7090[0] = 0.33333333333333337*R*R*R*ktemp7090[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7090[i] = std::complex<double>(ktemp7090[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7090[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7092(Nx*Ny*Nz); // RS
	rtemp7092 = ifft(Nx,Ny,Nz,dV,ktemp7090);

	ktemp7090.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7092[i] = rtemp7087[i] - 14763.948704091561*rtemp7092[i];
	}

	rtemp7087.free(); // Realspace
	Vector rtemp7094(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7094[i] = rtemp375[i]*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp7095(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7095 = fft(Nx,Ny,Nz,dV,rtemp7094);

	rtemp7094.free(); // Realspace
	{
		const int i = 0;
		ktemp7095[0] = 0.33333333333333337*R*R*R*ktemp7095[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7095[i] = std::complex<double>(ktemp7095[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7095[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7097(Nx*Ny*Nz); // RS
	rtemp7097 = ifft(Nx,Ny,Nz,dV,ktemp7095);

	ktemp7095.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7097[i] = rtemp7092[i] - 7381.9743520457805*rtemp7097[i];
	}

	rtemp7092.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp375[i] = rtemp375[i]*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp7100(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7100 = fft(Nx,Ny,Nz,dV,rtemp375);

	rtemp375.free(); // Realspace
	{
		const int i = 0;
		ktemp7100[0] = 0.33333333333333337*R*R*R*ktemp7100[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7100[i] = std::complex<double>(ktemp7100[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7100[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7102(Nx*Ny*Nz); // RS
	rtemp7102 = ifft(Nx,Ny,Nz,dV,ktemp7100);

	ktemp7100.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7102[i] = rtemp7097[i] + 7381.9743520457805*rtemp7102[i];
	}

	rtemp7097.free(); // Realspace
	Vector rtemp7104(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp7104[i] = rtemp382[i]*log(t1)*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp7105(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7105 = fft(Nx,Ny,Nz,dV,rtemp7104);

	rtemp7104.free(); // Realspace
	{
		const int i = 0;
		ktemp7105[0] = 0.33333333333333337*R*R*R*ktemp7105[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7105[i] = std::complex<double>(ktemp7105[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7105[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7107(Nx*Ny*Nz); // RS
	rtemp7107 = ifft(Nx,Ny,Nz,dV,ktemp7105);

	ktemp7105.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7107[i] = rtemp7102[i] - 2881.3512793469013*rtemp7107[i];
	}

	rtemp7102.free(); // Realspace
	Vector rtemp7109(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp7109[i] = rtemp382[i]*(n3[i] + t1*t1*log(t1))*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp7110(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7110 = fft(Nx,Ny,Nz,dV,rtemp7109);

	rtemp7109.free(); // Realspace
	{
		const int i = 0;
		ktemp7110[0] = 0.33333333333333337*R*R*R*ktemp7110[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7110[i] = std::complex<double>(ktemp7110[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7110[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7112(Nx*Ny*Nz); // RS
	rtemp7112 = ifft(Nx,Ny,Nz,dV,ktemp7110);

	ktemp7110.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7112[i] = rtemp7107[i] + 2881.3512793469013*rtemp7112[i];
	}

	rtemp7107.free(); // Realspace
	Vector rtemp7114(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7114[i] = rtemp382[i]*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp7115(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7115 = fft(Nx,Ny,Nz,dV,rtemp7114);

	rtemp7114.free(); // Realspace
	{
		const int i = 0;
		ktemp7115[0] = 0.33333333333333337*R*R*R*ktemp7115[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7115[i] = std::complex<double>(ktemp7115[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7115[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7117(Nx*Ny*Nz); // RS
	rtemp7117 = ifft(Nx,Ny,Nz,dV,ktemp7115);

	ktemp7115.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7117[i] = rtemp7112[i] + 1440.6756396734506*rtemp7117[i];
	}

	rtemp7112.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp382[i] = rtemp382[i]*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp7120(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7120 = fft(Nx,Ny,Nz,dV,rtemp382);

	rtemp382.free(); // Realspace
	{
		const int i = 0;
		ktemp7120[0] = 0.33333333333333337*R*R*R*ktemp7120[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7120[i] = std::complex<double>(ktemp7120[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7120[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7122(Nx*Ny*Nz); // RS
	rtemp7122 = ifft(Nx,Ny,Nz,dV,ktemp7120);

	ktemp7120.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7122[i] = rtemp7117[i] - 1440.6756396734506*rtemp7122[i];
	}

	rtemp7117.free(); // Realspace
	Vector rtemp7124(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp7124[i] = rtemp389[i]*log(t1)*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp7125(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7125 = fft(Nx,Ny,Nz,dV,rtemp7124);

	rtemp7124.free(); // Realspace
	{
		const int i = 0;
		ktemp7125[0] = 0.33333333333333337*R*R*R*ktemp7125[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7125[i] = std::complex<double>(ktemp7125[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7125[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7127(Nx*Ny*Nz); // RS
	rtemp7127 = ifft(Nx,Ny,Nz,dV,ktemp7125);

	ktemp7125.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7127[i] = rtemp7122[i] - 107.15769220711617*rtemp7127[i];
	}

	rtemp7122.free(); // Realspace
	Vector rtemp7129(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp7129[i] = rtemp389[i]*(n3[i] + t1*t1*log(t1))*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp7130(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7130 = fft(Nx,Ny,Nz,dV,rtemp7129);

	rtemp7129.free(); // Realspace
	{
		const int i = 0;
		ktemp7130[0] = 0.33333333333333337*R*R*R*ktemp7130[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7130[i] = std::complex<double>(ktemp7130[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7130[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7132(Nx*Ny*Nz); // RS
	rtemp7132 = ifft(Nx,Ny,Nz,dV,ktemp7130);

	ktemp7130.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7132[i] = rtemp7127[i] + 107.15769220711617*rtemp7132[i];
	}

	rtemp7127.free(); // Realspace
	Vector rtemp7134(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7134[i] = rtemp389[i]*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp7135(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7135 = fft(Nx,Ny,Nz,dV,rtemp7134);

	rtemp7134.free(); // Realspace
	{
		const int i = 0;
		ktemp7135[0] = 0.33333333333333337*R*R*R*ktemp7135[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7135[i] = std::complex<double>(ktemp7135[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7135[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7137(Nx*Ny*Nz); // RS
	rtemp7137 = ifft(Nx,Ny,Nz,dV,ktemp7135);

	ktemp7135.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7137[i] = rtemp7132[i] + 53.578846103558085*rtemp7137[i];
	}

	rtemp7132.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp389[i] = rtemp389[i]*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp7140(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7140 = fft(Nx,Ny,Nz,dV,rtemp389);

	rtemp389.free(); // Realspace
	{
		const int i = 0;
		ktemp7140[0] = 0.33333333333333337*R*R*R*ktemp7140[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7140[i] = std::complex<double>(ktemp7140[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7140[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7142(Nx*Ny*Nz); // RS
	rtemp7142 = ifft(Nx,Ny,Nz,dV,ktemp7140);

	ktemp7140.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7142[i] = rtemp7137[i] - 53.578846103558085*rtemp7142[i];
	}

	rtemp7137.free(); // Realspace
	Vector rtemp7144(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp7144[i] = rtemp396[i]*log(t1)*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp7145(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7145 = fft(Nx,Ny,Nz,dV,rtemp7144);

	rtemp7144.free(); // Realspace
	{
		const int i = 0;
		ktemp7145[0] = 0.33333333333333337*R*R*R*ktemp7145[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7145[i] = std::complex<double>(ktemp7145[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7145[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7147(Nx*Ny*Nz); // RS
	rtemp7147 = ifft(Nx,Ny,Nz,dV,ktemp7145);

	ktemp7145.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7147[i] = rtemp7142[i] - 4988.785892753519*rtemp7147[i];
	}

	rtemp7142.free(); // Realspace
	Vector rtemp7149(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp7149[i] = rtemp396[i]*(n3[i] + t1*t1*log(t1))*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp7150(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7150 = fft(Nx,Ny,Nz,dV,rtemp7149);

	rtemp7149.free(); // Realspace
	{
		const int i = 0;
		ktemp7150[0] = 0.33333333333333337*R*R*R*ktemp7150[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7150[i] = std::complex<double>(ktemp7150[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7150[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7152(Nx*Ny*Nz); // RS
	rtemp7152 = ifft(Nx,Ny,Nz,dV,ktemp7150);

	ktemp7150.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7152[i] = rtemp7147[i] + 4988.785892753519*rtemp7152[i];
	}

	rtemp7147.free(); // Realspace
	Vector rtemp7154(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7154[i] = rtemp396[i]*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp7155(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7155 = fft(Nx,Ny,Nz,dV,rtemp7154);

	rtemp7154.free(); // Realspace
	{
		const int i = 0;
		ktemp7155[0] = 0.33333333333333337*R*R*R*ktemp7155[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7155[i] = std::complex<double>(ktemp7155[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7155[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7157(Nx*Ny*Nz); // RS
	rtemp7157 = ifft(Nx,Ny,Nz,dV,ktemp7155);

	ktemp7155.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7157[i] = rtemp7152[i] + 2494.3929463767595*rtemp7157[i];
	}

	rtemp7152.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp396[i] = rtemp396[i]*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp7160(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7160 = fft(Nx,Ny,Nz,dV,rtemp396);

	rtemp396.free(); // Realspace
	{
		const int i = 0;
		ktemp7160[0] = 0.33333333333333337*R*R*R*ktemp7160[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7160[i] = std::complex<double>(ktemp7160[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7160[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7162(Nx*Ny*Nz); // RS
	rtemp7162 = ifft(Nx,Ny,Nz,dV,ktemp7160);

	ktemp7160.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7162[i] = rtemp7157[i] - 2494.3929463767595*rtemp7162[i];
	}

	rtemp7157.free(); // Realspace
	Vector rtemp7164(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp7164[i] = rtemp403[i]*log(t1)*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp7165(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7165 = fft(Nx,Ny,Nz,dV,rtemp7164);

	rtemp7164.free(); // Realspace
	{
		const int i = 0;
		ktemp7165[0] = 0.33333333333333337*R*R*R*ktemp7165[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7165[i] = std::complex<double>(ktemp7165[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7165[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7167(Nx*Ny*Nz); // RS
	rtemp7167 = ifft(Nx,Ny,Nz,dV,ktemp7165);

	ktemp7165.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7167[i] = rtemp7162[i] + 1412.894015767902*rtemp7167[i];
	}

	rtemp7162.free(); // Realspace
	Vector rtemp7169(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp7169[i] = rtemp403[i]*(n3[i] + t1*t1*log(t1))*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp7170(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7170 = fft(Nx,Ny,Nz,dV,rtemp7169);

	rtemp7169.free(); // Realspace
	{
		const int i = 0;
		ktemp7170[0] = 0.33333333333333337*R*R*R*ktemp7170[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7170[i] = std::complex<double>(ktemp7170[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7170[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7172(Nx*Ny*Nz); // RS
	rtemp7172 = ifft(Nx,Ny,Nz,dV,ktemp7170);

	ktemp7170.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7172[i] = rtemp7167[i] - 1412.894015767902*rtemp7172[i];
	}

	rtemp7167.free(); // Realspace
	Vector rtemp7174(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7174[i] = rtemp403[i]*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp7175(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7175 = fft(Nx,Ny,Nz,dV,rtemp7174);

	rtemp7174.free(); // Realspace
	{
		const int i = 0;
		ktemp7175[0] = 0.33333333333333337*R*R*R*ktemp7175[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7175[i] = std::complex<double>(ktemp7175[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7175[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7177(Nx*Ny*Nz); // RS
	rtemp7177 = ifft(Nx,Ny,Nz,dV,ktemp7175);

	ktemp7175.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7177[i] = rtemp7172[i] - 706.447007883951*rtemp7177[i];
	}

	rtemp7172.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp403[i] = rtemp403[i]*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp7180(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7180 = fft(Nx,Ny,Nz,dV,rtemp403);

	rtemp403.free(); // Realspace
	{
		const int i = 0;
		ktemp7180[0] = 0.33333333333333337*R*R*R*ktemp7180[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7180[i] = std::complex<double>(ktemp7180[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7180[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7182(Nx*Ny*Nz); // RS
	rtemp7182 = ifft(Nx,Ny,Nz,dV,ktemp7180);

	ktemp7180.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7182[i] = rtemp7177[i] + 706.447007883951*rtemp7182[i];
	}

	rtemp7177.free(); // Realspace
	Vector rtemp7184(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp7184[i] = rtemp410[i]*log(t1)*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp7185(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7185 = fft(Nx,Ny,Nz,dV,rtemp7184);

	rtemp7184.free(); // Realspace
	{
		const int i = 0;
		ktemp7185[0] = 0.33333333333333337*R*R*R*ktemp7185[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7185[i] = std::complex<double>(ktemp7185[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7185[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7187(Nx*Ny*Nz); // RS
	rtemp7187 = ifft(Nx,Ny,Nz,dV,ktemp7185);

	ktemp7185.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7187[i] = rtemp7182[i] - 410.77115346061197*rtemp7187[i];
	}

	rtemp7182.free(); // Realspace
	Vector rtemp7189(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp7189[i] = rtemp410[i]*(n3[i] + t1*t1*log(t1))*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp7190(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7190 = fft(Nx,Ny,Nz,dV,rtemp7189);

	rtemp7189.free(); // Realspace
	{
		const int i = 0;
		ktemp7190[0] = 0.33333333333333337*R*R*R*ktemp7190[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7190[i] = std::complex<double>(ktemp7190[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7190[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7192(Nx*Ny*Nz); // RS
	rtemp7192 = ifft(Nx,Ny,Nz,dV,ktemp7190);

	ktemp7190.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7192[i] = rtemp7187[i] + 410.77115346061197*rtemp7192[i];
	}

	rtemp7187.free(); // Realspace
	Vector rtemp7194(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7194[i] = rtemp410[i]*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp7195(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7195 = fft(Nx,Ny,Nz,dV,rtemp7194);

	rtemp7194.free(); // Realspace
	{
		const int i = 0;
		ktemp7195[0] = 0.33333333333333337*R*R*R*ktemp7195[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7195[i] = std::complex<double>(ktemp7195[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7195[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7197(Nx*Ny*Nz); // RS
	rtemp7197 = ifft(Nx,Ny,Nz,dV,ktemp7195);

	ktemp7195.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7197[i] = rtemp7192[i] + 205.38557673030598*rtemp7197[i];
	}

	rtemp7192.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp410[i] = rtemp410[i]*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp7200(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7200 = fft(Nx,Ny,Nz,dV,rtemp410);

	rtemp410.free(); // Realspace
	{
		const int i = 0;
		ktemp7200[0] = 0.33333333333333337*R*R*R*ktemp7200[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7200[i] = std::complex<double>(ktemp7200[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7200[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7202(Nx*Ny*Nz); // RS
	rtemp7202 = ifft(Nx,Ny,Nz,dV,ktemp7200);

	ktemp7200.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7202[i] = rtemp7197[i] - 205.38557673030598*rtemp7202[i];
	}

	rtemp7197.free(); // Realspace
	Vector rtemp7204(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp7204[i] = rtemp417[i]*log(t1)*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp7205(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7205 = fft(Nx,Ny,Nz,dV,rtemp7204);

	rtemp7204.free(); // Realspace
	{
		const int i = 0;
		ktemp7205[0] = 0.33333333333333337*R*R*R*ktemp7205[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7205[i] = std::complex<double>(ktemp7205[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7205[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7207(Nx*Ny*Nz); // RS
	rtemp7207 = ifft(Nx,Ny,Nz,dV,ktemp7205);

	ktemp7205.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7207[i] = rtemp7202[i] + 4451.013030010399*rtemp7207[i];
	}

	rtemp7202.free(); // Realspace
	Vector rtemp7209(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp7209[i] = rtemp417[i]*(n3[i] + t1*t1*log(t1))*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp7210(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7210 = fft(Nx,Ny,Nz,dV,rtemp7209);

	rtemp7209.free(); // Realspace
	{
		const int i = 0;
		ktemp7210[0] = 0.33333333333333337*R*R*R*ktemp7210[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7210[i] = std::complex<double>(ktemp7210[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7210[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7212(Nx*Ny*Nz); // RS
	rtemp7212 = ifft(Nx,Ny,Nz,dV,ktemp7210);

	ktemp7210.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7212[i] = rtemp7207[i] - 4451.013030010399*rtemp7212[i];
	}

	rtemp7207.free(); // Realspace
	Vector rtemp7214(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7214[i] = rtemp417[i]*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp7215(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7215 = fft(Nx,Ny,Nz,dV,rtemp7214);

	rtemp7214.free(); // Realspace
	{
		const int i = 0;
		ktemp7215[0] = 0.33333333333333337*R*R*R*ktemp7215[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7215[i] = std::complex<double>(ktemp7215[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7215[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7217(Nx*Ny*Nz); // RS
	rtemp7217 = ifft(Nx,Ny,Nz,dV,ktemp7215);

	ktemp7215.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7217[i] = rtemp7212[i] - 2225.5065150051996*rtemp7217[i];
	}

	rtemp7212.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp417[i] = rtemp417[i]*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp7220(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7220 = fft(Nx,Ny,Nz,dV,rtemp417);

	rtemp417.free(); // Realspace
	{
		const int i = 0;
		ktemp7220[0] = 0.33333333333333337*R*R*R*ktemp7220[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7220[i] = std::complex<double>(ktemp7220[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7220[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7222(Nx*Ny*Nz); // RS
	rtemp7222 = ifft(Nx,Ny,Nz,dV,ktemp7220);

	ktemp7220.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7222[i] = rtemp7217[i] + 2225.5065150051996*rtemp7222[i];
	}

	rtemp7217.free(); // Realspace
	Vector rtemp7224(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp7224[i] = rtemp424[i]*log(t1)*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp7225(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7225 = fft(Nx,Ny,Nz,dV,rtemp7224);

	rtemp7224.free(); // Realspace
	{
		const int i = 0;
		ktemp7225[0] = 0.33333333333333337*R*R*R*ktemp7225[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7225[i] = std::complex<double>(ktemp7225[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7225[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7227(Nx*Ny*Nz); // RS
	rtemp7227 = ifft(Nx,Ny,Nz,dV,ktemp7225);

	ktemp7225.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7227[i] = rtemp7222[i] + 3480.640595023736*rtemp7227[i];
	}

	rtemp7222.free(); // Realspace
	Vector rtemp7229(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp7229[i] = rtemp424[i]*(n3[i] + t1*t1*log(t1))*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp7230(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7230 = fft(Nx,Ny,Nz,dV,rtemp7229);

	rtemp7229.free(); // Realspace
	{
		const int i = 0;
		ktemp7230[0] = 0.33333333333333337*R*R*R*ktemp7230[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7230[i] = std::complex<double>(ktemp7230[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7230[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7232(Nx*Ny*Nz); // RS
	rtemp7232 = ifft(Nx,Ny,Nz,dV,ktemp7230);

	ktemp7230.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7232[i] = rtemp7227[i] - 3480.640595023736*rtemp7232[i];
	}

	rtemp7227.free(); // Realspace
	Vector rtemp7234(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7234[i] = rtemp424[i]*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp7235(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7235 = fft(Nx,Ny,Nz,dV,rtemp7234);

	rtemp7234.free(); // Realspace
	{
		const int i = 0;
		ktemp7235[0] = 0.33333333333333337*R*R*R*ktemp7235[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7235[i] = std::complex<double>(ktemp7235[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7235[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7237(Nx*Ny*Nz); // RS
	rtemp7237 = ifft(Nx,Ny,Nz,dV,ktemp7235);

	ktemp7235.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7237[i] = rtemp7232[i] - 1740.320297511868*rtemp7237[i];
	}

	rtemp7232.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp424[i] = rtemp424[i]*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp7240(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7240 = fft(Nx,Ny,Nz,dV,rtemp424);

	rtemp424.free(); // Realspace
	{
		const int i = 0;
		ktemp7240[0] = 0.33333333333333337*R*R*R*ktemp7240[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7240[i] = std::complex<double>(ktemp7240[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7240[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7242(Nx*Ny*Nz); // RS
	rtemp7242 = ifft(Nx,Ny,Nz,dV,ktemp7240);

	ktemp7240.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7242[i] = rtemp7237[i] + 1740.320297511868*rtemp7242[i];
	}

	rtemp7237.free(); // Realspace
	Vector rtemp7244(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp7244[i] = rtemp431[i]*log(t1)*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp7245(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7245 = fft(Nx,Ny,Nz,dV,rtemp7244);

	rtemp7244.free(); // Realspace
	{
		const int i = 0;
		ktemp7245[0] = 0.33333333333333337*R*R*R*ktemp7245[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7245[i] = std::complex<double>(ktemp7245[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7245[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7247(Nx*Ny*Nz); // RS
	rtemp7247 = ifft(Nx,Ny,Nz,dV,ktemp7245);

	ktemp7245.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7247[i] = rtemp7242[i] - 1984.4017075391882*rtemp7247[i];
	}

	rtemp7242.free(); // Realspace
	Vector rtemp7249(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp7249[i] = rtemp431[i]*(n3[i] + t1*t1*log(t1))*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(t1*t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp7250(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7250 = fft(Nx,Ny,Nz,dV,rtemp7249);

	rtemp7249.free(); // Realspace
	{
		const int i = 0;
		ktemp7250[0] = 0.33333333333333337*R*R*R*ktemp7250[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7250[i] = std::complex<double>(ktemp7250[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7250[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7252(Nx*Ny*Nz); // RS
	rtemp7252 = ifft(Nx,Ny,Nz,dV,ktemp7250);

	ktemp7250.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7252[i] = rtemp7247[i] + 1984.4017075391882*rtemp7252[i];
	}

	rtemp7247.free(); // Realspace
	Vector rtemp7254(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7254[i] = rtemp431[i]*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp7255(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7255 = fft(Nx,Ny,Nz,dV,rtemp7254);

	rtemp7254.free(); // Realspace
	{
		const int i = 0;
		ktemp7255[0] = 0.33333333333333337*R*R*R*ktemp7255[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7255[i] = std::complex<double>(ktemp7255[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7255[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7257(Nx*Ny*Nz); // RS
	rtemp7257 = ifft(Nx,Ny,Nz,dV,ktemp7255);

	ktemp7255.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7257[i] = rtemp7252[i] + 992.2008537695941*rtemp7257[i];
	}

	rtemp7252.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp431[i] = rtemp431[i]*(2.6525823848649224e-2*rtemp67[i]*rtemp67[i] - 2.6525823848649224e-2*rtemp73[i]*rtemp73[i] - 2.6525823848649224e-2*rtemp77[i]*rtemp77[i] - 2.6525823848649224e-2*rtemp81[i]*rtemp81[i])/(n3[i]*n3[i]*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp7260(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7260 = fft(Nx,Ny,Nz,dV,rtemp431);

	rtemp431.free(); // Realspace
	{
		const int i = 0;
		ktemp7260[0] = 0.33333333333333337*R*R*R*ktemp7260[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7260[i] = std::complex<double>(ktemp7260[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7260[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7262(Nx*Ny*Nz); // RS
	rtemp7262 = ifft(Nx,Ny,Nz,dV,ktemp7260);

	ktemp7260.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7262[i] = rtemp7257[i] - 992.2008537695941*rtemp7262[i];
	}

	rtemp7257.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp123[i] = rtemp123[i]*(7.957747154594767e-2*rtemp67[i]*rtemp67[i]/R - 7.957747154594767e-2*rtemp73[i]*rtemp73[i]/R - 7.957747154594767e-2*rtemp77[i]*rtemp77[i]/R - 7.957747154594767e-2*rtemp81[i]*rtemp81[i]/R)/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp7265(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7265 = fft(Nx,Ny,Nz,dV,rtemp123);

	rtemp123.free(); // Realspace
	{
		const int i = 0;
		ktemp7265[0] = 0.33333333333333337*R*R*R*ktemp7265[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7265[i] = std::complex<double>(ktemp7265[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7265[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7267(Nx*Ny*Nz); // RS
	rtemp7267 = ifft(Nx,Ny,Nz,dV,ktemp7265);

	ktemp7265.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7267[i] = rtemp7262[i] + 650.8837600728538*rtemp7267[i];
	}

	rtemp7262.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp132[i] = rtemp132[i]*(7.957747154594767e-2*rtemp67[i]*rtemp67[i]/R - 7.957747154594767e-2*rtemp73[i]*rtemp73[i]/R - 7.957747154594767e-2*rtemp77[i]*rtemp77[i]/R - 7.957747154594767e-2*rtemp81[i]*rtemp81[i]/R)/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp7270(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7270 = fft(Nx,Ny,Nz,dV,rtemp132);

	rtemp132.free(); // Realspace
	{
		const int i = 0;
		ktemp7270[0] = 0.33333333333333337*R*R*R*ktemp7270[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7270[i] = std::complex<double>(ktemp7270[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7270[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7272(Nx*Ny*Nz); // RS
	rtemp7272 = ifft(Nx,Ny,Nz,dV,ktemp7270);

	ktemp7270.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7272[i] = rtemp7267[i] - 1928.838459728091*rtemp7272[i];
	}

	rtemp7267.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp141[i] = rtemp141[i]*(7.957747154594767e-2*rtemp67[i]*rtemp67[i]/R - 7.957747154594767e-2*rtemp73[i]*rtemp73[i]/R - 7.957747154594767e-2*rtemp77[i]*rtemp77[i]/R - 7.957747154594767e-2*rtemp81[i]*rtemp81[i]/R)/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp7275(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7275 = fft(Nx,Ny,Nz,dV,rtemp141);

	rtemp141.free(); // Realspace
	{
		const int i = 0;
		ktemp7275[0] = 0.33333333333333337*R*R*R*ktemp7275[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7275[i] = std::complex<double>(ktemp7275[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7275[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7277(Nx*Ny*Nz); // RS
	rtemp7277 = ifft(Nx,Ny,Nz,dV,ktemp7275);

	ktemp7275.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7277[i] = rtemp7272[i] + 1285.892306485394*rtemp7277[i];
	}

	rtemp7272.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp150[i] = rtemp150[i]*(7.957747154594767e-2*rtemp67[i]*rtemp67[i]/R - 7.957747154594767e-2*rtemp73[i]*rtemp73[i]/R - 7.957747154594767e-2*rtemp77[i]*rtemp77[i]/R - 7.957747154594767e-2*rtemp81[i]*rtemp81[i]/R)/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp7280(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7280 = fft(Nx,Ny,Nz,dV,rtemp150);

	rtemp150.free(); // Realspace
	{
		const int i = 0;
		ktemp7280[0] = 0.33333333333333337*R*R*R*ktemp7280[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7280[i] = std::complex<double>(ktemp7280[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7280[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7282(Nx*Ny*Nz); // RS
	rtemp7282 = ifft(Nx,Ny,Nz,dV,ktemp7280);

	ktemp7280.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7282[i] = rtemp7277[i] - 2825.788031535804*rtemp7282[i];
	}

	rtemp7277.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp159[i] = rtemp159[i]*(7.957747154594767e-2*rtemp67[i]*rtemp67[i]/R - 7.957747154594767e-2*rtemp73[i]*rtemp73[i]/R - 7.957747154594767e-2*rtemp77[i]*rtemp77[i]/R - 7.957747154594767e-2*rtemp81[i]*rtemp81[i]/R)/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp7285(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7285 = fft(Nx,Ny,Nz,dV,rtemp159);

	rtemp159.free(); // Realspace
	{
		const int i = 0;
		ktemp7285[0] = 0.33333333333333337*R*R*R*ktemp7285[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7285[i] = std::complex<double>(ktemp7285[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7285[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7287(Nx*Ny*Nz); // RS
	rtemp7287 = ifft(Nx,Ny,Nz,dV,ktemp7285);

	ktemp7285.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7287[i] = rtemp7282[i] + 11620.656399349487*rtemp7287[i];
	}

	rtemp7282.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp168[i] = rtemp168[i]*(7.957747154594767e-2*rtemp67[i]*rtemp67[i]/R - 7.957747154594767e-2*rtemp73[i]*rtemp73[i]/R - 7.957747154594767e-2*rtemp77[i]*rtemp77[i]/R - 7.957747154594767e-2*rtemp81[i]*rtemp81[i]/R)/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp7290(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7290 = fft(Nx,Ny,Nz,dV,rtemp168);

	rtemp168.free(); // Realspace
	{
		const int i = 0;
		ktemp7290[0] = 0.33333333333333337*R*R*R*ktemp7290[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7290[i] = std::complex<double>(ktemp7290[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7290[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7292(Nx*Ny*Nz); // RS
	rtemp7292 = ifft(Nx,Ny,Nz,dV,ktemp7290);

	ktemp7290.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7292[i] = rtemp7287[i] - 8302.736744343965*rtemp7292[i];
	}

	rtemp7287.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp16[i] = rtemp16[i]*(7.957747154594767e-2*rtemp67[i]*rtemp67[i]/R - 7.957747154594767e-2*rtemp73[i]*rtemp73[i]/R - 7.957747154594767e-2*rtemp77[i]*rtemp77[i]/R - 7.957747154594767e-2*rtemp81[i]*rtemp81[i]/R)/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp7295(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7295 = fft(Nx,Ny,Nz,dV,rtemp16);

	rtemp16.free(); // Realspace
	{
		const int i = 0;
		ktemp7295[0] = 0.33333333333333337*R*R*R*ktemp7295[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7295[i] = std::complex<double>(ktemp7295[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7295[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7297(Nx*Ny*Nz); // RS
	rtemp7297 = ifft(Nx,Ny,Nz,dV,ktemp7295);

	ktemp7295.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7297[i] = rtemp7292[i] + 3.968803415078377*rtemp7297[i];
	}

	rtemp7292.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp177[i] = rtemp177[i]*(7.957747154594767e-2*rtemp67[i]*rtemp67[i]/R - 7.957747154594767e-2*rtemp73[i]*rtemp73[i]/R - 7.957747154594767e-2*rtemp77[i]*rtemp77[i]/R - 7.957747154594767e-2*rtemp81[i]*rtemp81[i]/R)/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp7300(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7300 = fft(Nx,Ny,Nz,dV,rtemp177);

	rtemp177.free(); // Realspace
	{
		const int i = 0;
		ktemp7300[0] = 0.33333333333333337*R*R*R*ktemp7300[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7300[i] = std::complex<double>(ktemp7300[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7300[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7302(Nx*Ny*Nz); // RS
	rtemp7302 = ifft(Nx,Ny,Nz,dV,ktemp7300);

	ktemp7300.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7302[i] = rtemp7297[i] - 17474.64143659009*rtemp7302[i];
	}

	rtemp7297.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp186[i] = rtemp186[i]*(7.957747154594767e-2*rtemp67[i]*rtemp67[i]/R - 7.957747154594767e-2*rtemp73[i]*rtemp73[i]/R - 7.957747154594767e-2*rtemp77[i]*rtemp77[i]/R - 7.957747154594767e-2*rtemp81[i]*rtemp81[i]/R)/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp7305(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7305 = fft(Nx,Ny,Nz,dV,rtemp186);

	rtemp186.free(); // Realspace
	{
		const int i = 0;
		ktemp7305[0] = 0.33333333333333337*R*R*R*ktemp7305[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7305[i] = std::complex<double>(ktemp7305[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7305[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7307(Nx*Ny*Nz); // RS
	rtemp7307 = ifft(Nx,Ny,Nz,dV,ktemp7305);

	ktemp7305.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7307[i] = rtemp7302[i] + 14763.948704091561*rtemp7307[i];
	}

	rtemp7302.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp195[i] = rtemp195[i]*(7.957747154594767e-2*rtemp67[i]*rtemp67[i]/R - 7.957747154594767e-2*rtemp73[i]*rtemp73[i]/R - 7.957747154594767e-2*rtemp77[i]*rtemp77[i]/R - 7.957747154594767e-2*rtemp81[i]*rtemp81[i]/R)/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp7310(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7310 = fft(Nx,Ny,Nz,dV,rtemp195);

	rtemp195.free(); // Realspace
	{
		const int i = 0;
		ktemp7310[0] = 0.33333333333333337*R*R*R*ktemp7310[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7310[i] = std::complex<double>(ktemp7310[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7310[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7312(Nx*Ny*Nz); // RS
	rtemp7312 = ifft(Nx,Ny,Nz,dV,ktemp7310);

	ktemp7310.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7312[i] = rtemp7307[i] - 2881.3512793469013*rtemp7312[i];
	}

	rtemp7307.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp204[i] = rtemp204[i]*(7.957747154594767e-2*rtemp67[i]*rtemp67[i]/R - 7.957747154594767e-2*rtemp73[i]*rtemp73[i]/R - 7.957747154594767e-2*rtemp77[i]*rtemp77[i]/R - 7.957747154594767e-2*rtemp81[i]*rtemp81[i]/R)/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp7315(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7315 = fft(Nx,Ny,Nz,dV,rtemp204);

	rtemp204.free(); // Realspace
	{
		const int i = 0;
		ktemp7315[0] = 0.33333333333333337*R*R*R*ktemp7315[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7315[i] = std::complex<double>(ktemp7315[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7315[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7317(Nx*Ny*Nz); // RS
	rtemp7317 = ifft(Nx,Ny,Nz,dV,ktemp7315);

	ktemp7315.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7317[i] = rtemp7312[i] - 107.15769220711617*rtemp7317[i];
	}

	rtemp7312.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp213[i] = rtemp213[i]*(7.957747154594767e-2*rtemp67[i]*rtemp67[i]/R - 7.957747154594767e-2*rtemp73[i]*rtemp73[i]/R - 7.957747154594767e-2*rtemp77[i]*rtemp77[i]/R - 7.957747154594767e-2*rtemp81[i]*rtemp81[i]/R)/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp7320(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7320 = fft(Nx,Ny,Nz,dV,rtemp213);

	rtemp213.free(); // Realspace
	{
		const int i = 0;
		ktemp7320[0] = 0.33333333333333337*R*R*R*ktemp7320[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7320[i] = std::complex<double>(ktemp7320[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7320[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7322(Nx*Ny*Nz); // RS
	rtemp7322 = ifft(Nx,Ny,Nz,dV,ktemp7320);

	ktemp7320.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7322[i] = rtemp7317[i] - 4988.785892753519*rtemp7322[i];
	}

	rtemp7317.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp222[i] = rtemp222[i]*(7.957747154594767e-2*rtemp67[i]*rtemp67[i]/R - 7.957747154594767e-2*rtemp73[i]*rtemp73[i]/R - 7.957747154594767e-2*rtemp77[i]*rtemp77[i]/R - 7.957747154594767e-2*rtemp81[i]*rtemp81[i]/R)/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp7325(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7325 = fft(Nx,Ny,Nz,dV,rtemp222);

	rtemp222.free(); // Realspace
	{
		const int i = 0;
		ktemp7325[0] = 0.33333333333333337*R*R*R*ktemp7325[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7325[i] = std::complex<double>(ktemp7325[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7325[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7327(Nx*Ny*Nz); // RS
	rtemp7327 = ifft(Nx,Ny,Nz,dV,ktemp7325);

	ktemp7325.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7327[i] = rtemp7322[i] + 1412.894015767902*rtemp7327[i];
	}

	rtemp7322.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp27[i] = rtemp27[i]*(7.957747154594767e-2*rtemp67[i]*rtemp67[i]/R - 7.957747154594767e-2*rtemp73[i]*rtemp73[i]/R - 7.957747154594767e-2*rtemp77[i]*rtemp77[i]/R - 7.957747154594767e-2*rtemp81[i]*rtemp81[i]/R)/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp7330(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7330 = fft(Nx,Ny,Nz,dV,rtemp27);

	rtemp27.free(); // Realspace
	{
		const int i = 0;
		ktemp7330[0] = 0.33333333333333337*R*R*R*ktemp7330[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7330[i] = std::complex<double>(ktemp7330[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7330[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7332(Nx*Ny*Nz); // RS
	rtemp7332 = ifft(Nx,Ny,Nz,dV,ktemp7330);

	ktemp7330.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7332[i] = rtemp7327[i] - 410.77115346061197*rtemp7332[i];
	}

	rtemp7327.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp38[i] = rtemp38[i]*(7.957747154594767e-2*rtemp67[i]*rtemp67[i]/R - 7.957747154594767e-2*rtemp73[i]*rtemp73[i]/R - 7.957747154594767e-2*rtemp77[i]*rtemp77[i]/R - 7.957747154594767e-2*rtemp81[i]*rtemp81[i]/R)/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp7335(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7335 = fft(Nx,Ny,Nz,dV,rtemp38);

	rtemp38.free(); // Realspace
	{
		const int i = 0;
		ktemp7335[0] = 0.33333333333333337*R*R*R*ktemp7335[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7335[i] = std::complex<double>(ktemp7335[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7335[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7337(Nx*Ny*Nz); // RS
	rtemp7337 = ifft(Nx,Ny,Nz,dV,ktemp7335);

	ktemp7335.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7337[i] = rtemp7332[i] + 4451.013030010399*rtemp7337[i];
	}

	rtemp7332.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp49[i] = rtemp49[i]*(7.957747154594767e-2*rtemp67[i]*rtemp67[i]/R - 7.957747154594767e-2*rtemp73[i]*rtemp73[i]/R - 7.957747154594767e-2*rtemp77[i]*rtemp77[i]/R - 7.957747154594767e-2*rtemp81[i]*rtemp81[i]/R)/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	ComplexVector ktemp7340(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7340 = fft(Nx,Ny,Nz,dV,rtemp49);

	rtemp49.free(); // Realspace
	{
		const int i = 0;
		ktemp7340[0] = 0.33333333333333337*R*R*R*ktemp7340[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7340[i] = std::complex<double>(ktemp7340[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7340[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7342(Nx*Ny*Nz); // RS
	rtemp7342 = ifft(Nx,Ny,Nz,dV,ktemp7340);

	ktemp7340.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7342[i] = rtemp7337[i] + 3480.640595023736*rtemp7342[i];
	}

	rtemp7337.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp81[i] = rtemp60[i]*(7.957747154594767e-2*rtemp67[i]*rtemp67[i]/R - 7.957747154594767e-2*rtemp73[i]*rtemp73[i]/R - 7.957747154594767e-2*rtemp77[i]*rtemp77[i]/R - 7.957747154594767e-2*rtemp81[i]*rtemp81[i]/R)/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	rtemp77.free(); // Realspace
	rtemp73.free(); // Realspace
	rtemp67.free(); // Realspace
	rtemp60.free(); // Realspace
	ComplexVector ktemp7345(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7345 = fft(Nx,Ny,Nz,dV,rtemp81);

	rtemp81.free(); // Realspace
	{
		const int i = 0;
		ktemp7345[0] = 0.33333333333333337*R*R*R*ktemp7345[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7345[i] = std::complex<double>(ktemp7345[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7345[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7347(Nx*Ny*Nz); // RS
	rtemp7347 = ifft(Nx,Ny,Nz,dV,ktemp7345);

	ktemp7345.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7347[i] = rtemp7342[i] - 1984.4017075391882*rtemp7347[i];
	}

	rtemp7342.free(); // Realspace
	Vector rtemp7349(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = log(1.0 - 1.0*n3[i]);
		const double t2 = 1.0/(1.0 - 1.0*n3[i]);
		rtemp7349[i] = rtemp6259[i]*(t2*(8.841941282883075e-3 + (1.768388256576615e-2*t2 - 1.768388256576615e-2*1.0/n3[i])*(n3[i] + t1/(t2*t2))) - 8.841941282883075e-3 - 1.768388256576615e-2*t1);
	}

	ComplexVector ktemp7350(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7350 = fft(Nx,Ny,Nz,dV,rtemp7349);

	rtemp7349.free(); // Realspace
	{
		const int i = 0;
		ktemp7350[0] = 0.33333333333333337*R*R*R*ktemp7350[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7350[i] = std::complex<double>(ktemp7350[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7350[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7352(Nx*Ny*Nz); // RS
	rtemp7352 = ifft(Nx,Ny,Nz,dV,ktemp7350);

	ktemp7350.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7352[i] = rtemp7347[i] + 325.4418800364269*rtemp7352[i];
	}

	rtemp7347.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6259[i] = rtemp6259[i]*(1.768388256576615e-2*1.0/(1.0 - 1.0*n3[i]) - 1.768388256576615e-2*1.0/n3[i]);
	}

	ComplexVector ktemp7355(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7355 = fft(Nx,Ny,Nz,dV,rtemp6259);

	rtemp6259.free(); // Realspace
	{
		const int i = 0;
		ktemp7355[0] = 0.33333333333333337*R*R*R*ktemp7355[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7355[i] = std::complex<double>(ktemp7355[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7355[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7357(Nx*Ny*Nz); // RS
	rtemp7357 = ifft(Nx,Ny,Nz,dV,ktemp7355);

	ktemp7355.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7357[i] = rtemp7352[i] + 325.4418800364269*rtemp7357[i];
	}

	rtemp7352.free(); // Realspace
	Vector rtemp7359(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = log(1.0 - 1.0*n3[i]);
		const double t2 = 1.0/(1.0 - 1.0*n3[i]);
		rtemp7359[i] = rtemp6284[i]*(t2*(8.841941282883075e-3 + (1.768388256576615e-2*t2 - 1.768388256576615e-2*1.0/n3[i])*(n3[i] + t1/(t2*t2))) - 8.841941282883075e-3 - 1.768388256576615e-2*t1);
	}

	ComplexVector ktemp7360(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7360 = fft(Nx,Ny,Nz,dV,rtemp7359);

	rtemp7359.free(); // Realspace
	{
		const int i = 0;
		ktemp7360[0] = 0.33333333333333337*R*R*R*ktemp7360[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7360[i] = std::complex<double>(ktemp7360[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7360[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7362(Nx*Ny*Nz); // RS
	rtemp7362 = ifft(Nx,Ny,Nz,dV,ktemp7360);

	ktemp7360.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7362[i] = rtemp7357[i] - 964.4192298640455*rtemp7362[i];
	}

	rtemp7357.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6284[i] = rtemp6284[i]*(1.768388256576615e-2*1.0/(1.0 - 1.0*n3[i]) - 1.768388256576615e-2*1.0/n3[i]);
	}

	ComplexVector ktemp7365(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7365 = fft(Nx,Ny,Nz,dV,rtemp6284);

	rtemp6284.free(); // Realspace
	{
		const int i = 0;
		ktemp7365[0] = 0.33333333333333337*R*R*R*ktemp7365[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7365[i] = std::complex<double>(ktemp7365[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7365[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7367(Nx*Ny*Nz); // RS
	rtemp7367 = ifft(Nx,Ny,Nz,dV,ktemp7365);

	ktemp7365.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7367[i] = rtemp7362[i] - 964.4192298640455*rtemp7367[i];
	}

	rtemp7362.free(); // Realspace
	Vector rtemp7369(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = log(1.0 - 1.0*n3[i]);
		const double t2 = 1.0/(1.0 - 1.0*n3[i]);
		rtemp7369[i] = rtemp6309[i]*(t2*(8.841941282883075e-3 + (1.768388256576615e-2*t2 - 1.768388256576615e-2*1.0/n3[i])*(n3[i] + t1/(t2*t2))) - 8.841941282883075e-3 - 1.768388256576615e-2*t1);
	}

	ComplexVector ktemp7370(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7370 = fft(Nx,Ny,Nz,dV,rtemp7369);

	rtemp7369.free(); // Realspace
	{
		const int i = 0;
		ktemp7370[0] = 0.33333333333333337*R*R*R*ktemp7370[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7370[i] = std::complex<double>(ktemp7370[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7370[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7372(Nx*Ny*Nz); // RS
	rtemp7372 = ifft(Nx,Ny,Nz,dV,ktemp7370);

	ktemp7370.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7372[i] = rtemp7367[i] + 642.946153242697*rtemp7372[i];
	}

	rtemp7367.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6309[i] = rtemp6309[i]*(1.768388256576615e-2*1.0/(1.0 - 1.0*n3[i]) - 1.768388256576615e-2*1.0/n3[i]);
	}

	ComplexVector ktemp7375(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7375 = fft(Nx,Ny,Nz,dV,rtemp6309);

	rtemp6309.free(); // Realspace
	{
		const int i = 0;
		ktemp7375[0] = 0.33333333333333337*R*R*R*ktemp7375[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7375[i] = std::complex<double>(ktemp7375[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7375[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7377(Nx*Ny*Nz); // RS
	rtemp7377 = ifft(Nx,Ny,Nz,dV,ktemp7375);

	ktemp7375.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7377[i] = rtemp7372[i] + 642.946153242697*rtemp7377[i];
	}

	rtemp7372.free(); // Realspace
	Vector rtemp7379(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = log(1.0 - 1.0*n3[i]);
		const double t2 = 1.0/(1.0 - 1.0*n3[i]);
		rtemp7379[i] = rtemp6334[i]*(t2*(8.841941282883075e-3 + (1.768388256576615e-2*t2 - 1.768388256576615e-2*1.0/n3[i])*(n3[i] + t1/(t2*t2))) - 8.841941282883075e-3 - 1.768388256576615e-2*t1);
	}

	ComplexVector ktemp7380(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7380 = fft(Nx,Ny,Nz,dV,rtemp7379);

	rtemp7379.free(); // Realspace
	{
		const int i = 0;
		ktemp7380[0] = 0.33333333333333337*R*R*R*ktemp7380[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7380[i] = std::complex<double>(ktemp7380[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7380[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7382(Nx*Ny*Nz); // RS
	rtemp7382 = ifft(Nx,Ny,Nz,dV,ktemp7380);

	ktemp7380.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7382[i] = rtemp7377[i] - 1412.894015767902*rtemp7382[i];
	}

	rtemp7377.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6334[i] = rtemp6334[i]*(1.768388256576615e-2*1.0/(1.0 - 1.0*n3[i]) - 1.768388256576615e-2*1.0/n3[i]);
	}

	ComplexVector ktemp7385(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7385 = fft(Nx,Ny,Nz,dV,rtemp6334);

	rtemp6334.free(); // Realspace
	{
		const int i = 0;
		ktemp7385[0] = 0.33333333333333337*R*R*R*ktemp7385[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7385[i] = std::complex<double>(ktemp7385[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7385[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7387(Nx*Ny*Nz); // RS
	rtemp7387 = ifft(Nx,Ny,Nz,dV,ktemp7385);

	ktemp7385.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7387[i] = rtemp7382[i] - 1412.894015767902*rtemp7387[i];
	}

	rtemp7382.free(); // Realspace
	Vector rtemp7389(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = log(1.0 - 1.0*n3[i]);
		const double t2 = 1.0/(1.0 - 1.0*n3[i]);
		rtemp7389[i] = rtemp6359[i]*(t2*(8.841941282883075e-3 + (1.768388256576615e-2*t2 - 1.768388256576615e-2*1.0/n3[i])*(n3[i] + t1/(t2*t2))) - 8.841941282883075e-3 - 1.768388256576615e-2*t1);
	}

	ComplexVector ktemp7390(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7390 = fft(Nx,Ny,Nz,dV,rtemp7389);

	rtemp7389.free(); // Realspace
	{
		const int i = 0;
		ktemp7390[0] = 0.33333333333333337*R*R*R*ktemp7390[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7390[i] = std::complex<double>(ktemp7390[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7390[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7392(Nx*Ny*Nz); // RS
	rtemp7392 = ifft(Nx,Ny,Nz,dV,ktemp7390);

	ktemp7390.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7392[i] = rtemp7387[i] + 5810.328199674744*rtemp7392[i];
	}

	rtemp7387.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6359[i] = rtemp6359[i]*(1.768388256576615e-2*1.0/(1.0 - 1.0*n3[i]) - 1.768388256576615e-2*1.0/n3[i]);
	}

	ComplexVector ktemp7395(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7395 = fft(Nx,Ny,Nz,dV,rtemp6359);

	rtemp6359.free(); // Realspace
	{
		const int i = 0;
		ktemp7395[0] = 0.33333333333333337*R*R*R*ktemp7395[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7395[i] = std::complex<double>(ktemp7395[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7395[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7397(Nx*Ny*Nz); // RS
	rtemp7397 = ifft(Nx,Ny,Nz,dV,ktemp7395);

	ktemp7395.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7397[i] = rtemp7392[i] + 5810.328199674744*rtemp7397[i];
	}

	rtemp7392.free(); // Realspace
	Vector rtemp7399(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = log(1.0 - 1.0*n3[i]);
		const double t2 = 1.0/(1.0 - 1.0*n3[i]);
		rtemp7399[i] = rtemp6384[i]*(t2*(8.841941282883075e-3 + (1.768388256576615e-2*t2 - 1.768388256576615e-2*1.0/n3[i])*(n3[i] + t1/(t2*t2))) - 8.841941282883075e-3 - 1.768388256576615e-2*t1);
	}

	ComplexVector ktemp7400(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7400 = fft(Nx,Ny,Nz,dV,rtemp7399);

	rtemp7399.free(); // Realspace
	{
		const int i = 0;
		ktemp7400[0] = 0.33333333333333337*R*R*R*ktemp7400[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7400[i] = std::complex<double>(ktemp7400[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7400[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7402(Nx*Ny*Nz); // RS
	rtemp7402 = ifft(Nx,Ny,Nz,dV,ktemp7400);

	ktemp7400.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7402[i] = rtemp7397[i] - 4151.368372171983*rtemp7402[i];
	}

	rtemp7397.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6384[i] = rtemp6384[i]*(1.768388256576615e-2*1.0/(1.0 - 1.0*n3[i]) - 1.768388256576615e-2*1.0/n3[i]);
	}

	ComplexVector ktemp7405(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7405 = fft(Nx,Ny,Nz,dV,rtemp6384);

	rtemp6384.free(); // Realspace
	{
		const int i = 0;
		ktemp7405[0] = 0.33333333333333337*R*R*R*ktemp7405[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7405[i] = std::complex<double>(ktemp7405[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7405[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7407(Nx*Ny*Nz); // RS
	rtemp7407 = ifft(Nx,Ny,Nz,dV,ktemp7405);

	ktemp7405.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7407[i] = rtemp7402[i] - 4151.368372171983*rtemp7407[i];
	}

	rtemp7402.free(); // Realspace
	Vector rtemp7409(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = log(1.0 - 1.0*n3[i]);
		const double t2 = 1.0/(1.0 - 1.0*n3[i]);
		rtemp7409[i] = rtemp6409[i]*(t2*(8.841941282883075e-3 + (1.768388256576615e-2*t2 - 1.768388256576615e-2*1.0/n3[i])*(n3[i] + t1/(t2*t2))) - 8.841941282883075e-3 - 1.768388256576615e-2*t1);
	}

	ComplexVector ktemp7410(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7410 = fft(Nx,Ny,Nz,dV,rtemp7409);

	rtemp7409.free(); // Realspace
	{
		const int i = 0;
		ktemp7410[0] = 0.33333333333333337*R*R*R*ktemp7410[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7410[i] = std::complex<double>(ktemp7410[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7410[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7412(Nx*Ny*Nz); // RS
	rtemp7412 = ifft(Nx,Ny,Nz,dV,ktemp7410);

	ktemp7410.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7412[i] = rtemp7407[i] + 1.9844017075391884*rtemp7412[i];
	}

	rtemp7407.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6409[i] = rtemp6409[i]*(1.768388256576615e-2*1.0/(1.0 - 1.0*n3[i]) - 1.768388256576615e-2*1.0/n3[i]);
	}

	ComplexVector ktemp7415(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7415 = fft(Nx,Ny,Nz,dV,rtemp6409);

	rtemp6409.free(); // Realspace
	{
		const int i = 0;
		ktemp7415[0] = 0.33333333333333337*R*R*R*ktemp7415[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7415[i] = std::complex<double>(ktemp7415[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7415[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7417(Nx*Ny*Nz); // RS
	rtemp7417 = ifft(Nx,Ny,Nz,dV,ktemp7415);

	ktemp7415.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7417[i] = rtemp7412[i] + 1.9844017075391884*rtemp7417[i];
	}

	rtemp7412.free(); // Realspace
	Vector rtemp7419(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = log(1.0 - 1.0*n3[i]);
		const double t2 = 1.0/(1.0 - 1.0*n3[i]);
		rtemp7419[i] = rtemp6434[i]*(t2*(8.841941282883075e-3 + (1.768388256576615e-2*t2 - 1.768388256576615e-2*1.0/n3[i])*(n3[i] + t1/(t2*t2))) - 8.841941282883075e-3 - 1.768388256576615e-2*t1);
	}

	ComplexVector ktemp7420(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7420 = fft(Nx,Ny,Nz,dV,rtemp7419);

	rtemp7419.free(); // Realspace
	{
		const int i = 0;
		ktemp7420[0] = 0.33333333333333337*R*R*R*ktemp7420[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7420[i] = std::complex<double>(ktemp7420[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7420[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7422(Nx*Ny*Nz); // RS
	rtemp7422 = ifft(Nx,Ny,Nz,dV,ktemp7420);

	ktemp7420.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7422[i] = rtemp7417[i] - 8737.320718295045*rtemp7422[i];
	}

	rtemp7417.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6434[i] = rtemp6434[i]*(1.768388256576615e-2*1.0/(1.0 - 1.0*n3[i]) - 1.768388256576615e-2*1.0/n3[i]);
	}

	ComplexVector ktemp7425(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7425 = fft(Nx,Ny,Nz,dV,rtemp6434);

	rtemp6434.free(); // Realspace
	{
		const int i = 0;
		ktemp7425[0] = 0.33333333333333337*R*R*R*ktemp7425[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7425[i] = std::complex<double>(ktemp7425[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7425[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7427(Nx*Ny*Nz); // RS
	rtemp7427 = ifft(Nx,Ny,Nz,dV,ktemp7425);

	ktemp7425.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7427[i] = rtemp7422[i] - 8737.320718295045*rtemp7427[i];
	}

	rtemp7422.free(); // Realspace
	Vector rtemp7429(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = log(1.0 - 1.0*n3[i]);
		const double t2 = 1.0/(1.0 - 1.0*n3[i]);
		rtemp7429[i] = rtemp6459[i]*(t2*(8.841941282883075e-3 + (1.768388256576615e-2*t2 - 1.768388256576615e-2*1.0/n3[i])*(n3[i] + t1/(t2*t2))) - 8.841941282883075e-3 - 1.768388256576615e-2*t1);
	}

	ComplexVector ktemp7430(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7430 = fft(Nx,Ny,Nz,dV,rtemp7429);

	rtemp7429.free(); // Realspace
	{
		const int i = 0;
		ktemp7430[0] = 0.33333333333333337*R*R*R*ktemp7430[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7430[i] = std::complex<double>(ktemp7430[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7430[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7432(Nx*Ny*Nz); // RS
	rtemp7432 = ifft(Nx,Ny,Nz,dV,ktemp7430);

	ktemp7430.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7432[i] = rtemp7427[i] + 7381.9743520457805*rtemp7432[i];
	}

	rtemp7427.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6459[i] = rtemp6459[i]*(1.768388256576615e-2*1.0/(1.0 - 1.0*n3[i]) - 1.768388256576615e-2*1.0/n3[i]);
	}

	ComplexVector ktemp7435(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7435 = fft(Nx,Ny,Nz,dV,rtemp6459);

	rtemp6459.free(); // Realspace
	{
		const int i = 0;
		ktemp7435[0] = 0.33333333333333337*R*R*R*ktemp7435[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7435[i] = std::complex<double>(ktemp7435[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7435[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7437(Nx*Ny*Nz); // RS
	rtemp7437 = ifft(Nx,Ny,Nz,dV,ktemp7435);

	ktemp7435.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7437[i] = rtemp7432[i] + 7381.9743520457805*rtemp7437[i];
	}

	rtemp7432.free(); // Realspace
	Vector rtemp7439(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = log(1.0 - 1.0*n3[i]);
		const double t2 = 1.0/(1.0 - 1.0*n3[i]);
		rtemp7439[i] = rtemp6484[i]*(t2*(8.841941282883075e-3 + (1.768388256576615e-2*t2 - 1.768388256576615e-2*1.0/n3[i])*(n3[i] + t1/(t2*t2))) - 8.841941282883075e-3 - 1.768388256576615e-2*t1);
	}

	ComplexVector ktemp7440(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7440 = fft(Nx,Ny,Nz,dV,rtemp7439);

	rtemp7439.free(); // Realspace
	{
		const int i = 0;
		ktemp7440[0] = 0.33333333333333337*R*R*R*ktemp7440[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7440[i] = std::complex<double>(ktemp7440[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7440[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7442(Nx*Ny*Nz); // RS
	rtemp7442 = ifft(Nx,Ny,Nz,dV,ktemp7440);

	ktemp7440.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7442[i] = rtemp7437[i] - 1440.6756396734506*rtemp7442[i];
	}

	rtemp7437.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6484[i] = rtemp6484[i]*(1.768388256576615e-2*1.0/(1.0 - 1.0*n3[i]) - 1.768388256576615e-2*1.0/n3[i]);
	}

	ComplexVector ktemp7445(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7445 = fft(Nx,Ny,Nz,dV,rtemp6484);

	rtemp6484.free(); // Realspace
	{
		const int i = 0;
		ktemp7445[0] = 0.33333333333333337*R*R*R*ktemp7445[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7445[i] = std::complex<double>(ktemp7445[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7445[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7447(Nx*Ny*Nz); // RS
	rtemp7447 = ifft(Nx,Ny,Nz,dV,ktemp7445);

	ktemp7445.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7447[i] = rtemp7442[i] - 1440.6756396734506*rtemp7447[i];
	}

	rtemp7442.free(); // Realspace
	Vector rtemp7449(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = log(1.0 - 1.0*n3[i]);
		const double t2 = 1.0/(1.0 - 1.0*n3[i]);
		rtemp7449[i] = rtemp6509[i]*(t2*(8.841941282883075e-3 + (1.768388256576615e-2*t2 - 1.768388256576615e-2*1.0/n3[i])*(n3[i] + t1/(t2*t2))) - 8.841941282883075e-3 - 1.768388256576615e-2*t1);
	}

	ComplexVector ktemp7450(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7450 = fft(Nx,Ny,Nz,dV,rtemp7449);

	rtemp7449.free(); // Realspace
	{
		const int i = 0;
		ktemp7450[0] = 0.33333333333333337*R*R*R*ktemp7450[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7450[i] = std::complex<double>(ktemp7450[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7450[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7452(Nx*Ny*Nz); // RS
	rtemp7452 = ifft(Nx,Ny,Nz,dV,ktemp7450);

	ktemp7450.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7452[i] = rtemp7447[i] - 53.578846103558085*rtemp7452[i];
	}

	rtemp7447.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6509[i] = rtemp6509[i]*(1.768388256576615e-2*1.0/(1.0 - 1.0*n3[i]) - 1.768388256576615e-2*1.0/n3[i]);
	}

	ComplexVector ktemp7455(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7455 = fft(Nx,Ny,Nz,dV,rtemp6509);

	rtemp6509.free(); // Realspace
	{
		const int i = 0;
		ktemp7455[0] = 0.33333333333333337*R*R*R*ktemp7455[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7455[i] = std::complex<double>(ktemp7455[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7455[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7457(Nx*Ny*Nz); // RS
	rtemp7457 = ifft(Nx,Ny,Nz,dV,ktemp7455);

	ktemp7455.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7457[i] = rtemp7452[i] - 53.578846103558085*rtemp7457[i];
	}

	rtemp7452.free(); // Realspace
	Vector rtemp7459(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = log(1.0 - 1.0*n3[i]);
		const double t2 = 1.0/(1.0 - 1.0*n3[i]);
		rtemp7459[i] = rtemp6534[i]*(t2*(8.841941282883075e-3 + (1.768388256576615e-2*t2 - 1.768388256576615e-2*1.0/n3[i])*(n3[i] + t1/(t2*t2))) - 8.841941282883075e-3 - 1.768388256576615e-2*t1);
	}

	ComplexVector ktemp7460(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7460 = fft(Nx,Ny,Nz,dV,rtemp7459);

	rtemp7459.free(); // Realspace
	{
		const int i = 0;
		ktemp7460[0] = 0.33333333333333337*R*R*R*ktemp7460[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7460[i] = std::complex<double>(ktemp7460[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7460[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7462(Nx*Ny*Nz); // RS
	rtemp7462 = ifft(Nx,Ny,Nz,dV,ktemp7460);

	ktemp7460.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7462[i] = rtemp7457[i] - 2494.3929463767595*rtemp7462[i];
	}

	rtemp7457.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6534[i] = rtemp6534[i]*(1.768388256576615e-2*1.0/(1.0 - 1.0*n3[i]) - 1.768388256576615e-2*1.0/n3[i]);
	}

	ComplexVector ktemp7465(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7465 = fft(Nx,Ny,Nz,dV,rtemp6534);

	rtemp6534.free(); // Realspace
	{
		const int i = 0;
		ktemp7465[0] = 0.33333333333333337*R*R*R*ktemp7465[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7465[i] = std::complex<double>(ktemp7465[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7465[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7467(Nx*Ny*Nz); // RS
	rtemp7467 = ifft(Nx,Ny,Nz,dV,ktemp7465);

	ktemp7465.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7467[i] = rtemp7462[i] - 2494.3929463767595*rtemp7467[i];
	}

	rtemp7462.free(); // Realspace
	Vector rtemp7469(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = log(1.0 - 1.0*n3[i]);
		const double t2 = 1.0/(1.0 - 1.0*n3[i]);
		rtemp7469[i] = rtemp6559[i]*(t2*(8.841941282883075e-3 + (1.768388256576615e-2*t2 - 1.768388256576615e-2*1.0/n3[i])*(n3[i] + t1/(t2*t2))) - 8.841941282883075e-3 - 1.768388256576615e-2*t1);
	}

	ComplexVector ktemp7470(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7470 = fft(Nx,Ny,Nz,dV,rtemp7469);

	rtemp7469.free(); // Realspace
	{
		const int i = 0;
		ktemp7470[0] = 0.33333333333333337*R*R*R*ktemp7470[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7470[i] = std::complex<double>(ktemp7470[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7470[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7472(Nx*Ny*Nz); // RS
	rtemp7472 = ifft(Nx,Ny,Nz,dV,ktemp7470);

	ktemp7470.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7472[i] = rtemp7467[i] + 706.447007883951*rtemp7472[i];
	}

	rtemp7467.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6559[i] = rtemp6559[i]*(1.768388256576615e-2*1.0/(1.0 - 1.0*n3[i]) - 1.768388256576615e-2*1.0/n3[i]);
	}

	ComplexVector ktemp7475(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7475 = fft(Nx,Ny,Nz,dV,rtemp6559);

	rtemp6559.free(); // Realspace
	{
		const int i = 0;
		ktemp7475[0] = 0.33333333333333337*R*R*R*ktemp7475[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7475[i] = std::complex<double>(ktemp7475[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7475[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7477(Nx*Ny*Nz); // RS
	rtemp7477 = ifft(Nx,Ny,Nz,dV,ktemp7475);

	ktemp7475.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7477[i] = rtemp7472[i] + 706.447007883951*rtemp7477[i];
	}

	rtemp7472.free(); // Realspace
	Vector rtemp7479(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = log(1.0 - 1.0*n3[i]);
		const double t2 = 1.0/(1.0 - 1.0*n3[i]);
		rtemp7479[i] = rtemp6584[i]*(t2*(8.841941282883075e-3 + (1.768388256576615e-2*t2 - 1.768388256576615e-2*1.0/n3[i])*(n3[i] + t1/(t2*t2))) - 8.841941282883075e-3 - 1.768388256576615e-2*t1);
	}

	ComplexVector ktemp7480(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7480 = fft(Nx,Ny,Nz,dV,rtemp7479);

	rtemp7479.free(); // Realspace
	{
		const int i = 0;
		ktemp7480[0] = 0.33333333333333337*R*R*R*ktemp7480[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7480[i] = std::complex<double>(ktemp7480[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7480[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7482(Nx*Ny*Nz); // RS
	rtemp7482 = ifft(Nx,Ny,Nz,dV,ktemp7480);

	ktemp7480.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7482[i] = rtemp7477[i] - 205.38557673030598*rtemp7482[i];
	}

	rtemp7477.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6584[i] = rtemp6584[i]*(1.768388256576615e-2*1.0/(1.0 - 1.0*n3[i]) - 1.768388256576615e-2*1.0/n3[i]);
	}

	ComplexVector ktemp7485(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7485 = fft(Nx,Ny,Nz,dV,rtemp6584);

	rtemp6584.free(); // Realspace
	{
		const int i = 0;
		ktemp7485[0] = 0.33333333333333337*R*R*R*ktemp7485[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7485[i] = std::complex<double>(ktemp7485[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7485[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7487(Nx*Ny*Nz); // RS
	rtemp7487 = ifft(Nx,Ny,Nz,dV,ktemp7485);

	ktemp7485.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7487[i] = rtemp7482[i] - 205.38557673030598*rtemp7487[i];
	}

	rtemp7482.free(); // Realspace
	Vector rtemp7489(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = log(1.0 - 1.0*n3[i]);
		const double t2 = 1.0/(1.0 - 1.0*n3[i]);
		rtemp7489[i] = rtemp6609[i]*(t2*(8.841941282883075e-3 + (1.768388256576615e-2*t2 - 1.768388256576615e-2*1.0/n3[i])*(n3[i] + t1/(t2*t2))) - 8.841941282883075e-3 - 1.768388256576615e-2*t1);
	}

	ComplexVector ktemp7490(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7490 = fft(Nx,Ny,Nz,dV,rtemp7489);

	rtemp7489.free(); // Realspace
	{
		const int i = 0;
		ktemp7490[0] = 0.33333333333333337*R*R*R*ktemp7490[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7490[i] = std::complex<double>(ktemp7490[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7490[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7492(Nx*Ny*Nz); // RS
	rtemp7492 = ifft(Nx,Ny,Nz,dV,ktemp7490);

	ktemp7490.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7492[i] = rtemp7487[i] + 2225.5065150051996*rtemp7492[i];
	}

	rtemp7487.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6609[i] = rtemp6609[i]*(1.768388256576615e-2*1.0/(1.0 - 1.0*n3[i]) - 1.768388256576615e-2*1.0/n3[i]);
	}

	ComplexVector ktemp7495(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7495 = fft(Nx,Ny,Nz,dV,rtemp6609);

	rtemp6609.free(); // Realspace
	{
		const int i = 0;
		ktemp7495[0] = 0.33333333333333337*R*R*R*ktemp7495[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7495[i] = std::complex<double>(ktemp7495[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7495[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7497(Nx*Ny*Nz); // RS
	rtemp7497 = ifft(Nx,Ny,Nz,dV,ktemp7495);

	ktemp7495.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7497[i] = rtemp7492[i] + 2225.5065150051996*rtemp7497[i];
	}

	rtemp7492.free(); // Realspace
	Vector rtemp7499(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = log(1.0 - 1.0*n3[i]);
		const double t2 = 1.0/(1.0 - 1.0*n3[i]);
		rtemp7499[i] = rtemp6634[i]*(t2*(8.841941282883075e-3 + (1.768388256576615e-2*t2 - 1.768388256576615e-2*1.0/n3[i])*(n3[i] + t1/(t2*t2))) - 8.841941282883075e-3 - 1.768388256576615e-2*t1);
	}

	ComplexVector ktemp7500(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7500 = fft(Nx,Ny,Nz,dV,rtemp7499);

	rtemp7499.free(); // Realspace
	{
		const int i = 0;
		ktemp7500[0] = 0.33333333333333337*R*R*R*ktemp7500[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7500[i] = std::complex<double>(ktemp7500[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7500[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7502(Nx*Ny*Nz); // RS
	rtemp7502 = ifft(Nx,Ny,Nz,dV,ktemp7500);

	ktemp7500.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7502[i] = rtemp7497[i] + 1740.320297511868*rtemp7502[i];
	}

	rtemp7497.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6634[i] = rtemp6634[i]*(1.768388256576615e-2*1.0/(1.0 - 1.0*n3[i]) - 1.768388256576615e-2*1.0/n3[i]);
	}

	ComplexVector ktemp7505(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7505 = fft(Nx,Ny,Nz,dV,rtemp6634);

	rtemp6634.free(); // Realspace
	{
		const int i = 0;
		ktemp7505[0] = 0.33333333333333337*R*R*R*ktemp7505[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7505[i] = std::complex<double>(ktemp7505[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7505[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7507(Nx*Ny*Nz); // RS
	rtemp7507 = ifft(Nx,Ny,Nz,dV,ktemp7505);

	ktemp7505.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7507[i] = rtemp7502[i] + 1740.320297511868*rtemp7507[i];
	}

	rtemp7502.free(); // Realspace
	Vector rtemp7509(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = log(1.0 - 1.0*n3[i]);
		const double t2 = 1.0/(1.0 - 1.0*n3[i]);
		rtemp7509[i] = rtemp6659[i]*(t2*(8.841941282883075e-3 + (1.768388256576615e-2*t2 - 1.768388256576615e-2*1.0/n3[i])*(n3[i] + t1/(t2*t2))) - 8.841941282883075e-3 - 1.768388256576615e-2*t1);
	}

	ComplexVector ktemp7510(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7510 = fft(Nx,Ny,Nz,dV,rtemp7509);

	rtemp7509.free(); // Realspace
	{
		const int i = 0;
		ktemp7510[0] = 0.33333333333333337*R*R*R*ktemp7510[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7510[i] = std::complex<double>(ktemp7510[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7510[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7512(Nx*Ny*Nz); // RS
	rtemp7512 = ifft(Nx,Ny,Nz,dV,ktemp7510);

	ktemp7510.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7512[i] = rtemp7507[i] - 992.2008537695941*rtemp7512[i];
	}

	rtemp7507.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp6659[i] = rtemp6659[i]*(1.768388256576615e-2*1.0/(1.0 - 1.0*n3[i]) - 1.768388256576615e-2*1.0/n3[i]);
	}

	ComplexVector ktemp7515(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7515 = fft(Nx,Ny,Nz,dV,rtemp6659);

	rtemp6659.free(); // Realspace
	{
		const int i = 0;
		ktemp7515[0] = 0.33333333333333337*R*R*R*ktemp7515[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7515[i] = std::complex<double>(ktemp7515[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7515[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7517(Nx*Ny*Nz); // RS
	rtemp7517 = ifft(Nx,Ny,Nz,dV,ktemp7515);

	ktemp7515.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7517[i] = rtemp7512[i] - 992.2008537695941*rtemp7517[i];
	}

	rtemp7512.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp120[i] = rtemp120[i]/(R*R*R);
	}

	ComplexVector ktemp7520(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7520 = fft(Nx,Ny,Nz,dV,rtemp120);

	rtemp120.free(); // Realspace
	{
		const int i = 0;
		ktemp7520[0] = R*R*ktemp7520[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp7520[i] = std::complex<double>(ktemp7520[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp7520[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp7522(Nx*Ny*Nz); // RS
	rtemp7522 = ifft(Nx,Ny,Nz,dV,ktemp7520);

	ktemp7520.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7522[i] = rtemp7522[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp7524(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7524 = fft(Nx,Ny,Nz,dV,rtemp7522);

	rtemp7522.free(); // Realspace
	{
		const int i = 0;
		ktemp7524[0] = 0.33333333333333337*R*R*R*ktemp7524[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7524[i] = std::complex<double>(ktemp7524[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7524[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7526(Nx*Ny*Nz); // RS
	rtemp7526 = ifft(Nx,Ny,Nz,dV,ktemp7524);

	ktemp7524.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7526[i] = rtemp7517[i] - 51.795683896916955*rtemp7526[i];
	}

	rtemp7517.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp129[i] = rtemp129[i]/(R*R*R);
	}

	ComplexVector ktemp7529(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7529 = fft(Nx,Ny,Nz,dV,rtemp129);

	rtemp129.free(); // Realspace
	{
		const int i = 0;
		ktemp7529[0] = R*R*ktemp7529[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp7529[i] = std::complex<double>(ktemp7529[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp7529[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp7531(Nx*Ny*Nz); // RS
	rtemp7531 = ifft(Nx,Ny,Nz,dV,ktemp7529);

	ktemp7529.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7531[i] = rtemp7531[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp7533(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7533 = fft(Nx,Ny,Nz,dV,rtemp7531);

	rtemp7531.free(); // Realspace
	{
		const int i = 0;
		ktemp7533[0] = 0.33333333333333337*R*R*R*ktemp7533[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7533[i] = std::complex<double>(ktemp7533[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7533[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7535(Nx*Ny*Nz); // RS
	rtemp7535 = ifft(Nx,Ny,Nz,dV,ktemp7533);

	ktemp7533.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7535[i] = rtemp7526[i] + 153.4920876457417*rtemp7535[i];
	}

	rtemp7526.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp138[i] = rtemp138[i]/(R*R*R);
	}

	ComplexVector ktemp7538(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7538 = fft(Nx,Ny,Nz,dV,rtemp138);

	rtemp138.free(); // Realspace
	{
		const int i = 0;
		ktemp7538[0] = R*R*ktemp7538[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp7538[i] = std::complex<double>(ktemp7538[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp7538[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp7540(Nx*Ny*Nz); // RS
	rtemp7540 = ifft(Nx,Ny,Nz,dV,ktemp7538);

	ktemp7538.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7540[i] = rtemp7540[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp7542(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7542 = fft(Nx,Ny,Nz,dV,rtemp7540);

	rtemp7540.free(); // Realspace
	{
		const int i = 0;
		ktemp7542[0] = 0.33333333333333337*R*R*R*ktemp7542[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7542[i] = std::complex<double>(ktemp7542[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7542[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7544(Nx*Ny*Nz); // RS
	rtemp7544 = ifft(Nx,Ny,Nz,dV,ktemp7542);

	ktemp7542.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7544[i] = rtemp7535[i] - 102.32805843049447*rtemp7544[i];
	}

	rtemp7535.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp13[i] = rtemp13[i]/(R*R*R);
	}

	ComplexVector ktemp7547(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7547 = fft(Nx,Ny,Nz,dV,rtemp13);

	rtemp13.free(); // Realspace
	{
		const int i = 0;
		ktemp7547[0] = R*R*ktemp7547[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp7547[i] = std::complex<double>(ktemp7547[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp7547[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp7549(Nx*Ny*Nz); // RS
	rtemp7549 = ifft(Nx,Ny,Nz,dV,ktemp7547);

	ktemp7547.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7549[i] = rtemp7549[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp7551(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7551 = fft(Nx,Ny,Nz,dV,rtemp7549);

	rtemp7549.free(); // Realspace
	{
		const int i = 0;
		ktemp7551[0] = 0.33333333333333337*R*R*R*ktemp7551[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7551[i] = std::complex<double>(ktemp7551[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7551[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7553(Nx*Ny*Nz); // RS
	rtemp7553 = ifft(Nx,Ny,Nz,dV,ktemp7551);

	ktemp7551.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7553[i] = rtemp7544[i] - 0.31582734083485947*rtemp7553[i];
	}

	rtemp7544.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp147[i] = rtemp147[i]/(R*R*R);
	}

	ComplexVector ktemp7556(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7556 = fft(Nx,Ny,Nz,dV,rtemp147);

	rtemp147.free(); // Realspace
	{
		const int i = 0;
		ktemp7556[0] = R*R*ktemp7556[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp7556[i] = std::complex<double>(ktemp7556[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp7556[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp7558(Nx*Ny*Nz); // RS
	rtemp7558 = ifft(Nx,Ny,Nz,dV,ktemp7556);

	ktemp7556.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7558[i] = rtemp7558[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp7560(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7560 = fft(Nx,Ny,Nz,dV,rtemp7558);

	rtemp7558.free(); // Realspace
	{
		const int i = 0;
		ktemp7560[0] = 0.33333333333333337*R*R*R*ktemp7560[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7560[i] = std::complex<double>(ktemp7560[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7560[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7562(Nx*Ny*Nz); // RS
	rtemp7562 = ifft(Nx,Ny,Nz,dV,ktemp7560);

	ktemp7560.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7562[i] = rtemp7553[i] + 224.8690666744199*rtemp7562[i];
	}

	rtemp7553.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp156[i] = rtemp156[i]/(R*R*R);
	}

	ComplexVector ktemp7565(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7565 = fft(Nx,Ny,Nz,dV,rtemp156);

	rtemp156.free(); // Realspace
	{
		const int i = 0;
		ktemp7565[0] = R*R*ktemp7565[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp7565[i] = std::complex<double>(ktemp7565[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp7565[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp7567(Nx*Ny*Nz); // RS
	rtemp7567 = ifft(Nx,Ny,Nz,dV,ktemp7565);

	ktemp7565.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7567[i] = rtemp7567[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp7569(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7569 = fft(Nx,Ny,Nz,dV,rtemp7567);

	rtemp7567.free(); // Realspace
	{
		const int i = 0;
		ktemp7569[0] = 0.33333333333333337*R*R*R*ktemp7569[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7569[i] = std::complex<double>(ktemp7569[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7569[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7571(Nx*Ny*Nz); // RS
	rtemp7571 = ifft(Nx,Ny,Nz,dV,ktemp7569);

	ktemp7569.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7571[i] = rtemp7562[i] - 924.7424539644685*rtemp7571[i];
	}

	rtemp7562.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp165[i] = rtemp165[i]/(R*R*R);
	}

	ComplexVector ktemp7574(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7574 = fft(Nx,Ny,Nz,dV,rtemp165);

	rtemp165.free(); // Realspace
	{
		const int i = 0;
		ktemp7574[0] = R*R*ktemp7574[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp7574[i] = std::complex<double>(ktemp7574[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp7574[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp7576(Nx*Ny*Nz); // RS
	rtemp7576 = ifft(Nx,Ny,Nz,dV,ktemp7574);

	ktemp7574.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7576[i] = rtemp7576[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp7578(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7578 = fft(Nx,Ny,Nz,dV,rtemp7576);

	rtemp7576.free(); // Realspace
	{
		const int i = 0;
		ktemp7578[0] = 0.33333333333333337*R*R*R*ktemp7578[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7578[i] = std::complex<double>(ktemp7578[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7578[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7580(Nx*Ny*Nz); // RS
	rtemp7580 = ifft(Nx,Ny,Nz,dV,ktemp7578);

	ktemp7578.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7580[i] = rtemp7571[i] + 660.710797026526*rtemp7580[i];
	}

	rtemp7571.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp174[i] = rtemp174[i]/(R*R*R);
	}

	ComplexVector ktemp7583(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7583 = fft(Nx,Ny,Nz,dV,rtemp174);

	rtemp174.free(); // Realspace
	{
		const int i = 0;
		ktemp7583[0] = R*R*ktemp7583[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp7583[i] = std::complex<double>(ktemp7583[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp7583[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp7585(Nx*Ny*Nz); // RS
	rtemp7585 = ifft(Nx,Ny,Nz,dV,ktemp7583);

	ktemp7583.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7585[i] = rtemp7585[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp7587(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7587 = fft(Nx,Ny,Nz,dV,rtemp7585);

	rtemp7585.free(); // Realspace
	{
		const int i = 0;
		ktemp7587[0] = 0.33333333333333337*R*R*R*ktemp7587[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7587[i] = std::complex<double>(ktemp7587[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7587[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7589(Nx*Ny*Nz); // RS
	rtemp7589 = ifft(Nx,Ny,Nz,dV,ktemp7587);

	ktemp7587.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7589[i] = rtemp7580[i] + 1390.5877816958862*rtemp7589[i];
	}

	rtemp7580.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp183[i] = rtemp183[i]/(R*R*R);
	}

	ComplexVector ktemp7592(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7592 = fft(Nx,Ny,Nz,dV,rtemp183);

	rtemp183.free(); // Realspace
	{
		const int i = 0;
		ktemp7592[0] = R*R*ktemp7592[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp7592[i] = std::complex<double>(ktemp7592[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp7592[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp7594(Nx*Ny*Nz); // RS
	rtemp7594 = ifft(Nx,Ny,Nz,dV,ktemp7592);

	ktemp7592.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7594[i] = rtemp7594[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp7596(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7596 = fft(Nx,Ny,Nz,dV,rtemp7594);

	rtemp7594.free(); // Realspace
	{
		const int i = 0;
		ktemp7596[0] = 0.33333333333333337*R*R*R*ktemp7596[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7596[i] = std::complex<double>(ktemp7596[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7596[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7598(Nx*Ny*Nz); // RS
	rtemp7598 = ifft(Nx,Ny,Nz,dV,ktemp7596);

	ktemp7596.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7598[i] = rtemp7589[i] - 1174.8777079056772*rtemp7598[i];
	}

	rtemp7589.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp192[i] = rtemp192[i]/(R*R*R);
	}

	ComplexVector ktemp7601(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7601 = fft(Nx,Ny,Nz,dV,rtemp192);

	rtemp192.free(); // Realspace
	{
		const int i = 0;
		ktemp7601[0] = R*R*ktemp7601[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp7601[i] = std::complex<double>(ktemp7601[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp7601[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp7603(Nx*Ny*Nz); // RS
	rtemp7603 = ifft(Nx,Ny,Nz,dV,ktemp7601);

	ktemp7601.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7603[i] = rtemp7603[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp7605(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7605 = fft(Nx,Ny,Nz,dV,rtemp7603);

	rtemp7603.free(); // Realspace
	{
		const int i = 0;
		ktemp7605[0] = 0.33333333333333337*R*R*R*ktemp7605[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7605[i] = std::complex<double>(ktemp7605[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7605[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7607(Nx*Ny*Nz); // RS
	rtemp7607 = ifft(Nx,Ny,Nz,dV,ktemp7605);

	ktemp7605.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7607[i] = rtemp7598[i] + 229.29064944610795*rtemp7607[i];
	}

	rtemp7598.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp201[i] = rtemp201[i]/(R*R*R);
	}

	ComplexVector ktemp7610(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7610 = fft(Nx,Ny,Nz,dV,rtemp201);

	rtemp201.free(); // Realspace
	{
		const int i = 0;
		ktemp7610[0] = R*R*ktemp7610[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp7610[i] = std::complex<double>(ktemp7610[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp7610[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp7612(Nx*Ny*Nz); // RS
	rtemp7612 = ifft(Nx,Ny,Nz,dV,ktemp7610);

	ktemp7610.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7612[i] = rtemp7612[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp7614(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7614 = fft(Nx,Ny,Nz,dV,rtemp7612);

	rtemp7612.free(); // Realspace
	{
		const int i = 0;
		ktemp7614[0] = 0.33333333333333337*R*R*R*ktemp7614[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7614[i] = std::complex<double>(ktemp7614[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7614[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7616(Nx*Ny*Nz); // RS
	rtemp7616 = ifft(Nx,Ny,Nz,dV,ktemp7614);

	ktemp7614.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7616[i] = rtemp7607[i] + 8.527338202541205*rtemp7616[i];
	}

	rtemp7607.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp210[i] = rtemp210[i]/(R*R*R);
	}

	ComplexVector ktemp7619(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7619 = fft(Nx,Ny,Nz,dV,rtemp210);

	rtemp210.free(); // Realspace
	{
		const int i = 0;
		ktemp7619[0] = R*R*ktemp7619[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp7619[i] = std::complex<double>(ktemp7619[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp7619[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp7621(Nx*Ny*Nz); // RS
	rtemp7621 = ifft(Nx,Ny,Nz,dV,ktemp7619);

	ktemp7619.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7621[i] = rtemp7621[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp7623(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7623 = fft(Nx,Ny,Nz,dV,rtemp7621);

	rtemp7621.free(); // Realspace
	{
		const int i = 0;
		ktemp7623[0] = 0.33333333333333337*R*R*R*ktemp7623[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7623[i] = std::complex<double>(ktemp7623[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7623[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7625(Nx*Ny*Nz); // RS
	rtemp7625 = ifft(Nx,Ny,Nz,dV,ktemp7623);

	ktemp7623.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7625[i] = rtemp7616[i] + 396.99496742941835*rtemp7625[i];
	}

	rtemp7616.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp219[i] = rtemp219[i]/(R*R*R);
	}

	ComplexVector ktemp7628(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7628 = fft(Nx,Ny,Nz,dV,rtemp219);

	rtemp219.free(); // Realspace
	{
		const int i = 0;
		ktemp7628[0] = R*R*ktemp7628[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp7628[i] = std::complex<double>(ktemp7628[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp7628[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp7630(Nx*Ny*Nz); // RS
	rtemp7630 = ifft(Nx,Ny,Nz,dV,ktemp7628);

	ktemp7628.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7630[i] = rtemp7630[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp7632(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7632 = fft(Nx,Ny,Nz,dV,rtemp7630);

	rtemp7630.free(); // Realspace
	{
		const int i = 0;
		ktemp7632[0] = 0.33333333333333337*R*R*R*ktemp7632[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7632[i] = std::complex<double>(ktemp7632[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7632[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7634(Nx*Ny*Nz); // RS
	rtemp7634 = ifft(Nx,Ny,Nz,dV,ktemp7632);

	ktemp7632.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7634[i] = rtemp7625[i] - 112.43453333720996*rtemp7634[i];
	}

	rtemp7625.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp24[i] = rtemp24[i]/(R*R*R);
	}

	ComplexVector ktemp7637(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7637 = fft(Nx,Ny,Nz,dV,rtemp24);

	rtemp24.free(); // Realspace
	{
		const int i = 0;
		ktemp7637[0] = R*R*ktemp7637[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp7637[i] = std::complex<double>(ktemp7637[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp7637[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp7639(Nx*Ny*Nz); // RS
	rtemp7639 = ifft(Nx,Ny,Nz,dV,ktemp7637);

	ktemp7637.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7639[i] = rtemp7639[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp7641(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7641 = fft(Nx,Ny,Nz,dV,rtemp7639);

	rtemp7639.free(); // Realspace
	{
		const int i = 0;
		ktemp7641[0] = 0.33333333333333337*R*R*R*ktemp7641[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7641[i] = std::complex<double>(ktemp7641[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7641[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7643(Nx*Ny*Nz); // RS
	rtemp7643 = ifft(Nx,Ny,Nz,dV,ktemp7641);

	ktemp7641.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7643[i] = rtemp7634[i] + 32.688129776407955*rtemp7643[i];
	}

	rtemp7634.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp35[i] = rtemp35[i]/(R*R*R);
	}

	ComplexVector ktemp7646(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7646 = fft(Nx,Ny,Nz,dV,rtemp35);

	rtemp35.free(); // Realspace
	{
		const int i = 0;
		ktemp7646[0] = R*R*ktemp7646[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp7646[i] = std::complex<double>(ktemp7646[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp7646[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp7648(Nx*Ny*Nz); // RS
	rtemp7648 = ifft(Nx,Ny,Nz,dV,ktemp7646);

	ktemp7646.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7648[i] = rtemp7648[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp7650(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7650 = fft(Nx,Ny,Nz,dV,rtemp7648);

	rtemp7648.free(); // Realspace
	{
		const int i = 0;
		ktemp7650[0] = 0.33333333333333337*R*R*R*ktemp7650[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7650[i] = std::complex<double>(ktemp7650[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7650[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7652(Nx*Ny*Nz); // RS
	rtemp7652 = ifft(Nx,Ny,Nz,dV,ktemp7650);

	ktemp7650.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7652[i] = rtemp7643[i] - 354.20036274629484*rtemp7652[i];
	}

	rtemp7643.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp46[i] = rtemp46[i]/(R*R*R);
	}

	ComplexVector ktemp7655(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7655 = fft(Nx,Ny,Nz,dV,rtemp46);

	rtemp46.free(); // Realspace
	{
		const int i = 0;
		ktemp7655[0] = R*R*ktemp7655[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp7655[i] = std::complex<double>(ktemp7655[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp7655[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp7657(Nx*Ny*Nz); // RS
	rtemp7657 = ifft(Nx,Ny,Nz,dV,ktemp7655);

	ktemp7655.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7657[i] = rtemp7657[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp7659(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7659 = fft(Nx,Ny,Nz,dV,rtemp7657);

	rtemp7657.free(); // Realspace
	{
		const int i = 0;
		ktemp7659[0] = 0.33333333333333337*R*R*R*ktemp7659[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7659[i] = std::complex<double>(ktemp7659[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7659[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7661(Nx*Ny*Nz); // RS
	rtemp7661 = ifft(Nx,Ny,Nz,dV,ktemp7659);

	ktemp7659.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7661[i] = rtemp7652[i] - 276.9805779121717*rtemp7661[i];
	}

	rtemp7652.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp57[i] = rtemp57[i]/(R*R*R);
	}

	ComplexVector ktemp7664(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7664 = fft(Nx,Ny,Nz,dV,rtemp57);

	rtemp57.free(); // Realspace
	{
		const int i = 0;
		ktemp7664[0] = R*R*ktemp7664[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp7664[i] = std::complex<double>(ktemp7664[i].real()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1,
				ktemp7664[i].imag()*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	Vector rtemp7666(Nx*Ny*Nz); // RS
	rtemp7666 = ifft(Nx,Ny,Nz,dV,ktemp7664);

	ktemp7664.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7666[i] = rtemp7666[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp7668(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7668 = fft(Nx,Ny,Nz,dV,rtemp7666);

	rtemp7666.free(); // Realspace
	{
		const int i = 0;
		ktemp7668[0] = 0.33333333333333337*R*R*R*ktemp7668[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7668[i] = std::complex<double>(ktemp7668[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7668[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7670(Nx*Ny*Nz); // RS
	rtemp7670 = ifft(Nx,Ny,Nz,dV,ktemp7668);

	ktemp7668.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7670[i] = rtemp7661[i] + 157.91367041742973*rtemp7670[i];
	}

	rtemp7661.free(); // Realspace
	{
		const int i = 0;
		ktemp1235[0] = -2.0*R*ktemp1235[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1235[i] = std::complex<double>(ktemp1235[i].real()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)),
				ktemp1235[i].imag()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)));
	}

	Vector rtemp7673(Nx*Ny*Nz); // RS
	rtemp7673 = ifft(Nx,Ny,Nz,dV,ktemp1235);

	ktemp1235.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7673[i] = rtemp7673[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp7675(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7675 = fft(Nx,Ny,Nz,dV,rtemp7673);

	rtemp7673.free(); // Realspace
	{
		const int i = 0;
		ktemp7675[0] = 0.33333333333333337*R*R*R*ktemp7675[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7675[i] = std::complex<double>(ktemp7675[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7675[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7677(Nx*Ny*Nz); // RS
	rtemp7677 = ifft(Nx,Ny,Nz,dV,ktemp7675);

	ktemp7675.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7677[i] = rtemp7670[i] - 25.897841948458478*rtemp7677[i];
	}

	rtemp7670.free(); // Realspace
	{
		const int i = 0;
		ktemp1244[0] = -2.0*R*ktemp1244[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1244[i] = std::complex<double>(ktemp1244[i].real()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)),
				ktemp1244[i].imag()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)));
	}

	Vector rtemp7680(Nx*Ny*Nz); // RS
	rtemp7680 = ifft(Nx,Ny,Nz,dV,ktemp1244);

	ktemp1244.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7680[i] = rtemp7680[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp7682(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7682 = fft(Nx,Ny,Nz,dV,rtemp7680);

	rtemp7680.free(); // Realspace
	{
		const int i = 0;
		ktemp7682[0] = 0.33333333333333337*R*R*R*ktemp7682[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7682[i] = std::complex<double>(ktemp7682[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7682[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7684(Nx*Ny*Nz); // RS
	rtemp7684 = ifft(Nx,Ny,Nz,dV,ktemp7682);

	ktemp7682.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7684[i] = rtemp7677[i] + 76.74604382287085*rtemp7684[i];
	}

	rtemp7677.free(); // Realspace
	{
		const int i = 0;
		ktemp1253[0] = -2.0*R*ktemp1253[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1253[i] = std::complex<double>(ktemp1253[i].real()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)),
				ktemp1253[i].imag()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)));
	}

	Vector rtemp7687(Nx*Ny*Nz); // RS
	rtemp7687 = ifft(Nx,Ny,Nz,dV,ktemp1253);

	ktemp1253.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7687[i] = rtemp7687[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp7689(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7689 = fft(Nx,Ny,Nz,dV,rtemp7687);

	rtemp7687.free(); // Realspace
	{
		const int i = 0;
		ktemp7689[0] = 0.33333333333333337*R*R*R*ktemp7689[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7689[i] = std::complex<double>(ktemp7689[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7689[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7691(Nx*Ny*Nz); // RS
	rtemp7691 = ifft(Nx,Ny,Nz,dV,ktemp7689);

	ktemp7689.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7691[i] = rtemp7684[i] - 51.16402921524723*rtemp7691[i];
	}

	rtemp7684.free(); // Realspace
	{
		const int i = 0;
		ktemp1262[0] = -2.0*R*ktemp1262[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1262[i] = std::complex<double>(ktemp1262[i].real()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)),
				ktemp1262[i].imag()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)));
	}

	Vector rtemp7694(Nx*Ny*Nz); // RS
	rtemp7694 = ifft(Nx,Ny,Nz,dV,ktemp1262);

	ktemp1262.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7694[i] = rtemp7694[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp7696(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7696 = fft(Nx,Ny,Nz,dV,rtemp7694);

	rtemp7694.free(); // Realspace
	{
		const int i = 0;
		ktemp7696[0] = 0.33333333333333337*R*R*R*ktemp7696[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7696[i] = std::complex<double>(ktemp7696[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7696[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7698(Nx*Ny*Nz); // RS
	rtemp7698 = ifft(Nx,Ny,Nz,dV,ktemp7696);

	ktemp7696.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7698[i] = rtemp7691[i] - 0.15791367041742974*rtemp7698[i];
	}

	rtemp7691.free(); // Realspace
	{
		const int i = 0;
		ktemp1271[0] = -2.0*R*ktemp1271[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1271[i] = std::complex<double>(ktemp1271[i].real()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)),
				ktemp1271[i].imag()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)));
	}

	Vector rtemp7701(Nx*Ny*Nz); // RS
	rtemp7701 = ifft(Nx,Ny,Nz,dV,ktemp1271);

	ktemp1271.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7701[i] = rtemp7701[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp7703(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7703 = fft(Nx,Ny,Nz,dV,rtemp7701);

	rtemp7701.free(); // Realspace
	{
		const int i = 0;
		ktemp7703[0] = 0.33333333333333337*R*R*R*ktemp7703[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7703[i] = std::complex<double>(ktemp7703[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7703[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7705(Nx*Ny*Nz); // RS
	rtemp7705 = ifft(Nx,Ny,Nz,dV,ktemp7703);

	ktemp7703.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7705[i] = rtemp7698[i] + 112.43453333720996*rtemp7705[i];
	}

	rtemp7698.free(); // Realspace
	{
		const int i = 0;
		ktemp1280[0] = -2.0*R*ktemp1280[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1280[i] = std::complex<double>(ktemp1280[i].real()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)),
				ktemp1280[i].imag()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)));
	}

	Vector rtemp7708(Nx*Ny*Nz); // RS
	rtemp7708 = ifft(Nx,Ny,Nz,dV,ktemp1280);

	ktemp1280.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7708[i] = rtemp7708[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp7710(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7710 = fft(Nx,Ny,Nz,dV,rtemp7708);

	rtemp7708.free(); // Realspace
	{
		const int i = 0;
		ktemp7710[0] = 0.33333333333333337*R*R*R*ktemp7710[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7710[i] = std::complex<double>(ktemp7710[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7710[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7712(Nx*Ny*Nz); // RS
	rtemp7712 = ifft(Nx,Ny,Nz,dV,ktemp7710);

	ktemp7710.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7712[i] = rtemp7705[i] - 462.37122698223425*rtemp7712[i];
	}

	rtemp7705.free(); // Realspace
	{
		const int i = 0;
		ktemp1289[0] = -2.0*R*ktemp1289[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1289[i] = std::complex<double>(ktemp1289[i].real()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)),
				ktemp1289[i].imag()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)));
	}

	Vector rtemp7715(Nx*Ny*Nz); // RS
	rtemp7715 = ifft(Nx,Ny,Nz,dV,ktemp1289);

	ktemp1289.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7715[i] = rtemp7715[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp7717(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7717 = fft(Nx,Ny,Nz,dV,rtemp7715);

	rtemp7715.free(); // Realspace
	{
		const int i = 0;
		ktemp7717[0] = 0.33333333333333337*R*R*R*ktemp7717[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7717[i] = std::complex<double>(ktemp7717[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7717[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7719(Nx*Ny*Nz); // RS
	rtemp7719 = ifft(Nx,Ny,Nz,dV,ktemp7717);

	ktemp7717.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7719[i] = rtemp7712[i] + 330.355398513263*rtemp7719[i];
	}

	rtemp7712.free(); // Realspace
	{
		const int i = 0;
		ktemp1298[0] = -2.0*R*ktemp1298[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1298[i] = std::complex<double>(ktemp1298[i].real()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)),
				ktemp1298[i].imag()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)));
	}

	Vector rtemp7722(Nx*Ny*Nz); // RS
	rtemp7722 = ifft(Nx,Ny,Nz,dV,ktemp1298);

	ktemp1298.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7722[i] = rtemp7722[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp7724(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7724 = fft(Nx,Ny,Nz,dV,rtemp7722);

	rtemp7722.free(); // Realspace
	{
		const int i = 0;
		ktemp7724[0] = 0.33333333333333337*R*R*R*ktemp7724[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7724[i] = std::complex<double>(ktemp7724[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7724[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7726(Nx*Ny*Nz); // RS
	rtemp7726 = ifft(Nx,Ny,Nz,dV,ktemp7724);

	ktemp7724.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7726[i] = rtemp7719[i] + 695.2938908479431*rtemp7726[i];
	}

	rtemp7719.free(); // Realspace
	{
		const int i = 0;
		ktemp1307[0] = -2.0*R*ktemp1307[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1307[i] = std::complex<double>(ktemp1307[i].real()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)),
				ktemp1307[i].imag()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)));
	}

	Vector rtemp7729(Nx*Ny*Nz); // RS
	rtemp7729 = ifft(Nx,Ny,Nz,dV,ktemp1307);

	ktemp1307.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7729[i] = rtemp7729[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp7731(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7731 = fft(Nx,Ny,Nz,dV,rtemp7729);

	rtemp7729.free(); // Realspace
	{
		const int i = 0;
		ktemp7731[0] = 0.33333333333333337*R*R*R*ktemp7731[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7731[i] = std::complex<double>(ktemp7731[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7731[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7733(Nx*Ny*Nz); // RS
	rtemp7733 = ifft(Nx,Ny,Nz,dV,ktemp7731);

	ktemp7731.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7733[i] = rtemp7726[i] - 587.4388539528386*rtemp7733[i];
	}

	rtemp7726.free(); // Realspace
	{
		const int i = 0;
		ktemp1316[0] = -2.0*R*ktemp1316[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1316[i] = std::complex<double>(ktemp1316[i].real()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)),
				ktemp1316[i].imag()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)));
	}

	Vector rtemp7736(Nx*Ny*Nz); // RS
	rtemp7736 = ifft(Nx,Ny,Nz,dV,ktemp1316);

	ktemp1316.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7736[i] = rtemp7736[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp7738(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7738 = fft(Nx,Ny,Nz,dV,rtemp7736);

	rtemp7736.free(); // Realspace
	{
		const int i = 0;
		ktemp7738[0] = 0.33333333333333337*R*R*R*ktemp7738[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7738[i] = std::complex<double>(ktemp7738[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7738[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7740(Nx*Ny*Nz); // RS
	rtemp7740 = ifft(Nx,Ny,Nz,dV,ktemp7738);

	ktemp7738.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7740[i] = rtemp7733[i] + 114.64532472305397*rtemp7740[i];
	}

	rtemp7733.free(); // Realspace
	{
		const int i = 0;
		ktemp1325[0] = -2.0*R*ktemp1325[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1325[i] = std::complex<double>(ktemp1325[i].real()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)),
				ktemp1325[i].imag()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)));
	}

	Vector rtemp7743(Nx*Ny*Nz); // RS
	rtemp7743 = ifft(Nx,Ny,Nz,dV,ktemp1325);

	ktemp1325.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7743[i] = rtemp7743[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp7745(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7745 = fft(Nx,Ny,Nz,dV,rtemp7743);

	rtemp7743.free(); // Realspace
	{
		const int i = 0;
		ktemp7745[0] = 0.33333333333333337*R*R*R*ktemp7745[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7745[i] = std::complex<double>(ktemp7745[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7745[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7747(Nx*Ny*Nz); // RS
	rtemp7747 = ifft(Nx,Ny,Nz,dV,ktemp7745);

	ktemp7745.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7747[i] = rtemp7740[i] + 4.263669101270603*rtemp7747[i];
	}

	rtemp7740.free(); // Realspace
	{
		const int i = 0;
		ktemp1334[0] = -2.0*R*ktemp1334[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1334[i] = std::complex<double>(ktemp1334[i].real()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)),
				ktemp1334[i].imag()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)));
	}

	Vector rtemp7750(Nx*Ny*Nz); // RS
	rtemp7750 = ifft(Nx,Ny,Nz,dV,ktemp1334);

	ktemp1334.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7750[i] = rtemp7750[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp7752(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7752 = fft(Nx,Ny,Nz,dV,rtemp7750);

	rtemp7750.free(); // Realspace
	{
		const int i = 0;
		ktemp7752[0] = 0.33333333333333337*R*R*R*ktemp7752[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7752[i] = std::complex<double>(ktemp7752[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7752[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7754(Nx*Ny*Nz); // RS
	rtemp7754 = ifft(Nx,Ny,Nz,dV,ktemp7752);

	ktemp7752.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7754[i] = rtemp7747[i] + 198.49748371470918*rtemp7754[i];
	}

	rtemp7747.free(); // Realspace
	{
		const int i = 0;
		ktemp1343[0] = -2.0*R*ktemp1343[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1343[i] = std::complex<double>(ktemp1343[i].real()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)),
				ktemp1343[i].imag()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)));
	}

	Vector rtemp7757(Nx*Ny*Nz); // RS
	rtemp7757 = ifft(Nx,Ny,Nz,dV,ktemp1343);

	ktemp1343.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7757[i] = rtemp7757[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp7759(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7759 = fft(Nx,Ny,Nz,dV,rtemp7757);

	rtemp7757.free(); // Realspace
	{
		const int i = 0;
		ktemp7759[0] = 0.33333333333333337*R*R*R*ktemp7759[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7759[i] = std::complex<double>(ktemp7759[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7759[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7761(Nx*Ny*Nz); // RS
	rtemp7761 = ifft(Nx,Ny,Nz,dV,ktemp7759);

	ktemp7759.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7761[i] = rtemp7754[i] - 56.21726666860498*rtemp7761[i];
	}

	rtemp7754.free(); // Realspace
	{
		const int i = 0;
		ktemp1352[0] = -2.0*R*ktemp1352[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1352[i] = std::complex<double>(ktemp1352[i].real()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)),
				ktemp1352[i].imag()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)));
	}

	Vector rtemp7764(Nx*Ny*Nz); // RS
	rtemp7764 = ifft(Nx,Ny,Nz,dV,ktemp1352);

	ktemp1352.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7764[i] = rtemp7764[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp7766(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7766 = fft(Nx,Ny,Nz,dV,rtemp7764);

	rtemp7764.free(); // Realspace
	{
		const int i = 0;
		ktemp7766[0] = 0.33333333333333337*R*R*R*ktemp7766[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7766[i] = std::complex<double>(ktemp7766[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7766[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7768(Nx*Ny*Nz); // RS
	rtemp7768 = ifft(Nx,Ny,Nz,dV,ktemp7766);

	ktemp7766.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7768[i] = rtemp7761[i] + 16.344064888203977*rtemp7768[i];
	}

	rtemp7761.free(); // Realspace
	{
		const int i = 0;
		ktemp1361[0] = -2.0*R*ktemp1361[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1361[i] = std::complex<double>(ktemp1361[i].real()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)),
				ktemp1361[i].imag()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)));
	}

	Vector rtemp7771(Nx*Ny*Nz); // RS
	rtemp7771 = ifft(Nx,Ny,Nz,dV,ktemp1361);

	ktemp1361.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7771[i] = rtemp7771[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp7773(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7773 = fft(Nx,Ny,Nz,dV,rtemp7771);

	rtemp7771.free(); // Realspace
	{
		const int i = 0;
		ktemp7773[0] = 0.33333333333333337*R*R*R*ktemp7773[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7773[i] = std::complex<double>(ktemp7773[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7773[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7775(Nx*Ny*Nz); // RS
	rtemp7775 = ifft(Nx,Ny,Nz,dV,ktemp7773);

	ktemp7773.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7775[i] = rtemp7768[i] - 177.10018137314742*rtemp7775[i];
	}

	rtemp7768.free(); // Realspace
	{
		const int i = 0;
		ktemp1370[0] = -2.0*R*ktemp1370[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1370[i] = std::complex<double>(ktemp1370[i].real()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)),
				ktemp1370[i].imag()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)));
	}

	Vector rtemp7778(Nx*Ny*Nz); // RS
	rtemp7778 = ifft(Nx,Ny,Nz,dV,ktemp1370);

	ktemp1370.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7778[i] = rtemp7778[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp7780(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7780 = fft(Nx,Ny,Nz,dV,rtemp7778);

	rtemp7778.free(); // Realspace
	{
		const int i = 0;
		ktemp7780[0] = 0.33333333333333337*R*R*R*ktemp7780[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7780[i] = std::complex<double>(ktemp7780[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7780[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7782(Nx*Ny*Nz); // RS
	rtemp7782 = ifft(Nx,Ny,Nz,dV,ktemp7780);

	ktemp7780.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7782[i] = rtemp7775[i] - 138.49028895608586*rtemp7782[i];
	}

	rtemp7775.free(); // Realspace
	{
		const int i = 0;
		ktemp1379[0] = -2.0*R*ktemp1379[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1379[i] = std::complex<double>(ktemp1379[i].real()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)),
				ktemp1379[i].imag()*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2)));
	}

	Vector rtemp7785(Nx*Ny*Nz); // RS
	rtemp7785 = ifft(Nx,Ny,Nz,dV,ktemp1379);

	ktemp1379.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7785[i] = rtemp7785[i]/(1.0 - 1.0*n3[i]);
	}

	n3.free(); // Realspace
	ComplexVector ktemp7787(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7787 = fft(Nx,Ny,Nz,dV,rtemp7785);

	rtemp7785.free(); // Realspace
	{
		const int i = 0;
		ktemp7787[0] = 0.33333333333333337*R*R*R*ktemp7787[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7787[i] = std::complex<double>(ktemp7787[i].real()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				ktemp7787[i].imag()*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp7789(Nx*Ny*Nz); // RS
	rtemp7789 = ifft(Nx,Ny,Nz,dV,ktemp7787);

	ktemp7787.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7789[i] = rtemp7782[i] + 78.95683520871486*rtemp7789[i];
	}

	rtemp7782.free(); // Realspace
	Vector rtemp7791(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7791[i] = rtemp116[i]*n[i]/rtemp12[i];
	}

	ComplexVector ktemp7792(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7792 = fft(Nx,Ny,Nz,dV,rtemp7791);

	rtemp7791.free(); // Realspace
	Vector rtemp7793(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = kT*rtemp116[i]*n[i]/(kT*rtemp12[i]*n[i]);
		const double t2 = (t1 - 1.0)*(t1 - 1.0);
		const double t3 = sqrt(t2)*t2;
		rtemp7793[i] = n[i]*(2.7e-2*t2 - 1.754*t1 + 0.838*t3 + 1.754 - 0.178*pow(t3, 1.3333333333333333));
	}

	ComplexVector ktemp7794(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7794 = fft(Nx,Ny,Nz,dV,rtemp7793);

	rtemp7793.free(); // Realspace
	Vector rtemp7795(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = kT*rtemp116[i]*n[i]/(kT*rtemp12[i]*n[i]);
		const double t2 = (t1 - 1.0)*(t1 - 1.0);
		const double t3 = sqrt(t2)*t2;
		rtemp7795[i] = n[i]*(4.403*t2 - 2.243*t1 - 2.48*t3 + 2.243 + 0.363*pow(t3, 1.3333333333333333));
	}

	ComplexVector ktemp7796(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7796 = fft(Nx,Ny,Nz,dV,rtemp7795);

	rtemp7795.free(); // Realspace
	Vector rtemp7797(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = kT*rtemp116[i]*n[i]/(kT*rtemp12[i]*n[i]);
		const double t2 = (t1 - 1.0)*(t1 - 1.0);
		const double t3 = sqrt(t2)*t2;
		rtemp7797[i] = n[i]*(0.207*t1 + 0.712*t2 - 1.952*t3 - 0.207 + 1.046*pow(t3, 1.3333333333333333));
	}

	ComplexVector ktemp7798(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7798 = fft(Nx,Ny,Nz,dV,rtemp7797);

	rtemp7797.free(); // Realspace
	Vector rtemp7799(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = kT*rtemp116[i]*n[i]/(kT*rtemp12[i]*n[i]);
		const double t2 = (t1 - 1.0)*(t1 - 1.0);
		const double t3 = sqrt(t2)*t2;
		rtemp7799[i] = n[i]*(0.324*t3 - 0.164*t2 - 2.0e-3*t1 + 2.0e-3 - 0.162*pow(t3, 1.3333333333333333));
	}

	ComplexVector ktemp7800(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7800 = fft(Nx,Ny,Nz,dV,rtemp7799);

	rtemp7799.free(); // Realspace
	{
		const int i = 0;
		ktemp7800[0] = ktemp7792[i]*epsilon*sigma*sigma*sigma*(4.188790204786391 - 4.188790204786391*lambda*lambda*lambda) + ktemp7794[i]*epsilon*sigma*sigma*sigma*(lambda*lambda*lambda*(4.188790204786391 - 3.141592653589794*lambda) - 1.0471975511965976) + ktemp7796[i]*epsilon*sigma*sigma*sigma*(0.418879020478639 + lambda*lambda*lambda*(lambda*(6.283185307179588 - 2.513274122871834*lambda) - 4.188790204786391)) + ktemp7798[i]*epsilon*sigma*sigma*sigma*(lambda*lambda*lambda*(4.188790204786391 + lambda*(lambda*(7.539822368615504 - 2.0943951023931935*lambda) - 9.42477796076938)) - 0.20943951023931967) + ktemp7800[i]*epsilon*sigma*sigma*sigma*(0.11967972013675394 + lambda*lambda*lambda*(lambda*(12.566370614359176 + lambda*(lambda*(8.377580409572774 - 1.7951958020513124*lambda) - 15.079644737231009)) - 4.188790204786391));
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sin(lambda*sigma*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2])) - sin(sigma*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]));
		const double t2 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t3 = cos(lambda*sigma*sqrt(t2));
		const double t4 = cos(sigma*sqrt(t2));
		const double t5 = lambda - 1.0;
		const double t6 = t4/(sigma*t2*t2);
		const double t7 = sin(sigma*sqrt(t2));
		const double t8 = sin(lambda*sigma*sqrt(t2));
		const double t9 = 1.0 - 2.0*lambda;
		const double t10 = sigma*sigma*t2*t5*t5;
		const double t11 = 4.0*lambda - 1.0;
		ktemp7800[i] = std::complex<double>(ktemp7792[i].real()*(-12.566370614359172*epsilon*(t1/(sqrt(t2)*t2) + (sigma*t4 - 1.0*lambda*sigma*t3)/t2)) + ktemp7794[i].real()*(-12.566370614359172*epsilon*(t3*(2.0 - lambda*sigma*sigma*t2*t5)/(sigma*t2*t2) - 2.0*t6 - (t7 + t8*t9)/(sqrt(t2)*t2))) + ktemp7796[i].real()*(-12.566370614359172*epsilon*(6.0*t7/(sigma*sigma*sqrt(t2)*t2*t2) - 2.0*t6 + t8*(sigma*sigma*t2*(3.0*lambda*lambda - 1.0*t11) - 6.0)/(sigma*sigma*sqrt(t2)*t2*t2) - t3*(4.0 + lambda*(t10 - 6.0))/(sigma*t2*t2))) + ktemp7798[i].real()*(-12.566370614359172*epsilon*(t3*(-6.0*sigma*sigma*t2*t5*t9 - 1.0*lambda*(sigma*sigma)*(sigma*sigma)*t2*t2*t5*t5*t5 - 24.0)/(sigma*sigma*sigma*t2*t2*t2) + 24.0*t4/(sigma*sigma*sigma*t2*t2*t2) + (6.0*t7 + t8*(18.0 - 24.0*lambda + t10*t11))/(sigma*sigma*sqrt(t2)*t2*t2))) + ktemp7800[i].real()*(-12.566370614359172*epsilon*(120.0*t1/((sigma*sigma)*(sigma*sigma)*sqrt(t2)*t2*t2*t2) + (24.0*t4 - t3*(120.0*lambda - 96.0 + lambda*t10*t10 - 4.0*t10*(5.0*lambda - 2.0)))/(sigma*sigma*sigma*t2*t2*t2) + t5*t8*(36.0 - 60.0*lambda + t10*(5.0*lambda - 1.0))/(sigma*sigma*sqrt(t2)*t2*t2))),
				ktemp7792[i].imag()*(-12.566370614359172*epsilon*(t1/(sqrt(t2)*t2) + (sigma*t4 - 1.0*lambda*sigma*t3)/t2)) + ktemp7794[i].imag()*(-12.566370614359172*epsilon*(t3*(2.0 - lambda*sigma*sigma*t2*t5)/(sigma*t2*t2) - 2.0*t6 - (t7 + t8*t9)/(sqrt(t2)*t2))) + ktemp7796[i].imag()*(-12.566370614359172*epsilon*(6.0*t7/(sigma*sigma*sqrt(t2)*t2*t2) - 2.0*t6 + t8*(sigma*sigma*t2*(3.0*lambda*lambda - 1.0*t11) - 6.0)/(sigma*sigma*sqrt(t2)*t2*t2) - t3*(4.0 + lambda*(t10 - 6.0))/(sigma*t2*t2))) + ktemp7798[i].imag()*(-12.566370614359172*epsilon*(t3*(-6.0*sigma*sigma*t2*t5*t9 - 1.0*lambda*(sigma*sigma)*(sigma*sigma)*t2*t2*t5*t5*t5 - 24.0)/(sigma*sigma*sigma*t2*t2*t2) + 24.0*t4/(sigma*sigma*sigma*t2*t2*t2) + (6.0*t7 + t8*(18.0 - 24.0*lambda + t10*t11))/(sigma*sigma*sqrt(t2)*t2*t2))) + ktemp7800[i].imag()*(-12.566370614359172*epsilon*(120.0*t1/((sigma*sigma)*(sigma*sigma)*sqrt(t2)*t2*t2*t2) + (24.0*t4 - t3*(120.0*lambda - 96.0 + lambda*t10*t10 - 4.0*t10*(5.0*lambda - 2.0)))/(sigma*sigma*sigma*t2*t2*t2) + t5*t8*(36.0 - 60.0*lambda + t10*(5.0*lambda - 1.0))/(sigma*sigma*sqrt(t2)*t2*t2))));
	}

	ktemp7798.free(); // KSpace
	ktemp7796.free(); // KSpace
	ktemp7794.free(); // KSpace
	ktemp7792.free(); // KSpace
	Vector rtemp7802(Nx*Ny*Nz); // RS
	rtemp7802 = ifft(Nx,Ny,Nz,dV,ktemp7800);

	ktemp7800.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7802[i] = rtemp7789[i] + 0.5*dV*epsilon*rtemp7802[i];
	}

	rtemp7789.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = dV*kT;
		const double t2 = kT*rtemp116[i]*n[i]*rtemp10[i]/(kT*rtemp12[i]*n[i]);
		const double t3 = kT*rtemp116[i]*n[i]*rtemp23[i]/(kT*rtemp12[i]*n[i]);
		const double t4 = kT*rtemp116[i]*n[i]*rtemp34[i]/(kT*rtemp12[i]*n[i]);
		const double t5 = kT*rtemp116[i]*n[i]*rtemp45[i]/(kT*rtemp12[i]*n[i]);
		const double t6 = kT*rtemp116[i]*n[i];
		const double t7 = t6/(kT*rtemp12[i]*n[i]) - 1.0;
		const double t8 = t6/(kT*rtemp12[i]*n[i]);
		const double t9 = rtemp10[i]*rtemp116[i]/rtemp12[i];
		const double t10 = t7*t7;
		const double t11 = sqrt(t10)*t10;
		const double t12 = pow(t11, 1.3333333333333333);
		const double t13 = rtemp116[i]*rtemp23[i]/rtemp12[i];
		const double t14 = rtemp116[i]*rtemp34[i]/rtemp12[i];
		const double t15 = rtemp116[i]*rtemp45[i]/rtemp12[i];
		grad_n[i] = t1 - 1.3006193585861743*t13 + 14.093184644003811*t14 + 11.020707028792994*t15 - 1.2566370614359173e-2*t2 + 1.3006193585861743*t3 - 14.093184644003811*t4 - 11.020707028792994*t5 + 1.2566370614359173e-2*t9 + rtemp7802[i] + dV*(Vext[i] - 1.0*mu) + t1*(log(2.646476976618268e-6*n[i]/(sqrt(kT)*kT)) - 1.0) + 36.794333158843656*t10*t13 + 46.74689868541612*t10*t14 - 15.795927862249478*t10*t15 + 6.107256118578558*t10*t2 - 36.794333158843656*t10*t3 - 46.74689868541612*t10*t4 + 15.795927862249478*t10*t5 - 6.107256118578558*t10*t9 - 26.28884732523939*t11*t13 - 9.123185066024758*t11*t14 + 4.473627938711865*t11*t15 - 4.071504079052372*t11*t2 + 26.28884732523939*t11*t3 + 9.123185066024758*t11*t4 - 4.473627938711865*t11*t5 + 4.071504079052372*t11*t9 - 8.94725587742373*t13*t7 - 55.329729815023434*t14*t7 - 0.33929200658769765*t15*t7 - 2.0608847807549044*t2*t7 + 8.94725587742373*t3*t7 + 55.329729815023434*t4*t7 + 0.33929200658769765*t5*t7 + 2.0608847807549044*t7*t9 - 6.283185307179586*rtemp10[i]*(0.324*t11 - 0.164*t10 - 0.162*t12 - 2.0e-3*t7) - 6.283185307179586*rtemp116[i]*rtemp56[i]/rtemp12[i] - 6.283185307179586*rtemp23[i]*(0.712*t10 - 1.952*t11 + 1.046*t12 + 0.207*t7) - 6.283185307179586*rtemp34[i]*(4.403*t10 - 2.48*t11 + 0.363*t12 - 2.243*t7) - 6.283185307179586*rtemp45[i]*(2.7e-2*t10 + 0.838*t11 - 0.178*t12 - 1.754*t7);
	}

	rtemp7802.free(); // Realspace
	rtemp116.free(); // Realspace
	rtemp56.free(); // Realspace
	rtemp45.free(); // Realspace
	rtemp34.free(); // Realspace
	rtemp23.free(); // Realspace
	rtemp12.free(); // Realspace
	rtemp10.free(); // Realspace

	return output;
}

bool SW_liquid::have_preconditioner() const {
	return true;
}

EnergyGradAndPrecond SW_liquid::energy_grad_and_precond() const {
	EnergyGradAndPrecond egp;
	egp.energy = energy();
	egp.grad = grad();
	egp.precond = Vector(data.get_size());
	egp.precond = egp.grad;
	Vector output(egp.precond); // output is identical to egp.precond
	int sofar = 0;
	double Nx = data[sofar];
	double *grad_Nx = &output[sofar++];
	double Ny = data[sofar];
	double *grad_Ny = &output[sofar++];
	double Nz = data[sofar];
	double *grad_Nz = &output[sofar++];
	double R = data[sofar];
	double *grad_R = &output[sofar++];
	double a1 = data[sofar];
	double *grad_a1 = &output[sofar++];
	double a2 = data[sofar];
	double *grad_a2 = &output[sofar++];
	double a3 = data[sofar];
	double *grad_a3 = &output[sofar++];
	Vector Vext = data.slice(sofar,Nx*Ny*Nz);
	Vector grad_Vext = output.slice(sofar,Nx*Ny*Nz);
	sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz);
	Vector grad_n = output.slice(sofar,Nx*Ny*Nz);
	sofar += Nx*Ny*Nz;
	double epsilon = data[sofar];
	double *grad_epsilon = &output[sofar++];
	double kT = data[sofar];
	double *grad_kT = &output[sofar++];
	double lambda = data[sofar];
	double *grad_lambda = &output[sofar++];
	double mu = data[sofar];
	double *grad_mu = &output[sofar++];
	double sigma = data[sofar];
	double *grad_sigma = &output[sofar++];
	
	return egp;
}

void SW_liquid::printme(const char *prefix) const {
	printf("%s          ESW =", prefix);
	print_double("", ESW);
	printf("\n");
	printf("%s       Fideal =", prefix);
	print_double("", Fideal);
	printf("\n");
	printf("%s     external =", prefix);
	print_double("", external);
	printf("\n");
	printf("%s       kTphi1 =", prefix);
	print_double("", kTphi1);
	printf("\n");
	printf("%s       kTphi2 =", prefix);
	print_double("", kTphi2);
	printf("\n");
	printf("%s       kTphi3 =", prefix);
	print_double("", kTphi3);
	printf("\n");
	printf("%s           sw =", prefix);
	print_double("", sw);
	printf("\n");
	printf("%s    whitebear =", prefix);
	print_double("", whitebear);
	printf("\n");
}

double SW_liquid::get_ESW() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	double 	s0 = 0;
	for (int i=0; i<Nx*Ny*Nz; i++) {
		s0 += dV*kT*n[i]*(log(2.646476976618268e-6*n[i]/(sqrt(kT)*kT)) - 1.0);
	}

	Fideal = s0;
	double 	s1 = 0;
	for (int i=0; i<Nx*Ny*Nz; i++) {
		s1 += dV*n[i]*(Vext[i] - 1.0*mu);
	}

	external = s1;
	ComplexVector ktemp2(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp2 = fft(Nx,Ny,Nz,dV,n);

	ComplexVector ktemp3(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp3[0] = (12.566370614359172*R*R)*ktemp2[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp3[i] = std::complex<double>((12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp2[i].real(),
				(12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp2[i].imag());
	}

	Vector n2(Nx*Ny*Nz); // RS
	n2 = ifft(Nx,Ny,Nz,dV,ktemp3);

	Vector rtemp5(Nx*Ny*Nz); // RS
	rtemp5 = ifft(Nx,Ny,Nz,dV,ktemp3);

	ktemp3.free(); // KSpace
	ComplexVector ktemp6(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp6[0] = ktemp2[i]*(4.188790204786391*R*R*R);
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6[i] = std::complex<double>(ktemp2[i].real()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)),
				ktemp2[i].imag()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)));
	}

	Vector n3(Nx*Ny*Nz); // RS
	n3 = ifft(Nx,Ny,Nz,dV,ktemp6);

	ktemp6.free(); // KSpace
	Vector dphitot_by_dn1(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		dphitot_by_dn1[i] = n2[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp9(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp9 = fft(Nx,Ny,Nz,dV,dphitot_by_dn1);

	dphitot_by_dn1.free(); // Realspace
	ComplexVector ktemp10(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp10[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp10[i] = std::complex<double>(-12.566370614359172*ktemp2[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp2[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector dn1v_dot_n2v_by_dn1vx(Nx*Ny*Nz); // RS
	dn1v_dot_n2v_by_dn1vx = ifft(Nx,Ny,Nz,dV,ktemp10);

	Vector rtemp12(Nx*Ny*Nz); // RS
	rtemp12 = ifft(Nx,Ny,Nz,dV,ktemp10);

	ktemp10.free(); // KSpace
	Vector dphitot_by_dn2vx(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		dphitot_by_dn2vx[i] = -7.957747154594767e-2*rtemp12[i]/R/t1 - 5.305164769729845e-2*n2[i]*rtemp12[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp14(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp14 = fft(Nx,Ny,Nz,dV,dphitot_by_dn2vx);

	dphitot_by_dn2vx.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		dn1v_dot_n2v_by_dn1vx[i] = -1.0*dn1v_dot_n2v_by_dn1vx[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp16(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp16 = fft(Nx,Ny,Nz,dV,dn1v_dot_n2v_by_dn1vx);

	dn1v_dot_n2v_by_dn1vx.free(); // Realspace
	ComplexVector ktemp17(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp17[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp17[i] = std::complex<double>(-12.566370614359172*ktemp2[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp2[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector dn1v_dot_n2v_by_dn1vy(Nx*Ny*Nz); // RS
	dn1v_dot_n2v_by_dn1vy = ifft(Nx,Ny,Nz,dV,ktemp17);

	Vector rtemp19(Nx*Ny*Nz); // RS
	rtemp19 = ifft(Nx,Ny,Nz,dV,ktemp17);

	ktemp17.free(); // KSpace
	Vector dphitot_by_dn2vy(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		dphitot_by_dn2vy[i] = -7.957747154594767e-2*rtemp19[i]/R/t1 - 5.305164769729845e-2*n2[i]*rtemp19[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp21(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp21 = fft(Nx,Ny,Nz,dV,dphitot_by_dn2vy);

	dphitot_by_dn2vy.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		dn1v_dot_n2v_by_dn1vy[i] = -1.0*dn1v_dot_n2v_by_dn1vy[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp23(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp23 = fft(Nx,Ny,Nz,dV,dn1v_dot_n2v_by_dn1vy);

	dn1v_dot_n2v_by_dn1vy.free(); // Realspace
	ComplexVector ktemp24(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp24[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp24[i] = std::complex<double>(-12.566370614359172*ktemp2[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp2[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector dn1v_dot_n2v_by_dn1vz(Nx*Ny*Nz); // RS
	dn1v_dot_n2v_by_dn1vz = ifft(Nx,Ny,Nz,dV,ktemp24);

	Vector rtemp26(Nx*Ny*Nz); // RS
	rtemp26 = ifft(Nx,Ny,Nz,dV,ktemp24);

	ktemp24.free(); // KSpace
	Vector dphitot_by_dn3(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = rtemp12[i];
		const double t3 = rtemp19[i];
		const double t4 = rtemp26[i];
		const double t5 = log(t1);
		const double t6 = 1.0/t1;
		const double t7 = 1.0/n3[i];
		dphitot_by_dn3[i] = t6*t7*t7*n2[i]*(t6*(8.841941282883075e-3 + (1.768388256576615e-2*t6 - 1.768388256576615e-2*t7)*(n3[i] + t5/(t6*t6))) - 8.841941282883075e-3 - 1.768388256576615e-2*t5)*(n2[i]*n2[i] - 3.0*t4*t4 - 3.0*t3*t3 - 3.0*t2*t2) + 7.957747154594767e-2*t6*rtemp5[i]/(R*R) + t6*t6*(7.957747154594767e-2*n2[i]*rtemp5[i]/R - 7.957747154594767e-2*t4*rtemp26[i]/R - 7.957747154594767e-2*t3*rtemp19[i]/R - 7.957747154594767e-2*t2*rtemp12[i]/R);
	}

	ComplexVector ktemp28(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp28 = fft(Nx,Ny,Nz,dV,dphitot_by_dn3);

	dphitot_by_dn3.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		dn1v_dot_n2v_by_dn1vz[i] = -1.0*dn1v_dot_n2v_by_dn1vz[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp30(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp30 = fft(Nx,Ny,Nz,dV,dn1v_dot_n2v_by_dn1vz);

	dn1v_dot_n2v_by_dn1vz.free(); // Realspace
	Vector dphitot_by_dn0(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		dphitot_by_dn0[i] = -1.0*log(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp32(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp32 = fft(Nx,Ny,Nz,dV,dphitot_by_dn0);

	dphitot_by_dn0.free(); // Realspace
	Vector dphitot_by_dn2(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		dphitot_by_dn2[i] = (n3[i] + t1*t1*log(t1))*(2.6525823848649224e-2*n2[i]*n2[i] - 2.6525823848649224e-2*rtemp12[i]*rtemp12[i] - 2.6525823848649224e-2*rtemp19[i]*rtemp19[i] - 2.6525823848649224e-2*rtemp26[i]*rtemp26[i])/(t1*t1*n3[i]*n3[i]) + 7.957747154594767e-2*rtemp5[i]/R/t1;
	}

	ComplexVector ktemp34(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp34 = fft(Nx,Ny,Nz,dV,dphitot_by_dn2);

	dphitot_by_dn2.free(); // Realspace
	Vector dphitot_by_dn2vz(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		dphitot_by_dn2vz[i] = -7.957747154594767e-2*rtemp26[i]/R/t1 - 5.305164769729845e-2*n2[i]*rtemp26[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp36(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp36 = fft(Nx,Ny,Nz,dV,dphitot_by_dn2vz);

	dphitot_by_dn2vz.free(); // Realspace
	{
		const int i = 0;
		ktemp36[0] = (((12.566370614359172*R*R)*(-0.15915494309189535*ktemp32[i]/R - 7.957747154594767e-2*ktemp9[i]) - 7.957747154594767e-2*(-25.132741228718345*R)*ktemp32[i])/R - 7.957747154594767e-2*(-25.132741228718345*R)*ktemp9[i])/R + (12.566370614359172*R*R)*ktemp28[i] - (-25.132741228718345*R)*ktemp34[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = 12.566370614359172*R*sin(R*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]))*exp(-6.0*dr*dr*(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]))/(sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]));
		const double t2 = exp(-6.0*dr*dr*(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]));
		const double t3 = R*cos(R*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2])) - sin(R*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]))/(sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]));
		const double t4 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t5 = 12.566370614359172*t2*(-1.0*sin(R*sqrt(t4))/(sqrt(t4)) - 1.0*R*cos(R*sqrt(t4)));
		double it6 = 12.566370614359172*R*k_i[0]*t2*sin(R*sqrt(t4))/(sqrt(t4));
		double it7 = 12.566370614359172*R*k_i[1]*t2*sin(R*sqrt(t4))/(sqrt(t4));
		double it8 = 12.566370614359172*R*k_i[2]*t2*sin(R*sqrt(t4))/(sqrt(t4));
		ktemp36[i] = std::complex<double>(ktemp28[i].real()*t1 - 1.0*ktemp21[i].imag()*it7 - 1.0*ktemp14[i].imag()*it6 - ktemp34[i].real()*t5 - ktemp36[i].imag()*it8 + ((-7.957747154594767e-2*ktemp9[i].real()*t1 - 7.957747154594767e-2*ktemp32[i].real()*(t5 + 2.0*t1/R) - 1.0*ktemp30[i].imag()*k_i[2]*t2*t3/t4 - 1.0*ktemp23[i].imag()*k_i[1]*t2*t3/t4 - 1.0*ktemp16[i].imag()*k_i[0]*t2*t3/t4)/R - 7.957747154594767e-2*ktemp9[i].real()*t5 - 7.957747154594767e-2*ktemp30[i].imag()*it8 - 7.957747154594767e-2*ktemp23[i].imag()*it7 - 7.957747154594767e-2*ktemp16[i].imag()*it6)/R,
				ktemp14[i].real()*it6 + ktemp21[i].real()*it7 + ktemp28[i].imag()*t1 - ktemp34[i].imag()*t5 + ktemp36[i].real()*it8 + (7.957747154594767e-2*ktemp16[i].real()*it6 + 7.957747154594767e-2*ktemp23[i].real()*it7 + 7.957747154594767e-2*ktemp30[i].real()*it8 - 7.957747154594767e-2*ktemp9[i].imag()*t5 + (ktemp16[i].real()*k_i[0]*t2*t3/t4 + ktemp23[i].real()*k_i[1]*t2*t3/t4 + ktemp30[i].real()*k_i[2]*t2*t3/t4 - 7.957747154594767e-2*ktemp32[i].imag()*(t5 + 2.0*t1/R) - 7.957747154594767e-2*ktemp9[i].imag()*t1)/R)/R);
	}

	ktemp34.free(); // KSpace
	ktemp32.free(); // KSpace
	ktemp30.free(); // KSpace
	ktemp28.free(); // KSpace
	ktemp23.free(); // KSpace
	ktemp21.free(); // KSpace
	ktemp16.free(); // KSpace
	ktemp14.free(); // KSpace
	ktemp9.free(); // KSpace
	Vector rtemp38(Nx*Ny*Nz); // RS
	rtemp38 = ifft(Nx,Ny,Nz,dV,ktemp36);

	ktemp36.free(); // KSpace
	{
		const int i = 0;
		ktemp2[0] = (50.26548245743669*R*R)*ktemp2[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp2[i] = std::complex<double>((25.132741228718345*R*sin(2.0*R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp2[i].real(),
				(25.132741228718345*R*sin(2.0*R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp2[i].imag());
	}

	Vector rtemp40(Nx*Ny*Nz); // RS
	rtemp40 = ifft(Nx,Ny,Nz,dV,ktemp2);

	ktemp2.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp40[i] = kT*rtemp38[i]*n[i]/rtemp40[i];
	}

	rtemp38.free(); // Realspace
	Vector rtemp42(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp42[i] = rtemp40[i]/kT;
	}

	ComplexVector ktemp43(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp43 = fft(Nx,Ny,Nz,dV,rtemp42);

	rtemp42.free(); // Realspace
	Vector rtemp44(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp40[i]/(kT*n[i]);
		const double t2 = t1 - 1.0;
		rtemp44[i] = n[i]*(t2*(2.7e-2*t2 + t2*(0.838*t2 - 0.178*t2*t2)) - 1.754*t2);
	}

	ComplexVector ktemp45(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp45 = fft(Nx,Ny,Nz,dV,rtemp44);

	rtemp44.free(); // Realspace
	Vector rtemp46(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp40[i]/(kT*n[i]);
		const double t2 = t1 - 1.0;
		rtemp46[i] = n[i]*(t2*(4.403*t2 + t2*(0.363*t2*t2 - 2.48*t2)) - 2.243*t2);
	}

	ComplexVector ktemp47(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp47 = fft(Nx,Ny,Nz,dV,rtemp46);

	rtemp46.free(); // Realspace
	Vector rtemp48(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp40[i]/(kT*n[i]);
		const double t2 = t1 - 1.0;
		rtemp48[i] = n[i]*(0.207*t2 + t2*(0.712*t2 + t2*(1.046*t2*t2 - 1.952*t2)));
	}

	ComplexVector ktemp49(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp49 = fft(Nx,Ny,Nz,dV,rtemp48);

	rtemp48.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp40[i]/(kT*n[i]);
		const double t2 = t1 - 1.0;
		rtemp40[i] = n[i]*(t2*(t2*(0.324*t2 - 0.162*t2*t2) - 0.164*t2) - 2.0e-3*t2);
	}

	ComplexVector ktemp51(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp51 = fft(Nx,Ny,Nz,dV,rtemp40);

	rtemp40.free(); // Realspace
	{
		const int i = 0;
		ktemp51[0] = ktemp43[i]*epsilon*sigma*sigma*sigma*(4.188790204786391 - 4.188790204786391*lambda*lambda*lambda) + ktemp45[i]*epsilon*sigma*sigma*sigma*(lambda*lambda*lambda*(4.188790204786391 - 3.141592653589794*lambda) - 1.0471975511965976) + ktemp47[i]*epsilon*sigma*sigma*sigma*(0.418879020478639 + lambda*lambda*lambda*(lambda*(6.283185307179588 - 2.513274122871834*lambda) - 4.188790204786391)) + ktemp49[i]*epsilon*sigma*sigma*sigma*(lambda*lambda*lambda*(4.188790204786391 + lambda*(lambda*(7.539822368615504 - 2.0943951023931935*lambda) - 9.42477796076938)) - 0.20943951023931967) + ktemp51[i]*epsilon*sigma*sigma*sigma*(0.11967972013675394 + lambda*lambda*lambda*(lambda*(12.566370614359176 + lambda*(lambda*(8.377580409572774 - 1.7951958020513124*lambda) - 15.079644737231009)) - 4.188790204786391));
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = cos(sigma*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]));
		const double t2 = cos(lambda*sigma*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]));
		const double t3 = sin(lambda*sigma*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2])) - sin(sigma*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]));
		const double t4 = t3/(sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]));
		const double t5 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t6 = lambda - 1.0;
		const double t7 = sin(sigma*sqrt(t5));
		const double t8 = sin(lambda*sigma*sqrt(t5));
		const double t9 = 1.0 - 2.0*lambda;
		const double t10 = sigma*sigma*t5*t6*t6;
		ktemp51[i] = std::complex<double>(ktemp43[i].real()*(-12.566370614359172*epsilon*(t4 + sigma*(t1 - lambda*t2))/t5) + ktemp45[i].real()*(-12.566370614359172*epsilon*((t2*(2.0 - lambda*sigma*sigma*t5*t6) - 2.0*t1)/(sigma*t5*t5) - (t7 + t8*t9)/(sqrt(t5)*t5))) + ktemp47[i].real()*(-12.566370614359172*epsilon*((6.0*t7/(sqrt(t5)) + t8*(sigma*sigma*t5*(1.0 + lambda*(3.0*lambda - 4.0)) - 6.0)/(sqrt(t5)))/(sigma*t5*t5) + (-1.0*t2*(4.0 + lambda*(t10 - 6.0)) - 2.0*t1)/(t5*t5))/sigma) + ktemp49[i].real()*(-12.566370614359172*epsilon*((24.0*t1 + t2*(sigma*sigma*t5*t6*(-1.0*lambda*t10 - 6.0*t9) - 24.0))/(sigma*t5*t5*t5) + (6.0*t7 + t8*(18.0 - 24.0*lambda + t10*(4.0*lambda - 1.0)))/(sqrt(t5)*t5*t5))/(sigma*sigma)) + ktemp51[i].real()*(-12.566370614359172*epsilon*((24.0*t1 + 120.0*t4/sigma - t2*(lambda*(120.0 + t10*t10) - 96.0 - 4.0*t10*(5.0*lambda - 2.0)))/(sigma*t5*t5*t5) + t6*t8*(36.0 - 60.0*lambda + t10*(5.0*lambda - 1.0))/(sqrt(t5)*t5*t5))/(sigma*sigma)),
				ktemp43[i].imag()*(-12.566370614359172*epsilon*(t4 + sigma*(t1 - lambda*t2))/t5) + ktemp45[i].imag()*(-12.566370614359172*epsilon*((t2*(2.0 - lambda*sigma*sigma*t5*t6) - 2.0*t1)/(sigma*t5*t5) - (t7 + t8*t9)/(sqrt(t5)*t5))) + ktemp47[i].imag()*(-12.566370614359172*epsilon*((6.0*t7/(sqrt(t5)) + t8*(sigma*sigma*t5*(1.0 + lambda*(3.0*lambda - 4.0)) - 6.0)/(sqrt(t5)))/(sigma*t5*t5) + (-1.0*t2*(4.0 + lambda*(t10 - 6.0)) - 2.0*t1)/(t5*t5))/sigma) + ktemp49[i].imag()*(-12.566370614359172*epsilon*((24.0*t1 + t2*(sigma*sigma*t5*t6*(-1.0*lambda*t10 - 6.0*t9) - 24.0))/(sigma*t5*t5*t5) + (6.0*t7 + t8*(18.0 - 24.0*lambda + t10*(4.0*lambda - 1.0)))/(sqrt(t5)*t5*t5))/(sigma*sigma)) + ktemp51[i].imag()*(-12.566370614359172*epsilon*((24.0*t1 + 120.0*t4/sigma - t2*(lambda*(120.0 + t10*t10) - 96.0 - 4.0*t10*(5.0*lambda - 2.0)))/(sigma*t5*t5*t5) + t6*t8*(36.0 - 60.0*lambda + t10*(5.0*lambda - 1.0))/(sqrt(t5)*t5*t5))/(sigma*sigma)));
	}

	ktemp49.free(); // KSpace
	ktemp47.free(); // KSpace
	ktemp45.free(); // KSpace
	ktemp43.free(); // KSpace
	Vector rtemp53(Nx*Ny*Nz); // RS
	rtemp53 = ifft(Nx,Ny,Nz,dV,ktemp51);

	ktemp51.free(); // KSpace
	double 	s54 = 0;
	for (int i=0; i<Nx*Ny*Nz; i++) {
		s54 += dV*rtemp53[i]*n[i];
	}

	rtemp53.free(); // Realspace
	sw = 0.5*epsilon*s54;
	double 	s55 = 0;
	for (int i=0; i<Nx*Ny*Nz; i++) {
		s55 += dV*kT*(-1.0*(7.957747154594767e-2*rtemp5[i]/(R*R))*log(1.0 - 1.0*n3[i]));
	}

	kTphi1 = s55;
	double 	s56 = 0;
	for (int i=0; i<Nx*Ny*Nz; i++) {
		s56 += dV*kT*((7.957747154594767e-2*rtemp5[i]/R)*n2[i] - 1.0*((7.957747154594767e-2*rtemp12[i]/R)*rtemp12[i] + (7.957747154594767e-2*rtemp19[i]/R)*rtemp19[i] + (7.957747154594767e-2*rtemp26[i]/R)*rtemp26[i]))/(1.0 - 1.0*n3[i]);
	}

	rtemp5.free(); // Realspace
	kTphi2 = s56;
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp19[i] = rtemp12[i]*rtemp12[i] + rtemp19[i]*rtemp19[i];
	}

	rtemp12.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp19[i] = rtemp19[i] + rtemp26[i]*rtemp26[i];
	}

	rtemp26.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp19[i] = n2[i]*(n2[i]*n2[i] - 3.0*rtemp19[i]);
	}

	n2.free(); // Realspace
	double 	s60 = 0;
	for (int i=0; i<Nx*Ny*Nz; i++) {
		s60 += dV*kT*(8.841941282883075e-3*rtemp19[i]*(n3[i] + log(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]))/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i])));
	}

	rtemp19.free(); // Realspace
	n3.free(); // Realspace
	kTphi3 = s60;
	whitebear = kTphi1 + kTphi2 + kTphi3;
	ESW = Fideal + external + sw + whitebear;
	return ESW;

}

double SW_liquid::get_Fideal() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	double 	s0 = 0;
	for (int i=0; i<Nx*Ny*Nz; i++) {
		s0 += dV*kT*n[i]*(log(2.646476976618268e-6*n[i]/(sqrt(kT)*kT)) - 1.0);
	}

	Fideal = s0;
	return Fideal;

}

Vector SW_liquid::get_dAdR() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	ComplexVector ktemp1(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp1[0] = (12.566370614359172*R*R)*ktemp0[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1[i] = std::complex<double>((12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].real(),
				(12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].imag());
	}

	Vector n2(Nx*Ny*Nz); // RS
	n2 = ifft(Nx,Ny,Nz,dV,ktemp1);

	Vector rtemp3(Nx*Ny*Nz); // RS
	rtemp3 = ifft(Nx,Ny,Nz,dV,ktemp1);

	ktemp1.free(); // KSpace
	ComplexVector ktemp4(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp4[0] = ktemp0[i]*(4.188790204786391*R*R*R);
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4[i] = std::complex<double>(ktemp0[i].real()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)),
				ktemp0[i].imag()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)));
	}

	Vector n3(Nx*Ny*Nz); // RS
	n3 = ifft(Nx,Ny,Nz,dV,ktemp4);

	ktemp4.free(); // KSpace
	Vector dphitot_by_dn1(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		dphitot_by_dn1[i] = n2[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp7(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7 = fft(Nx,Ny,Nz,dV,dphitot_by_dn1);

	dphitot_by_dn1.free(); // Realspace
	ComplexVector ktemp8(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp8[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp8[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector dn1v_dot_n2v_by_dn1vx(Nx*Ny*Nz); // RS
	dn1v_dot_n2v_by_dn1vx = ifft(Nx,Ny,Nz,dV,ktemp8);

	Vector rtemp10(Nx*Ny*Nz); // RS
	rtemp10 = ifft(Nx,Ny,Nz,dV,ktemp8);

	ktemp8.free(); // KSpace
	Vector dphitot_by_dn2vx(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		dphitot_by_dn2vx[i] = -7.957747154594767e-2*rtemp10[i]/R/t1 - 5.305164769729845e-2*n2[i]*rtemp10[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp12(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp12 = fft(Nx,Ny,Nz,dV,dphitot_by_dn2vx);

	dphitot_by_dn2vx.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		dn1v_dot_n2v_by_dn1vx[i] = -1.0*dn1v_dot_n2v_by_dn1vx[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp14(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp14 = fft(Nx,Ny,Nz,dV,dn1v_dot_n2v_by_dn1vx);

	dn1v_dot_n2v_by_dn1vx.free(); // Realspace
	ComplexVector ktemp15(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp15[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp15[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector dn1v_dot_n2v_by_dn1vy(Nx*Ny*Nz); // RS
	dn1v_dot_n2v_by_dn1vy = ifft(Nx,Ny,Nz,dV,ktemp15);

	Vector rtemp17(Nx*Ny*Nz); // RS
	rtemp17 = ifft(Nx,Ny,Nz,dV,ktemp15);

	ktemp15.free(); // KSpace
	Vector dphitot_by_dn2vy(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		dphitot_by_dn2vy[i] = -7.957747154594767e-2*rtemp17[i]/R/t1 - 5.305164769729845e-2*n2[i]*rtemp17[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp19(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp19 = fft(Nx,Ny,Nz,dV,dphitot_by_dn2vy);

	dphitot_by_dn2vy.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		dn1v_dot_n2v_by_dn1vy[i] = -1.0*dn1v_dot_n2v_by_dn1vy[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp21(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp21 = fft(Nx,Ny,Nz,dV,dn1v_dot_n2v_by_dn1vy);

	dn1v_dot_n2v_by_dn1vy.free(); // Realspace
	ktemp0[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp0[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector dn1v_dot_n2v_by_dn1vz(Nx*Ny*Nz); // RS
	dn1v_dot_n2v_by_dn1vz = ifft(Nx,Ny,Nz,dV,ktemp0);

	Vector rtemp24(Nx*Ny*Nz); // RS
	rtemp24 = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	Vector dphitot_by_dn3(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = rtemp10[i];
		const double t3 = rtemp17[i];
		const double t4 = rtemp24[i];
		const double t5 = log(t1);
		const double t6 = 1.0/t1;
		const double t7 = 1.0/n3[i];
		dphitot_by_dn3[i] = t6*t7*t7*n2[i]*(t6*(8.841941282883075e-3 + (1.768388256576615e-2*t6 - 1.768388256576615e-2*t7)*(n3[i] + t5/(t6*t6))) - 8.841941282883075e-3 - 1.768388256576615e-2*t5)*(n2[i]*n2[i] - 3.0*t4*t4 - 3.0*t3*t3 - 3.0*t2*t2) + 7.957747154594767e-2*t6*rtemp3[i]/(R*R) + t6*t6*(7.957747154594767e-2*n2[i]*rtemp3[i]/R - 7.957747154594767e-2*t4*rtemp24[i]/R - 7.957747154594767e-2*t3*rtemp17[i]/R - 7.957747154594767e-2*t2*rtemp10[i]/R);
	}

	ComplexVector ktemp26(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp26 = fft(Nx,Ny,Nz,dV,dphitot_by_dn3);

	dphitot_by_dn3.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		dn1v_dot_n2v_by_dn1vz[i] = -1.0*dn1v_dot_n2v_by_dn1vz[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp28(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp28 = fft(Nx,Ny,Nz,dV,dn1v_dot_n2v_by_dn1vz);

	dn1v_dot_n2v_by_dn1vz.free(); // Realspace
	Vector dphitot_by_dn0(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		dphitot_by_dn0[i] = -1.0*log(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp30(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp30 = fft(Nx,Ny,Nz,dV,dphitot_by_dn0);

	dphitot_by_dn0.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp17[i] = (n3[i] + t1*t1*log(t1))*(2.6525823848649224e-2*n2[i]*n2[i] - 2.6525823848649224e-2*rtemp10[i]*rtemp10[i] - 2.6525823848649224e-2*rtemp17[i]*rtemp17[i] - 2.6525823848649224e-2*rtemp24[i]*rtemp24[i])/(t1*t1*n3[i]*n3[i]) + 7.957747154594767e-2*rtemp3[i]/R/t1;
	}

	rtemp10.free(); // Realspace
	rtemp3.free(); // Realspace
	ComplexVector ktemp32(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp32 = fft(Nx,Ny,Nz,dV,rtemp17);

	rtemp17.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp24[i] = -7.957747154594767e-2*rtemp24[i]/R/t1 - 5.305164769729845e-2*n2[i]*rtemp24[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	n3.free(); // Realspace
	n2.free(); // Realspace
	ComplexVector ktemp34(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp34 = fft(Nx,Ny,Nz,dV,rtemp24);

	rtemp24.free(); // Realspace
	{
		const int i = 0;
		ktemp34[0] = (((12.566370614359172*R*R)*(-0.15915494309189535*ktemp30[i]/R - 7.957747154594767e-2*ktemp7[i]) - 7.957747154594767e-2*(-25.132741228718345*R)*ktemp30[i])/R - 7.957747154594767e-2*(-25.132741228718345*R)*ktemp7[i])/R + (12.566370614359172*R*R)*ktemp26[i] - (-25.132741228718345*R)*ktemp32[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = 12.566370614359172*R*sin(R*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]))*exp(-6.0*dr*dr*(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]))/(sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]));
		const double t2 = exp(-6.0*dr*dr*(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]));
		const double t3 = R*cos(R*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2])) - sin(R*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]))/(sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]));
		const double t4 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t5 = 12.566370614359172*t2*(-1.0*sin(R*sqrt(t4))/(sqrt(t4)) - 1.0*R*cos(R*sqrt(t4)));
		double it6 = 12.566370614359172*R*k_i[0]*t2*sin(R*sqrt(t4))/(sqrt(t4));
		double it7 = 12.566370614359172*R*k_i[1]*t2*sin(R*sqrt(t4))/(sqrt(t4));
		double it8 = 12.566370614359172*R*k_i[2]*t2*sin(R*sqrt(t4))/(sqrt(t4));
		ktemp34[i] = std::complex<double>(ktemp26[i].real()*t1 - 1.0*ktemp19[i].imag()*it7 - 1.0*ktemp12[i].imag()*it6 - ktemp32[i].real()*t5 - ktemp34[i].imag()*it8 + ((-7.957747154594767e-2*ktemp7[i].real()*t1 - 7.957747154594767e-2*ktemp30[i].real()*(t5 + 2.0*t1/R) - 1.0*ktemp28[i].imag()*k_i[2]*t2*t3/t4 - 1.0*ktemp21[i].imag()*k_i[1]*t2*t3/t4 - 1.0*ktemp14[i].imag()*k_i[0]*t2*t3/t4)/R - 7.957747154594767e-2*ktemp7[i].real()*t5 - 7.957747154594767e-2*ktemp28[i].imag()*it8 - 7.957747154594767e-2*ktemp21[i].imag()*it7 - 7.957747154594767e-2*ktemp14[i].imag()*it6)/R,
				ktemp12[i].real()*it6 + ktemp19[i].real()*it7 + ktemp26[i].imag()*t1 - ktemp32[i].imag()*t5 + ktemp34[i].real()*it8 + (7.957747154594767e-2*ktemp14[i].real()*it6 + 7.957747154594767e-2*ktemp21[i].real()*it7 + 7.957747154594767e-2*ktemp28[i].real()*it8 - 7.957747154594767e-2*ktemp7[i].imag()*t5 + (ktemp14[i].real()*k_i[0]*t2*t3/t4 + ktemp21[i].real()*k_i[1]*t2*t3/t4 + ktemp28[i].real()*k_i[2]*t2*t3/t4 - 7.957747154594767e-2*ktemp30[i].imag()*(t5 + 2.0*t1/R) - 7.957747154594767e-2*ktemp7[i].imag()*t1)/R)/R);
	}

	ktemp32.free(); // KSpace
	ktemp30.free(); // KSpace
	ktemp28.free(); // KSpace
	ktemp26.free(); // KSpace
	ktemp21.free(); // KSpace
	ktemp19.free(); // KSpace
	ktemp14.free(); // KSpace
	ktemp12.free(); // KSpace
	ktemp7.free(); // KSpace
	Vector rtemp36(Nx*Ny*Nz); // RS
	rtemp36 = ifft(Nx,Ny,Nz,dV,ktemp34);

	ktemp34.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp36[i] = kT*rtemp36[i]*n[i];
	}

	return rtemp36;

}

double SW_liquid::get_dV() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	return dV;

}

ComplexVector SW_liquid::get_deltak() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector deltak(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		deltak[0] = 12.566370614359172*R*R;
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		deltak[i] = 12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1;
	}

	return deltak;

}

ComplexVector SW_liquid::get_deltak2() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector deltak2(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		deltak2[0] = 50.26548245743669*R*R;
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		deltak2[i] = 25.132741228718345*R*sin(2.0*R*t1)*exp(-6.0*dr*dr*t1*t1)/t1;
	}

	return deltak2;

}

ComplexVector SW_liquid::get_deltaprime() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector deltaprime(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		deltaprime[0] = -25.132741228718345*R;
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		deltaprime[i] = 12.566370614359172*exp(-6.0*dr*dr*t1)*(-1.0*sin(t2)/(sqrt(t1)) - 1.0*R*cos(t2));
	}

	return deltaprime;

}

ComplexVector SW_liquid::get_deltaprimex() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector deltaprimex(Nx*Ny*(int(Nz)/2+1)); // KS
	deltaprimex[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		deltaprimex[i] = std::complex<double>(0.0,
				12.566370614359172*R*k_i[0]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	return deltaprimex;

}

ComplexVector SW_liquid::get_deltaprimey() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector deltaprimey(Nx*Ny*(int(Nz)/2+1)); // KS
	deltaprimey[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		deltaprimey[i] = std::complex<double>(0.0,
				12.566370614359172*R*k_i[1]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	return deltaprimey;

}

ComplexVector SW_liquid::get_deltaprimez() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector deltaprimez(Nx*Ny*(int(Nz)/2+1)); // KS
	deltaprimez[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		deltaprimez[i] = std::complex<double>(0.0,
				12.566370614359172*R*k_i[2]*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1);
	}

	return deltaprimez;

}

ComplexVector SW_liquid::get_deltax() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector deltax(Nx*Ny*(int(Nz)/2+1)); // KS
	deltax[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		deltax[i] = std::complex<double>(0.0,
				12.566370614359172*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	return deltax;

}

ComplexVector SW_liquid::get_deltay() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector deltay(Nx*Ny*(int(Nz)/2+1)); // KS
	deltay[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		deltay[i] = std::complex<double>(0.0,
				12.566370614359172*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	return deltay;

}

ComplexVector SW_liquid::get_deltaz() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector deltaz(Nx*Ny*(int(Nz)/2+1)); // KS
	deltaz[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		deltaz[i] = std::complex<double>(0.0,
				12.566370614359172*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	return deltaz;

}

Vector SW_liquid::get_dn1v_dot_n2v_by_dn1vx() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	ktemp0[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp0[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector dn1v_dot_n2v_by_dn1vx(Nx*Ny*Nz); // RS
	dn1v_dot_n2v_by_dn1vx = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		dn1v_dot_n2v_by_dn1vx[i] = dn1v_dot_n2v_by_dn1vx[i];
	}

	return dn1v_dot_n2v_by_dn1vx;

}

Vector SW_liquid::get_dn1v_dot_n2v_by_dn1vy() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	ktemp0[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp0[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector dn1v_dot_n2v_by_dn1vy(Nx*Ny*Nz); // RS
	dn1v_dot_n2v_by_dn1vy = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		dn1v_dot_n2v_by_dn1vy[i] = dn1v_dot_n2v_by_dn1vy[i];
	}

	return dn1v_dot_n2v_by_dn1vy;

}

Vector SW_liquid::get_dn1v_dot_n2v_by_dn1vz() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	ktemp0[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp0[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector dn1v_dot_n2v_by_dn1vz(Nx*Ny*Nz); // RS
	dn1v_dot_n2v_by_dn1vz = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		dn1v_dot_n2v_by_dn1vz[i] = dn1v_dot_n2v_by_dn1vz[i];
	}

	return dn1v_dot_n2v_by_dn1vz;

}

Vector SW_liquid::get_dn1v_dot_n2v_by_dn2vx() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	ktemp0[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp0[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2(Nx*Ny*Nz); // RS
	rtemp2 = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2[i] = 7.957747154594767e-2*rtemp2[i]/R;
	}

	return rtemp2;

}

Vector SW_liquid::get_dn1v_dot_n2v_by_dn2vy() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	ktemp0[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp0[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2(Nx*Ny*Nz); // RS
	rtemp2 = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2[i] = 7.957747154594767e-2*rtemp2[i]/R;
	}

	return rtemp2;

}

Vector SW_liquid::get_dn1v_dot_n2v_by_dn2vz() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	ktemp0[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp0[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2(Nx*Ny*Nz); // RS
	rtemp2 = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2[i] = 7.957747154594767e-2*rtemp2[i]/R;
	}

	return rtemp2;

}

Vector SW_liquid::get_dn2vsqr_by_dn2vx() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	ktemp0[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp0[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector n2vx(Nx*Ny*Nz); // RS
	n2vx = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n2vx[i] = 2.0*n2vx[i];
	}

	return n2vx;

}

Vector SW_liquid::get_dn2vsqr_by_dn2vy() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	ktemp0[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp0[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector n2vy(Nx*Ny*Nz); // RS
	n2vy = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n2vy[i] = 2.0*n2vy[i];
	}

	return n2vy;

}

Vector SW_liquid::get_dn2vsqr_by_dn2vz() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	ktemp0[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp0[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector n2vz(Nx*Ny*Nz); // RS
	n2vz = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n2vz[i] = 2.0*n2vz[i];
	}

	return n2vz;

}

Vector SW_liquid::get_dphi1_by_dn0() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	{
		const int i = 0;
		ktemp0[0] = ktemp0[i]*(4.188790204786391*R*R*R);
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp0[i] = std::complex<double>(ktemp0[i].real()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)),
				ktemp0[i].imag()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)));
	}

	Vector n3(Nx*Ny*Nz); // RS
	n3 = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n3[i] = -1.0*log(1.0 - 1.0*n3[i]);
	}

	return n3;

}

Vector SW_liquid::get_dphi1_by_dn3() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	ComplexVector ktemp1(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp1[0] = (12.566370614359172*R*R)*ktemp0[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1[i] = std::complex<double>((12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].real(),
				(12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].imag());
	}

	Vector rtemp2(Nx*Ny*Nz); // RS
	rtemp2 = ifft(Nx,Ny,Nz,dV,ktemp1);

	ktemp1.free(); // KSpace
	{
		const int i = 0;
		ktemp0[0] = ktemp0[i]*(4.188790204786391*R*R*R);
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp0[i] = std::complex<double>(ktemp0[i].real()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)),
				ktemp0[i].imag()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)));
	}

	Vector n3(Nx*Ny*Nz); // RS
	n3 = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n3[i] = 7.957747154594767e-2*rtemp2[i]/(R*R)/(1.0 - 1.0*n3[i]);
	}

	rtemp2.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n3[i] = n3[i];
	}

	return n3;

}

Vector SW_liquid::get_dphi2_by_dn1() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	ComplexVector ktemp1(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp1[0] = (12.566370614359172*R*R)*ktemp0[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1[i] = std::complex<double>((12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].real(),
				(12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].imag());
	}

	Vector n2(Nx*Ny*Nz); // RS
	n2 = ifft(Nx,Ny,Nz,dV,ktemp1);

	ktemp1.free(); // KSpace
	{
		const int i = 0;
		ktemp0[0] = ktemp0[i]*(4.188790204786391*R*R*R);
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp0[i] = std::complex<double>(ktemp0[i].real()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)),
				ktemp0[i].imag()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)));
	}

	Vector n3(Nx*Ny*Nz); // RS
	n3 = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n3[i] = n2[i]/(1.0 - 1.0*n3[i]);
	}

	n2.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n3[i] = n3[i];
	}

	return n3;

}

Vector SW_liquid::get_dphi2_by_dn1vx() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	ComplexVector ktemp1(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector dn1v_dot_n2v_by_dn1vx(Nx*Ny*Nz); // RS
	dn1v_dot_n2v_by_dn1vx = ifft(Nx,Ny,Nz,dV,ktemp1);

	ktemp1.free(); // KSpace
	{
		const int i = 0;
		ktemp0[0] = ktemp0[i]*(4.188790204786391*R*R*R);
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp0[i] = std::complex<double>(ktemp0[i].real()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)),
				ktemp0[i].imag()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)));
	}

	Vector n3(Nx*Ny*Nz); // RS
	n3 = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n3[i] = dn1v_dot_n2v_by_dn1vx[i]/(1.0 - 1.0*n3[i]);
	}

	dn1v_dot_n2v_by_dn1vx.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n3[i] = -1.0*n3[i];
	}

	return n3;

}

Vector SW_liquid::get_dphi2_by_dn1vy() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	ComplexVector ktemp1(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector dn1v_dot_n2v_by_dn1vy(Nx*Ny*Nz); // RS
	dn1v_dot_n2v_by_dn1vy = ifft(Nx,Ny,Nz,dV,ktemp1);

	ktemp1.free(); // KSpace
	{
		const int i = 0;
		ktemp0[0] = ktemp0[i]*(4.188790204786391*R*R*R);
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp0[i] = std::complex<double>(ktemp0[i].real()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)),
				ktemp0[i].imag()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)));
	}

	Vector n3(Nx*Ny*Nz); // RS
	n3 = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n3[i] = dn1v_dot_n2v_by_dn1vy[i]/(1.0 - 1.0*n3[i]);
	}

	dn1v_dot_n2v_by_dn1vy.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n3[i] = -1.0*n3[i];
	}

	return n3;

}

Vector SW_liquid::get_dphi2_by_dn1vz() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	ComplexVector ktemp1(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector dn1v_dot_n2v_by_dn1vz(Nx*Ny*Nz); // RS
	dn1v_dot_n2v_by_dn1vz = ifft(Nx,Ny,Nz,dV,ktemp1);

	ktemp1.free(); // KSpace
	{
		const int i = 0;
		ktemp0[0] = ktemp0[i]*(4.188790204786391*R*R*R);
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp0[i] = std::complex<double>(ktemp0[i].real()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)),
				ktemp0[i].imag()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)));
	}

	Vector n3(Nx*Ny*Nz); // RS
	n3 = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n3[i] = dn1v_dot_n2v_by_dn1vz[i]/(1.0 - 1.0*n3[i]);
	}

	dn1v_dot_n2v_by_dn1vz.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n3[i] = -1.0*n3[i];
	}

	return n3;

}

Vector SW_liquid::get_dphi2_by_dn2() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	ComplexVector ktemp1(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp1[0] = (12.566370614359172*R*R)*ktemp0[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1[i] = std::complex<double>((12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].real(),
				(12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].imag());
	}

	Vector rtemp2(Nx*Ny*Nz); // RS
	rtemp2 = ifft(Nx,Ny,Nz,dV,ktemp1);

	ktemp1.free(); // KSpace
	{
		const int i = 0;
		ktemp0[0] = ktemp0[i]*(4.188790204786391*R*R*R);
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp0[i] = std::complex<double>(ktemp0[i].real()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)),
				ktemp0[i].imag()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)));
	}

	Vector n3(Nx*Ny*Nz); // RS
	n3 = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n3[i] = 7.957747154594767e-2*rtemp2[i]/R/(1.0 - 1.0*n3[i]);
	}

	rtemp2.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n3[i] = n3[i];
	}

	return n3;

}

Vector SW_liquid::get_dphi2_by_dn2vx() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	ComplexVector ktemp1(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2(Nx*Ny*Nz); // RS
	rtemp2 = ifft(Nx,Ny,Nz,dV,ktemp1);

	ktemp1.free(); // KSpace
	{
		const int i = 0;
		ktemp0[0] = ktemp0[i]*(4.188790204786391*R*R*R);
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp0[i] = std::complex<double>(ktemp0[i].real()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)),
				ktemp0[i].imag()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)));
	}

	Vector n3(Nx*Ny*Nz); // RS
	n3 = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n3[i] = 7.957747154594767e-2*rtemp2[i]/R/(1.0 - 1.0*n3[i]);
	}

	rtemp2.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n3[i] = -1.0*n3[i];
	}

	return n3;

}

Vector SW_liquid::get_dphi2_by_dn2vy() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	ComplexVector ktemp1(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2(Nx*Ny*Nz); // RS
	rtemp2 = ifft(Nx,Ny,Nz,dV,ktemp1);

	ktemp1.free(); // KSpace
	{
		const int i = 0;
		ktemp0[0] = ktemp0[i]*(4.188790204786391*R*R*R);
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp0[i] = std::complex<double>(ktemp0[i].real()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)),
				ktemp0[i].imag()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)));
	}

	Vector n3(Nx*Ny*Nz); // RS
	n3 = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n3[i] = 7.957747154594767e-2*rtemp2[i]/R/(1.0 - 1.0*n3[i]);
	}

	rtemp2.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n3[i] = -1.0*n3[i];
	}

	return n3;

}

Vector SW_liquid::get_dphi2_by_dn2vz() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	ComplexVector ktemp1(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2(Nx*Ny*Nz); // RS
	rtemp2 = ifft(Nx,Ny,Nz,dV,ktemp1);

	ktemp1.free(); // KSpace
	{
		const int i = 0;
		ktemp0[0] = ktemp0[i]*(4.188790204786391*R*R*R);
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp0[i] = std::complex<double>(ktemp0[i].real()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)),
				ktemp0[i].imag()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)));
	}

	Vector n3(Nx*Ny*Nz); // RS
	n3 = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n3[i] = 7.957747154594767e-2*rtemp2[i]/R/(1.0 - 1.0*n3[i]);
	}

	rtemp2.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n3[i] = -1.0*n3[i];
	}

	return n3;

}

Vector SW_liquid::get_dphi2_by_dn3() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	ComplexVector ktemp1(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2(Nx*Ny*Nz); // RS
	rtemp2 = ifft(Nx,Ny,Nz,dV,ktemp1);

	ktemp1.free(); // KSpace
	ComplexVector ktemp3(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp4(Nx*Ny*Nz); // RS
	rtemp4 = ifft(Nx,Ny,Nz,dV,ktemp3);

	ktemp3.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4[i] = 7.957747154594767e-2*rtemp2[i]*rtemp2[i]/R + 7.957747154594767e-2*rtemp4[i]*rtemp4[i]/R;
	}

	rtemp2.free(); // Realspace
	ComplexVector ktemp6(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp7(Nx*Ny*Nz); // RS
	rtemp7 = ifft(Nx,Ny,Nz,dV,ktemp6);

	ktemp6.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7[i] = rtemp4[i] + 7.957747154594767e-2*rtemp7[i]*rtemp7[i]/R;
	}

	rtemp4.free(); // Realspace
	ComplexVector ktemp9(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp9[0] = (12.566370614359172*R*R)*ktemp0[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp9[i] = std::complex<double>((12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].real(),
				(12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].imag());
	}

	Vector rtemp10(Nx*Ny*Nz); // RS
	rtemp10 = ifft(Nx,Ny,Nz,dV,ktemp9);

	ktemp9.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp10[i] = 7.957747154594767e-2*rtemp10[i]*rtemp10[i]/R - 1.0*rtemp7[i];
	}

	rtemp7.free(); // Realspace
	{
		const int i = 0;
		ktemp0[0] = ktemp0[i]*(4.188790204786391*R*R*R);
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp0[i] = std::complex<double>(ktemp0[i].real()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)),
				ktemp0[i].imag()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)));
	}

	Vector n3(Nx*Ny*Nz); // RS
	n3 = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n3[i] = rtemp10[i]/((1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]));
	}

	rtemp10.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n3[i] = n3[i];
	}

	return n3;

}

Vector SW_liquid::get_dphi3_by_dn2() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	ComplexVector ktemp1(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp1[0] = ktemp0[i]*(4.188790204786391*R*R*R);
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1[i] = std::complex<double>(ktemp0[i].real()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)),
				ktemp0[i].imag()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)));
	}

	Vector n3(Nx*Ny*Nz); // RS
	n3 = ifft(Nx,Ny,Nz,dV,ktemp1);

	ktemp1.free(); // KSpace
	ComplexVector ktemp3(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector n2vx(Nx*Ny*Nz); // RS
	n2vx = ifft(Nx,Ny,Nz,dV,ktemp3);

	ktemp3.free(); // KSpace
	ComplexVector ktemp5(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector n2vy(Nx*Ny*Nz); // RS
	n2vy = ifft(Nx,Ny,Nz,dV,ktemp5);

	ktemp5.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n2vy[i] = n2vx[i]*n2vx[i] + n2vy[i]*n2vy[i];
	}

	n2vx.free(); // Realspace
	ComplexVector ktemp8(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp8[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp8[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector n2vz(Nx*Ny*Nz); // RS
	n2vz = ifft(Nx,Ny,Nz,dV,ktemp8);

	ktemp8.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n2vz[i] = n2vy[i] + n2vz[i]*n2vz[i];
	}

	n2vy.free(); // Realspace
	{
		const int i = 0;
		ktemp0[0] = (12.566370614359172*R*R)*ktemp0[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp0[i] = std::complex<double>((12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].real(),
				(12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].imag());
	}

	Vector n2(Nx*Ny*Nz); // RS
	n2 = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n2[i] = 2.6525823848649224e-2*n2[i]*n2[i] - 2.6525823848649224e-2*n2vz[i];
	}

	n2vz.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		n2[i] = n2[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	n3.free(); // Realspace
	return n2;

}

Vector SW_liquid::get_dphi3_by_dn2vx() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	ComplexVector ktemp1(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector n2vx(Nx*Ny*Nz); // RS
	n2vx = ifft(Nx,Ny,Nz,dV,ktemp1);

	ktemp1.free(); // KSpace
	ComplexVector ktemp3(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp3[0] = (12.566370614359172*R*R)*ktemp0[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp3[i] = std::complex<double>((12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].real(),
				(12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].imag());
	}

	Vector n2(Nx*Ny*Nz); // RS
	n2 = ifft(Nx,Ny,Nz,dV,ktemp3);

	ktemp3.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n2[i] = 2.0*n2[i]*n2vx[i];
	}

	n2vx.free(); // Realspace
	{
		const int i = 0;
		ktemp0[0] = ktemp0[i]*(4.188790204786391*R*R*R);
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp0[i] = std::complex<double>(ktemp0[i].real()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)),
				ktemp0[i].imag()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)));
	}

	Vector n3(Nx*Ny*Nz); // RS
	n3 = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		n3[i] = -2.6525823848649224e-2*n2[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	n2.free(); // Realspace
	return n3;

}

Vector SW_liquid::get_dphi3_by_dn2vy() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	ComplexVector ktemp1(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector n2vy(Nx*Ny*Nz); // RS
	n2vy = ifft(Nx,Ny,Nz,dV,ktemp1);

	ktemp1.free(); // KSpace
	ComplexVector ktemp3(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp3[0] = (12.566370614359172*R*R)*ktemp0[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp3[i] = std::complex<double>((12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].real(),
				(12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].imag());
	}

	Vector n2(Nx*Ny*Nz); // RS
	n2 = ifft(Nx,Ny,Nz,dV,ktemp3);

	ktemp3.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n2[i] = 2.0*n2[i]*n2vy[i];
	}

	n2vy.free(); // Realspace
	{
		const int i = 0;
		ktemp0[0] = ktemp0[i]*(4.188790204786391*R*R*R);
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp0[i] = std::complex<double>(ktemp0[i].real()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)),
				ktemp0[i].imag()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)));
	}

	Vector n3(Nx*Ny*Nz); // RS
	n3 = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		n3[i] = -2.6525823848649224e-2*n2[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	n2.free(); // Realspace
	return n3;

}

Vector SW_liquid::get_dphi3_by_dn2vz() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	ComplexVector ktemp1(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector n2vz(Nx*Ny*Nz); // RS
	n2vz = ifft(Nx,Ny,Nz,dV,ktemp1);

	ktemp1.free(); // KSpace
	ComplexVector ktemp3(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp3[0] = (12.566370614359172*R*R)*ktemp0[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp3[i] = std::complex<double>((12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].real(),
				(12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].imag());
	}

	Vector n2(Nx*Ny*Nz); // RS
	n2 = ifft(Nx,Ny,Nz,dV,ktemp3);

	ktemp3.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n2[i] = 2.0*n2[i]*n2vz[i];
	}

	n2vz.free(); // Realspace
	{
		const int i = 0;
		ktemp0[0] = ktemp0[i]*(4.188790204786391*R*R*R);
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp0[i] = std::complex<double>(ktemp0[i].real()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)),
				ktemp0[i].imag()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)));
	}

	Vector n3(Nx*Ny*Nz); // RS
	n3 = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		n3[i] = -2.6525823848649224e-2*n2[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	n2.free(); // Realspace
	return n3;

}

Vector SW_liquid::get_dphi3_by_dn3() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	ComplexVector ktemp1(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp1[0] = (12.566370614359172*R*R)*ktemp0[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1[i] = std::complex<double>((12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].real(),
				(12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].imag());
	}

	Vector n2(Nx*Ny*Nz); // RS
	n2 = ifft(Nx,Ny,Nz,dV,ktemp1);

	ktemp1.free(); // KSpace
	ComplexVector ktemp3(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp3[0] = ktemp0[i]*(4.188790204786391*R*R*R);
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3[i] = std::complex<double>(ktemp0[i].real()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)),
				ktemp0[i].imag()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)));
	}

	Vector n3(Nx*Ny*Nz); // RS
	n3 = ifft(Nx,Ny,Nz,dV,ktemp3);

	ktemp3.free(); // KSpace
	ComplexVector ktemp5(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector n2vx(Nx*Ny*Nz); // RS
	n2vx = ifft(Nx,Ny,Nz,dV,ktemp5);

	ktemp5.free(); // KSpace
	ComplexVector ktemp7(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector n2vy(Nx*Ny*Nz); // RS
	n2vy = ifft(Nx,Ny,Nz,dV,ktemp7);

	ktemp7.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n2vy[i] = n2vx[i]*n2vx[i] + n2vy[i]*n2vy[i];
	}

	n2vx.free(); // Realspace
	ktemp0[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp0[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector n2vz(Nx*Ny*Nz); // RS
	n2vz = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n2vz[i] = n2vy[i] + n2vz[i]*n2vz[i];
	}

	n2vy.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n2vz[i] = n2[i]*(n2[i]*n2[i] - 3.0*n2vz[i]);
	}

	n2.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = log(t1);
		const double t3 = 1.0/t1;
		const double t4 = 1.0/n3[i];
		n2vz[i] = t3*t4*t4*n2vz[i]*(t3*(8.841941282883075e-3 + (1.768388256576615e-2*t3 - 1.768388256576615e-2*t4)*(n3[i] + t2/(t3*t3))) - 8.841941282883075e-3 - 1.768388256576615e-2*t2);
	}

	n3.free(); // Realspace
	return n2vz;

}

Vector SW_liquid::get_dphitot_by_dn0() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	{
		const int i = 0;
		ktemp0[0] = ktemp0[i]*(4.188790204786391*R*R*R);
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp0[i] = std::complex<double>(ktemp0[i].real()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)),
				ktemp0[i].imag()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)));
	}

	Vector n3(Nx*Ny*Nz); // RS
	n3 = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n3[i] = -1.0*log(1.0 - 1.0*n3[i]);
	}

	return n3;

}

Vector SW_liquid::get_dphitot_by_dn1() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	ComplexVector ktemp1(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp1[0] = (12.566370614359172*R*R)*ktemp0[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1[i] = std::complex<double>((12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].real(),
				(12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].imag());
	}

	Vector n2(Nx*Ny*Nz); // RS
	n2 = ifft(Nx,Ny,Nz,dV,ktemp1);

	ktemp1.free(); // KSpace
	{
		const int i = 0;
		ktemp0[0] = ktemp0[i]*(4.188790204786391*R*R*R);
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp0[i] = std::complex<double>(ktemp0[i].real()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)),
				ktemp0[i].imag()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)));
	}

	Vector n3(Nx*Ny*Nz); // RS
	n3 = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n3[i] = n2[i]/(1.0 - 1.0*n3[i]);
	}

	n2.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n3[i] = n3[i];
	}

	return n3;

}

Vector SW_liquid::get_dphitot_by_dn1vx() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	ComplexVector ktemp1(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector dn1v_dot_n2v_by_dn1vx(Nx*Ny*Nz); // RS
	dn1v_dot_n2v_by_dn1vx = ifft(Nx,Ny,Nz,dV,ktemp1);

	ktemp1.free(); // KSpace
	{
		const int i = 0;
		ktemp0[0] = ktemp0[i]*(4.188790204786391*R*R*R);
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp0[i] = std::complex<double>(ktemp0[i].real()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)),
				ktemp0[i].imag()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)));
	}

	Vector n3(Nx*Ny*Nz); // RS
	n3 = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n3[i] = dn1v_dot_n2v_by_dn1vx[i]/(1.0 - 1.0*n3[i]);
	}

	dn1v_dot_n2v_by_dn1vx.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n3[i] = -1.0*n3[i];
	}

	return n3;

}

Vector SW_liquid::get_dphitot_by_dn1vy() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	ComplexVector ktemp1(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector dn1v_dot_n2v_by_dn1vy(Nx*Ny*Nz); // RS
	dn1v_dot_n2v_by_dn1vy = ifft(Nx,Ny,Nz,dV,ktemp1);

	ktemp1.free(); // KSpace
	{
		const int i = 0;
		ktemp0[0] = ktemp0[i]*(4.188790204786391*R*R*R);
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp0[i] = std::complex<double>(ktemp0[i].real()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)),
				ktemp0[i].imag()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)));
	}

	Vector n3(Nx*Ny*Nz); // RS
	n3 = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n3[i] = dn1v_dot_n2v_by_dn1vy[i]/(1.0 - 1.0*n3[i]);
	}

	dn1v_dot_n2v_by_dn1vy.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n3[i] = -1.0*n3[i];
	}

	return n3;

}

Vector SW_liquid::get_dphitot_by_dn1vz() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	ComplexVector ktemp1(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector dn1v_dot_n2v_by_dn1vz(Nx*Ny*Nz); // RS
	dn1v_dot_n2v_by_dn1vz = ifft(Nx,Ny,Nz,dV,ktemp1);

	ktemp1.free(); // KSpace
	{
		const int i = 0;
		ktemp0[0] = ktemp0[i]*(4.188790204786391*R*R*R);
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp0[i] = std::complex<double>(ktemp0[i].real()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)),
				ktemp0[i].imag()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)));
	}

	Vector n3(Nx*Ny*Nz); // RS
	n3 = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n3[i] = dn1v_dot_n2v_by_dn1vz[i]/(1.0 - 1.0*n3[i]);
	}

	dn1v_dot_n2v_by_dn1vz.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n3[i] = -1.0*n3[i];
	}

	return n3;

}

Vector SW_liquid::get_dphitot_by_dn2() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	ComplexVector ktemp1(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp1[0] = (12.566370614359172*R*R)*ktemp0[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1[i] = std::complex<double>((12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].real(),
				(12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].imag());
	}

	Vector rtemp2(Nx*Ny*Nz); // RS
	rtemp2 = ifft(Nx,Ny,Nz,dV,ktemp1);

	ktemp1.free(); // KSpace
	ComplexVector ktemp3(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp3[0] = ktemp0[i]*(4.188790204786391*R*R*R);
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3[i] = std::complex<double>(ktemp0[i].real()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)),
				ktemp0[i].imag()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)));
	}

	Vector n3(Nx*Ny*Nz); // RS
	n3 = ifft(Nx,Ny,Nz,dV,ktemp3);

	ktemp3.free(); // KSpace
	ComplexVector ktemp5(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector n2vx(Nx*Ny*Nz); // RS
	n2vx = ifft(Nx,Ny,Nz,dV,ktemp5);

	ktemp5.free(); // KSpace
	ComplexVector ktemp7(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector n2vy(Nx*Ny*Nz); // RS
	n2vy = ifft(Nx,Ny,Nz,dV,ktemp7);

	ktemp7.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n2vy[i] = n2vx[i]*n2vx[i] + n2vy[i]*n2vy[i];
	}

	n2vx.free(); // Realspace
	ktemp0[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp0[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector n2vz(Nx*Ny*Nz); // RS
	n2vz = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n2vz[i] = n2vy[i] + n2vz[i]*n2vz[i];
	}

	n2vy.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		n2vz[i] = (2.6525823848649224e-2*rtemp2[i]*rtemp2[i] - 2.6525823848649224e-2*n2vz[i])*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]) + 7.957747154594767e-2*rtemp2[i]/R/t1;
	}

	n3.free(); // Realspace
	rtemp2.free(); // Realspace
	return n2vz;

}

Vector SW_liquid::get_dphitot_by_dn2vx() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	ComplexVector ktemp1(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2(Nx*Ny*Nz); // RS
	rtemp2 = ifft(Nx,Ny,Nz,dV,ktemp1);

	ktemp1.free(); // KSpace
	ComplexVector ktemp3(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp3[0] = ktemp0[i]*(4.188790204786391*R*R*R);
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3[i] = std::complex<double>(ktemp0[i].real()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)),
				ktemp0[i].imag()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)));
	}

	Vector n3(Nx*Ny*Nz); // RS
	n3 = ifft(Nx,Ny,Nz,dV,ktemp3);

	ktemp3.free(); // KSpace
	{
		const int i = 0;
		ktemp0[0] = (12.566370614359172*R*R)*ktemp0[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp0[i] = std::complex<double>((12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].real(),
				(12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].imag());
	}

	Vector n2(Nx*Ny*Nz); // RS
	n2 = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		n2[i] = -7.957747154594767e-2*rtemp2[i]/R/t1 - 5.305164769729845e-2*n2[i]*rtemp2[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	n3.free(); // Realspace
	rtemp2.free(); // Realspace
	return n2;

}

Vector SW_liquid::get_dphitot_by_dn2vy() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	ComplexVector ktemp1(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2(Nx*Ny*Nz); // RS
	rtemp2 = ifft(Nx,Ny,Nz,dV,ktemp1);

	ktemp1.free(); // KSpace
	ComplexVector ktemp3(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp3[0] = ktemp0[i]*(4.188790204786391*R*R*R);
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3[i] = std::complex<double>(ktemp0[i].real()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)),
				ktemp0[i].imag()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)));
	}

	Vector n3(Nx*Ny*Nz); // RS
	n3 = ifft(Nx,Ny,Nz,dV,ktemp3);

	ktemp3.free(); // KSpace
	{
		const int i = 0;
		ktemp0[0] = (12.566370614359172*R*R)*ktemp0[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp0[i] = std::complex<double>((12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].real(),
				(12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].imag());
	}

	Vector n2(Nx*Ny*Nz); // RS
	n2 = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		n2[i] = -7.957747154594767e-2*rtemp2[i]/R/t1 - 5.305164769729845e-2*n2[i]*rtemp2[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	n3.free(); // Realspace
	rtemp2.free(); // Realspace
	return n2;

}

Vector SW_liquid::get_dphitot_by_dn2vz() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	ComplexVector ktemp1(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2(Nx*Ny*Nz); // RS
	rtemp2 = ifft(Nx,Ny,Nz,dV,ktemp1);

	ktemp1.free(); // KSpace
	ComplexVector ktemp3(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp3[0] = ktemp0[i]*(4.188790204786391*R*R*R);
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3[i] = std::complex<double>(ktemp0[i].real()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)),
				ktemp0[i].imag()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)));
	}

	Vector n3(Nx*Ny*Nz); // RS
	n3 = ifft(Nx,Ny,Nz,dV,ktemp3);

	ktemp3.free(); // KSpace
	{
		const int i = 0;
		ktemp0[0] = (12.566370614359172*R*R)*ktemp0[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp0[i] = std::complex<double>((12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].real(),
				(12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].imag());
	}

	Vector n2(Nx*Ny*Nz); // RS
	n2 = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		n2[i] = -7.957747154594767e-2*rtemp2[i]/R/t1 - 5.305164769729845e-2*n2[i]*rtemp2[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	n3.free(); // Realspace
	rtemp2.free(); // Realspace
	return n2;

}

Vector SW_liquid::get_dphitot_by_dn3() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	ComplexVector ktemp1(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp1[0] = (12.566370614359172*R*R)*ktemp0[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1[i] = std::complex<double>((12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].real(),
				(12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].imag());
	}

	Vector rtemp2(Nx*Ny*Nz); // RS
	rtemp2 = ifft(Nx,Ny,Nz,dV,ktemp1);

	ktemp1.free(); // KSpace
	ComplexVector ktemp3(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp3[0] = ktemp0[i]*(4.188790204786391*R*R*R);
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3[i] = std::complex<double>(ktemp0[i].real()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)),
				ktemp0[i].imag()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)));
	}

	Vector n3(Nx*Ny*Nz); // RS
	n3 = ifft(Nx,Ny,Nz,dV,ktemp3);

	ktemp3.free(); // KSpace
	ComplexVector ktemp5(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp6(Nx*Ny*Nz); // RS
	rtemp6 = ifft(Nx,Ny,Nz,dV,ktemp5);

	ktemp5.free(); // KSpace
	ComplexVector ktemp7(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp8(Nx*Ny*Nz); // RS
	rtemp8 = ifft(Nx,Ny,Nz,dV,ktemp7);

	ktemp7.free(); // KSpace
	ktemp0[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp0[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp10(Nx*Ny*Nz); // RS
	rtemp10 = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = rtemp6[i];
		const double t3 = rtemp8[i];
		const double t4 = rtemp10[i];
		const double t5 = rtemp2[i];
		const double t6 = log(t1);
		const double t7 = 1.0/t1;
		const double t8 = 1.0/n3[i];
		rtemp10[i] = t5*t7*t8*t8*(t7*(8.841941282883075e-3 + (1.768388256576615e-2*t7 - 1.768388256576615e-2*t8)*(n3[i] + t6/(t7*t7))) - 8.841941282883075e-3 - 1.768388256576615e-2*t6)*(t5*t5 - 3.0*t4*t4 - 3.0*t3*t3 - 3.0*t2*t2) + 7.957747154594767e-2*t7*rtemp2[i]/(R*R) + t7*t7*(7.957747154594767e-2*t5*rtemp2[i]/R - 7.957747154594767e-2*t4*rtemp10[i]/R - 7.957747154594767e-2*t3*rtemp8[i]/R - 7.957747154594767e-2*t2*rtemp6[i]/R);
	}

	rtemp8.free(); // Realspace
	rtemp6.free(); // Realspace
	n3.free(); // Realspace
	rtemp2.free(); // Realspace
	return rtemp10;

}

double SW_liquid::get_dr() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	return dr;

}

double SW_liquid::get_external() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	double 	s0 = 0;
	for (int i=0; i<Nx*Ny*Nz; i++) {
		s0 += dV*n[i]*(Vext[i] - 1.0*mu);
	}

	external = s0;
	return external;

}

Vector SW_liquid::get_gSigmaA() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	ComplexVector ktemp1(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp1[0] = (12.566370614359172*R*R)*ktemp0[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1[i] = std::complex<double>((12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].real(),
				(12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].imag());
	}

	Vector n2(Nx*Ny*Nz); // RS
	n2 = ifft(Nx,Ny,Nz,dV,ktemp1);

	Vector rtemp3(Nx*Ny*Nz); // RS
	rtemp3 = ifft(Nx,Ny,Nz,dV,ktemp1);

	ktemp1.free(); // KSpace
	ComplexVector ktemp4(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp4[0] = ktemp0[i]*(4.188790204786391*R*R*R);
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4[i] = std::complex<double>(ktemp0[i].real()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)),
				ktemp0[i].imag()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)));
	}

	Vector n3(Nx*Ny*Nz); // RS
	n3 = ifft(Nx,Ny,Nz,dV,ktemp4);

	ktemp4.free(); // KSpace
	Vector dphitot_by_dn1(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		dphitot_by_dn1[i] = n2[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp7(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7 = fft(Nx,Ny,Nz,dV,dphitot_by_dn1);

	dphitot_by_dn1.free(); // Realspace
	ComplexVector ktemp8(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp8[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp8[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector dn1v_dot_n2v_by_dn1vx(Nx*Ny*Nz); // RS
	dn1v_dot_n2v_by_dn1vx = ifft(Nx,Ny,Nz,dV,ktemp8);

	Vector rtemp10(Nx*Ny*Nz); // RS
	rtemp10 = ifft(Nx,Ny,Nz,dV,ktemp8);

	ktemp8.free(); // KSpace
	Vector dphitot_by_dn2vx(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		dphitot_by_dn2vx[i] = -7.957747154594767e-2*rtemp10[i]/R/t1 - 5.305164769729845e-2*n2[i]*rtemp10[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp12(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp12 = fft(Nx,Ny,Nz,dV,dphitot_by_dn2vx);

	dphitot_by_dn2vx.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		dn1v_dot_n2v_by_dn1vx[i] = -1.0*dn1v_dot_n2v_by_dn1vx[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp14(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp14 = fft(Nx,Ny,Nz,dV,dn1v_dot_n2v_by_dn1vx);

	dn1v_dot_n2v_by_dn1vx.free(); // Realspace
	ComplexVector ktemp15(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp15[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp15[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector dn1v_dot_n2v_by_dn1vy(Nx*Ny*Nz); // RS
	dn1v_dot_n2v_by_dn1vy = ifft(Nx,Ny,Nz,dV,ktemp15);

	Vector rtemp17(Nx*Ny*Nz); // RS
	rtemp17 = ifft(Nx,Ny,Nz,dV,ktemp15);

	ktemp15.free(); // KSpace
	Vector dphitot_by_dn2vy(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		dphitot_by_dn2vy[i] = -7.957747154594767e-2*rtemp17[i]/R/t1 - 5.305164769729845e-2*n2[i]*rtemp17[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp19(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp19 = fft(Nx,Ny,Nz,dV,dphitot_by_dn2vy);

	dphitot_by_dn2vy.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		dn1v_dot_n2v_by_dn1vy[i] = -1.0*dn1v_dot_n2v_by_dn1vy[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp21(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp21 = fft(Nx,Ny,Nz,dV,dn1v_dot_n2v_by_dn1vy);

	dn1v_dot_n2v_by_dn1vy.free(); // Realspace
	ComplexVector ktemp22(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp22[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp22[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector dn1v_dot_n2v_by_dn1vz(Nx*Ny*Nz); // RS
	dn1v_dot_n2v_by_dn1vz = ifft(Nx,Ny,Nz,dV,ktemp22);

	Vector rtemp24(Nx*Ny*Nz); // RS
	rtemp24 = ifft(Nx,Ny,Nz,dV,ktemp22);

	ktemp22.free(); // KSpace
	Vector dphitot_by_dn3(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = rtemp10[i];
		const double t3 = rtemp17[i];
		const double t4 = rtemp24[i];
		const double t5 = log(t1);
		const double t6 = 1.0/t1;
		const double t7 = 1.0/n3[i];
		dphitot_by_dn3[i] = t6*t7*t7*n2[i]*(t6*(8.841941282883075e-3 + (1.768388256576615e-2*t6 - 1.768388256576615e-2*t7)*(n3[i] + t5/(t6*t6))) - 8.841941282883075e-3 - 1.768388256576615e-2*t5)*(n2[i]*n2[i] - 3.0*t4*t4 - 3.0*t3*t3 - 3.0*t2*t2) + 7.957747154594767e-2*t6*rtemp3[i]/(R*R) + t6*t6*(7.957747154594767e-2*n2[i]*rtemp3[i]/R - 7.957747154594767e-2*t4*rtemp24[i]/R - 7.957747154594767e-2*t3*rtemp17[i]/R - 7.957747154594767e-2*t2*rtemp10[i]/R);
	}

	ComplexVector ktemp26(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp26 = fft(Nx,Ny,Nz,dV,dphitot_by_dn3);

	dphitot_by_dn3.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		dn1v_dot_n2v_by_dn1vz[i] = -1.0*dn1v_dot_n2v_by_dn1vz[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp28(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp28 = fft(Nx,Ny,Nz,dV,dn1v_dot_n2v_by_dn1vz);

	dn1v_dot_n2v_by_dn1vz.free(); // Realspace
	Vector dphitot_by_dn0(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		dphitot_by_dn0[i] = -1.0*log(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp30(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp30 = fft(Nx,Ny,Nz,dV,dphitot_by_dn0);

	dphitot_by_dn0.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp17[i] = (n3[i] + t1*t1*log(t1))*(2.6525823848649224e-2*n2[i]*n2[i] - 2.6525823848649224e-2*rtemp10[i]*rtemp10[i] - 2.6525823848649224e-2*rtemp17[i]*rtemp17[i] - 2.6525823848649224e-2*rtemp24[i]*rtemp24[i])/(t1*t1*n3[i]*n3[i]) + 7.957747154594767e-2*rtemp3[i]/R/t1;
	}

	rtemp10.free(); // Realspace
	rtemp3.free(); // Realspace
	ComplexVector ktemp32(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp32 = fft(Nx,Ny,Nz,dV,rtemp17);

	rtemp17.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp24[i] = -7.957747154594767e-2*rtemp24[i]/R/t1 - 5.305164769729845e-2*n2[i]*rtemp24[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	n3.free(); // Realspace
	n2.free(); // Realspace
	ComplexVector ktemp34(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp34 = fft(Nx,Ny,Nz,dV,rtemp24);

	rtemp24.free(); // Realspace
	{
		const int i = 0;
		ktemp34[0] = (((12.566370614359172*R*R)*(-0.15915494309189535*ktemp30[i]/R - 7.957747154594767e-2*ktemp7[i]) - 7.957747154594767e-2*(-25.132741228718345*R)*ktemp30[i])/R - 7.957747154594767e-2*(-25.132741228718345*R)*ktemp7[i])/R + (12.566370614359172*R*R)*ktemp26[i] - (-25.132741228718345*R)*ktemp32[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = 12.566370614359172*R*sin(R*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]))*exp(-6.0*dr*dr*(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]))/(sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]));
		const double t2 = exp(-6.0*dr*dr*(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]));
		const double t3 = R*cos(R*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2])) - sin(R*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]))/(sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]));
		const double t4 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t5 = 12.566370614359172*t2*(-1.0*sin(R*sqrt(t4))/(sqrt(t4)) - 1.0*R*cos(R*sqrt(t4)));
		double it6 = 12.566370614359172*R*k_i[0]*t2*sin(R*sqrt(t4))/(sqrt(t4));
		double it7 = 12.566370614359172*R*k_i[1]*t2*sin(R*sqrt(t4))/(sqrt(t4));
		double it8 = 12.566370614359172*R*k_i[2]*t2*sin(R*sqrt(t4))/(sqrt(t4));
		ktemp34[i] = std::complex<double>(ktemp26[i].real()*t1 - 1.0*ktemp19[i].imag()*it7 - 1.0*ktemp12[i].imag()*it6 - ktemp32[i].real()*t5 - ktemp34[i].imag()*it8 + ((-7.957747154594767e-2*ktemp7[i].real()*t1 - 7.957747154594767e-2*ktemp30[i].real()*(t5 + 2.0*t1/R) - 1.0*ktemp28[i].imag()*k_i[2]*t2*t3/t4 - 1.0*ktemp21[i].imag()*k_i[1]*t2*t3/t4 - 1.0*ktemp14[i].imag()*k_i[0]*t2*t3/t4)/R - 7.957747154594767e-2*ktemp7[i].real()*t5 - 7.957747154594767e-2*ktemp28[i].imag()*it8 - 7.957747154594767e-2*ktemp21[i].imag()*it7 - 7.957747154594767e-2*ktemp14[i].imag()*it6)/R,
				ktemp12[i].real()*it6 + ktemp19[i].real()*it7 + ktemp26[i].imag()*t1 - ktemp32[i].imag()*t5 + ktemp34[i].real()*it8 + (7.957747154594767e-2*ktemp14[i].real()*it6 + 7.957747154594767e-2*ktemp21[i].real()*it7 + 7.957747154594767e-2*ktemp28[i].real()*it8 - 7.957747154594767e-2*ktemp7[i].imag()*t5 + (ktemp14[i].real()*k_i[0]*t2*t3/t4 + ktemp21[i].real()*k_i[1]*t2*t3/t4 + ktemp28[i].real()*k_i[2]*t2*t3/t4 - 7.957747154594767e-2*ktemp30[i].imag()*(t5 + 2.0*t1/R) - 7.957747154594767e-2*ktemp7[i].imag()*t1)/R)/R);
	}

	ktemp32.free(); // KSpace
	ktemp30.free(); // KSpace
	ktemp28.free(); // KSpace
	ktemp26.free(); // KSpace
	ktemp21.free(); // KSpace
	ktemp19.free(); // KSpace
	ktemp14.free(); // KSpace
	ktemp12.free(); // KSpace
	ktemp7.free(); // KSpace
	Vector rtemp36(Nx*Ny*Nz); // RS
	rtemp36 = ifft(Nx,Ny,Nz,dV,ktemp34);

	ktemp34.free(); // KSpace
	{
		const int i = 0;
		ktemp0[0] = (50.26548245743669*R*R)*ktemp0[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp0[i] = std::complex<double>((25.132741228718345*R*sin(2.0*R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].real(),
				(25.132741228718345*R*sin(2.0*R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].imag());
	}

	Vector rtemp38(Nx*Ny*Nz); // RS
	rtemp38 = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp38[i] = kT*rtemp36[i]*n[i]/rtemp38[i];
	}

	rtemp36.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp38[i] = rtemp38[i]/(kT*n[i]);
	}

	return rtemp38;

}

double SW_liquid::get_kTphi1() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	ComplexVector ktemp1(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp1[0] = (12.566370614359172*R*R)*ktemp0[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1[i] = std::complex<double>((12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].real(),
				(12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].imag());
	}

	Vector rtemp2(Nx*Ny*Nz); // RS
	rtemp2 = ifft(Nx,Ny,Nz,dV,ktemp1);

	ktemp1.free(); // KSpace
	{
		const int i = 0;
		ktemp0[0] = ktemp0[i]*(4.188790204786391*R*R*R);
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp0[i] = std::complex<double>(ktemp0[i].real()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)),
				ktemp0[i].imag()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)));
	}

	Vector n3(Nx*Ny*Nz); // RS
	n3 = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n3[i] = 7.957747154594767e-2*log(1.0 - 1.0*n3[i])*rtemp2[i]/(R*R);
	}

	rtemp2.free(); // Realspace
	double 	s6 = 0;
	for (int i=0; i<Nx*Ny*Nz; i++) {
		s6 += dV*kT*(-1.0*n3[i]);
	}

	n3.free(); // Realspace
	kTphi1 = s6;
	return kTphi1;

}

double SW_liquid::get_kTphi2() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	ComplexVector ktemp1(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2(Nx*Ny*Nz); // RS
	rtemp2 = ifft(Nx,Ny,Nz,dV,ktemp1);

	ktemp1.free(); // KSpace
	ComplexVector ktemp3(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp4(Nx*Ny*Nz); // RS
	rtemp4 = ifft(Nx,Ny,Nz,dV,ktemp3);

	ktemp3.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4[i] = 7.957747154594767e-2*rtemp2[i]*rtemp2[i]/R + 7.957747154594767e-2*rtemp4[i]*rtemp4[i]/R;
	}

	rtemp2.free(); // Realspace
	ComplexVector ktemp6(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp7(Nx*Ny*Nz); // RS
	rtemp7 = ifft(Nx,Ny,Nz,dV,ktemp6);

	ktemp6.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7[i] = rtemp4[i] + 7.957747154594767e-2*rtemp7[i]*rtemp7[i]/R;
	}

	rtemp4.free(); // Realspace
	ComplexVector ktemp9(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp9[0] = (12.566370614359172*R*R)*ktemp0[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp9[i] = std::complex<double>((12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].real(),
				(12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].imag());
	}

	Vector rtemp10(Nx*Ny*Nz); // RS
	rtemp10 = ifft(Nx,Ny,Nz,dV,ktemp9);

	ktemp9.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp10[i] = 7.957747154594767e-2*rtemp10[i]*rtemp10[i]/R - 1.0*rtemp7[i];
	}

	rtemp7.free(); // Realspace
	{
		const int i = 0;
		ktemp0[0] = ktemp0[i]*(4.188790204786391*R*R*R);
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp0[i] = std::complex<double>(ktemp0[i].real()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)),
				ktemp0[i].imag()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)));
	}

	Vector n3(Nx*Ny*Nz); // RS
	n3 = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n3[i] = rtemp10[i]/(1.0 - 1.0*n3[i]);
	}

	rtemp10.free(); // Realspace
	double 	s15 = 0;
	for (int i=0; i<Nx*Ny*Nz; i++) {
		s15 += dV*kT*n3[i];
	}

	n3.free(); // Realspace
	kTphi2 = s15;
	return kTphi2;

}

double SW_liquid::get_kTphi3() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	ComplexVector ktemp1(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp1[0] = (12.566370614359172*R*R)*ktemp0[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1[i] = std::complex<double>((12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].real(),
				(12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].imag());
	}

	Vector n2(Nx*Ny*Nz); // RS
	n2 = ifft(Nx,Ny,Nz,dV,ktemp1);

	ktemp1.free(); // KSpace
	ComplexVector ktemp3(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp3[0] = ktemp0[i]*(4.188790204786391*R*R*R);
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3[i] = std::complex<double>(ktemp0[i].real()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)),
				ktemp0[i].imag()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)));
	}

	Vector n3(Nx*Ny*Nz); // RS
	n3 = ifft(Nx,Ny,Nz,dV,ktemp3);

	ktemp3.free(); // KSpace
	ComplexVector ktemp5(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector n2vx(Nx*Ny*Nz); // RS
	n2vx = ifft(Nx,Ny,Nz,dV,ktemp5);

	ktemp5.free(); // KSpace
	ComplexVector ktemp7(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector n2vy(Nx*Ny*Nz); // RS
	n2vy = ifft(Nx,Ny,Nz,dV,ktemp7);

	ktemp7.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n2vy[i] = n2vx[i]*n2vx[i] + n2vy[i]*n2vy[i];
	}

	n2vx.free(); // Realspace
	ktemp0[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp0[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector n2vz(Nx*Ny*Nz); // RS
	n2vz = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n2vz[i] = n2vy[i] + n2vz[i]*n2vz[i];
	}

	n2vy.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n2vz[i] = n2[i]*(n2[i]*n2[i] - 3.0*n2vz[i]);
	}

	n2.free(); // Realspace
	double 	s14 = 0;
	for (int i=0; i<Nx*Ny*Nz; i++) {
		s14 += dV*kT*(8.841941282883075e-3*n2vz[i]*(n3[i] + log(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]))/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i])));
	}

	n2vz.free(); // Realspace
	n3.free(); // Realspace
	kTphi3 = s14;
	return kTphi3;

}

Vector SW_liquid::get_n0() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	{
		const int i = 0;
		ktemp0[0] = (12.566370614359172*R*R)*ktemp0[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp0[i] = std::complex<double>((12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].real(),
				(12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].imag());
	}

	Vector rtemp2(Nx*Ny*Nz); // RS
	rtemp2 = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2[i] = 7.957747154594767e-2*rtemp2[i]/(R*R);
	}

	return rtemp2;

}

Vector SW_liquid::get_n1() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	{
		const int i = 0;
		ktemp0[0] = (12.566370614359172*R*R)*ktemp0[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp0[i] = std::complex<double>((12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].real(),
				(12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].imag());
	}

	Vector rtemp2(Nx*Ny*Nz); // RS
	rtemp2 = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2[i] = 7.957747154594767e-2*rtemp2[i]/R;
	}

	return rtemp2;

}

Vector SW_liquid::get_n1v_dot_n2v() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	ComplexVector ktemp1(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2(Nx*Ny*Nz); // RS
	rtemp2 = ifft(Nx,Ny,Nz,dV,ktemp1);

	ktemp1.free(); // KSpace
	ComplexVector ktemp3(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp4(Nx*Ny*Nz); // RS
	rtemp4 = ifft(Nx,Ny,Nz,dV,ktemp3);

	ktemp3.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4[i] = 7.957747154594767e-2*rtemp2[i]*rtemp2[i]/R + 7.957747154594767e-2*rtemp4[i]*rtemp4[i]/R;
	}

	rtemp2.free(); // Realspace
	ktemp0[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp0[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp7(Nx*Ny*Nz); // RS
	rtemp7 = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7[i] = rtemp4[i] + 7.957747154594767e-2*rtemp7[i]*rtemp7[i]/R;
	}

	rtemp4.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7[i] = rtemp7[i];
	}

	return rtemp7;

}

Vector SW_liquid::get_n1vx() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	ktemp0[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp0[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2(Nx*Ny*Nz); // RS
	rtemp2 = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2[i] = 7.957747154594767e-2*rtemp2[i]/R;
	}

	return rtemp2;

}

Vector SW_liquid::get_n1vy() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	ktemp0[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp0[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2(Nx*Ny*Nz); // RS
	rtemp2 = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2[i] = 7.957747154594767e-2*rtemp2[i]/R;
	}

	return rtemp2;

}

Vector SW_liquid::get_n1vz() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	ktemp0[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp0[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2(Nx*Ny*Nz); // RS
	rtemp2 = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp2[i] = 7.957747154594767e-2*rtemp2[i]/R;
	}

	return rtemp2;

}

Vector SW_liquid::get_n2() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	{
		const int i = 0;
		ktemp0[0] = (12.566370614359172*R*R)*ktemp0[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp0[i] = std::complex<double>((12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].real(),
				(12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].imag());
	}

	Vector n2(Nx*Ny*Nz); // RS
	n2 = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n2[i] = n2[i];
	}

	return n2;

}

Vector SW_liquid::get_n2vsqr() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	ComplexVector ktemp1(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector n2vx(Nx*Ny*Nz); // RS
	n2vx = ifft(Nx,Ny,Nz,dV,ktemp1);

	ktemp1.free(); // KSpace
	ComplexVector ktemp3(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector n2vy(Nx*Ny*Nz); // RS
	n2vy = ifft(Nx,Ny,Nz,dV,ktemp3);

	ktemp3.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n2vy[i] = n2vx[i]*n2vx[i] + n2vy[i]*n2vy[i];
	}

	n2vx.free(); // Realspace
	ktemp0[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp0[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector n2vz(Nx*Ny*Nz); // RS
	n2vz = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n2vz[i] = n2vy[i] + n2vz[i]*n2vz[i];
	}

	n2vy.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n2vz[i] = n2vz[i];
	}

	return n2vz;

}

Vector SW_liquid::get_n2vx() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	ktemp0[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp0[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector n2vx(Nx*Ny*Nz); // RS
	n2vx = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n2vx[i] = n2vx[i];
	}

	return n2vx;

}

Vector SW_liquid::get_n2vy() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	ktemp0[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp0[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector n2vy(Nx*Ny*Nz); // RS
	n2vy = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n2vy[i] = n2vy[i];
	}

	return n2vy;

}

Vector SW_liquid::get_n2vz() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	ktemp0[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp0[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector n2vz(Nx*Ny*Nz); // RS
	n2vz = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n2vz[i] = n2vz[i];
	}

	return n2vz;

}

Vector SW_liquid::get_n3() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	{
		const int i = 0;
		ktemp0[0] = ktemp0[i]*(4.188790204786391*R*R*R);
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp0[i] = std::complex<double>(ktemp0[i].real()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)),
				ktemp0[i].imag()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)));
	}

	Vector n3(Nx*Ny*Nz); // RS
	n3 = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n3[i] = n3[i];
	}

	return n3;

}

ComplexVector SW_liquid::get_ngphi0() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	ComplexVector ktemp1(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp1[0] = (12.566370614359172*R*R)*ktemp0[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1[i] = std::complex<double>((12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].real(),
				(12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].imag());
	}

	Vector n2(Nx*Ny*Nz); // RS
	n2 = ifft(Nx,Ny,Nz,dV,ktemp1);

	Vector rtemp3(Nx*Ny*Nz); // RS
	rtemp3 = ifft(Nx,Ny,Nz,dV,ktemp1);

	ktemp1.free(); // KSpace
	ComplexVector ktemp4(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp4[0] = ktemp0[i]*(4.188790204786391*R*R*R);
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4[i] = std::complex<double>(ktemp0[i].real()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)),
				ktemp0[i].imag()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)));
	}

	Vector n3(Nx*Ny*Nz); // RS
	n3 = ifft(Nx,Ny,Nz,dV,ktemp4);

	ktemp4.free(); // KSpace
	Vector dphitot_by_dn1(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		dphitot_by_dn1[i] = n2[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp7(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7 = fft(Nx,Ny,Nz,dV,dphitot_by_dn1);

	dphitot_by_dn1.free(); // Realspace
	ComplexVector ktemp8(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp8[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp8[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector dn1v_dot_n2v_by_dn1vx(Nx*Ny*Nz); // RS
	dn1v_dot_n2v_by_dn1vx = ifft(Nx,Ny,Nz,dV,ktemp8);

	Vector rtemp10(Nx*Ny*Nz); // RS
	rtemp10 = ifft(Nx,Ny,Nz,dV,ktemp8);

	ktemp8.free(); // KSpace
	Vector dphitot_by_dn2vx(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		dphitot_by_dn2vx[i] = -7.957747154594767e-2*rtemp10[i]/R/t1 - 5.305164769729845e-2*n2[i]*rtemp10[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp12(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp12 = fft(Nx,Ny,Nz,dV,dphitot_by_dn2vx);

	dphitot_by_dn2vx.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		dn1v_dot_n2v_by_dn1vx[i] = -1.0*dn1v_dot_n2v_by_dn1vx[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp14(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp14 = fft(Nx,Ny,Nz,dV,dn1v_dot_n2v_by_dn1vx);

	dn1v_dot_n2v_by_dn1vx.free(); // Realspace
	ComplexVector ktemp15(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp15[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp15[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector dn1v_dot_n2v_by_dn1vy(Nx*Ny*Nz); // RS
	dn1v_dot_n2v_by_dn1vy = ifft(Nx,Ny,Nz,dV,ktemp15);

	Vector rtemp17(Nx*Ny*Nz); // RS
	rtemp17 = ifft(Nx,Ny,Nz,dV,ktemp15);

	ktemp15.free(); // KSpace
	Vector dphitot_by_dn2vy(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		dphitot_by_dn2vy[i] = -7.957747154594767e-2*rtemp17[i]/R/t1 - 5.305164769729845e-2*n2[i]*rtemp17[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp19(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp19 = fft(Nx,Ny,Nz,dV,dphitot_by_dn2vy);

	dphitot_by_dn2vy.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		dn1v_dot_n2v_by_dn1vy[i] = -1.0*dn1v_dot_n2v_by_dn1vy[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp21(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp21 = fft(Nx,Ny,Nz,dV,dn1v_dot_n2v_by_dn1vy);

	dn1v_dot_n2v_by_dn1vy.free(); // Realspace
	ComplexVector ktemp22(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp22[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp22[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector dn1v_dot_n2v_by_dn1vz(Nx*Ny*Nz); // RS
	dn1v_dot_n2v_by_dn1vz = ifft(Nx,Ny,Nz,dV,ktemp22);

	Vector rtemp24(Nx*Ny*Nz); // RS
	rtemp24 = ifft(Nx,Ny,Nz,dV,ktemp22);

	ktemp22.free(); // KSpace
	Vector dphitot_by_dn3(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = rtemp10[i];
		const double t3 = rtemp17[i];
		const double t4 = rtemp24[i];
		const double t5 = log(t1);
		const double t6 = 1.0/t1;
		const double t7 = 1.0/n3[i];
		dphitot_by_dn3[i] = t6*t7*t7*n2[i]*(t6*(8.841941282883075e-3 + (1.768388256576615e-2*t6 - 1.768388256576615e-2*t7)*(n3[i] + t5/(t6*t6))) - 8.841941282883075e-3 - 1.768388256576615e-2*t5)*(n2[i]*n2[i] - 3.0*t4*t4 - 3.0*t3*t3 - 3.0*t2*t2) + 7.957747154594767e-2*t6*rtemp3[i]/(R*R) + t6*t6*(7.957747154594767e-2*n2[i]*rtemp3[i]/R - 7.957747154594767e-2*t4*rtemp24[i]/R - 7.957747154594767e-2*t3*rtemp17[i]/R - 7.957747154594767e-2*t2*rtemp10[i]/R);
	}

	ComplexVector ktemp26(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp26 = fft(Nx,Ny,Nz,dV,dphitot_by_dn3);

	dphitot_by_dn3.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		dn1v_dot_n2v_by_dn1vz[i] = -1.0*dn1v_dot_n2v_by_dn1vz[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp28(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp28 = fft(Nx,Ny,Nz,dV,dn1v_dot_n2v_by_dn1vz);

	dn1v_dot_n2v_by_dn1vz.free(); // Realspace
	Vector dphitot_by_dn0(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		dphitot_by_dn0[i] = -1.0*log(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp30(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp30 = fft(Nx,Ny,Nz,dV,dphitot_by_dn0);

	dphitot_by_dn0.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp17[i] = (n3[i] + t1*t1*log(t1))*(2.6525823848649224e-2*n2[i]*n2[i] - 2.6525823848649224e-2*rtemp10[i]*rtemp10[i] - 2.6525823848649224e-2*rtemp17[i]*rtemp17[i] - 2.6525823848649224e-2*rtemp24[i]*rtemp24[i])/(t1*t1*n3[i]*n3[i]) + 7.957747154594767e-2*rtemp3[i]/R/t1;
	}

	rtemp10.free(); // Realspace
	rtemp3.free(); // Realspace
	ComplexVector ktemp32(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp32 = fft(Nx,Ny,Nz,dV,rtemp17);

	rtemp17.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp24[i] = -7.957747154594767e-2*rtemp24[i]/R/t1 - 5.305164769729845e-2*n2[i]*rtemp24[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	n3.free(); // Realspace
	n2.free(); // Realspace
	ComplexVector ktemp34(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp34 = fft(Nx,Ny,Nz,dV,rtemp24);

	rtemp24.free(); // Realspace
	{
		const int i = 0;
		ktemp34[0] = (((12.566370614359172*R*R)*(-0.15915494309189535*ktemp30[i]/R - 7.957747154594767e-2*ktemp7[i]) - 7.957747154594767e-2*(-25.132741228718345*R)*ktemp30[i])/R - 7.957747154594767e-2*(-25.132741228718345*R)*ktemp7[i])/R + (12.566370614359172*R*R)*ktemp26[i] - (-25.132741228718345*R)*ktemp32[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = 12.566370614359172*R*sin(R*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]))*exp(-6.0*dr*dr*(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]))/(sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]));
		const double t2 = exp(-6.0*dr*dr*(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]));
		const double t3 = R*cos(R*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2])) - sin(R*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]))/(sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]));
		const double t4 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t5 = 12.566370614359172*t2*(-1.0*sin(R*sqrt(t4))/(sqrt(t4)) - 1.0*R*cos(R*sqrt(t4)));
		double it6 = 12.566370614359172*R*k_i[0]*t2*sin(R*sqrt(t4))/(sqrt(t4));
		double it7 = 12.566370614359172*R*k_i[1]*t2*sin(R*sqrt(t4))/(sqrt(t4));
		double it8 = 12.566370614359172*R*k_i[2]*t2*sin(R*sqrt(t4))/(sqrt(t4));
		ktemp34[i] = std::complex<double>(ktemp26[i].real()*t1 - 1.0*ktemp19[i].imag()*it7 - 1.0*ktemp12[i].imag()*it6 - ktemp32[i].real()*t5 - ktemp34[i].imag()*it8 + ((-7.957747154594767e-2*ktemp7[i].real()*t1 - 7.957747154594767e-2*ktemp30[i].real()*(t5 + 2.0*t1/R) - 1.0*ktemp28[i].imag()*k_i[2]*t2*t3/t4 - 1.0*ktemp21[i].imag()*k_i[1]*t2*t3/t4 - 1.0*ktemp14[i].imag()*k_i[0]*t2*t3/t4)/R - 7.957747154594767e-2*ktemp7[i].real()*t5 - 7.957747154594767e-2*ktemp28[i].imag()*it8 - 7.957747154594767e-2*ktemp21[i].imag()*it7 - 7.957747154594767e-2*ktemp14[i].imag()*it6)/R,
				ktemp12[i].real()*it6 + ktemp19[i].real()*it7 + ktemp26[i].imag()*t1 - ktemp32[i].imag()*t5 + ktemp34[i].real()*it8 + (7.957747154594767e-2*ktemp14[i].real()*it6 + 7.957747154594767e-2*ktemp21[i].real()*it7 + 7.957747154594767e-2*ktemp28[i].real()*it8 - 7.957747154594767e-2*ktemp7[i].imag()*t5 + (ktemp14[i].real()*k_i[0]*t2*t3/t4 + ktemp21[i].real()*k_i[1]*t2*t3/t4 + ktemp28[i].real()*k_i[2]*t2*t3/t4 - 7.957747154594767e-2*ktemp30[i].imag()*(t5 + 2.0*t1/R) - 7.957747154594767e-2*ktemp7[i].imag()*t1)/R)/R);
	}

	ktemp32.free(); // KSpace
	ktemp30.free(); // KSpace
	ktemp28.free(); // KSpace
	ktemp26.free(); // KSpace
	ktemp21.free(); // KSpace
	ktemp19.free(); // KSpace
	ktemp14.free(); // KSpace
	ktemp12.free(); // KSpace
	ktemp7.free(); // KSpace
	Vector rtemp36(Nx*Ny*Nz); // RS
	rtemp36 = ifft(Nx,Ny,Nz,dV,ktemp34);

	ktemp34.free(); // KSpace
	{
		const int i = 0;
		ktemp0[0] = (50.26548245743669*R*R)*ktemp0[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp0[i] = std::complex<double>((25.132741228718345*R*sin(2.0*R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].real(),
				(25.132741228718345*R*sin(2.0*R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].imag());
	}

	Vector rtemp38(Nx*Ny*Nz); // RS
	rtemp38 = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp38[i] = kT*rtemp36[i]*n[i]/rtemp38[i];
	}

	rtemp36.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp38[i] = rtemp38[i]/kT;
	}

	ComplexVector ktemp41(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp41 = fft(Nx,Ny,Nz,dV,rtemp38);

	rtemp38.free(); // Realspace
	{
		const int i = 0;
		ktemp41[0] = ktemp41[i]*epsilon*sigma*sigma*sigma*(4.188790204786391 - 4.188790204786391*lambda*lambda*lambda);
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sigma*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		const double t2 = lambda*t1;
		const double t3 = 1.0/(sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]));
		ktemp41[i] = std::complex<double>(ktemp41[i].real()*(-12.566370614359172*epsilon*t3*t3*(sigma*(cos(t1) - lambda*cos(t2)) + t3*(sin(t2) - 1.0*sin(t1)))),
				ktemp41[i].imag()*(-12.566370614359172*epsilon*t3*t3*(sigma*(cos(t1) - lambda*cos(t2)) + t3*(sin(t2) - 1.0*sin(t1)))));
	}

	return ktemp41;

}

ComplexVector SW_liquid::get_ngphi1() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	ComplexVector ktemp1(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp1[0] = (12.566370614359172*R*R)*ktemp0[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1[i] = std::complex<double>((12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].real(),
				(12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].imag());
	}

	Vector n2(Nx*Ny*Nz); // RS
	n2 = ifft(Nx,Ny,Nz,dV,ktemp1);

	Vector rtemp3(Nx*Ny*Nz); // RS
	rtemp3 = ifft(Nx,Ny,Nz,dV,ktemp1);

	ktemp1.free(); // KSpace
	ComplexVector ktemp4(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp4[0] = ktemp0[i]*(4.188790204786391*R*R*R);
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4[i] = std::complex<double>(ktemp0[i].real()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)),
				ktemp0[i].imag()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)));
	}

	Vector n3(Nx*Ny*Nz); // RS
	n3 = ifft(Nx,Ny,Nz,dV,ktemp4);

	ktemp4.free(); // KSpace
	Vector dphitot_by_dn1(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		dphitot_by_dn1[i] = n2[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp7(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7 = fft(Nx,Ny,Nz,dV,dphitot_by_dn1);

	dphitot_by_dn1.free(); // Realspace
	ComplexVector ktemp8(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp8[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp8[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector dn1v_dot_n2v_by_dn1vx(Nx*Ny*Nz); // RS
	dn1v_dot_n2v_by_dn1vx = ifft(Nx,Ny,Nz,dV,ktemp8);

	Vector rtemp10(Nx*Ny*Nz); // RS
	rtemp10 = ifft(Nx,Ny,Nz,dV,ktemp8);

	ktemp8.free(); // KSpace
	Vector dphitot_by_dn2vx(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		dphitot_by_dn2vx[i] = -7.957747154594767e-2*rtemp10[i]/R/t1 - 5.305164769729845e-2*n2[i]*rtemp10[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp12(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp12 = fft(Nx,Ny,Nz,dV,dphitot_by_dn2vx);

	dphitot_by_dn2vx.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		dn1v_dot_n2v_by_dn1vx[i] = -1.0*dn1v_dot_n2v_by_dn1vx[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp14(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp14 = fft(Nx,Ny,Nz,dV,dn1v_dot_n2v_by_dn1vx);

	dn1v_dot_n2v_by_dn1vx.free(); // Realspace
	ComplexVector ktemp15(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp15[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp15[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector dn1v_dot_n2v_by_dn1vy(Nx*Ny*Nz); // RS
	dn1v_dot_n2v_by_dn1vy = ifft(Nx,Ny,Nz,dV,ktemp15);

	Vector rtemp17(Nx*Ny*Nz); // RS
	rtemp17 = ifft(Nx,Ny,Nz,dV,ktemp15);

	ktemp15.free(); // KSpace
	Vector dphitot_by_dn2vy(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		dphitot_by_dn2vy[i] = -7.957747154594767e-2*rtemp17[i]/R/t1 - 5.305164769729845e-2*n2[i]*rtemp17[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp19(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp19 = fft(Nx,Ny,Nz,dV,dphitot_by_dn2vy);

	dphitot_by_dn2vy.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		dn1v_dot_n2v_by_dn1vy[i] = -1.0*dn1v_dot_n2v_by_dn1vy[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp21(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp21 = fft(Nx,Ny,Nz,dV,dn1v_dot_n2v_by_dn1vy);

	dn1v_dot_n2v_by_dn1vy.free(); // Realspace
	ComplexVector ktemp22(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp22[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp22[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector dn1v_dot_n2v_by_dn1vz(Nx*Ny*Nz); // RS
	dn1v_dot_n2v_by_dn1vz = ifft(Nx,Ny,Nz,dV,ktemp22);

	Vector rtemp24(Nx*Ny*Nz); // RS
	rtemp24 = ifft(Nx,Ny,Nz,dV,ktemp22);

	ktemp22.free(); // KSpace
	Vector dphitot_by_dn3(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = rtemp10[i];
		const double t3 = rtemp17[i];
		const double t4 = rtemp24[i];
		const double t5 = log(t1);
		const double t6 = 1.0/t1;
		const double t7 = 1.0/n3[i];
		dphitot_by_dn3[i] = t6*t7*t7*n2[i]*(t6*(8.841941282883075e-3 + (1.768388256576615e-2*t6 - 1.768388256576615e-2*t7)*(n3[i] + t5/(t6*t6))) - 8.841941282883075e-3 - 1.768388256576615e-2*t5)*(n2[i]*n2[i] - 3.0*t4*t4 - 3.0*t3*t3 - 3.0*t2*t2) + 7.957747154594767e-2*t6*rtemp3[i]/(R*R) + t6*t6*(7.957747154594767e-2*n2[i]*rtemp3[i]/R - 7.957747154594767e-2*t4*rtemp24[i]/R - 7.957747154594767e-2*t3*rtemp17[i]/R - 7.957747154594767e-2*t2*rtemp10[i]/R);
	}

	ComplexVector ktemp26(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp26 = fft(Nx,Ny,Nz,dV,dphitot_by_dn3);

	dphitot_by_dn3.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		dn1v_dot_n2v_by_dn1vz[i] = -1.0*dn1v_dot_n2v_by_dn1vz[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp28(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp28 = fft(Nx,Ny,Nz,dV,dn1v_dot_n2v_by_dn1vz);

	dn1v_dot_n2v_by_dn1vz.free(); // Realspace
	Vector dphitot_by_dn0(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		dphitot_by_dn0[i] = -1.0*log(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp30(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp30 = fft(Nx,Ny,Nz,dV,dphitot_by_dn0);

	dphitot_by_dn0.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp17[i] = (n3[i] + t1*t1*log(t1))*(2.6525823848649224e-2*n2[i]*n2[i] - 2.6525823848649224e-2*rtemp10[i]*rtemp10[i] - 2.6525823848649224e-2*rtemp17[i]*rtemp17[i] - 2.6525823848649224e-2*rtemp24[i]*rtemp24[i])/(t1*t1*n3[i]*n3[i]) + 7.957747154594767e-2*rtemp3[i]/R/t1;
	}

	rtemp10.free(); // Realspace
	rtemp3.free(); // Realspace
	ComplexVector ktemp32(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp32 = fft(Nx,Ny,Nz,dV,rtemp17);

	rtemp17.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp24[i] = -7.957747154594767e-2*rtemp24[i]/R/t1 - 5.305164769729845e-2*n2[i]*rtemp24[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	n3.free(); // Realspace
	n2.free(); // Realspace
	ComplexVector ktemp34(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp34 = fft(Nx,Ny,Nz,dV,rtemp24);

	rtemp24.free(); // Realspace
	{
		const int i = 0;
		ktemp34[0] = (((12.566370614359172*R*R)*(-0.15915494309189535*ktemp30[i]/R - 7.957747154594767e-2*ktemp7[i]) - 7.957747154594767e-2*(-25.132741228718345*R)*ktemp30[i])/R - 7.957747154594767e-2*(-25.132741228718345*R)*ktemp7[i])/R + (12.566370614359172*R*R)*ktemp26[i] - (-25.132741228718345*R)*ktemp32[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = 12.566370614359172*R*sin(R*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]))*exp(-6.0*dr*dr*(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]))/(sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]));
		const double t2 = exp(-6.0*dr*dr*(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]));
		const double t3 = R*cos(R*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2])) - sin(R*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]))/(sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]));
		const double t4 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t5 = 12.566370614359172*t2*(-1.0*sin(R*sqrt(t4))/(sqrt(t4)) - 1.0*R*cos(R*sqrt(t4)));
		double it6 = 12.566370614359172*R*k_i[0]*t2*sin(R*sqrt(t4))/(sqrt(t4));
		double it7 = 12.566370614359172*R*k_i[1]*t2*sin(R*sqrt(t4))/(sqrt(t4));
		double it8 = 12.566370614359172*R*k_i[2]*t2*sin(R*sqrt(t4))/(sqrt(t4));
		ktemp34[i] = std::complex<double>(ktemp26[i].real()*t1 - 1.0*ktemp19[i].imag()*it7 - 1.0*ktemp12[i].imag()*it6 - ktemp32[i].real()*t5 - ktemp34[i].imag()*it8 + ((-7.957747154594767e-2*ktemp7[i].real()*t1 - 7.957747154594767e-2*ktemp30[i].real()*(t5 + 2.0*t1/R) - 1.0*ktemp28[i].imag()*k_i[2]*t2*t3/t4 - 1.0*ktemp21[i].imag()*k_i[1]*t2*t3/t4 - 1.0*ktemp14[i].imag()*k_i[0]*t2*t3/t4)/R - 7.957747154594767e-2*ktemp7[i].real()*t5 - 7.957747154594767e-2*ktemp28[i].imag()*it8 - 7.957747154594767e-2*ktemp21[i].imag()*it7 - 7.957747154594767e-2*ktemp14[i].imag()*it6)/R,
				ktemp12[i].real()*it6 + ktemp19[i].real()*it7 + ktemp26[i].imag()*t1 - ktemp32[i].imag()*t5 + ktemp34[i].real()*it8 + (7.957747154594767e-2*ktemp14[i].real()*it6 + 7.957747154594767e-2*ktemp21[i].real()*it7 + 7.957747154594767e-2*ktemp28[i].real()*it8 - 7.957747154594767e-2*ktemp7[i].imag()*t5 + (ktemp14[i].real()*k_i[0]*t2*t3/t4 + ktemp21[i].real()*k_i[1]*t2*t3/t4 + ktemp28[i].real()*k_i[2]*t2*t3/t4 - 7.957747154594767e-2*ktemp30[i].imag()*(t5 + 2.0*t1/R) - 7.957747154594767e-2*ktemp7[i].imag()*t1)/R)/R);
	}

	ktemp32.free(); // KSpace
	ktemp30.free(); // KSpace
	ktemp28.free(); // KSpace
	ktemp26.free(); // KSpace
	ktemp21.free(); // KSpace
	ktemp19.free(); // KSpace
	ktemp14.free(); // KSpace
	ktemp12.free(); // KSpace
	ktemp7.free(); // KSpace
	Vector rtemp36(Nx*Ny*Nz); // RS
	rtemp36 = ifft(Nx,Ny,Nz,dV,ktemp34);

	ktemp34.free(); // KSpace
	{
		const int i = 0;
		ktemp0[0] = (50.26548245743669*R*R)*ktemp0[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp0[i] = std::complex<double>((25.132741228718345*R*sin(2.0*R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].real(),
				(25.132741228718345*R*sin(2.0*R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].imag());
	}

	Vector rtemp38(Nx*Ny*Nz); // RS
	rtemp38 = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = kT*rtemp36[i]*n[i]/(kT*rtemp38[i]*n[i]);
		const double t2 = t1 - 1.0;
		rtemp38[i] = t2*(2.7e-2*t2 + t2*(0.838*t2 - 0.178*t2*t2)) - 1.754*t1;
	}

	rtemp36.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp38[i] = n[i]*(rtemp38[i] + 1.754);
	}

	ComplexVector ktemp41(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp41 = fft(Nx,Ny,Nz,dV,rtemp38);

	rtemp38.free(); // Realspace
	{
		const int i = 0;
		ktemp41[0] = ktemp41[i]*epsilon*sigma*sigma*sigma*(lambda*lambda*lambda*(4.188790204786391 - 3.141592653589794*lambda) - 1.0471975511965976);
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sigma*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		const double t2 = lambda*t1;
		const double t3 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		ktemp41[i] = std::complex<double>(ktemp41[i].real()*(-12.566370614359172*epsilon*((cos(t2)*(2.0 - lambda*t1*t1*(lambda - 1.0)) - 2.0*cos(t1))/(sigma*t3*t3) - (sin(t1) + sin(t2)*(1.0 - 2.0*lambda))/(sqrt(t3)*t3))),
				ktemp41[i].imag()*(-12.566370614359172*epsilon*((cos(t2)*(2.0 - lambda*t1*t1*(lambda - 1.0)) - 2.0*cos(t1))/(sigma*t3*t3) - (sin(t1) + sin(t2)*(1.0 - 2.0*lambda))/(sqrt(t3)*t3))));
	}

	return ktemp41;

}

ComplexVector SW_liquid::get_ngphi2() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	ComplexVector ktemp1(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp1[0] = (12.566370614359172*R*R)*ktemp0[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1[i] = std::complex<double>((12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].real(),
				(12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].imag());
	}

	Vector n2(Nx*Ny*Nz); // RS
	n2 = ifft(Nx,Ny,Nz,dV,ktemp1);

	Vector rtemp3(Nx*Ny*Nz); // RS
	rtemp3 = ifft(Nx,Ny,Nz,dV,ktemp1);

	ktemp1.free(); // KSpace
	ComplexVector ktemp4(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp4[0] = ktemp0[i]*(4.188790204786391*R*R*R);
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4[i] = std::complex<double>(ktemp0[i].real()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)),
				ktemp0[i].imag()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)));
	}

	Vector n3(Nx*Ny*Nz); // RS
	n3 = ifft(Nx,Ny,Nz,dV,ktemp4);

	ktemp4.free(); // KSpace
	Vector dphitot_by_dn1(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		dphitot_by_dn1[i] = n2[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp7(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7 = fft(Nx,Ny,Nz,dV,dphitot_by_dn1);

	dphitot_by_dn1.free(); // Realspace
	ComplexVector ktemp8(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp8[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp8[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector dn1v_dot_n2v_by_dn1vx(Nx*Ny*Nz); // RS
	dn1v_dot_n2v_by_dn1vx = ifft(Nx,Ny,Nz,dV,ktemp8);

	Vector rtemp10(Nx*Ny*Nz); // RS
	rtemp10 = ifft(Nx,Ny,Nz,dV,ktemp8);

	ktemp8.free(); // KSpace
	Vector dphitot_by_dn2vx(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		dphitot_by_dn2vx[i] = -7.957747154594767e-2*rtemp10[i]/R/t1 - 5.305164769729845e-2*n2[i]*rtemp10[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp12(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp12 = fft(Nx,Ny,Nz,dV,dphitot_by_dn2vx);

	dphitot_by_dn2vx.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		dn1v_dot_n2v_by_dn1vx[i] = -1.0*dn1v_dot_n2v_by_dn1vx[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp14(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp14 = fft(Nx,Ny,Nz,dV,dn1v_dot_n2v_by_dn1vx);

	dn1v_dot_n2v_by_dn1vx.free(); // Realspace
	ComplexVector ktemp15(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp15[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp15[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector dn1v_dot_n2v_by_dn1vy(Nx*Ny*Nz); // RS
	dn1v_dot_n2v_by_dn1vy = ifft(Nx,Ny,Nz,dV,ktemp15);

	Vector rtemp17(Nx*Ny*Nz); // RS
	rtemp17 = ifft(Nx,Ny,Nz,dV,ktemp15);

	ktemp15.free(); // KSpace
	Vector dphitot_by_dn2vy(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		dphitot_by_dn2vy[i] = -7.957747154594767e-2*rtemp17[i]/R/t1 - 5.305164769729845e-2*n2[i]*rtemp17[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp19(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp19 = fft(Nx,Ny,Nz,dV,dphitot_by_dn2vy);

	dphitot_by_dn2vy.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		dn1v_dot_n2v_by_dn1vy[i] = -1.0*dn1v_dot_n2v_by_dn1vy[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp21(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp21 = fft(Nx,Ny,Nz,dV,dn1v_dot_n2v_by_dn1vy);

	dn1v_dot_n2v_by_dn1vy.free(); // Realspace
	ComplexVector ktemp22(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp22[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp22[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector dn1v_dot_n2v_by_dn1vz(Nx*Ny*Nz); // RS
	dn1v_dot_n2v_by_dn1vz = ifft(Nx,Ny,Nz,dV,ktemp22);

	Vector rtemp24(Nx*Ny*Nz); // RS
	rtemp24 = ifft(Nx,Ny,Nz,dV,ktemp22);

	ktemp22.free(); // KSpace
	Vector dphitot_by_dn3(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = rtemp10[i];
		const double t3 = rtemp17[i];
		const double t4 = rtemp24[i];
		const double t5 = log(t1);
		const double t6 = 1.0/t1;
		const double t7 = 1.0/n3[i];
		dphitot_by_dn3[i] = t6*t7*t7*n2[i]*(t6*(8.841941282883075e-3 + (1.768388256576615e-2*t6 - 1.768388256576615e-2*t7)*(n3[i] + t5/(t6*t6))) - 8.841941282883075e-3 - 1.768388256576615e-2*t5)*(n2[i]*n2[i] - 3.0*t4*t4 - 3.0*t3*t3 - 3.0*t2*t2) + 7.957747154594767e-2*t6*rtemp3[i]/(R*R) + t6*t6*(7.957747154594767e-2*n2[i]*rtemp3[i]/R - 7.957747154594767e-2*t4*rtemp24[i]/R - 7.957747154594767e-2*t3*rtemp17[i]/R - 7.957747154594767e-2*t2*rtemp10[i]/R);
	}

	ComplexVector ktemp26(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp26 = fft(Nx,Ny,Nz,dV,dphitot_by_dn3);

	dphitot_by_dn3.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		dn1v_dot_n2v_by_dn1vz[i] = -1.0*dn1v_dot_n2v_by_dn1vz[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp28(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp28 = fft(Nx,Ny,Nz,dV,dn1v_dot_n2v_by_dn1vz);

	dn1v_dot_n2v_by_dn1vz.free(); // Realspace
	Vector dphitot_by_dn0(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		dphitot_by_dn0[i] = -1.0*log(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp30(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp30 = fft(Nx,Ny,Nz,dV,dphitot_by_dn0);

	dphitot_by_dn0.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp17[i] = (n3[i] + t1*t1*log(t1))*(2.6525823848649224e-2*n2[i]*n2[i] - 2.6525823848649224e-2*rtemp10[i]*rtemp10[i] - 2.6525823848649224e-2*rtemp17[i]*rtemp17[i] - 2.6525823848649224e-2*rtemp24[i]*rtemp24[i])/(t1*t1*n3[i]*n3[i]) + 7.957747154594767e-2*rtemp3[i]/R/t1;
	}

	rtemp10.free(); // Realspace
	rtemp3.free(); // Realspace
	ComplexVector ktemp32(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp32 = fft(Nx,Ny,Nz,dV,rtemp17);

	rtemp17.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp24[i] = -7.957747154594767e-2*rtemp24[i]/R/t1 - 5.305164769729845e-2*n2[i]*rtemp24[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	n3.free(); // Realspace
	n2.free(); // Realspace
	ComplexVector ktemp34(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp34 = fft(Nx,Ny,Nz,dV,rtemp24);

	rtemp24.free(); // Realspace
	{
		const int i = 0;
		ktemp34[0] = (((12.566370614359172*R*R)*(-0.15915494309189535*ktemp30[i]/R - 7.957747154594767e-2*ktemp7[i]) - 7.957747154594767e-2*(-25.132741228718345*R)*ktemp30[i])/R - 7.957747154594767e-2*(-25.132741228718345*R)*ktemp7[i])/R + (12.566370614359172*R*R)*ktemp26[i] - (-25.132741228718345*R)*ktemp32[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = 12.566370614359172*R*sin(R*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]))*exp(-6.0*dr*dr*(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]))/(sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]));
		const double t2 = exp(-6.0*dr*dr*(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]));
		const double t3 = R*cos(R*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2])) - sin(R*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]))/(sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]));
		const double t4 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t5 = 12.566370614359172*t2*(-1.0*sin(R*sqrt(t4))/(sqrt(t4)) - 1.0*R*cos(R*sqrt(t4)));
		double it6 = 12.566370614359172*R*k_i[0]*t2*sin(R*sqrt(t4))/(sqrt(t4));
		double it7 = 12.566370614359172*R*k_i[1]*t2*sin(R*sqrt(t4))/(sqrt(t4));
		double it8 = 12.566370614359172*R*k_i[2]*t2*sin(R*sqrt(t4))/(sqrt(t4));
		ktemp34[i] = std::complex<double>(ktemp26[i].real()*t1 - 1.0*ktemp19[i].imag()*it7 - 1.0*ktemp12[i].imag()*it6 - ktemp32[i].real()*t5 - ktemp34[i].imag()*it8 + ((-7.957747154594767e-2*ktemp7[i].real()*t1 - 7.957747154594767e-2*ktemp30[i].real()*(t5 + 2.0*t1/R) - 1.0*ktemp28[i].imag()*k_i[2]*t2*t3/t4 - 1.0*ktemp21[i].imag()*k_i[1]*t2*t3/t4 - 1.0*ktemp14[i].imag()*k_i[0]*t2*t3/t4)/R - 7.957747154594767e-2*ktemp7[i].real()*t5 - 7.957747154594767e-2*ktemp28[i].imag()*it8 - 7.957747154594767e-2*ktemp21[i].imag()*it7 - 7.957747154594767e-2*ktemp14[i].imag()*it6)/R,
				ktemp12[i].real()*it6 + ktemp19[i].real()*it7 + ktemp26[i].imag()*t1 - ktemp32[i].imag()*t5 + ktemp34[i].real()*it8 + (7.957747154594767e-2*ktemp14[i].real()*it6 + 7.957747154594767e-2*ktemp21[i].real()*it7 + 7.957747154594767e-2*ktemp28[i].real()*it8 - 7.957747154594767e-2*ktemp7[i].imag()*t5 + (ktemp14[i].real()*k_i[0]*t2*t3/t4 + ktemp21[i].real()*k_i[1]*t2*t3/t4 + ktemp28[i].real()*k_i[2]*t2*t3/t4 - 7.957747154594767e-2*ktemp30[i].imag()*(t5 + 2.0*t1/R) - 7.957747154594767e-2*ktemp7[i].imag()*t1)/R)/R);
	}

	ktemp32.free(); // KSpace
	ktemp30.free(); // KSpace
	ktemp28.free(); // KSpace
	ktemp26.free(); // KSpace
	ktemp21.free(); // KSpace
	ktemp19.free(); // KSpace
	ktemp14.free(); // KSpace
	ktemp12.free(); // KSpace
	ktemp7.free(); // KSpace
	Vector rtemp36(Nx*Ny*Nz); // RS
	rtemp36 = ifft(Nx,Ny,Nz,dV,ktemp34);

	ktemp34.free(); // KSpace
	{
		const int i = 0;
		ktemp0[0] = (50.26548245743669*R*R)*ktemp0[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp0[i] = std::complex<double>((25.132741228718345*R*sin(2.0*R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].real(),
				(25.132741228718345*R*sin(2.0*R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].imag());
	}

	Vector rtemp38(Nx*Ny*Nz); // RS
	rtemp38 = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = kT*rtemp36[i]*n[i]/(kT*rtemp38[i]*n[i]);
		const double t2 = t1 - 1.0;
		rtemp38[i] = t2*(4.403*t2 + t2*(0.363*t2*t2 - 2.48*t2)) - 2.243*t1;
	}

	rtemp36.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp38[i] = n[i]*(rtemp38[i] + 2.243);
	}

	ComplexVector ktemp41(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp41 = fft(Nx,Ny,Nz,dV,rtemp38);

	rtemp38.free(); // Realspace
	{
		const int i = 0;
		ktemp41[0] = ktemp41[i]*epsilon*sigma*sigma*sigma*(0.418879020478639 + lambda*lambda*lambda*(lambda*(6.283185307179588 - 2.513274122871834*lambda) - 4.188790204786391));
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = lambda*sigma*sqrt(t1);
		const double t3 = sigma*sqrt(t1);
		ktemp41[i] = std::complex<double>(ktemp41[i].real()*(-12.566370614359172*epsilon*((sin(t2)*(t3*t3*(1.0 + lambda*(3.0*lambda - 4.0)) - 6.0)/(sqrt(t1)) + 6.0*sin(t3)/(sqrt(t1)))/(sigma*t1*t1) + (-1.0*cos(t2)*(4.0 + lambda*(t3*t3*(lambda - 1.0)*(lambda - 1.0) - 6.0)) - 2.0*cos(t3))/(t1*t1))/sigma),
				ktemp41[i].imag()*(-12.566370614359172*epsilon*((sin(t2)*(t3*t3*(1.0 + lambda*(3.0*lambda - 4.0)) - 6.0)/(sqrt(t1)) + 6.0*sin(t3)/(sqrt(t1)))/(sigma*t1*t1) + (-1.0*cos(t2)*(4.0 + lambda*(t3*t3*(lambda - 1.0)*(lambda - 1.0) - 6.0)) - 2.0*cos(t3))/(t1*t1))/sigma));
	}

	return ktemp41;

}

ComplexVector SW_liquid::get_ngphi3() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	ComplexVector ktemp1(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp1[0] = (12.566370614359172*R*R)*ktemp0[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1[i] = std::complex<double>((12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].real(),
				(12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].imag());
	}

	Vector n2(Nx*Ny*Nz); // RS
	n2 = ifft(Nx,Ny,Nz,dV,ktemp1);

	Vector rtemp3(Nx*Ny*Nz); // RS
	rtemp3 = ifft(Nx,Ny,Nz,dV,ktemp1);

	ktemp1.free(); // KSpace
	ComplexVector ktemp4(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp4[0] = ktemp0[i]*(4.188790204786391*R*R*R);
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4[i] = std::complex<double>(ktemp0[i].real()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)),
				ktemp0[i].imag()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)));
	}

	Vector n3(Nx*Ny*Nz); // RS
	n3 = ifft(Nx,Ny,Nz,dV,ktemp4);

	ktemp4.free(); // KSpace
	Vector dphitot_by_dn1(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		dphitot_by_dn1[i] = n2[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp7(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7 = fft(Nx,Ny,Nz,dV,dphitot_by_dn1);

	dphitot_by_dn1.free(); // Realspace
	ComplexVector ktemp8(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp8[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp8[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector dn1v_dot_n2v_by_dn1vx(Nx*Ny*Nz); // RS
	dn1v_dot_n2v_by_dn1vx = ifft(Nx,Ny,Nz,dV,ktemp8);

	Vector rtemp10(Nx*Ny*Nz); // RS
	rtemp10 = ifft(Nx,Ny,Nz,dV,ktemp8);

	ktemp8.free(); // KSpace
	Vector dphitot_by_dn2vx(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		dphitot_by_dn2vx[i] = -7.957747154594767e-2*rtemp10[i]/R/t1 - 5.305164769729845e-2*n2[i]*rtemp10[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp12(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp12 = fft(Nx,Ny,Nz,dV,dphitot_by_dn2vx);

	dphitot_by_dn2vx.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		dn1v_dot_n2v_by_dn1vx[i] = -1.0*dn1v_dot_n2v_by_dn1vx[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp14(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp14 = fft(Nx,Ny,Nz,dV,dn1v_dot_n2v_by_dn1vx);

	dn1v_dot_n2v_by_dn1vx.free(); // Realspace
	ComplexVector ktemp15(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp15[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp15[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector dn1v_dot_n2v_by_dn1vy(Nx*Ny*Nz); // RS
	dn1v_dot_n2v_by_dn1vy = ifft(Nx,Ny,Nz,dV,ktemp15);

	Vector rtemp17(Nx*Ny*Nz); // RS
	rtemp17 = ifft(Nx,Ny,Nz,dV,ktemp15);

	ktemp15.free(); // KSpace
	Vector dphitot_by_dn2vy(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		dphitot_by_dn2vy[i] = -7.957747154594767e-2*rtemp17[i]/R/t1 - 5.305164769729845e-2*n2[i]*rtemp17[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp19(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp19 = fft(Nx,Ny,Nz,dV,dphitot_by_dn2vy);

	dphitot_by_dn2vy.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		dn1v_dot_n2v_by_dn1vy[i] = -1.0*dn1v_dot_n2v_by_dn1vy[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp21(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp21 = fft(Nx,Ny,Nz,dV,dn1v_dot_n2v_by_dn1vy);

	dn1v_dot_n2v_by_dn1vy.free(); // Realspace
	ComplexVector ktemp22(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp22[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp22[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector dn1v_dot_n2v_by_dn1vz(Nx*Ny*Nz); // RS
	dn1v_dot_n2v_by_dn1vz = ifft(Nx,Ny,Nz,dV,ktemp22);

	Vector rtemp24(Nx*Ny*Nz); // RS
	rtemp24 = ifft(Nx,Ny,Nz,dV,ktemp22);

	ktemp22.free(); // KSpace
	Vector dphitot_by_dn3(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = rtemp10[i];
		const double t3 = rtemp17[i];
		const double t4 = rtemp24[i];
		const double t5 = log(t1);
		const double t6 = 1.0/t1;
		const double t7 = 1.0/n3[i];
		dphitot_by_dn3[i] = t6*t7*t7*n2[i]*(t6*(8.841941282883075e-3 + (1.768388256576615e-2*t6 - 1.768388256576615e-2*t7)*(n3[i] + t5/(t6*t6))) - 8.841941282883075e-3 - 1.768388256576615e-2*t5)*(n2[i]*n2[i] - 3.0*t4*t4 - 3.0*t3*t3 - 3.0*t2*t2) + 7.957747154594767e-2*t6*rtemp3[i]/(R*R) + t6*t6*(7.957747154594767e-2*n2[i]*rtemp3[i]/R - 7.957747154594767e-2*t4*rtemp24[i]/R - 7.957747154594767e-2*t3*rtemp17[i]/R - 7.957747154594767e-2*t2*rtemp10[i]/R);
	}

	ComplexVector ktemp26(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp26 = fft(Nx,Ny,Nz,dV,dphitot_by_dn3);

	dphitot_by_dn3.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		dn1v_dot_n2v_by_dn1vz[i] = -1.0*dn1v_dot_n2v_by_dn1vz[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp28(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp28 = fft(Nx,Ny,Nz,dV,dn1v_dot_n2v_by_dn1vz);

	dn1v_dot_n2v_by_dn1vz.free(); // Realspace
	Vector dphitot_by_dn0(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		dphitot_by_dn0[i] = -1.0*log(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp30(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp30 = fft(Nx,Ny,Nz,dV,dphitot_by_dn0);

	dphitot_by_dn0.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp17[i] = (n3[i] + t1*t1*log(t1))*(2.6525823848649224e-2*n2[i]*n2[i] - 2.6525823848649224e-2*rtemp10[i]*rtemp10[i] - 2.6525823848649224e-2*rtemp17[i]*rtemp17[i] - 2.6525823848649224e-2*rtemp24[i]*rtemp24[i])/(t1*t1*n3[i]*n3[i]) + 7.957747154594767e-2*rtemp3[i]/R/t1;
	}

	rtemp10.free(); // Realspace
	rtemp3.free(); // Realspace
	ComplexVector ktemp32(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp32 = fft(Nx,Ny,Nz,dV,rtemp17);

	rtemp17.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp24[i] = -7.957747154594767e-2*rtemp24[i]/R/t1 - 5.305164769729845e-2*n2[i]*rtemp24[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	n3.free(); // Realspace
	n2.free(); // Realspace
	ComplexVector ktemp34(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp34 = fft(Nx,Ny,Nz,dV,rtemp24);

	rtemp24.free(); // Realspace
	{
		const int i = 0;
		ktemp34[0] = (((12.566370614359172*R*R)*(-0.15915494309189535*ktemp30[i]/R - 7.957747154594767e-2*ktemp7[i]) - 7.957747154594767e-2*(-25.132741228718345*R)*ktemp30[i])/R - 7.957747154594767e-2*(-25.132741228718345*R)*ktemp7[i])/R + (12.566370614359172*R*R)*ktemp26[i] - (-25.132741228718345*R)*ktemp32[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = 12.566370614359172*R*sin(R*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]))*exp(-6.0*dr*dr*(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]))/(sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]));
		const double t2 = exp(-6.0*dr*dr*(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]));
		const double t3 = R*cos(R*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2])) - sin(R*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]))/(sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]));
		const double t4 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t5 = 12.566370614359172*t2*(-1.0*sin(R*sqrt(t4))/(sqrt(t4)) - 1.0*R*cos(R*sqrt(t4)));
		double it6 = 12.566370614359172*R*k_i[0]*t2*sin(R*sqrt(t4))/(sqrt(t4));
		double it7 = 12.566370614359172*R*k_i[1]*t2*sin(R*sqrt(t4))/(sqrt(t4));
		double it8 = 12.566370614359172*R*k_i[2]*t2*sin(R*sqrt(t4))/(sqrt(t4));
		ktemp34[i] = std::complex<double>(ktemp26[i].real()*t1 - 1.0*ktemp19[i].imag()*it7 - 1.0*ktemp12[i].imag()*it6 - ktemp32[i].real()*t5 - ktemp34[i].imag()*it8 + ((-7.957747154594767e-2*ktemp7[i].real()*t1 - 7.957747154594767e-2*ktemp30[i].real()*(t5 + 2.0*t1/R) - 1.0*ktemp28[i].imag()*k_i[2]*t2*t3/t4 - 1.0*ktemp21[i].imag()*k_i[1]*t2*t3/t4 - 1.0*ktemp14[i].imag()*k_i[0]*t2*t3/t4)/R - 7.957747154594767e-2*ktemp7[i].real()*t5 - 7.957747154594767e-2*ktemp28[i].imag()*it8 - 7.957747154594767e-2*ktemp21[i].imag()*it7 - 7.957747154594767e-2*ktemp14[i].imag()*it6)/R,
				ktemp12[i].real()*it6 + ktemp19[i].real()*it7 + ktemp26[i].imag()*t1 - ktemp32[i].imag()*t5 + ktemp34[i].real()*it8 + (7.957747154594767e-2*ktemp14[i].real()*it6 + 7.957747154594767e-2*ktemp21[i].real()*it7 + 7.957747154594767e-2*ktemp28[i].real()*it8 - 7.957747154594767e-2*ktemp7[i].imag()*t5 + (ktemp14[i].real()*k_i[0]*t2*t3/t4 + ktemp21[i].real()*k_i[1]*t2*t3/t4 + ktemp28[i].real()*k_i[2]*t2*t3/t4 - 7.957747154594767e-2*ktemp30[i].imag()*(t5 + 2.0*t1/R) - 7.957747154594767e-2*ktemp7[i].imag()*t1)/R)/R);
	}

	ktemp32.free(); // KSpace
	ktemp30.free(); // KSpace
	ktemp28.free(); // KSpace
	ktemp26.free(); // KSpace
	ktemp21.free(); // KSpace
	ktemp19.free(); // KSpace
	ktemp14.free(); // KSpace
	ktemp12.free(); // KSpace
	ktemp7.free(); // KSpace
	Vector rtemp36(Nx*Ny*Nz); // RS
	rtemp36 = ifft(Nx,Ny,Nz,dV,ktemp34);

	ktemp34.free(); // KSpace
	{
		const int i = 0;
		ktemp0[0] = (50.26548245743669*R*R)*ktemp0[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp0[i] = std::complex<double>((25.132741228718345*R*sin(2.0*R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].real(),
				(25.132741228718345*R*sin(2.0*R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].imag());
	}

	Vector rtemp38(Nx*Ny*Nz); // RS
	rtemp38 = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = kT*rtemp36[i]*n[i]/(kT*rtemp38[i]*n[i]);
		const double t2 = t1 - 1.0;
		rtemp38[i] = 0.207*t1 + t2*(0.712*t2 + t2*(1.046*t2*t2 - 1.952*t2));
	}

	rtemp36.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp38[i] = n[i]*(rtemp38[i] - 0.207);
	}

	ComplexVector ktemp41(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp41 = fft(Nx,Ny,Nz,dV,rtemp38);

	rtemp38.free(); // Realspace
	{
		const int i = 0;
		ktemp41[0] = ktemp41[i]*epsilon*sigma*sigma*sigma*(lambda*lambda*lambda*(4.188790204786391 + lambda*(lambda*(7.539822368615504 - 2.0943951023931935*lambda) - 9.42477796076938)) - 0.20943951023931967);
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sigma*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		const double t2 = lambda*t1;
		const double t3 = lambda - 1.0;
		const double t4 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		ktemp41[i] = std::complex<double>(ktemp41[i].real()*(-12.566370614359172*epsilon*((24.0*cos(t1) + cos(t2)*(t1*t1*t3*(12.0*lambda - 6.0 - lambda*t1*t1*t3*t3) - 24.0))/(sigma*t4*t4*t4) + (6.0*sin(t1) + sin(t2)*(18.0 - 24.0*lambda + t1*t1*t3*t3*(4.0*lambda - 1.0)))/(sqrt(t4)*t4*t4))/(sigma*sigma)),
				ktemp41[i].imag()*(-12.566370614359172*epsilon*((24.0*cos(t1) + cos(t2)*(t1*t1*t3*(12.0*lambda - 6.0 - lambda*t1*t1*t3*t3) - 24.0))/(sigma*t4*t4*t4) + (6.0*sin(t1) + sin(t2)*(18.0 - 24.0*lambda + t1*t1*t3*t3*(4.0*lambda - 1.0)))/(sqrt(t4)*t4*t4))/(sigma*sigma)));
	}

	return ktemp41;

}

ComplexVector SW_liquid::get_ngphi4() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	ComplexVector ktemp1(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp1[0] = (12.566370614359172*R*R)*ktemp0[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1[i] = std::complex<double>((12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].real(),
				(12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].imag());
	}

	Vector n2(Nx*Ny*Nz); // RS
	n2 = ifft(Nx,Ny,Nz,dV,ktemp1);

	Vector rtemp3(Nx*Ny*Nz); // RS
	rtemp3 = ifft(Nx,Ny,Nz,dV,ktemp1);

	ktemp1.free(); // KSpace
	ComplexVector ktemp4(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp4[0] = ktemp0[i]*(4.188790204786391*R*R*R);
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4[i] = std::complex<double>(ktemp0[i].real()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)),
				ktemp0[i].imag()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)));
	}

	Vector n3(Nx*Ny*Nz); // RS
	n3 = ifft(Nx,Ny,Nz,dV,ktemp4);

	ktemp4.free(); // KSpace
	Vector dphitot_by_dn1(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		dphitot_by_dn1[i] = n2[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp7(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7 = fft(Nx,Ny,Nz,dV,dphitot_by_dn1);

	dphitot_by_dn1.free(); // Realspace
	ComplexVector ktemp8(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp8[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp8[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector dn1v_dot_n2v_by_dn1vx(Nx*Ny*Nz); // RS
	dn1v_dot_n2v_by_dn1vx = ifft(Nx,Ny,Nz,dV,ktemp8);

	Vector rtemp10(Nx*Ny*Nz); // RS
	rtemp10 = ifft(Nx,Ny,Nz,dV,ktemp8);

	ktemp8.free(); // KSpace
	Vector dphitot_by_dn2vx(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		dphitot_by_dn2vx[i] = -7.957747154594767e-2*rtemp10[i]/R/t1 - 5.305164769729845e-2*n2[i]*rtemp10[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp12(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp12 = fft(Nx,Ny,Nz,dV,dphitot_by_dn2vx);

	dphitot_by_dn2vx.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		dn1v_dot_n2v_by_dn1vx[i] = -1.0*dn1v_dot_n2v_by_dn1vx[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp14(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp14 = fft(Nx,Ny,Nz,dV,dn1v_dot_n2v_by_dn1vx);

	dn1v_dot_n2v_by_dn1vx.free(); // Realspace
	ComplexVector ktemp15(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp15[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp15[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector dn1v_dot_n2v_by_dn1vy(Nx*Ny*Nz); // RS
	dn1v_dot_n2v_by_dn1vy = ifft(Nx,Ny,Nz,dV,ktemp15);

	Vector rtemp17(Nx*Ny*Nz); // RS
	rtemp17 = ifft(Nx,Ny,Nz,dV,ktemp15);

	ktemp15.free(); // KSpace
	Vector dphitot_by_dn2vy(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		dphitot_by_dn2vy[i] = -7.957747154594767e-2*rtemp17[i]/R/t1 - 5.305164769729845e-2*n2[i]*rtemp17[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp19(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp19 = fft(Nx,Ny,Nz,dV,dphitot_by_dn2vy);

	dphitot_by_dn2vy.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		dn1v_dot_n2v_by_dn1vy[i] = -1.0*dn1v_dot_n2v_by_dn1vy[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp21(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp21 = fft(Nx,Ny,Nz,dV,dn1v_dot_n2v_by_dn1vy);

	dn1v_dot_n2v_by_dn1vy.free(); // Realspace
	ComplexVector ktemp22(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp22[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp22[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector dn1v_dot_n2v_by_dn1vz(Nx*Ny*Nz); // RS
	dn1v_dot_n2v_by_dn1vz = ifft(Nx,Ny,Nz,dV,ktemp22);

	Vector rtemp24(Nx*Ny*Nz); // RS
	rtemp24 = ifft(Nx,Ny,Nz,dV,ktemp22);

	ktemp22.free(); // KSpace
	Vector dphitot_by_dn3(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = rtemp10[i];
		const double t3 = rtemp17[i];
		const double t4 = rtemp24[i];
		const double t5 = log(t1);
		const double t6 = 1.0/t1;
		const double t7 = 1.0/n3[i];
		dphitot_by_dn3[i] = t6*t7*t7*n2[i]*(t6*(8.841941282883075e-3 + (1.768388256576615e-2*t6 - 1.768388256576615e-2*t7)*(n3[i] + t5/(t6*t6))) - 8.841941282883075e-3 - 1.768388256576615e-2*t5)*(n2[i]*n2[i] - 3.0*t4*t4 - 3.0*t3*t3 - 3.0*t2*t2) + 7.957747154594767e-2*t6*rtemp3[i]/(R*R) + t6*t6*(7.957747154594767e-2*n2[i]*rtemp3[i]/R - 7.957747154594767e-2*t4*rtemp24[i]/R - 7.957747154594767e-2*t3*rtemp17[i]/R - 7.957747154594767e-2*t2*rtemp10[i]/R);
	}

	ComplexVector ktemp26(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp26 = fft(Nx,Ny,Nz,dV,dphitot_by_dn3);

	dphitot_by_dn3.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		dn1v_dot_n2v_by_dn1vz[i] = -1.0*dn1v_dot_n2v_by_dn1vz[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp28(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp28 = fft(Nx,Ny,Nz,dV,dn1v_dot_n2v_by_dn1vz);

	dn1v_dot_n2v_by_dn1vz.free(); // Realspace
	Vector dphitot_by_dn0(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		dphitot_by_dn0[i] = -1.0*log(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp30(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp30 = fft(Nx,Ny,Nz,dV,dphitot_by_dn0);

	dphitot_by_dn0.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp17[i] = (n3[i] + t1*t1*log(t1))*(2.6525823848649224e-2*n2[i]*n2[i] - 2.6525823848649224e-2*rtemp10[i]*rtemp10[i] - 2.6525823848649224e-2*rtemp17[i]*rtemp17[i] - 2.6525823848649224e-2*rtemp24[i]*rtemp24[i])/(t1*t1*n3[i]*n3[i]) + 7.957747154594767e-2*rtemp3[i]/R/t1;
	}

	rtemp10.free(); // Realspace
	rtemp3.free(); // Realspace
	ComplexVector ktemp32(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp32 = fft(Nx,Ny,Nz,dV,rtemp17);

	rtemp17.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp24[i] = -7.957747154594767e-2*rtemp24[i]/R/t1 - 5.305164769729845e-2*n2[i]*rtemp24[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	n3.free(); // Realspace
	n2.free(); // Realspace
	ComplexVector ktemp34(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp34 = fft(Nx,Ny,Nz,dV,rtemp24);

	rtemp24.free(); // Realspace
	{
		const int i = 0;
		ktemp34[0] = (((12.566370614359172*R*R)*(-0.15915494309189535*ktemp30[i]/R - 7.957747154594767e-2*ktemp7[i]) - 7.957747154594767e-2*(-25.132741228718345*R)*ktemp30[i])/R - 7.957747154594767e-2*(-25.132741228718345*R)*ktemp7[i])/R + (12.566370614359172*R*R)*ktemp26[i] - (-25.132741228718345*R)*ktemp32[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = 12.566370614359172*R*sin(R*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]))*exp(-6.0*dr*dr*(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]))/(sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]));
		const double t2 = exp(-6.0*dr*dr*(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]));
		const double t3 = R*cos(R*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2])) - sin(R*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]))/(sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]));
		const double t4 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t5 = 12.566370614359172*t2*(-1.0*sin(R*sqrt(t4))/(sqrt(t4)) - 1.0*R*cos(R*sqrt(t4)));
		double it6 = 12.566370614359172*R*k_i[0]*t2*sin(R*sqrt(t4))/(sqrt(t4));
		double it7 = 12.566370614359172*R*k_i[1]*t2*sin(R*sqrt(t4))/(sqrt(t4));
		double it8 = 12.566370614359172*R*k_i[2]*t2*sin(R*sqrt(t4))/(sqrt(t4));
		ktemp34[i] = std::complex<double>(ktemp26[i].real()*t1 - 1.0*ktemp19[i].imag()*it7 - 1.0*ktemp12[i].imag()*it6 - ktemp32[i].real()*t5 - ktemp34[i].imag()*it8 + ((-7.957747154594767e-2*ktemp7[i].real()*t1 - 7.957747154594767e-2*ktemp30[i].real()*(t5 + 2.0*t1/R) - 1.0*ktemp28[i].imag()*k_i[2]*t2*t3/t4 - 1.0*ktemp21[i].imag()*k_i[1]*t2*t3/t4 - 1.0*ktemp14[i].imag()*k_i[0]*t2*t3/t4)/R - 7.957747154594767e-2*ktemp7[i].real()*t5 - 7.957747154594767e-2*ktemp28[i].imag()*it8 - 7.957747154594767e-2*ktemp21[i].imag()*it7 - 7.957747154594767e-2*ktemp14[i].imag()*it6)/R,
				ktemp12[i].real()*it6 + ktemp19[i].real()*it7 + ktemp26[i].imag()*t1 - ktemp32[i].imag()*t5 + ktemp34[i].real()*it8 + (7.957747154594767e-2*ktemp14[i].real()*it6 + 7.957747154594767e-2*ktemp21[i].real()*it7 + 7.957747154594767e-2*ktemp28[i].real()*it8 - 7.957747154594767e-2*ktemp7[i].imag()*t5 + (ktemp14[i].real()*k_i[0]*t2*t3/t4 + ktemp21[i].real()*k_i[1]*t2*t3/t4 + ktemp28[i].real()*k_i[2]*t2*t3/t4 - 7.957747154594767e-2*ktemp30[i].imag()*(t5 + 2.0*t1/R) - 7.957747154594767e-2*ktemp7[i].imag()*t1)/R)/R);
	}

	ktemp32.free(); // KSpace
	ktemp30.free(); // KSpace
	ktemp28.free(); // KSpace
	ktemp26.free(); // KSpace
	ktemp21.free(); // KSpace
	ktemp19.free(); // KSpace
	ktemp14.free(); // KSpace
	ktemp12.free(); // KSpace
	ktemp7.free(); // KSpace
	Vector rtemp36(Nx*Ny*Nz); // RS
	rtemp36 = ifft(Nx,Ny,Nz,dV,ktemp34);

	ktemp34.free(); // KSpace
	{
		const int i = 0;
		ktemp0[0] = (50.26548245743669*R*R)*ktemp0[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp0[i] = std::complex<double>((25.132741228718345*R*sin(2.0*R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].real(),
				(25.132741228718345*R*sin(2.0*R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].imag());
	}

	Vector rtemp38(Nx*Ny*Nz); // RS
	rtemp38 = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = kT*rtemp36[i]*n[i]/(kT*rtemp38[i]*n[i]);
		const double t2 = t1 - 1.0;
		rtemp38[i] = t2*(t2*(0.324*t2 - 0.162*t2*t2) - 0.164*t2) - 2.0e-3*t1;
	}

	rtemp36.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp38[i] = n[i]*(rtemp38[i] + 2.0e-3);
	}

	ComplexVector ktemp41(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp41 = fft(Nx,Ny,Nz,dV,rtemp38);

	rtemp38.free(); // Realspace
	{
		const int i = 0;
		ktemp41[0] = ktemp41[i]*epsilon*sigma*sigma*sigma*(0.11967972013675394 + lambda*lambda*lambda*(lambda*(12.566370614359176 + lambda*(lambda*(8.377580409572774 - 1.7951958020513124*lambda) - 15.079644737231009)) - 4.188790204786391));
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sigma*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		const double t2 = sin(lambda*t1);
		const double t3 = lambda - 1.0;
		const double t4 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		ktemp41[i] = std::complex<double>(ktemp41[i].real()*(-12.566370614359172*epsilon*((24.0*cos(t1) + (120.0*t2 - 120.0*sin(t1))/t1 - cos(lambda*t1)*(lambda*(120.0 + (t1*t1)*(t1*t1)*(t3*t3)*(t3*t3)) - 96.0 - 4.0*t1*t1*t3*t3*(5.0*lambda - 2.0)))/(sigma*t4*t4*t4) + t2*t3*(36.0 - 60.0*lambda + t1*t1*t3*t3*(5.0*lambda - 1.0))/(sqrt(t4)*t4*t4))/(sigma*sigma)),
				ktemp41[i].imag()*(-12.566370614359172*epsilon*((24.0*cos(t1) + (120.0*t2 - 120.0*sin(t1))/t1 - cos(lambda*t1)*(lambda*(120.0 + (t1*t1)*(t1*t1)*(t3*t3)*(t3*t3)) - 96.0 - 4.0*t1*t1*t3*t3*(5.0*lambda - 2.0)))/(sigma*t4*t4*t4) + t2*t3*(36.0 - 60.0*lambda + t1*t1*t3*t3*(5.0*lambda - 1.0))/(sqrt(t4)*t4*t4))/(sigma*sigma)));
	}

	return ktemp41;

}

Vector SW_liquid::get_phi1() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	ComplexVector ktemp1(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp1[0] = (12.566370614359172*R*R)*ktemp0[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1[i] = std::complex<double>((12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].real(),
				(12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].imag());
	}

	Vector rtemp2(Nx*Ny*Nz); // RS
	rtemp2 = ifft(Nx,Ny,Nz,dV,ktemp1);

	ktemp1.free(); // KSpace
	{
		const int i = 0;
		ktemp0[0] = ktemp0[i]*(4.188790204786391*R*R*R);
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp0[i] = std::complex<double>(ktemp0[i].real()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)),
				ktemp0[i].imag()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)));
	}

	Vector n3(Nx*Ny*Nz); // RS
	n3 = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n3[i] = 7.957747154594767e-2*log(1.0 - 1.0*n3[i])*rtemp2[i]/(R*R);
	}

	rtemp2.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n3[i] = -1.0*n3[i];
	}

	return n3;

}

Vector SW_liquid::get_phi2() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	ComplexVector ktemp1(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2(Nx*Ny*Nz); // RS
	rtemp2 = ifft(Nx,Ny,Nz,dV,ktemp1);

	ktemp1.free(); // KSpace
	ComplexVector ktemp3(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp3[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp4(Nx*Ny*Nz); // RS
	rtemp4 = ifft(Nx,Ny,Nz,dV,ktemp3);

	ktemp3.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp4[i] = 7.957747154594767e-2*rtemp2[i]*rtemp2[i]/R + 7.957747154594767e-2*rtemp4[i]*rtemp4[i]/R;
	}

	rtemp2.free(); // Realspace
	ComplexVector ktemp6(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp7(Nx*Ny*Nz); // RS
	rtemp7 = ifft(Nx,Ny,Nz,dV,ktemp6);

	ktemp6.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp7[i] = rtemp4[i] + 7.957747154594767e-2*rtemp7[i]*rtemp7[i]/R;
	}

	rtemp4.free(); // Realspace
	ComplexVector ktemp9(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp9[0] = (12.566370614359172*R*R)*ktemp0[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp9[i] = std::complex<double>((12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].real(),
				(12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].imag());
	}

	Vector rtemp10(Nx*Ny*Nz); // RS
	rtemp10 = ifft(Nx,Ny,Nz,dV,ktemp9);

	ktemp9.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp10[i] = 7.957747154594767e-2*rtemp10[i]*rtemp10[i]/R - 1.0*rtemp7[i];
	}

	rtemp7.free(); // Realspace
	{
		const int i = 0;
		ktemp0[0] = ktemp0[i]*(4.188790204786391*R*R*R);
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp0[i] = std::complex<double>(ktemp0[i].real()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)),
				ktemp0[i].imag()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)));
	}

	Vector n3(Nx*Ny*Nz); // RS
	n3 = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n3[i] = rtemp10[i]/(1.0 - 1.0*n3[i]);
	}

	rtemp10.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n3[i] = n3[i];
	}

	return n3;

}

Vector SW_liquid::get_phi3() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	ComplexVector ktemp1(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp1[0] = (12.566370614359172*R*R)*ktemp0[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1[i] = std::complex<double>((12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].real(),
				(12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].imag());
	}

	Vector n2(Nx*Ny*Nz); // RS
	n2 = ifft(Nx,Ny,Nz,dV,ktemp1);

	ktemp1.free(); // KSpace
	ComplexVector ktemp3(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp3[0] = ktemp0[i]*(4.188790204786391*R*R*R);
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3[i] = std::complex<double>(ktemp0[i].real()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)),
				ktemp0[i].imag()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)));
	}

	Vector n3(Nx*Ny*Nz); // RS
	n3 = ifft(Nx,Ny,Nz,dV,ktemp3);

	ktemp3.free(); // KSpace
	ComplexVector ktemp5(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp5[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp5[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector n2vx(Nx*Ny*Nz); // RS
	n2vx = ifft(Nx,Ny,Nz,dV,ktemp5);

	ktemp5.free(); // KSpace
	ComplexVector ktemp7(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector n2vy(Nx*Ny*Nz); // RS
	n2vy = ifft(Nx,Ny,Nz,dV,ktemp7);

	ktemp7.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n2vy[i] = n2vx[i]*n2vx[i] + n2vy[i]*n2vy[i];
	}

	n2vx.free(); // Realspace
	ktemp0[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp0[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector n2vz(Nx*Ny*Nz); // RS
	n2vz = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n2vz[i] = n2vy[i] + n2vz[i]*n2vz[i];
	}

	n2vy.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		n2vz[i] = n2[i]*(n2[i]*n2[i] - 3.0*n2vz[i]);
	}

	n2.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		n2vz[i] = 8.841941282883075e-3*n2vz[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	n3.free(); // Realspace
	return n2vz;

}

ComplexVector SW_liquid::get_step() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector step(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		step[0] = 4.188790204786391*R*R*R;
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		step[i] = 12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1);
	}

	return step;

}

double SW_liquid::get_sw() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	ComplexVector ktemp1(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp1[0] = (12.566370614359172*R*R)*ktemp0[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1[i] = std::complex<double>((12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].real(),
				(12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].imag());
	}

	Vector n2(Nx*Ny*Nz); // RS
	n2 = ifft(Nx,Ny,Nz,dV,ktemp1);

	Vector rtemp3(Nx*Ny*Nz); // RS
	rtemp3 = ifft(Nx,Ny,Nz,dV,ktemp1);

	ktemp1.free(); // KSpace
	ComplexVector ktemp4(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp4[0] = ktemp0[i]*(4.188790204786391*R*R*R);
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp4[i] = std::complex<double>(ktemp0[i].real()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)),
				ktemp0[i].imag()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)));
	}

	Vector n3(Nx*Ny*Nz); // RS
	n3 = ifft(Nx,Ny,Nz,dV,ktemp4);

	ktemp4.free(); // KSpace
	Vector dphitot_by_dn1(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		dphitot_by_dn1[i] = n2[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp7(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7 = fft(Nx,Ny,Nz,dV,dphitot_by_dn1);

	dphitot_by_dn1.free(); // Realspace
	ComplexVector ktemp8(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp8[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp8[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector dn1v_dot_n2v_by_dn1vx(Nx*Ny*Nz); // RS
	dn1v_dot_n2v_by_dn1vx = ifft(Nx,Ny,Nz,dV,ktemp8);

	Vector rtemp10(Nx*Ny*Nz); // RS
	rtemp10 = ifft(Nx,Ny,Nz,dV,ktemp8);

	ktemp8.free(); // KSpace
	Vector dphitot_by_dn2vx(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		dphitot_by_dn2vx[i] = -7.957747154594767e-2*rtemp10[i]/R/t1 - 5.305164769729845e-2*n2[i]*rtemp10[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp12(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp12 = fft(Nx,Ny,Nz,dV,dphitot_by_dn2vx);

	dphitot_by_dn2vx.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		dn1v_dot_n2v_by_dn1vx[i] = -1.0*dn1v_dot_n2v_by_dn1vx[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp14(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp14 = fft(Nx,Ny,Nz,dV,dn1v_dot_n2v_by_dn1vx);

	dn1v_dot_n2v_by_dn1vx.free(); // Realspace
	ComplexVector ktemp15(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp15[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp15[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector dn1v_dot_n2v_by_dn1vy(Nx*Ny*Nz); // RS
	dn1v_dot_n2v_by_dn1vy = ifft(Nx,Ny,Nz,dV,ktemp15);

	Vector rtemp17(Nx*Ny*Nz); // RS
	rtemp17 = ifft(Nx,Ny,Nz,dV,ktemp15);

	ktemp15.free(); // KSpace
	Vector dphitot_by_dn2vy(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		dphitot_by_dn2vy[i] = -7.957747154594767e-2*rtemp17[i]/R/t1 - 5.305164769729845e-2*n2[i]*rtemp17[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	ComplexVector ktemp19(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp19 = fft(Nx,Ny,Nz,dV,dphitot_by_dn2vy);

	dphitot_by_dn2vy.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		dn1v_dot_n2v_by_dn1vy[i] = -1.0*dn1v_dot_n2v_by_dn1vy[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp21(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp21 = fft(Nx,Ny,Nz,dV,dn1v_dot_n2v_by_dn1vy);

	dn1v_dot_n2v_by_dn1vy.free(); // Realspace
	ComplexVector ktemp22(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp22[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp22[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector dn1v_dot_n2v_by_dn1vz(Nx*Ny*Nz); // RS
	dn1v_dot_n2v_by_dn1vz = ifft(Nx,Ny,Nz,dV,ktemp22);

	Vector rtemp24(Nx*Ny*Nz); // RS
	rtemp24 = ifft(Nx,Ny,Nz,dV,ktemp22);

	ktemp22.free(); // KSpace
	Vector dphitot_by_dn3(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		const double t2 = rtemp10[i];
		const double t3 = rtemp17[i];
		const double t4 = rtemp24[i];
		const double t5 = log(t1);
		const double t6 = 1.0/t1;
		const double t7 = 1.0/n3[i];
		dphitot_by_dn3[i] = t6*t7*t7*n2[i]*(t6*(8.841941282883075e-3 + (1.768388256576615e-2*t6 - 1.768388256576615e-2*t7)*(n3[i] + t5/(t6*t6))) - 8.841941282883075e-3 - 1.768388256576615e-2*t5)*(n2[i]*n2[i] - 3.0*t4*t4 - 3.0*t3*t3 - 3.0*t2*t2) + 7.957747154594767e-2*t6*rtemp3[i]/(R*R) + t6*t6*(7.957747154594767e-2*n2[i]*rtemp3[i]/R - 7.957747154594767e-2*t4*rtemp24[i]/R - 7.957747154594767e-2*t3*rtemp17[i]/R - 7.957747154594767e-2*t2*rtemp10[i]/R);
	}

	ComplexVector ktemp26(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp26 = fft(Nx,Ny,Nz,dV,dphitot_by_dn3);

	dphitot_by_dn3.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		dn1v_dot_n2v_by_dn1vz[i] = -1.0*dn1v_dot_n2v_by_dn1vz[i]/(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp28(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp28 = fft(Nx,Ny,Nz,dV,dn1v_dot_n2v_by_dn1vz);

	dn1v_dot_n2v_by_dn1vz.free(); // Realspace
	Vector dphitot_by_dn0(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		dphitot_by_dn0[i] = -1.0*log(1.0 - 1.0*n3[i]);
	}

	ComplexVector ktemp30(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp30 = fft(Nx,Ny,Nz,dV,dphitot_by_dn0);

	dphitot_by_dn0.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp17[i] = (n3[i] + t1*t1*log(t1))*(2.6525823848649224e-2*n2[i]*n2[i] - 2.6525823848649224e-2*rtemp10[i]*rtemp10[i] - 2.6525823848649224e-2*rtemp17[i]*rtemp17[i] - 2.6525823848649224e-2*rtemp24[i]*rtemp24[i])/(t1*t1*n3[i]*n3[i]) + 7.957747154594767e-2*rtemp3[i]/R/t1;
	}

	rtemp10.free(); // Realspace
	rtemp3.free(); // Realspace
	ComplexVector ktemp32(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp32 = fft(Nx,Ny,Nz,dV,rtemp17);

	rtemp17.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*n3[i];
		rtemp24[i] = -7.957747154594767e-2*rtemp24[i]/R/t1 - 5.305164769729845e-2*n2[i]*rtemp24[i]*(n3[i] + t1*t1*log(t1))/(t1*t1*n3[i]*n3[i]);
	}

	n3.free(); // Realspace
	n2.free(); // Realspace
	ComplexVector ktemp34(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp34 = fft(Nx,Ny,Nz,dV,rtemp24);

	rtemp24.free(); // Realspace
	{
		const int i = 0;
		ktemp34[0] = (((12.566370614359172*R*R)*(-0.15915494309189535*ktemp30[i]/R - 7.957747154594767e-2*ktemp7[i]) - 7.957747154594767e-2*(-25.132741228718345*R)*ktemp30[i])/R - 7.957747154594767e-2*(-25.132741228718345*R)*ktemp7[i])/R + (12.566370614359172*R*R)*ktemp26[i] - (-25.132741228718345*R)*ktemp32[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = 12.566370614359172*R*sin(R*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]))*exp(-6.0*dr*dr*(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]))/(sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]));
		const double t2 = exp(-6.0*dr*dr*(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]));
		const double t3 = R*cos(R*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2])) - sin(R*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]))/(sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]));
		const double t4 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t5 = 12.566370614359172*t2*(-1.0*sin(R*sqrt(t4))/(sqrt(t4)) - 1.0*R*cos(R*sqrt(t4)));
		double it6 = 12.566370614359172*R*k_i[0]*t2*sin(R*sqrt(t4))/(sqrt(t4));
		double it7 = 12.566370614359172*R*k_i[1]*t2*sin(R*sqrt(t4))/(sqrt(t4));
		double it8 = 12.566370614359172*R*k_i[2]*t2*sin(R*sqrt(t4))/(sqrt(t4));
		ktemp34[i] = std::complex<double>(ktemp26[i].real()*t1 - 1.0*ktemp19[i].imag()*it7 - 1.0*ktemp12[i].imag()*it6 - ktemp32[i].real()*t5 - ktemp34[i].imag()*it8 + ((-7.957747154594767e-2*ktemp7[i].real()*t1 - 7.957747154594767e-2*ktemp30[i].real()*(t5 + 2.0*t1/R) - 1.0*ktemp28[i].imag()*k_i[2]*t2*t3/t4 - 1.0*ktemp21[i].imag()*k_i[1]*t2*t3/t4 - 1.0*ktemp14[i].imag()*k_i[0]*t2*t3/t4)/R - 7.957747154594767e-2*ktemp7[i].real()*t5 - 7.957747154594767e-2*ktemp28[i].imag()*it8 - 7.957747154594767e-2*ktemp21[i].imag()*it7 - 7.957747154594767e-2*ktemp14[i].imag()*it6)/R,
				ktemp12[i].real()*it6 + ktemp19[i].real()*it7 + ktemp26[i].imag()*t1 - ktemp32[i].imag()*t5 + ktemp34[i].real()*it8 + (7.957747154594767e-2*ktemp14[i].real()*it6 + 7.957747154594767e-2*ktemp21[i].real()*it7 + 7.957747154594767e-2*ktemp28[i].real()*it8 - 7.957747154594767e-2*ktemp7[i].imag()*t5 + (ktemp14[i].real()*k_i[0]*t2*t3/t4 + ktemp21[i].real()*k_i[1]*t2*t3/t4 + ktemp28[i].real()*k_i[2]*t2*t3/t4 - 7.957747154594767e-2*ktemp30[i].imag()*(t5 + 2.0*t1/R) - 7.957747154594767e-2*ktemp7[i].imag()*t1)/R)/R);
	}

	ktemp32.free(); // KSpace
	ktemp30.free(); // KSpace
	ktemp28.free(); // KSpace
	ktemp26.free(); // KSpace
	ktemp21.free(); // KSpace
	ktemp19.free(); // KSpace
	ktemp14.free(); // KSpace
	ktemp12.free(); // KSpace
	ktemp7.free(); // KSpace
	Vector rtemp36(Nx*Ny*Nz); // RS
	rtemp36 = ifft(Nx,Ny,Nz,dV,ktemp34);

	ktemp34.free(); // KSpace
	{
		const int i = 0;
		ktemp0[0] = (50.26548245743669*R*R)*ktemp0[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp0[i] = std::complex<double>((25.132741228718345*R*sin(2.0*R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].real(),
				(25.132741228718345*R*sin(2.0*R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].imag());
	}

	Vector rtemp38(Nx*Ny*Nz); // RS
	rtemp38 = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp38[i] = kT*rtemp36[i]*n[i]/rtemp38[i];
	}

	rtemp36.free(); // Realspace
	Vector rtemp40(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp40[i] = rtemp38[i]/kT;
	}

	ComplexVector ktemp41(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp41 = fft(Nx,Ny,Nz,dV,rtemp40);

	rtemp40.free(); // Realspace
	Vector rtemp42(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp38[i]/(kT*n[i]);
		const double t2 = t1 - 1.0;
		rtemp42[i] = n[i]*(t2*(2.7e-2*t2 + t2*(0.838*t2 - 0.178*t2*t2)) - 1.754*t2);
	}

	ComplexVector ktemp43(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp43 = fft(Nx,Ny,Nz,dV,rtemp42);

	rtemp42.free(); // Realspace
	Vector rtemp44(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp38[i]/(kT*n[i]);
		const double t2 = t1 - 1.0;
		rtemp44[i] = n[i]*(t2*(4.403*t2 + t2*(0.363*t2*t2 - 2.48*t2)) - 2.243*t2);
	}

	ComplexVector ktemp45(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp45 = fft(Nx,Ny,Nz,dV,rtemp44);

	rtemp44.free(); // Realspace
	Vector rtemp46(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp38[i]/(kT*n[i]);
		const double t2 = t1 - 1.0;
		rtemp46[i] = n[i]*(0.207*t2 + t2*(0.712*t2 + t2*(1.046*t2*t2 - 1.952*t2)));
	}

	ComplexVector ktemp47(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp47 = fft(Nx,Ny,Nz,dV,rtemp46);

	rtemp46.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp38[i]/(kT*n[i]);
		const double t2 = t1 - 1.0;
		rtemp38[i] = n[i]*(t2*(t2*(0.324*t2 - 0.162*t2*t2) - 0.164*t2) - 2.0e-3*t2);
	}

	ComplexVector ktemp49(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp49 = fft(Nx,Ny,Nz,dV,rtemp38);

	rtemp38.free(); // Realspace
	{
		const int i = 0;
		ktemp49[0] = ktemp41[i]*epsilon*sigma*sigma*sigma*(4.188790204786391 - 4.188790204786391*lambda*lambda*lambda) + ktemp43[i]*epsilon*sigma*sigma*sigma*(lambda*lambda*lambda*(4.188790204786391 - 3.141592653589794*lambda) - 1.0471975511965976) + ktemp45[i]*epsilon*sigma*sigma*sigma*(0.418879020478639 + lambda*lambda*lambda*(lambda*(6.283185307179588 - 2.513274122871834*lambda) - 4.188790204786391)) + ktemp47[i]*epsilon*sigma*sigma*sigma*(lambda*lambda*lambda*(4.188790204786391 + lambda*(lambda*(7.539822368615504 - 2.0943951023931935*lambda) - 9.42477796076938)) - 0.20943951023931967) + ktemp49[i]*epsilon*sigma*sigma*sigma*(0.11967972013675394 + lambda*lambda*lambda*(lambda*(12.566370614359176 + lambda*(lambda*(8.377580409572774 - 1.7951958020513124*lambda) - 15.079644737231009)) - 4.188790204786391));
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = cos(sigma*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]));
		const double t2 = cos(lambda*sigma*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]));
		const double t3 = sin(lambda*sigma*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2])) - sin(sigma*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]));
		const double t4 = t3/(sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]));
		const double t5 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t6 = lambda - 1.0;
		const double t7 = sin(sigma*sqrt(t5));
		const double t8 = sin(lambda*sigma*sqrt(t5));
		const double t9 = 1.0 - 2.0*lambda;
		const double t10 = sigma*sigma*t5*t6*t6;
		ktemp49[i] = std::complex<double>(ktemp41[i].real()*(-12.566370614359172*epsilon*(t4 + sigma*(t1 - lambda*t2))/t5) + ktemp43[i].real()*(-12.566370614359172*epsilon*((t2*(2.0 - lambda*sigma*sigma*t5*t6) - 2.0*t1)/(sigma*t5*t5) - (t7 + t8*t9)/(sqrt(t5)*t5))) + ktemp45[i].real()*(-12.566370614359172*epsilon*((6.0*t7/(sqrt(t5)) + t8*(sigma*sigma*t5*(1.0 + lambda*(3.0*lambda - 4.0)) - 6.0)/(sqrt(t5)))/(sigma*t5*t5) + (-1.0*t2*(4.0 + lambda*(t10 - 6.0)) - 2.0*t1)/(t5*t5))/sigma) + ktemp47[i].real()*(-12.566370614359172*epsilon*((24.0*t1 + t2*(sigma*sigma*t5*t6*(-1.0*lambda*t10 - 6.0*t9) - 24.0))/(sigma*t5*t5*t5) + (6.0*t7 + t8*(18.0 - 24.0*lambda + t10*(4.0*lambda - 1.0)))/(sqrt(t5)*t5*t5))/(sigma*sigma)) + ktemp49[i].real()*(-12.566370614359172*epsilon*((24.0*t1 + 120.0*t4/sigma - t2*(lambda*(120.0 + t10*t10) - 96.0 - 4.0*t10*(5.0*lambda - 2.0)))/(sigma*t5*t5*t5) + t6*t8*(36.0 - 60.0*lambda + t10*(5.0*lambda - 1.0))/(sqrt(t5)*t5*t5))/(sigma*sigma)),
				ktemp41[i].imag()*(-12.566370614359172*epsilon*(t4 + sigma*(t1 - lambda*t2))/t5) + ktemp43[i].imag()*(-12.566370614359172*epsilon*((t2*(2.0 - lambda*sigma*sigma*t5*t6) - 2.0*t1)/(sigma*t5*t5) - (t7 + t8*t9)/(sqrt(t5)*t5))) + ktemp45[i].imag()*(-12.566370614359172*epsilon*((6.0*t7/(sqrt(t5)) + t8*(sigma*sigma*t5*(1.0 + lambda*(3.0*lambda - 4.0)) - 6.0)/(sqrt(t5)))/(sigma*t5*t5) + (-1.0*t2*(4.0 + lambda*(t10 - 6.0)) - 2.0*t1)/(t5*t5))/sigma) + ktemp47[i].imag()*(-12.566370614359172*epsilon*((24.0*t1 + t2*(sigma*sigma*t5*t6*(-1.0*lambda*t10 - 6.0*t9) - 24.0))/(sigma*t5*t5*t5) + (6.0*t7 + t8*(18.0 - 24.0*lambda + t10*(4.0*lambda - 1.0)))/(sqrt(t5)*t5*t5))/(sigma*sigma)) + ktemp49[i].imag()*(-12.566370614359172*epsilon*((24.0*t1 + 120.0*t4/sigma - t2*(lambda*(120.0 + t10*t10) - 96.0 - 4.0*t10*(5.0*lambda - 2.0)))/(sigma*t5*t5*t5) + t6*t8*(36.0 - 60.0*lambda + t10*(5.0*lambda - 1.0))/(sqrt(t5)*t5*t5))/(sigma*sigma)));
	}

	ktemp47.free(); // KSpace
	ktemp45.free(); // KSpace
	ktemp43.free(); // KSpace
	ktemp41.free(); // KSpace
	Vector rtemp51(Nx*Ny*Nz); // RS
	rtemp51 = ifft(Nx,Ny,Nz,dV,ktemp49);

	ktemp49.free(); // KSpace
	double 	s52 = 0;
	for (int i=0; i<Nx*Ny*Nz; i++) {
		s52 += dV*rtemp51[i]*n[i];
	}

	rtemp51.free(); // Realspace
	sw = 0.5*epsilon*s52;
	return sw;

}

double SW_liquid::get_volume() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	return volume;

}

double SW_liquid::get_whitebear() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		volume = a1*a2*a3;
	dV = volume/(Nx*Ny*Nz);
	dr = pow(dV, 0.3333333333333333);
	ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	ComplexVector ktemp1(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp1[0] = (12.566370614359172*R*R)*ktemp0[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp1[i] = std::complex<double>((12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].real(),
				(12.566370614359172*R*sin(R*t1)*exp(-6.0*dr*dr*t1*t1)/t1)*ktemp0[i].imag());
	}

	Vector rtemp2(Nx*Ny*Nz); // RS
	rtemp2 = ifft(Nx,Ny,Nz,dV,ktemp1);

	ktemp1.free(); // KSpace
	ComplexVector ktemp3(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp3[0] = ktemp0[i]*(4.188790204786391*R*R*R);
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3[i] = std::complex<double>(ktemp0[i].real()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)),
				ktemp0[i].imag()*(12.566370614359172*exp(-6.0*dr*dr*t1)*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1)));
	}

	Vector n3(Nx*Ny*Nz); // RS
	n3 = ifft(Nx,Ny,Nz,dV,ktemp3);

	ktemp3.free(); // KSpace
	double 	s5 = 0;
	for (int i=0; i<Nx*Ny*Nz; i++) {
		s5 += dV*kT*(-1.0*(7.957747154594767e-2*rtemp2[i]/(R*R))*log(1.0 - 1.0*n3[i]));
	}

	kTphi1 = s5;
	ComplexVector ktemp6(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp6[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[0]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp7(Nx*Ny*Nz); // RS
	rtemp7 = ifft(Nx,Ny,Nz,dV,ktemp6);

	ktemp6.free(); // KSpace
	ComplexVector ktemp8(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp8[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp8[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[1]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp9(Nx*Ny*Nz); // RS
	rtemp9 = ifft(Nx,Ny,Nz,dV,ktemp8);

	ktemp8.free(); // KSpace
	ktemp0[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp0[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[2]*exp(-6.0*dr*dr*t1)*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp11(Nx*Ny*Nz); // RS
	rtemp11 = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	double 	s12 = 0;
	for (int i=0; i<Nx*Ny*Nz; i++) {
		s12 += dV*kT*((7.957747154594767e-2*rtemp2[i]/R)*rtemp2[i] - 1.0*((7.957747154594767e-2*rtemp7[i]/R)*rtemp7[i] + (7.957747154594767e-2*rtemp9[i]/R)*rtemp9[i] + (7.957747154594767e-2*rtemp11[i]/R)*rtemp11[i]))/(1.0 - 1.0*n3[i]);
	}

	kTphi2 = s12;
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp9[i] = rtemp7[i]*rtemp7[i] + rtemp9[i]*rtemp9[i];
	}

	rtemp7.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp9[i] = rtemp9[i] + rtemp11[i]*rtemp11[i];
	}

	rtemp11.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp2[i];
		rtemp9[i] = t1*(t1*t1 - 3.0*rtemp9[i]);
	}

	rtemp2.free(); // Realspace
	double 	s16 = 0;
	for (int i=0; i<Nx*Ny*Nz; i++) {
		s16 += dV*kT*(8.841941282883075e-3*rtemp9[i]*(n3[i] + log(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i]))/(n3[i]*n3[i]*(1.0 - 1.0*n3[i])*(1.0 - 1.0*n3[i])));
	}

	rtemp9.free(); // Realspace
	n3.free(); // Realspace
	kTphi3 = s16;
	whitebear = kTphi1 + kTphi2 + kTphi3;
	return whitebear;

}

ComplexVector SW_liquid::get_xi0phik() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		ComplexVector xi0phik(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		xi0phik[0] = epsilon*sigma*sigma*sigma*(4.188790204786391 - 4.188790204786391*lambda*lambda*lambda);
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sigma*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		const double t2 = lambda*t1;
		const double t3 = 1.0/(sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]));
		xi0phik[i] = -12.566370614359172*epsilon*t3*t3*(sigma*(cos(t1) - lambda*cos(t2)) + t3*(sin(t2) - 1.0*sin(t1)));
	}

	return xi0phik;

}

ComplexVector SW_liquid::get_xi1phik() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		ComplexVector xi1phik(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		xi1phik[0] = epsilon*sigma*sigma*sigma*(lambda*lambda*lambda*(4.188790204786391 - 3.141592653589794*lambda) - 1.0471975511965976);
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sigma*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		const double t2 = lambda*t1;
		const double t3 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		xi1phik[i] = -12.566370614359172*epsilon*((cos(t2)*(2.0 - lambda*t1*t1*(lambda - 1.0)) - 2.0*cos(t1))/(sigma*t3*t3) - (sin(t1) + sin(t2)*(1.0 - 2.0*lambda))/(sqrt(t3)*t3));
	}

	return xi1phik;

}

ComplexVector SW_liquid::get_xi2phik() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		ComplexVector xi2phik(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		xi2phik[0] = epsilon*sigma*sigma*sigma*(0.418879020478639 + lambda*lambda*lambda*(lambda*(6.283185307179588 - 2.513274122871834*lambda) - 4.188790204786391));
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = lambda*sigma*sqrt(t1);
		const double t3 = sigma*sqrt(t1);
		xi2phik[i] = -12.566370614359172*epsilon*((sin(t2)*(t3*t3*(1.0 + lambda*(3.0*lambda - 4.0)) - 6.0)/(sqrt(t1)) + 6.0*sin(t3)/(sqrt(t1)))/(sigma*t1*t1) + (-1.0*cos(t2)*(4.0 + lambda*(t3*t3*(lambda - 1.0)*(lambda - 1.0) - 6.0)) - 2.0*cos(t3))/(t1*t1))/sigma;
	}

	return xi2phik;

}

ComplexVector SW_liquid::get_xi3phik() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		ComplexVector xi3phik(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		xi3phik[0] = epsilon*sigma*sigma*sigma*(lambda*lambda*lambda*(4.188790204786391 + lambda*(lambda*(7.539822368615504 - 2.0943951023931935*lambda) - 9.42477796076938)) - 0.20943951023931967);
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sigma*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		const double t2 = lambda*t1;
		const double t3 = lambda - 1.0;
		const double t4 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		xi3phik[i] = -12.566370614359172*epsilon*((24.0*cos(t1) + cos(t2)*(t1*t1*t3*(12.0*lambda - 6.0 - lambda*t1*t1*t3*t3) - 24.0))/(sigma*t4*t4*t4) + (6.0*sin(t1) + sin(t2)*(18.0 - 24.0*lambda + t1*t1*t3*t3*(4.0*lambda - 1.0)))/(sqrt(t4)*t4*t4))/(sigma*sigma);
	}

	return xi3phik;

}

ComplexVector SW_liquid::get_xi4phik() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		ComplexVector xi4phik(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		xi4phik[0] = epsilon*sigma*sigma*sigma*(0.11967972013675394 + lambda*lambda*lambda*(lambda*(12.566370614359176 + lambda*(lambda*(8.377580409572774 - 1.7951958020513124*lambda) - 15.079644737231009)) - 4.188790204786391));
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sigma*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		const double t2 = sin(lambda*t1);
		const double t3 = lambda - 1.0;
		const double t4 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		xi4phik[i] = -12.566370614359172*epsilon*((24.0*cos(t1) + (120.0*t2 - 120.0*sin(t1))/t1 - cos(lambda*t1)*(lambda*(120.0 + (t1*t1)*(t1*t1)*(t3*t3)*(t3*t3)) - 96.0 - 4.0*t1*t1*t3*t3*(5.0*lambda - 2.0)))/(sigma*t4*t4*t4) + t2*t3*(36.0 - 60.0*lambda + t1*t1*t3*t3*(5.0*lambda - 1.0))/(sqrt(t4)*t4*t4))/(sigma*sigma);
	}

	return xi4phik;

}

double SW_liquid::d_by_dNx() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		return 0.0;

}

double SW_liquid::d_by_dNy() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		return 0.0;

}

double SW_liquid::d_by_dNz() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		return 0.0;

}

double SW_liquid::d_by_dR() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		return 0.0;

}

double SW_liquid::d_by_da1() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		return 0.0;

}

double SW_liquid::d_by_da2() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		return 0.0;

}

double SW_liquid::d_by_da3() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		return 0.0;

}

double SW_liquid::d_by_depsilon() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		ComplexVector ktemp0(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp0 = fft(Nx,Ny,Nz,dV,n);

	ComplexVector ktemp1(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp1[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp1[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[0]*exp(-6.0*pow(a1, 0.6666666666666666)*pow(a2, 0.6666666666666666)*pow(a3, 0.6666666666666666)*t1/(pow(Nx, 0.6666666666666666)*pow(Ny, 0.6666666666666666)*pow(Nz, 0.6666666666666666)))*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[0]*exp(-6.0*pow(a1, 0.6666666666666666)*pow(a2, 0.6666666666666666)*pow(a3, 0.6666666666666666)*t1/(pow(Nx, 0.6666666666666666)*pow(Ny, 0.6666666666666666)*pow(Nz, 0.6666666666666666)))*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp2(Nx*Ny*Nz); // RS
	rtemp2 = ifft(Nx,Ny,Nz,dV,ktemp1);

	ktemp1.free(); // KSpace
	ComplexVector ktemp3(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp3[0] = 4.188790204786391*R*R*R*ktemp0[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp3[i] = std::complex<double>(12.566370614359172*ktemp0[i].real()*exp(-6.0*pow(a1, 0.6666666666666666)*pow(a2, 0.6666666666666666)*pow(a3, 0.6666666666666666)*t1/(pow(Nx, 0.6666666666666666)*pow(Ny, 0.6666666666666666)*pow(Nz, 0.6666666666666666)))*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1),
				12.566370614359172*ktemp0[i].imag()*exp(-6.0*pow(a1, 0.6666666666666666)*pow(a2, 0.6666666666666666)*pow(a3, 0.6666666666666666)*t1/(pow(Nx, 0.6666666666666666)*pow(Ny, 0.6666666666666666)*pow(Nz, 0.6666666666666666)))*(sin(t2) - t2*cos(t2))/(sqrt(t1)*t1));
	}

	Vector rtemp4(Nx*Ny*Nz); // RS
	rtemp4 = ifft(Nx,Ny,Nz,dV,ktemp3);

	ktemp3.free(); // KSpace
	Vector rtemp5(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp5[i] = -1.0*rtemp2[i]/(1.0 - 1.0*rtemp4[i]);
	}

	ComplexVector ktemp6(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp6 = fft(Nx,Ny,Nz,dV,rtemp5);

	rtemp5.free(); // Realspace
	ComplexVector ktemp7(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp7[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp7[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[1]*exp(-6.0*pow(a1, 0.6666666666666666)*pow(a2, 0.6666666666666666)*pow(a3, 0.6666666666666666)*t1/(pow(Nx, 0.6666666666666666)*pow(Ny, 0.6666666666666666)*pow(Nz, 0.6666666666666666)))*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[1]*exp(-6.0*pow(a1, 0.6666666666666666)*pow(a2, 0.6666666666666666)*pow(a3, 0.6666666666666666)*t1/(pow(Nx, 0.6666666666666666)*pow(Ny, 0.6666666666666666)*pow(Nz, 0.6666666666666666)))*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp8(Nx*Ny*Nz); // RS
	rtemp8 = ifft(Nx,Ny,Nz,dV,ktemp7);

	ktemp7.free(); // KSpace
	Vector rtemp9(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp9[i] = -1.0*rtemp8[i]/(1.0 - 1.0*rtemp4[i]);
	}

	ComplexVector ktemp10(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp10 = fft(Nx,Ny,Nz,dV,rtemp9);

	rtemp9.free(); // Realspace
	ComplexVector ktemp11(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp11[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t2 = R*sqrt(t1);
		ktemp11[i] = std::complex<double>(-12.566370614359172*ktemp0[i].imag()*k_i[2]*exp(-6.0*pow(a1, 0.6666666666666666)*pow(a2, 0.6666666666666666)*pow(a3, 0.6666666666666666)*t1/(pow(Nx, 0.6666666666666666)*pow(Ny, 0.6666666666666666)*pow(Nz, 0.6666666666666666)))*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1,
				12.566370614359172*ktemp0[i].real()*k_i[2]*exp(-6.0*pow(a1, 0.6666666666666666)*pow(a2, 0.6666666666666666)*pow(a3, 0.6666666666666666)*t1/(pow(Nx, 0.6666666666666666)*pow(Ny, 0.6666666666666666)*pow(Nz, 0.6666666666666666)))*(R*cos(t2) - sin(t2)/(sqrt(t1)))/t1);
	}

	Vector rtemp12(Nx*Ny*Nz); // RS
	rtemp12 = ifft(Nx,Ny,Nz,dV,ktemp11);

	ktemp11.free(); // KSpace
	Vector rtemp13(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp13[i] = -1.0*rtemp12[i]/(1.0 - 1.0*rtemp4[i]);
	}

	ComplexVector ktemp14(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp14 = fft(Nx,Ny,Nz,dV,rtemp13);

	rtemp13.free(); // Realspace
	Vector rtemp15(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp15[i] = -1.0*log(1.0 - 1.0*rtemp4[i]);
	}

	ComplexVector ktemp16(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp16 = fft(Nx,Ny,Nz,dV,rtemp15);

	ComplexVector ktemp17(Nx*Ny*(int(Nz)/2+1)); // KS
	{
		const int i = 0;
		ktemp17[0] = 12.566370614359172*R*R*ktemp0[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp17[i] = std::complex<double>(12.566370614359172*ktemp0[i].real()*R*sin(R*t1)*exp(-6.0*pow(a1, 0.6666666666666666)*pow(a2, 0.6666666666666666)*pow(a3, 0.6666666666666666)*t1*t1/(pow(Nx, 0.6666666666666666)*pow(Ny, 0.6666666666666666)*pow(Nz, 0.6666666666666666)))/t1,
				12.566370614359172*ktemp0[i].imag()*R*sin(R*t1)*exp(-6.0*pow(a1, 0.6666666666666666)*pow(a2, 0.6666666666666666)*pow(a3, 0.6666666666666666)*t1*t1/(pow(Nx, 0.6666666666666666)*pow(Ny, 0.6666666666666666)*pow(Nz, 0.6666666666666666)))/t1);
	}

	Vector rtemp18(Nx*Ny*Nz); // RS
	rtemp18 = ifft(Nx,Ny,Nz,dV,ktemp17);

	ktemp17.free(); // KSpace
	Vector rtemp19(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp19[i] = rtemp18[i]/(1.0 - 1.0*rtemp4[i]);
	}

	ComplexVector ktemp20(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp20 = fft(Nx,Ny,Nz,dV,rtemp19);

	Vector rtemp21(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*rtemp4[i];
		rtemp21[i] = rtemp2[i]*(-5.305164769729845e-2*rtemp19[i]*(rtemp4[i] + t1*t1*log(t1))/(rtemp4[i]*rtemp4[i]) - 7.957747154594767e-2*1.0/R)/t1;
	}

	ComplexVector ktemp22(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp22 = fft(Nx,Ny,Nz,dV,rtemp21);

	rtemp21.free(); // Realspace
	Vector rtemp23(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*rtemp4[i];
		rtemp23[i] = rtemp8[i]*(-5.305164769729845e-2*rtemp19[i]*(rtemp4[i] + t1*t1*log(t1))/(rtemp4[i]*rtemp4[i]) - 7.957747154594767e-2*1.0/R)/t1;
	}

	ComplexVector ktemp24(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp24 = fft(Nx,Ny,Nz,dV,rtemp23);

	rtemp23.free(); // Realspace
	Vector rtemp25(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*rtemp4[i];
		rtemp25[i] = rtemp12[i]*(-5.305164769729845e-2*rtemp19[i]*(rtemp4[i] + t1*t1*log(t1))/(rtemp4[i]*rtemp4[i]) - 7.957747154594767e-2*1.0/R)/t1;
	}

	ComplexVector ktemp26(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp26 = fft(Nx,Ny,Nz,dV,rtemp25);

	rtemp25.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*rtemp4[i];
		const double t2 = rtemp12[i]*rtemp12[i];
		const double t3 = rtemp18[i]*rtemp18[i];
		const double t4 = rtemp2[i]*rtemp2[i];
		const double t5 = rtemp8[i]*rtemp8[i];
		const double t6 = 1.0/t1;
		const double t7 = 1.0/rtemp4[i];
		rtemp19[i] = t6*(7.957747154594767e-2*rtemp18[i]/R + t6*(7.957747154594767e-2*t3 - 7.957747154594767e-2*t2 - 7.957747154594767e-2*t4 - 7.957747154594767e-2*t5))/R + t7*t7*rtemp19[i]*(t3 - 3.0*t2 - 3.0*t4 - 3.0*t5)*(1.768388256576615e-2*rtemp15[i] - 8.841941282883075e-3 + t6*(8.841941282883075e-3 + (1.768388256576615e-2*t6 - 1.768388256576615e-2*t7)*(rtemp4[i] + log(t1)/(t6*t6))));
	}

	rtemp15.free(); // Realspace
	ComplexVector ktemp28(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp28 = fft(Nx,Ny,Nz,dV,rtemp19);

	rtemp19.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = 1.0 - 1.0*rtemp4[i];
		rtemp18[i] = (7.957747154594767e-2*rtemp18[i]/R + (rtemp4[i] + t1*t1*log(t1))*(2.6525823848649224e-2*rtemp18[i]*rtemp18[i] - 2.6525823848649224e-2*rtemp12[i]*rtemp12[i] - 2.6525823848649224e-2*rtemp2[i]*rtemp2[i] - 2.6525823848649224e-2*rtemp8[i]*rtemp8[i])/(t1*rtemp4[i]*rtemp4[i]))/t1;
	}

	rtemp12.free(); // Realspace
	rtemp8.free(); // Realspace
	rtemp4.free(); // Realspace
	rtemp2.free(); // Realspace
	ComplexVector ktemp30(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp30 = fft(Nx,Ny,Nz,dV,rtemp18);

	rtemp18.free(); // Realspace
	{
		const int i = 0;
		ktemp30[0] = ktemp20[i] + R*(25.132741228718345*ktemp30[i] + 12.566370614359172*R*ktemp28[i]);
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = exp(-6.0*pow(a1, 0.6666666666666666)*pow(a2, 0.6666666666666666)*pow(a3, 0.6666666666666666)*(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2])/(pow(Nx, 0.6666666666666666)*pow(Ny, 0.6666666666666666)*pow(Nz, 0.6666666666666666)));
		const double t2 = 12.566370614359172*sin(R*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]))/(sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2])) - 12.566370614359172*R*cos(R*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]));
		std::complex<double> t3 = std::complex<double>(ktemp10[i].real()*k_i[1], ktemp10[i].imag()*k_i[1]);
		std::complex<double> t4 = std::complex<double>(ktemp14[i].real()*k_i[2], ktemp14[i].imag()*k_i[2]);
		std::complex<double> t5 = std::complex<double>(ktemp6[i].real()*k_i[0], ktemp6[i].imag()*k_i[0]);
		const double t6 = k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2];
		const double t7 = cos(R*sqrt(t6));
		const double t8 = sin(R*sqrt(t6));
		const double t9 = R*t7;
		const double t10 = t8/(sqrt(t6));
		ktemp30[i] = std::complex<double>((ktemp20[i].real()*t1*t9 + t1*(6.332573977646112e-3*t2*(12.566370614359172*t3.imag() + 12.566370614359172*t4.imag() + 12.566370614359172*t5.imag())/t6 - 7.957747154594767e-2*ktemp16[i].real()*t2)/R - R*t1*t8*(t3.imag()/(sqrt(t6)) + t4.imag()/(sqrt(t6)) + t5.imag()/(sqrt(t6))))/R - 12.566370614359172*ktemp30[i].real()*t1*(-1.0*t9 - 1.0*t10) + R*(12.566370614359172*ktemp28[i].real()*t1*t10 - t1*t8*(12.566370614359172*ktemp22[i].imag()*k_i[0]/(sqrt(t6)) + 12.566370614359172*ktemp24[i].imag()*k_i[1]/(sqrt(t6)) + 12.566370614359172*ktemp26[i].imag()*k_i[2]/(sqrt(t6)))),
				(ktemp20[i].imag()*t1*t9 + t1*(-6.332573977646112e-3*t2*(12.566370614359172*t3.real() + 12.566370614359172*t4.real() + 12.566370614359172*t5.real())/t6 - 7.957747154594767e-2*ktemp16[i].imag()*t2)/R + R*t1*t8*(t3.real()/(sqrt(t6)) + t4.real()/(sqrt(t6)) + t5.real()/(sqrt(t6))))/R - 12.566370614359172*ktemp30[i].imag()*t1*(-1.0*t9 - 1.0*t10) + R*(12.566370614359172*ktemp28[i].imag()*t1*t10 + t1*t8*(12.566370614359172*ktemp22[i].real()*k_i[0]/(sqrt(t6)) + 12.566370614359172*ktemp24[i].real()*k_i[1]/(sqrt(t6)) + 12.566370614359172*ktemp26[i].real()*k_i[2]/(sqrt(t6)))));
	}

	ktemp28.free(); // KSpace
	ktemp26.free(); // KSpace
	ktemp24.free(); // KSpace
	ktemp22.free(); // KSpace
	ktemp20.free(); // KSpace
	ktemp16.free(); // KSpace
	ktemp14.free(); // KSpace
	ktemp10.free(); // KSpace
	ktemp6.free(); // KSpace
	Vector rtemp32(Nx*Ny*Nz); // RS
	rtemp32 = ifft(Nx,Ny,Nz,dV,ktemp30);

	ktemp30.free(); // KSpace
	{
		const int i = 0;
		ktemp0[0] = 50.26548245743669*R*R*ktemp0[i];
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
		ktemp0[i] = std::complex<double>(25.132741228718345*ktemp0[i].real()*R*sin(2.0*R*t1)*exp(-6.0*pow(a1, 0.6666666666666666)*pow(a2, 0.6666666666666666)*pow(a3, 0.6666666666666666)*t1*t1/(pow(Nx, 0.6666666666666666)*pow(Ny, 0.6666666666666666)*pow(Nz, 0.6666666666666666)))/t1,
				25.132741228718345*ktemp0[i].imag()*R*sin(2.0*R*t1)*exp(-6.0*pow(a1, 0.6666666666666666)*pow(a2, 0.6666666666666666)*pow(a3, 0.6666666666666666)*t1*t1/(pow(Nx, 0.6666666666666666)*pow(Ny, 0.6666666666666666)*pow(Nz, 0.6666666666666666)))/t1);
	}

	Vector rtemp34(Nx*Ny*Nz); // RS
	rtemp34 = ifft(Nx,Ny,Nz,dV,ktemp0);

	ktemp0.free(); // KSpace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp34[i] = rtemp32[i]/rtemp34[i];
	}

	rtemp32.free(); // Realspace
	Vector rtemp36(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp34[i] - 1.0;
		rtemp36[i] = n[i]*(t1*(t1*(0.324*t1 - 0.162*t1*t1) - 0.164*t1) - 2.0e-3*t1);
	}

	ComplexVector ktemp37(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp37 = fft(Nx,Ny,Nz,dV,rtemp36);

	rtemp36.free(); // Realspace
	Vector rtemp38(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp34[i] - 1.0;
		rtemp38[i] = n[i]*(0.207*t1 + t1*(0.712*t1 + t1*(1.046*t1*t1 - 1.952*t1)));
	}

	ComplexVector ktemp39(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp39 = fft(Nx,Ny,Nz,dV,rtemp38);

	rtemp38.free(); // Realspace
	Vector rtemp40(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp34[i] - 1.0;
		rtemp40[i] = n[i]*(t1*(4.403*t1 + t1*(0.363*t1*t1 - 2.48*t1)) - 2.243*t1);
	}

	ComplexVector ktemp41(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp41 = fft(Nx,Ny,Nz,dV,rtemp40);

	rtemp40.free(); // Realspace
	Vector rtemp42(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		rtemp42[i] = rtemp34[i]*n[i];
	}

	ComplexVector ktemp43(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp43 = fft(Nx,Ny,Nz,dV,rtemp42);

	rtemp42.free(); // Realspace
	for (int i=0; i<Nx*Ny*Nz; i++) {
		// No vec r dependence!
		const double t1 = rtemp34[i] - 1.0;
		rtemp34[i] = n[i]*(t1*(2.7e-2*t1 + t1*(0.838*t1 - 0.178*t1*t1)) - 1.754*t1);
	}

	ComplexVector ktemp45(Nx*Ny*(int(Nz)/2+1)); // KS
	ktemp45 = fft(Nx,Ny,Nz,dV,rtemp34);

	rtemp34.free(); // Realspace
	{
		const int i = 0;
		ktemp45[0] = epsilon*sigma*sigma*sigma*(0.11967972013675394*ktemp37[i] - 0.20943951023931967*ktemp39[i] + 0.418879020478639*ktemp41[i] + 4.188790204786391*ktemp43[i] - 1.0471975511965976*ktemp45[i] + lambda*lambda*lambda*(4.188790204786391*ktemp39[i] - 4.188790204786391*ktemp37[i] - 4.188790204786391*ktemp41[i] - 4.188790204786391*ktemp43[i] + 4.188790204786391*ktemp45[i] + lambda*(12.566370614359176*ktemp37[i] - 9.42477796076938*ktemp39[i] + 6.283185307179588*ktemp41[i] - 3.141592653589794*ktemp45[i] + lambda*(7.539822368615504*ktemp39[i] - 15.079644737231009*ktemp37[i] - 2.513274122871834*ktemp41[i] + lambda*(8.377580409572774*ktemp37[i] - 2.0943951023931935*ktemp39[i] - 1.7951958020513124*lambda*ktemp37[i])))));
	}
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		const double t1 = cos(sigma*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]));
		const double t2 = 120.0*sin(lambda*sigma*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2])) - 120.0*sin(sigma*sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]));
		const double t3 = 1.0/(sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]));
		const double t4 = cos(lambda*sigma/t3);
		const double t5 = lambda - 1.0;
		const double t6 = sin(lambda*sigma/t3);
		const double t7 = sin(sigma/t3);
		const double t8 = sigma*sigma*t5*t5/(t3*t3);
		const double t9 = t2*t3;
		const double t10 = 1.0 - 2.0*lambda;
		ktemp45[i] = std::complex<double>(epsilon*(((-12.566370614359172*ktemp39[i].real()*((t3*t3*t3)*(t3*t3*t3)*(24.0*t1 + t4*(sigma*sigma*t5*(-1.0*lambda*t8 - 6.0*t10)/(t3*t3) - 24.0))/sigma + t3*(t3*t3)*(t3*t3)*(6.0*t7 + t6*(18.0 - 24.0*lambda + t8*(4.0*lambda - 1.0)))) - 12.566370614359172*ktemp37[i].real()*((t3*t3*t3)*(t3*t3*t3)*(24.0*t1 + t9/sigma - t4*(lambda*(120.0 + t8*t8) - 96.0 - 4.0*t8*(5.0*lambda - 2.0)))/sigma + t3*(t3*t3)*(t3*t3)*t5*t6*(36.0 - 60.0*lambda + t8*(5.0*lambda - 1.0))))/sigma - 12.566370614359172*ktemp41[i].real()*((t3*t3)*(t3*t3)*(t3*t6*(sigma*sigma*(1.0 + lambda*(3.0*lambda - 4.0))/(t3*t3) - 6.0) + 6.0*t3*t7)/sigma + (t3*t3)*(t3*t3)*(-1.0*t4*(4.0 + lambda*(t8 - 6.0)) - 2.0*t1)))/sigma - 12.566370614359172*ktemp45[i].real()*((t3*t3)*(t3*t3)*(t4*(2.0 - lambda*sigma*sigma*t5/(t3*t3)) - 2.0*t1)/sigma - t3*t3*t3*(t7 + t10*t6)) - 12.566370614359172*ktemp43[i].real()*t3*t3*(8.333333333333333e-3*t9 + sigma*(t1 - lambda*t4))),
				epsilon*(((-12.566370614359172*ktemp39[i].imag()*((t3*t3*t3)*(t3*t3*t3)*(24.0*t1 + t4*(sigma*sigma*t5*(-1.0*lambda*t8 - 6.0*t10)/(t3*t3) - 24.0))/sigma + t3*(t3*t3)*(t3*t3)*(6.0*t7 + t6*(18.0 - 24.0*lambda + t8*(4.0*lambda - 1.0)))) - 12.566370614359172*ktemp37[i].imag()*((t3*t3*t3)*(t3*t3*t3)*(24.0*t1 + t9/sigma - t4*(lambda*(120.0 + t8*t8) - 96.0 - 4.0*t8*(5.0*lambda - 2.0)))/sigma + t3*(t3*t3)*(t3*t3)*t5*t6*(36.0 - 60.0*lambda + t8*(5.0*lambda - 1.0))))/sigma - 12.566370614359172*ktemp41[i].imag()*((t3*t3)*(t3*t3)*(t3*t6*(sigma*sigma*(1.0 + lambda*(3.0*lambda - 4.0))/(t3*t3) - 6.0) + 6.0*t3*t7)/sigma + (t3*t3)*(t3*t3)*(-1.0*t4*(4.0 + lambda*(t8 - 6.0)) - 2.0*t1)))/sigma - 12.566370614359172*ktemp45[i].imag()*((t3*t3)*(t3*t3)*(t4*(2.0 - lambda*sigma*sigma*t5/(t3*t3)) - 2.0*t1)/sigma - t3*t3*t3*(t7 + t10*t6)) - 12.566370614359172*ktemp43[i].imag()*t3*t3*(8.333333333333333e-3*t9 + sigma*(t1 - lambda*t4))));
	}

	ktemp43.free(); // KSpace
	ktemp41.free(); // KSpace
	ktemp39.free(); // KSpace
	ktemp37.free(); // KSpace
	Vector rtemp47(Nx*Ny*Nz); // RS
	rtemp47 = ifft(Nx,Ny,Nz,dV,ktemp45);

	ktemp45.free(); // KSpace
	double 	s48 = 0;
	for (int i=0; i<Nx*Ny*Nz; i++) {
		s48 += a1*a2*a3/(Nx*Ny*Nz)*rtemp47[i]*n[i];
	}

	rtemp47.free(); // Realspace
	return 0.5*s48;

}

double SW_liquid::d_by_dkT() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		return 0.0;

}

double SW_liquid::d_by_dlambda() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		return 0.0;

}

double SW_liquid::d_by_dmu() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		return 0.0;

}

double SW_liquid::d_by_dsigma() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		return 0.0;

}

Vector SW_liquid::get_rx() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		Vector rx(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		int _z = i % int(Nz);
		const int _n = (i-_z)/int(Nz);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		if (_z > int(Nz)/2) _z -= int(Nz);
		const Vector r_i = Vector(_x*a1/Nx, _y*a2/Ny, _z*a3/Nz);
		rx[i] = r_i[0];
	}

	return rx;

}

Vector SW_liquid::get_ry() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		Vector ry(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		int _z = i % int(Nz);
		const int _n = (i-_z)/int(Nz);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		if (_z > int(Nz)/2) _z -= int(Nz);
		const Vector r_i = Vector(_x*a1/Nx, _y*a2/Ny, _z*a3/Nz);
		ry[i] = r_i[1];
	}

	return ry;

}

Vector SW_liquid::get_rz() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		Vector rz(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		int _z = i % int(Nz);
		const int _n = (i-_z)/int(Nz);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		if (_z > int(Nz)/2) _z -= int(Nz);
		const Vector r_i = Vector(_x*a1/Nx, _y*a2/Ny, _z*a3/Nz);
		rz[i] = r_i[2];
	}

	return rz;

}

Vector SW_liquid::get_r() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		Vector r(Nx*Ny*Nz); // RS
	for (int i=0; i<Nx*Ny*Nz; i++) {
		int _z = i % int(Nz);
		const int _n = (i-_z)/int(Nz);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		if (_z > int(Nz)/2) _z -= int(Nz);
		const Vector r_i = Vector(_x*a1/Nx, _y*a2/Ny, _z*a3/Nz);
		r[i] = sqrt(r_i[0]*r_i[0] + r_i[1]*r_i[1] + r_i[2]*r_i[2]);
	}

	return r;

}

ComplexVector SW_liquid::get_kx() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		ComplexVector kx(Nx*Ny*(int(Nz)/2+1)); // KS
	kx[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		kx[i] = k_i[0];
	}

	return kx;

}

ComplexVector SW_liquid::get_ky() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		ComplexVector ky(Nx*Ny*(int(Nz)/2+1)); // KS
	ky[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		ky[i] = k_i[1];
	}

	return ky;

}

ComplexVector SW_liquid::get_kz() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		ComplexVector kz(Nx*Ny*(int(Nz)/2+1)); // KS
	kz[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		kz[i] = k_i[2];
	}

	return kz;

}

ComplexVector SW_liquid::get_k() const {
	int sofar = 0;
	double Nx = data[sofar]; sofar += 1;
	double Ny = data[sofar]; sofar += 1;
	double Nz = data[sofar]; sofar += 1;
	double R = data[sofar]; sofar += 1;
	double a1 = data[sofar]; sofar += 1;
	double a2 = data[sofar]; sofar += 1;
	double a3 = data[sofar]; sofar += 1;
	Vector Vext = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	Vector n = data.slice(sofar,Nx*Ny*Nz); sofar += Nx*Ny*Nz;
	double epsilon = data[sofar]; sofar += 1;
	double kT = data[sofar]; sofar += 1;
	double lambda = data[sofar]; sofar += 1;
	double mu = data[sofar]; sofar += 1;
	double sigma = data[sofar]; sofar += 1;
		ComplexVector k(Nx*Ny*(int(Nz)/2+1)); // KS
	k[0] = 0;
	for (int i=1; i<Nx*Ny*(int(Nz)/2+1); i++) {
		const int _z = i % (int(Nz)/2+1);
		const int _n = (i-_z)/(int(Nz)/2+1);
		int _y = _n % int(Ny);
		int _x = (_n-_y)/int(Ny);
		if (_x > int(Nx)/2) _x -= int(Nx);
		if (_y > int(Ny)/2) _y -= int(Ny);
		const Vector k_i = Vector(6.283185307179586*_x/a1, 6.283185307179586*_y/a2, 6.283185307179586*_z/a3);
		k[i] = sqrt(k_i[0]*k_i[0] + k_i[1]*k_i[1] + k_i[2]*k_i[2]);
	}

	return k;

}

