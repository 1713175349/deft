
How long will it take?
----------------------

the time is proportional to the number of samples N

the mc-error is proportional to 1/sqrt(N)  -->  N is proportional to 1/(mc-error^2)

>>>>>So time is proportional to 1/(mc-error^2)



EXAMPLE 1: (change mc-error, keep dx the same):

at scal_dx=1: mc-error= 0.001 and time = 0.113 min   --> time is proportional to 1,000,000
at scal_dx=1: mc-error=0.0001 and time will be ?     --> time is proportional to 100,000,000

time1 = 1,000,000(something)=0.113min
time2 = 100,000,000(something)=0.113(100)=11.3min  (actually took 9.7min)  OK

0.001/10=0.0001 --> 10^2=100  time2 greater by an order of magnitude of 2

!>>>(mc-error1/mc-error2)^2  to get approx time2 increase factor
!>>>log[(mc-error1/mc-error2)^2]  to get order of magnitude

at scal_dx=1: mc-error= 0.00001 and time will be 0.113(10,000)=1,130min (or 18.8hr) 
0.001/100=0.00001  -->  100^2=10,000




EXAMPLE 2: (change dx, keep mc-error the same):

time is proportional to the number of samples N
N is proportional to 1/(dx)^3 (checked!)

>>>>>So the time is proportional 1/(dx)^3

time2=time1(dx1/dx2)^3

at scal_dx0=1.5: 	mc-error= 0.001 and time = 0.048 min      1/(1.5)^3 = .296
at scal_dx1=1:   	mc-error= 0.001 and time = 0.113 min      1/(1.0)^3 = 1       
at scal_dx2=0.5:	mc-error= 0.001	and time = 0.646605 min   1/(0.5)^3 = 8	
at scal_dx3=0.1		mc-error= 0.001	and time = 67.4123 min    1/(0.1)^3 = 1000    

time0 = 0.048min      
time1 = 0.113min   	time1=time0(dx0/dx1)^3=0.048(1.5/1)^3=0.162   
time2 = 0.646605min	time2=time1(dx1/dx2)^3=0.113(1/0.5)^3=0.904
time3 = 67.4142min	time3=time2(dx2/dx3)^3=0.646605(0.5/0.1)^3=80.825 --> approx 100=10^2 times, or 2 orders 
                                                                                                   of mag greater
!>>>(dx1/dx2)^3  to get approx time2 increase factor  
!>>>log[(dx1/dx2)^3]  to get order of magnitude






